Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,AddDocument,Cyclomatic complexity of the method is 8
Complex Method,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,SafelyProcessQueueItems,Cyclomatic complexity of the method is 8
Complex Method,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,ForceProcessQueueItems,Cyclomatic complexity of the method is 11
Complex Method,Examine.LuceneEngine.Providers,ReaderReopener,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneSearcher.cs,ScheduleReopen,Cyclomatic complexity of the method is 8
Complex Method,Examine.LuceneEngine.Search,LuceneSearchQueryBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQueryBase.cs,GetFieldInternalQuery,Cyclomatic complexity of the method is 11
Complex Method,Examine.LuceneEngine.Search,LuceneSearchQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQuery.cs,OrderByInternal,Cyclomatic complexity of the method is 13
Long Parameter List,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,LuceneIndex,The method has 6 parameters. Parameters: name' luceneDirectory' fieldDefinitions' analyzer' validator' indexValueTypesFactory
Long Parameter List,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,LuceneIndex,The method has 5 parameters. Parameters: name' fieldDefinitions' writer' validator' indexValueTypesFactory
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQueryBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQueryBase.cs,LuceneSearchQueryBase,The method has 5 parameters. Parameters: queryParser' category' fields' searchOptions' occurance
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQueryBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQueryBase.cs,LuceneSearchQueryBase,The method has 5 parameters. Parameters: category' analyzer' fields' searchOptions' occurance
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQueryBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQueryBase.cs,RangeQuery,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQueryBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQueryBase.cs,RangeQueryNested,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQueryBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQueryBase.cs,RangeQuery,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.LuceneEngine.Search,LuceneQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneQuery.cs,RangeQuery,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.LuceneEngine.Search,LuceneQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneQuery.cs,RangeQuery,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQuery.cs,LuceneSearchQuery,The method has 6 parameters. Parameters: searchContext' category' analyzer' fields' searchOptions' occurance
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQuery.cs,RangeQuery,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQuery.cs,RangeQueryNested,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.LuceneEngine.Search,LuceneSearchQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQuery.cs,RangeQueryInternal,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.Search,INestedQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\Search\INestedQuery.cs,RangeQuery,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Parameter List,Examine.Search,IQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\Search\IQuery.cs,RangeQuery,The method has 5 parameters. Parameters: fields' min' max' minInclusive' maxInclusive
Long Identifier,Examine.LuceneEngine.Providers,BaseLuceneSearcher,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\BaseLuceneSearcher.cs,,The length of the parameter _errorCheckingScoringBooleanQueryRewriteInstance is 48.
Long Statement,Examine,ExamineExtensions,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\ExamineExtensions.cs,SelectExamineDataValue,The length of the statement  "                nodeData = xml.Elements("data").SingleOrDefault(x => string.Equals(((string) x.Attribute("alias"))' alias' StringComparison.InvariantCultureIgnoreCase)); " is 153.
Long Statement,Examine,ExamineExtensions,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\ExamineExtensions.cs,SelectExamineDataValue,The length of the statement  "                nodeData = xml.Elements().FirstOrDefault(x => string.Equals(x.Name.ToString()' alias' StringComparison.InvariantCultureIgnoreCase)); " is 132.
Long Statement,Examine,ExamineManager,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\ExamineManager.cs,Stop,The length of the statement  "                    //This is sort of a hack at the moment. We are disposing the searchers at the last possible point in time because there might " is 125.
Long Statement,Examine,ExamineManager,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\ExamineManager.cs,Stop,The length of the statement  "                    // I've tried using DecRef and IncRef to keep track of searchers using readers' however there is no guarantee that DecRef can " is 125.
Long Statement,Examine,ExamineManager,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\ExamineManager.cs,Stop,The length of the statement  "                    // be called when a search is finished and since search results are lazy' we don't know when they end unless people dispose them " is 128.
Long Statement,Examine,ExamineManager,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\ExamineManager.cs,Stop,The length of the statement  "                    // or always use a foreach loop which can't really be forced. The only alternative to using DecRef and IncRef would be to make the results " is 138.
Long Statement,Examine.LuceneEngine,CultureInvariantStandardAnalyzer,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\CultureInvariantStandardAnalyzer.cs,ReusableTokenStream,The length of the statement  "                savedStreams.FilteredTokenStream = new StopFilter(_enableStopPositionIncrements' savedStreams.FilteredTokenStream' _stopWords); " is 127.
Long Statement,Examine.LuceneEngine,ValueTypeFactoryCollection,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\ValueTypeFactoryCollection.cs,GetRequiredFactory,The length of the statement  "                throw new InvalidOperationException($"The required {typeof(IFieldValueTypeFactory).Name} was not found with name {valueTypeName}"); " is 131.
Long Statement,Examine.LuceneEngine,WriterTracker,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\WriterTracker.cs,GetWriter,The length of the statement  "                    throw new NullReferenceException("No writer was added with directory key " + dir.GetLockId() + "' maybe an indexer hasn't been initialized?"); " is 142.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,DeleteFile,The length of the statement  "                //This will occur because this file is locked' when this is the case' we don't really want to delete it from the master either because " is 134.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,DeleteFile,The length of the statement  "                // if we do that then this file will never get removed from the cache folder either! This is based on the Deletion Policy which the " is 131.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,DeleteFile,The length of the statement  "                // IndexFileDeleter uses. We could implement our own one of those to deal with this scenario too but it seems the easiest way it to just  " is 136.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,OpenInput,The length of the statement  "            //that they also experienced the file not found issue. I noticed that their implementation only ever reads the segments.gen " is 123.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,OpenInput,The length of the statement  "            //The Lucene docs reveal a bit more info - since the segments.gen file is not 'write once' we'd have to deal with that accordingly: " is 131.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,OpenInput,The length of the statement  "            //"As of 2.1' there is also a file segments.gen. This file contains the current generation (the _N in segments_N) of the index.  " is 127.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,OpenInput,The length of the statement  "            //This is used only as a fallback in case the current generation cannot be accurately determined by directory listing alone  " is 123.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,OpenInput,The length of the statement  "            //"As of version 2.1 (lock-less commits)' file names are never re-used (there is one exception' "segments.gen"' see below).  " is 123.
Long Statement,Examine.LuceneEngine.Directories,SyncDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncDirectory.cs,OpenInput,The length of the statement  "            //That is' when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple  " is 124.
Long Statement,Examine.LuceneEngine.Directories,SyncIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncIndexInput.cs,SyncLocally,The length of the statement  "                //TODO: It has been seen that OpenInput on the master can throw an exception due to a lucene file not found - which is very odd " is 127.
Long Statement,Examine.LuceneEngine.Directories,SyncIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncIndexInput.cs,SyncLocally,The length of the statement  "                // we need to check if the master is being written frist before the sync dir. And if the file does not exist in the master'  " is 123.
Long Statement,Examine.LuceneEngine.Directories,SyncIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncIndexInput.cs,SyncLocally,The length of the statement  "                //Hrmmm what to do?  There's actually nothing that can be done :/ if we return false here then the instance of this item would be null " is 134.
Long Statement,Examine.LuceneEngine.Directories,SyncIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncIndexInput.cs,SyncLocally,The length of the statement  "                //which will then cause exceptions further on and take down the app pool anyways. I've looked through the Lucene source and there  " is 129.
Long Statement,Examine.LuceneEngine.Directories,SyncIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncIndexInput.cs,CompareExistingFileAttributes,The length of the statement  "            //The file already exists and the file lengths are the same so compare the modified dates of the files from the master vs cache " is 127.
Long Statement,Examine.LuceneEngine.Directories,TempEnvDirectoryFactory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\TempEnvDirectoryFactory.cs,GetLocalStorageDirectory,The length of the statement  "                //include the appdomain hash is just a safety check' for example if a website is moved from worker A to worker B and then back " is 126.
Long Statement,Examine.LuceneEngine.Indexing,FullTextType,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\FullTextType.cs,AddSingleValue,The length of the statement  "                Field.TermVector.WITH_POSITIONS_OFFSETS /* This is required for the fast vector highligher but will double the field size */ )); " is 128.
Long Statement,Examine.LuceneEngine.Indexing,IndexFieldRangeValueType<T>,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\IndexFieldRangeValueType.cs,GetQuery,The length of the statement  "            return GetQuery(lowerParsed ? (T?)lowerValue : null' upperParsed ? (T?)upperValue : null' lowerInclusive' upperInclusive); " is 122.
Long Statement,Examine.LuceneEngine.Indexing,IndexFieldValueTypeBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\IndexFieldValueTypeBase.cs,TryConvert,The length of the statement  "                    Trace.TraceError("An error occurred in {0}.{1} inputConverter.ConvertTo(val' typeof(T)) : {2}"' nameof(IndexFieldValueTypeBase)' nameof(TryConvert)' ex); " is 153.
Long Statement,Examine.LuceneEngine.Indexing,IndexFieldValueTypeBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\IndexFieldValueTypeBase.cs,TryConvert,The length of the statement  "                    Trace.TraceError("An error occurred in {0}.{1} outputConverter.ConvertFrom(val) : {2}"' nameof(IndexFieldValueTypeBase)' nameof(TryConvert)' ex); " is 145.
Long Statement,Examine.LuceneEngine.Indexing,IndexFieldValueTypeBase,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\IndexFieldValueTypeBase.cs,TryConvert,The length of the statement  "                Trace.TraceError("An error occurred in {0}.{1} Convert.ChangeType(val' typeof(T)) : {2}"' nameof(IndexFieldValueTypeBase)' nameof(TryConvert)' ex); " is 147.
Long Statement,Examine.LuceneEngine.Providers,BaseLuceneSearcher,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\BaseLuceneSearcher.cs,CreateQuery,The length of the statement  "            return new LuceneSearchQuery(GetSearchContext()' category' luceneAnalyzer' GetAllIndexedFields()' searchOptions' defaultOperation); " is 131.
Long Statement,Examine.LuceneEngine.Providers,ErrorCheckingScoringBooleanQueryRewrite,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\ErrorCheckingScoringBooleanQueryRewrite.cs,Rewrite,The length of the statement  "                //TODO: We could add a cache for known terms that will cause this so that we don't spend too much CPU rewriting and recatching the exception each time " is 150.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,OnIndexingError,The length of the statement  "            Trace.TraceError("Indexing Error Occurred: " + (e.InnerException == null ? e.Message : e.Message + " -- " + e.InnerException)); " is 127.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,EnsureIndex,The length of the statement  "                    // we cannot acquire the lock' this is because the main writer is being created' or the index is being created currently " is 120.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,EnsureIndex,The length of the statement  "                    OnIndexingError(new IndexingErrorEventArgs(this' "Could not acquire lock in EnsureIndex so cannot create new index"' null' null)); " is 130.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,CreateIndex,The length of the statement  "                OnIndexingError(new IndexingErrorEventArgs(this' "Cannot create a new index' indexing cancellation has been requested"' null' null)); " is 133.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,OptimizeIndex,The length of the statement  "                OnIndexingError(new IndexingErrorEventArgs(this' "Cannot optimize index' index cancellation has been requested"' null' null)' true); " is 132.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,OptimizeIndex,The length of the statement  "                    OnIndexingError(new IndexingErrorEventArgs(this' "Cannot optimize index' the index is currently locked"' null' null)' true); " is 124.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,AddDocument,The length of the statement  "            var nodeIdValueType = FieldValueTypeCollection.GetValueType(ItemIdFieldName' FieldValueTypeCollection.ValueTypeFactories.GetRequiredFactory(FieldDefinitionTypes.Raw)); " is 167.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,AddDocument,The length of the statement  "            var categoryValueType = FieldValueTypeCollection.GetValueType(CategoryFieldName' FieldValueTypeCollection.ValueTypeFactories.GetRequiredFactory(FieldDefinitionTypes.InvariantCultureIgnoreCase)); " is 194.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,AddDocument,The length of the statement  "            var indexTypeValueType = FieldValueTypeCollection.GetValueType(ItemTypeFieldName' FieldValueTypeCollection.ValueTypeFactories.GetRequiredFactory(FieldDefinitionTypes.InvariantCultureIgnoreCase)); " is 195.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,AddDocument,The length of the statement  "            //copy to a new dictionary' there has been cases of an exception "Collection was modified; enumeration operation may not execute." " is 130.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,AddDocument,The length of the statement  "                    var valueType = FieldValueTypeCollection.GetValueType(field.Key' FieldValueTypeCollection.ValueTypeFactories.GetRequiredFactory(FieldDefinitionTypes.InvariantCultureIgnoreCase)); " is 178.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,AddDocument,The length of the statement  "                    var valueType = FieldValueTypeCollection.GetValueType(def.Name' FieldValueTypeCollection.ValueTypeFactories.GetRequiredFactory(FieldDefinitionTypes.FullText)); " is 159.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,SafelyProcessQueueItems,The length of the statement  "                    //don't run the worker if it's currently running since it will just pick up the rest of the queue during its normal operation                     " is 125.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,SafelyProcessQueueItems,The length of the statement  "                    // This executes when calls to SafelyProcessQueueItems are made and the queue is already being consumed (i.e. no worker thread is spawned).                     " is 139.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,ForceProcessQueueItems,The length of the statement  "                OnIndexingError(new IndexingErrorEventArgs(this' "Cannot index queue items' the index is currently locked"' null' null)); " is 121.
Long Statement,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,CreateIndexWriter,The length of the statement  "                    _logOutput = new FileStream(Path.Combine(LuceneIndexFolder.FullName' DateTime.UtcNow.ToString("yyyy-MM-dd") + ".log")' FileMode.Append); " is 136.
Long Statement,Examine.LuceneEngine.Providers,DisposableIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,DisposeResources,The length of the statement  "                //NOTE: we are not taking into acccount the WaitForIndexQueueOnShutdown property here because we really want to make sure " is 121.
Long Statement,Examine.LuceneEngine.Providers,ReaderReopener,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneSearcher.cs,MaybeReopen,The length of the statement  "                                // since another thread might be using it. I'm 'hoping' that the GC will just take care of the left over reader's that might " is 124.
Long Statement,Examine.LuceneEngine.Search,LuceneSearchQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQuery.cs,RangeQueryInternal,The length of the statement  "                        throw new InvalidOperationException($"Could not perform a range query on the field {f}' it's value type is {valueType?.GetType()}"); " is 132.
Long Statement,Examine.LuceneEngine.Search,LuceneSearchQuery,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Search\LuceneSearchQuery.cs,Search,The length of the statement  "                var categoryQuery = GetFieldInternalQuery(Providers.LuceneIndex.CategoryFieldName' new ExamineValue(Examineness.Explicit' Category)' false); " is 140.
Virtual Method Call from Constructor,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,LuceneIndex,The constructor "LuceneIndex" calls a virtual method "CreateFieldValueTypes".
Virtual Method Call from Constructor,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,LuceneIndex,The constructor "LuceneIndex" calls a virtual method "CreateFieldValueTypes".
Empty Catch Block,Examine.LuceneEngine,OpenReaderTracker,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\OpenReaderTracker.cs,CloseStaleReaders,The method has an empty catch block.
Empty Catch Block,Examine.LuceneEngine,OpenReaderTracker,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\OpenReaderTracker.cs,CloseAllReaders,The method has an empty catch block.
Empty Catch Block,Examine.LuceneEngine,OpenReaderTracker,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\OpenReaderTracker.cs,CloseAllReaders,The method has an empty catch block.
Empty Catch Block,Examine.LuceneEngine,LuceneSearchResults,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\LuceneSearchResults.cs,DoSearch,The method has an empty catch block.
Empty Catch Block,Examine.LuceneEngine.Providers,BaseLuceneSearcher,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\BaseLuceneSearcher.cs,SetScoringBooleanQueryRewriteMethod,The method has an empty catch block.
Empty Catch Block,Examine.LuceneEngine.Providers,LuceneIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,CreateIndexWriter,The method has an empty catch block.
Empty Catch Block,Examine.LuceneEngine.Providers,DisposableSearcher,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneSearcher.cs,DisposeResources,The method has an empty catch block.
Magic Number,Examine,FieldDefinition,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\FieldDefinition.cs,GetHashCode,The following statement contains a magic number: return (Name.GetHashCode() * 397) ^ Type.GetHashCode();
Magic Number,Examine,IOHelper,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\IOHelper.cs,MapPath,The following statement contains a magic number: return Path.Combine(hostingRoot' configPath.Substring(2).Replace('/'' '\\'));
Magic Number,Examine,SearchExtensions,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\SearchExtensions.cs,Fuzzy,The following statement contains a magic number: return Fuzzy(s' 0.5f);
Magic Number,Examine,StringExtensions,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\StringExtensions.cs,RemoveStopWords,The following statement contains a magic number: var phraseWithoutQuotes = searchText.Substring(quoteIndex + 1' carrat - quoteIndex - 2);
Magic Number,Examine.LuceneEngine,LuceneExtensions,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\LuceneExtensions.cs,CopyTo,The following statement contains a magic number: var buffer = new byte[32768];
Magic Number,Examine.LuceneEngine.Directories,SyncIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncIndexInput.cs,CompareExistingFileAttributes,The following statement contains a magic number: DateTime start = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Examine.LuceneEngine.Directories,SyncIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\SyncIndexInput.cs,CompareExistingFileAttributes,The following statement contains a magic number: timeSpan.TotalSeconds > 2
Magic Number,Examine.LuceneEngine.Indexing,FullTextType,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\FullTextType.cs,GenerateQuery,The following statement contains a magic number: query.Length < 4
Magic Number,Examine.LuceneEngine.Indexing,FullTextType,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\FullTextType.cs,GenerateQuery,The following statement contains a magic number: phraseQuery.Boost = 20;
Magic Number,Examine.LuceneEngine.Indexing,FullTextType,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\FullTextType.cs,GenerateQuery,The following statement contains a magic number: exactMatch.Boost = 10;
Magic Number,Examine.LuceneEngine.Indexing,FullTextType,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Indexing\FullTextType.cs,GenerateQuery,The following statement contains a magic number: term.Length >= 3
Magic Number,Examine.LuceneEngine.Providers,DisposableIndex,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneIndex.cs,DisposeResources,The following statement contains a magic number: RetryUntilSuccessOrTimeout(() => _index._activeAddsOrDeletes == 0' TimeSpan.FromSeconds(5)' TimeSpan.FromSeconds(1));
Missing Default,Examine.LuceneEngine.Directories,StreamInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\StreamInput.cs,Seek,The following switch statement is missing a default case: switch (origin)              {                  case SeekOrigin.Begin:                      Input.Seek(offset);                      break;                  case SeekOrigin.Current:                      Input.Seek(Input.FilePointer + offset);                      break;                  case SeekOrigin.End:                      throw new System.NotImplementedException();              }
Missing Default,Examine.LuceneEngine.Directories,StreamOutput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Directories\StreamOutput.cs,Seek,The following switch statement is missing a default case: switch (origin)              {                  case SeekOrigin.Begin:                      Output.Seek(offset);                      break;                  case SeekOrigin.Current:                      Output.Seek(Output.FilePointer + offset);                      break;                  case SeekOrigin.End:                      throw new NotImplementedException();              }
Missing Default,Examine.LuceneEngine.Providers,ReaderReopener,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine\LuceneEngine\Providers\LuceneSearcher.cs,MaybeReopen,The following switch statement is missing a default case: switch (_luceneSearcher._reader.GetReaderStatus())                  {                      case ReaderStatus.Current:                          break;                      case ReaderStatus.Closed:                          lock (_locker)                          {                              //get a reader - could be NRT or based on directly depending on how this was constructed                              _luceneSearcher._reader = _luceneSearcher._nrtWriter == null                                  ? _luceneSearcher.OpenNewReader()                                  : _luceneSearcher._nrtWriter.GetReader();                                _luceneSearcher._searcher = new IndexSearcher(_luceneSearcher._reader);                                //track it!                              OpenReaderTracker.Current.AddOpenReader(_luceneSearcher._reader);                          }                          break;                      case ReaderStatus.NotCurrent:                            lock (_locker)                          {                              IndexReader newReader;                                //Here we'll check if we are not running in NRT mode' this will be the case                              // if the indexer hasn't created a writer. But if it has' we want to become NRT so                               // we'll check if we can.                              if (_luceneSearcher._nrtWriter == null && _luceneSearcher.TryEstablishNrtReader())                              {                                  //the new reader will now be an NRT reader                                  newReader = _luceneSearcher._nrtWriter.GetReader();                              }                              else                              {                                  //yes' this is actually the way the Lucene wants you to work...                                  //normally' i would have thought just calling Reopen() on the underlying reader would suffice... but it doesn't.                                  //here's references:                                   // http://stackoverflow.com/questions/1323779/lucene-indexreader-reopen-doesnt-seem-to-work-correctly                                  // http://gist.github.com/173978                                   //Also note that when a new reader is returned from Reopen() the old reader is not actually closed -                                   // but more importantly the old reader might still be in use from another thread! So we can't just                                   // close it here because that would cause a YSOD: Lucene.Net.Store.AlreadyClosedException: this IndexReader is closed                                  // since another thread might be using it. I'm 'hoping' that the GC will just take care of the left over reader's that might                                  // be currently being used in a search' otherwise there's really no way to now when it's safe to close the reader.                                     newReader = _luceneSearcher._reader.Reopen();                              }                                if (newReader != _luceneSearcher._reader)                              {                                  //if it's changed' then re-assign' note: the above' before we used to close the old one here                                  // but that will cause problems since the old reader might be in use on another thread.                                  _luceneSearcher._reader = newReader;                                  _luceneSearcher._searcher = new IndexSearcher(_luceneSearcher._reader);                                    //track it!                                  OpenReaderTracker.Current.AddOpenReader(_luceneSearcher._reader);                                    //get rid of old ones (anything a minute or older)                                  OpenReaderTracker.Current.CloseStaleReaders(_luceneSearcher.GetLuceneDirectory()' TimeSpan.FromMinutes(1));                              }                          }                            break;                  }
