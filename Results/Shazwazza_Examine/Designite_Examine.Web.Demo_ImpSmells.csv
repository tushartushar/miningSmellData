Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,MultiSearch,The length of the statement  "                sb.AppendLine($"Id:{searchResult.Id}' Score:{searchResult.Score}' Vals: {string.Join("' "' searchResult.Fields.Select(x => x.Value))}"); " is 136.
Long Statement,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,Search,The length of the statement  "                sb.AppendLine($"Id:{searchResult.Id}' Score:{searchResult.Score}' Vals: {string.Join("' "' searchResult.Fields.Select(x => x.Value))}"); " is 136.
Magic Number,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,Populate,The following statement contains a magic number: try              {                  using (var db = new MyDbContext())                  {                      //check if we have data                      if (!db.TestModels.Any())                      {                          //using TableDirect is BY FAR one of the fastest ways to bulk insert data in SqlCe...                           using (db.Database.Connection)                          {                              db.Database.Connection.Open();                              using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                              {                                  cmd.CommandText = "TestModels";                                  cmd.CommandType = CommandType.TableDirect;                                    var rs = cmd.ExecuteResultSet(ResultSetOptions.Updatable);                                  var rec = rs.CreateRecord();                                    for (var i = 0; i < 27000; i++)                                  {                                      rec.SetString(1' "a" + i);                                      rec.SetString(2' "b" + i);                                      rec.SetString(3' "c" + i);                                      rec.SetString(4' "d" + i);                                      rec.SetString(5' "e" + i);                                      rec.SetString(6' "f" + i);                                      rs.Insert(rec);                                  }                              }                          }                          return View(true);                      }                      else                      {                          this.ModelState.AddModelError("DataError"' "The database has already been populated with data");                          return View(false);                      }                  }              }              catch (Exception ex)              {                  this.ModelState.AddModelError("DataError"' ex.Message);                  return View(false);              }
Magic Number,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,Populate,The following statement contains a magic number: try              {                  using (var db = new MyDbContext())                  {                      //check if we have data                      if (!db.TestModels.Any())                      {                          //using TableDirect is BY FAR one of the fastest ways to bulk insert data in SqlCe...                           using (db.Database.Connection)                          {                              db.Database.Connection.Open();                              using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                              {                                  cmd.CommandText = "TestModels";                                  cmd.CommandType = CommandType.TableDirect;                                    var rs = cmd.ExecuteResultSet(ResultSetOptions.Updatable);                                  var rec = rs.CreateRecord();                                    for (var i = 0; i < 27000; i++)                                  {                                      rec.SetString(1' "a" + i);                                      rec.SetString(2' "b" + i);                                      rec.SetString(3' "c" + i);                                      rec.SetString(4' "d" + i);                                      rec.SetString(5' "e" + i);                                      rec.SetString(6' "f" + i);                                      rs.Insert(rec);                                  }                              }                          }                          return View(true);                      }                      else                      {                          this.ModelState.AddModelError("DataError"' "The database has already been populated with data");                          return View(false);                      }                  }              }              catch (Exception ex)              {                  this.ModelState.AddModelError("DataError"' ex.Message);                  return View(false);              }
Magic Number,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,Populate,The following statement contains a magic number: try              {                  using (var db = new MyDbContext())                  {                      //check if we have data                      if (!db.TestModels.Any())                      {                          //using TableDirect is BY FAR one of the fastest ways to bulk insert data in SqlCe...                           using (db.Database.Connection)                          {                              db.Database.Connection.Open();                              using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                              {                                  cmd.CommandText = "TestModels";                                  cmd.CommandType = CommandType.TableDirect;                                    var rs = cmd.ExecuteResultSet(ResultSetOptions.Updatable);                                  var rec = rs.CreateRecord();                                    for (var i = 0; i < 27000; i++)                                  {                                      rec.SetString(1' "a" + i);                                      rec.SetString(2' "b" + i);                                      rec.SetString(3' "c" + i);                                      rec.SetString(4' "d" + i);                                      rec.SetString(5' "e" + i);                                      rec.SetString(6' "f" + i);                                      rs.Insert(rec);                                  }                              }                          }                          return View(true);                      }                      else                      {                          this.ModelState.AddModelError("DataError"' "The database has already been populated with data");                          return View(false);                      }                  }              }              catch (Exception ex)              {                  this.ModelState.AddModelError("DataError"' ex.Message);                  return View(false);              }
Magic Number,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,Populate,The following statement contains a magic number: try              {                  using (var db = new MyDbContext())                  {                      //check if we have data                      if (!db.TestModels.Any())                      {                          //using TableDirect is BY FAR one of the fastest ways to bulk insert data in SqlCe...                           using (db.Database.Connection)                          {                              db.Database.Connection.Open();                              using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                              {                                  cmd.CommandText = "TestModels";                                  cmd.CommandType = CommandType.TableDirect;                                    var rs = cmd.ExecuteResultSet(ResultSetOptions.Updatable);                                  var rec = rs.CreateRecord();                                    for (var i = 0; i < 27000; i++)                                  {                                      rec.SetString(1' "a" + i);                                      rec.SetString(2' "b" + i);                                      rec.SetString(3' "c" + i);                                      rec.SetString(4' "d" + i);                                      rec.SetString(5' "e" + i);                                      rec.SetString(6' "f" + i);                                      rs.Insert(rec);                                  }                              }                          }                          return View(true);                      }                      else                      {                          this.ModelState.AddModelError("DataError"' "The database has already been populated with data");                          return View(false);                      }                  }              }              catch (Exception ex)              {                  this.ModelState.AddModelError("DataError"' ex.Message);                  return View(false);              }
Magic Number,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,Populate,The following statement contains a magic number: try              {                  using (var db = new MyDbContext())                  {                      //check if we have data                      if (!db.TestModels.Any())                      {                          //using TableDirect is BY FAR one of the fastest ways to bulk insert data in SqlCe...                           using (db.Database.Connection)                          {                              db.Database.Connection.Open();                              using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                              {                                  cmd.CommandText = "TestModels";                                  cmd.CommandType = CommandType.TableDirect;                                    var rs = cmd.ExecuteResultSet(ResultSetOptions.Updatable);                                  var rec = rs.CreateRecord();                                    for (var i = 0; i < 27000; i++)                                  {                                      rec.SetString(1' "a" + i);                                      rec.SetString(2' "b" + i);                                      rec.SetString(3' "c" + i);                                      rec.SetString(4' "d" + i);                                      rec.SetString(5' "e" + i);                                      rec.SetString(6' "f" + i);                                      rs.Insert(rec);                                  }                              }                          }                          return View(true);                      }                      else                      {                          this.ModelState.AddModelError("DataError"' "The database has already been populated with data");                          return View(false);                      }                  }              }              catch (Exception ex)              {                  this.ModelState.AddModelError("DataError"' ex.Message);                  return View(false);              }
Magic Number,Examine.Web.Demo.Controllers,HomeController,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\Controllers\HomeController.cs,Populate,The following statement contains a magic number: try              {                  using (var db = new MyDbContext())                  {                      //check if we have data                      if (!db.TestModels.Any())                      {                          //using TableDirect is BY FAR one of the fastest ways to bulk insert data in SqlCe...                           using (db.Database.Connection)                          {                              db.Database.Connection.Open();                              using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                              {                                  cmd.CommandText = "TestModels";                                  cmd.CommandType = CommandType.TableDirect;                                    var rs = cmd.ExecuteResultSet(ResultSetOptions.Updatable);                                  var rec = rs.CreateRecord();                                    for (var i = 0; i < 27000; i++)                                  {                                      rec.SetString(1' "a" + i);                                      rec.SetString(2' "b" + i);                                      rec.SetString(3' "c" + i);                                      rec.SetString(4' "d" + i);                                      rec.SetString(5' "e" + i);                                      rec.SetString(6' "f" + i);                                      rs.Insert(rec);                                  }                              }                          }                          return View(true);                      }                      else                      {                          this.ModelState.AddModelError("DataError"' "The database has already been populated with data");                          return View(false);                      }                  }              }              catch (Exception ex)              {                  this.ModelState.AddModelError("DataError"' ex.Message);                  return View(false);              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetRandomItems,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while (rs.Read())                          {                              //A 1 in 1000 chance of being returned                              if (random.Next(1' 1001) == 1000)                              {                                  yield return new SimpleDataSet()                                  {                                      NodeDefinition = new IndexedNode()                                      {                                          NodeId = rs.GetInt32(0)'                                          Type = "TestType"                                      }'                                      RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                                  };                              }                                                            current++;                          }                      }                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetRandomItems,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while (rs.Read())                          {                              //A 1 in 1000 chance of being returned                              if (random.Next(1' 1001) == 1000)                              {                                  yield return new SimpleDataSet()                                  {                                      NodeDefinition = new IndexedNode()                                      {                                          NodeId = rs.GetInt32(0)'                                          Type = "TestType"                                      }'                                      RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                                  };                              }                                                            current++;                          }                      }                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetRandomItems,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while (rs.Read())                          {                              //A 1 in 1000 chance of being returned                              if (random.Next(1' 1001) == 1000)                              {                                  yield return new SimpleDataSet()                                  {                                      NodeDefinition = new IndexedNode()                                      {                                          NodeId = rs.GetInt32(0)'                                          Type = "TestType"                                      }'                                      RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                                  };                              }                                                            current++;                          }                      }                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetRandomItems,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while (rs.Read())                          {                              //A 1 in 1000 chance of being returned                              if (random.Next(1' 1001) == 1000)                              {                                  yield return new SimpleDataSet()                                  {                                      NodeDefinition = new IndexedNode()                                      {                                          NodeId = rs.GetInt32(0)'                                          Type = "TestType"                                      }'                                      RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                                  };                              }                                                            current++;                          }                      }                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetRandomItems,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while (rs.Read())                          {                              //A 1 in 1000 chance of being returned                              if (random.Next(1' 1001) == 1000)                              {                                  yield return new SimpleDataSet()                                  {                                      NodeDefinition = new IndexedNode()                                      {                                          NodeId = rs.GetInt32(0)'                                          Type = "TestType"                                      }'                                      RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                                  };                              }                                                            current++;                          }                      }                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetRandomItems,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while (rs.Read())                          {                              //A 1 in 1000 chance of being returned                              if (random.Next(1' 1001) == 1000)                              {                                  yield return new SimpleDataSet()                                  {                                      NodeDefinition = new IndexedNode()                                      {                                          NodeId = rs.GetInt32(0)'                                          Type = "TestType"                                      }'                                      RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                                  };                              }                                                            current++;                          }                      }                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetRandomItems,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while (rs.Read())                          {                              //A 1 in 1000 chance of being returned                              if (random.Next(1' 1001) == 1000)                              {                                  yield return new SimpleDataSet()                                  {                                      NodeDefinition = new IndexedNode()                                      {                                          NodeId = rs.GetInt32(0)'                                          Type = "TestType"                                      }'                                      RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                                  };                              }                                                            current++;                          }                      }                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetAllData,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while(rs.Read())                          {                              yield return new SimpleDataSet()                              {                                  NodeDefinition = new IndexedNode()                                  {                                      NodeId = rs.GetInt32(0)'                                      Type = "TestType"                                  }'                                  RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                              };                          }                      }                                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetAllData,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while(rs.Read())                          {                              yield return new SimpleDataSet()                              {                                  NodeDefinition = new IndexedNode()                                  {                                      NodeId = rs.GetInt32(0)'                                      Type = "TestType"                                  }'                                  RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                              };                          }                      }                                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetAllData,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while(rs.Read())                          {                              yield return new SimpleDataSet()                              {                                  NodeDefinition = new IndexedNode()                                  {                                      NodeId = rs.GetInt32(0)'                                      Type = "TestType"                                  }'                                  RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                              };                          }                      }                                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetAllData,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while(rs.Read())                          {                              yield return new SimpleDataSet()                              {                                  NodeDefinition = new IndexedNode()                                  {                                      NodeId = rs.GetInt32(0)'                                      Type = "TestType"                                  }'                                  RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                              };                          }                      }                                  }              }
Magic Number,Examine.Web.Demo,TableDirectReaderDataService,C:\repos\Shazwazza_Examine\src\Examine.Web.Demo\TableDirectReaderDataService.cs,GetAllData,The following statement contains a magic number: using (var db = new MyDbContext())              {                  using (db.Database.Connection)                  {                      db.Database.Connection.Open();                      using (var cmd = (SqlCeCommand)db.Database.Connection.CreateCommand())                      {                          cmd.CommandText = "TestModels";                          cmd.CommandType = CommandType.TableDirect;                          var rs = cmd.ExecuteResultSet(ResultSetOptions.None);                          while(rs.Read())                          {                              yield return new SimpleDataSet()                              {                                  NodeDefinition = new IndexedNode()                                  {                                      NodeId = rs.GetInt32(0)'                                      Type = "TestType"                                  }'                                  RowData = new Dictionary<string' string>()                                  {                                      {"Column1"' rs.GetString(1)}'                                      {"Column2"' rs.GetString(2)}'                                      {"Column3"' rs.GetString(3)}'                                      {"Column4"' rs.GetString(4)}'                                      {"Column5"' rs.GetString(5)}'                                      {"Column6"' rs.GetString(6)}                                  }                              };                          }                      }                                  }              }
