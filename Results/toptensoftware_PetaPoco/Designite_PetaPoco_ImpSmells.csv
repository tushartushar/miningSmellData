Implementation smell,Namespace,Class,File,Method,Description
Long Method,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetFactory,The method has 195 lines of code.
Complex Method,PetaPoco,GridReader,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\GridReader.cs,MultiPocoFromIDataReader,Cyclomatic complexity of the method is 9
Complex Method,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,IsNew,Cyclomatic complexity of the method is 13
Complex Method,PetaPoco.Core,DatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\DatabaseProvider.cs,Resolve,Cyclomatic complexity of the method is 11
Complex Method,PetaPoco.Core,DatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\DatabaseProvider.cs,Resolve,Cyclomatic complexity of the method is 11
Long Parameter List,PetaPoco,IAlterPoco,C:\repos\toptensoftware_PetaPoco\PetaPoco\IAlterPoco.cs,Update,The method has 5 parameters. Parameters: tableName' primaryKeyName' poco' primaryKeyValue' columns
Long Parameter List,PetaPoco,IQuery,C:\repos\toptensoftware_PetaPoco\PetaPoco\IQuery.cs,Page,The method has 6 parameters. Parameters: page' itemsPerPage' sqlCount' countArgs' sqlPage' pageArgs
Long Parameter List,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,BuildPageQueries,The method has 6 parameters. Parameters: skip' take' sql' args' sqlCount' sqlPage
Long Parameter List,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Page,The method has 6 parameters. Parameters: page' itemsPerPage' sqlCount' countArgs' sqlPage' pageArgs
Long Parameter List,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Update,The method has 5 parameters. Parameters: tableName' primaryKeyName' poco' primaryKeyValue' columns
Long Parameter List,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,ExecuteUpdate,The method has 5 parameters. Parameters: tableName' primaryKeyName' poco' primaryKeyValue' columns
Long Parameter List,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetFactory,The method has 6 parameters. Parameters: sql' connectionString' firstColumn' countColumns' reader' defaultMapper
Long Parameter List,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,FindSplitPoint,The method has 7 parameters. Parameters: typeThis' typeNext' connectionString' sql' r' pos' defaultMapper
Long Parameter List,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,CreateMultiPocoFactory,The method has 5 parameters. Parameters: types' connectionString' sql' r' defaultMapper
Long Parameter List,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,GetFactory,The method has 5 parameters. Parameters: types' connectionString' sql' r' defaultMapper
Long Statement,PetaPoco,GridReader,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\GridReader.cs,MultiPocoFromIDataReader,The length of the statement  "                var factory = MultiPocoFactory.GetFactory<TRet>(types' cmd.Connection.ConnectionString' cmd.CommandText' r' _defaultMapper); " is 124.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,BeginTransaction,The length of the statement  "                _transaction = !_isolationLevel.HasValue ? _sharedConnection.BeginTransaction() : _sharedConnection.BeginTransaction(_isolationLevel.Value); " is 140.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,AddParam,The length of the statement  "                    // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000 " is 179.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Query,The length of the statement  "                    var factory = pd.GetFactory(cmd.CommandText' _sharedConnection.ConnectionString' 0' r.FieldCount' r' _defaultMapper) as Func<IDataReader' T>; " is 141.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Exists,The length of the statement  "            return ExecuteScalar<int>(string.Format(_provider.GetExistsSql()' Provider.EscapeTableName(poco.TableName)' sqlCondition)' args) != 0; " is 134.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Exists,The length of the statement  "            return Exists<T>(string.Format("{0}=@0"' _provider.EscapeSqlIdentifier(PocoData.ForType(typeof(T)' _defaultMapper).TableInfo.PrimaryKey))' primaryKey); " is 151.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Single,The length of the statement  "            return Single<T>(string.Format("WHERE {0}=@0"' _provider.EscapeSqlIdentifier(PocoData.ForType(typeof(T)' _defaultMapper).TableInfo.PrimaryKey))' primaryKey); " is 157.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,SingleOrDefault,The length of the statement  "            return SingleOrDefault<T>(string.Format("WHERE {0}=@0"' _provider.EscapeSqlIdentifier(PocoData.ForType(typeof(T)' _defaultMapper).TableInfo.PrimaryKey))' primaryKey); " is 166.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Insert,The length of the statement  "            return ExecuteInsert(tableName' pd == null ? null : pd.TableInfo.PrimaryKey' pd != null && pd.TableInfo.AutoIncrement' poco); " is 125.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,ExecuteUpdate,The length of the statement  "                            _provider.EscapeTableName(tableName)' sb.ToString()' _provider.EscapeSqlIdentifier(primaryKeyName)' _paramPrefix' index++); " is 123.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Delete,The length of the statement  "            var sql = string.Format("DELETE FROM {0} WHERE {1}=@0"' _provider.EscapeTableName(tableName)' _provider.EscapeSqlIdentifier(primaryKeyName)); " is 141.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Delete,The length of the statement  "                    throw new InvalidOperationException(string.Format("Anonymous type does not contain an id for PK column `{0}`."' pd.TableInfo.PrimaryKey)); " is 138.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Delete,The length of the statement  "            return Execute(new Sql(string.Format("DELETE FROM {0}"' _provider.EscapeTableName(pd.TableInfo.TableName))).Append(sql)); " is 121.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,IsNew,The length of the statement  "                throw new InvalidOperationException("IsNew() and Save() are only supported on tables with identity (inc auto-increment) primary key columns"); " is 142.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,IsNew,The length of the statement  "                    throw new ArgumentException(string.Format("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 140.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Query,The length of the statement  "            return Query<TRet>(new Type[] { typeof(T1)' typeof(T2)' typeof(T3)' typeof(T4)' typeof(T5) }' cb' sql.SQL' sql.Arguments); " is 122.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Query,The length of the statement  "            return Query<T1>(new Type[] { typeof(T1)' typeof(T2)' typeof(T3)' typeof(T4)' typeof(T5) }' null' sql.SQL' sql.Arguments); " is 122.
Long Statement,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,FormatCommand,The length of the statement  "            return FormatCommand(cmd.CommandText' (from IDataParameter parameter in cmd.Parameters select parameter.Value).ToArray()); " is 122.
Long Statement,PetaPoco.Core,DatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\DatabaseProvider.cs,Resolve,The length of the statement  "                && (connectionString.IndexOf("Jet.OLEDB"' StringComparison.InvariantCultureIgnoreCase) > 0 || connectionString.IndexOf("ACE.OLEDB"' StringComparison.InvariantCultureIgnoreCase) > 0)) " is 182.
Long Statement,PetaPoco.Core,DatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\DatabaseProvider.cs,Resolve,The length of the statement  "                && (connectionString.IndexOf("Jet.OLEDB"' StringComparison.InvariantCultureIgnoreCase) > 0 || connectionString.IndexOf("ACE.OLEDB"' StringComparison.InvariantCultureIgnoreCase) > 0)) " is 182.
Long Statement,PetaPoco.Core,PocoColumn,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoColumn.cs,ChangeType,The length of the statement  "            if (val.GetType().IsValueType && PropertyInfo.PropertyType.IsGenericType && PropertyInfo.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>)) " is 151.
Long Statement,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetFactory,The length of the statement  "                var m = new DynamicMethod("petapoco_factory_" + PocoFactories.Count.ToString()' Type' new Type[] {typeof(IDataReader)}' true);" is 126.
Long Statement,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetFactory,The length of the statement  "                    var ctor = Type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null);" is 126.
Long Statement,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetFactory,The length of the statement  "                        throw new InvalidOperationException("Type [" + Type.FullName + "] should have default public or non-public constructor");" is 121.
Long Statement,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetFactory,The length of the statement  "                        (x) => x.GetMethod("OnLoaded"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null));" is 127.
Long Statement,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetConverter,The length of the statement  "            if (pc != null && pc.ForceToUtc && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?)))" is 128.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,GetAutoMapper,The length of the statement  "                            throw new InvalidOperationException(string.Format("Can't auto join {0} as {1} has more than one property of type {0}"' types[i]' " is 128.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,FindSplitPoint,The length of the statement  "                return PocoData.ForType(typeThis' defaultMapper).GetFactory(sql' connectionString' pos' r.FieldCount - pos' r' defaultMapper); " is 126.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,FindSplitPoint,The length of the statement  "                if (usedColumns.ContainsKey(fieldName) || (!pdThis.Columns.ContainsKey(fieldName) && pdNext.Columns.ContainsKey(fieldName))) " is 124.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,FindSplitPoint,The length of the statement  "            throw new InvalidOperationException(string.Format("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 120.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,CreateMultiPocoFactory,The length of the statement  "            var m = new DynamicMethod("petapoco_multipoco_factory"' typeof(TRet)' new[] { typeof(MultiPocoFactory)' typeof(IDataReader)' typeof(object) }' " is 142.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,CreateMultiPocoFactory,The length of the statement  "                var del = FindSplitPoint(types[i]' i + 1 < types.Length ? types[i + 1] : null' connectionString' sql' r' ref pos' defaultMapper); " is 129.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,CreateMultiPocoFactory,The length of the statement  "            return (Func<IDataReader' object' TRet>) m.CreateDelegate(typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory() { _delegates = dels }); " is 145.
Long Statement,PetaPoco.Internal,MultiPocoFactory,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\MultiPocoFactory.cs,GetFactory,The length of the statement  "                (Func<IDataReader' object' TRet>) MultiPocoFactories.Get(key' () => CreateMultiPocoFactory<TRet>(types' connectionString' sql' r' defaultMapper)); " is 146.
Long Statement,PetaPoco.Internal,ParametersHelper,C:\repos\toptensoftware_PetaPoco\PetaPoco\Utilities\ParametersHelper.cs,ProcessParams,The length of the statement  "                        throw new ArgumentOutOfRangeException(string.Format("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' " is 137.
Long Statement,PetaPoco.Internal,ParametersHelper,C:\repos\toptensoftware_PetaPoco\PetaPoco\Utilities\ParametersHelper.cs,ProcessParams,The length of the statement  "                            string.Format("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' sql)); " is 132.
Long Statement,PetaPoco.Providers,MariaDbDatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\MariaDbDatabaseProvider.cs,GetFactory,The length of the statement  "            return GetFactory("MySql.Data.MySqlClient.MySqlClientFactory' MySql.Data' Culture=neutral' PublicKeyToken=c5687fc88969c44d"); " is 125.
Long Statement,PetaPoco.Providers,SQLiteDatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\SQLiteDatabaseProvider.cs,GetFactory,The length of the statement  "            return GetFactory("System.Data.SQLite.SQLiteFactory' System.Data.SQLite' Culture=neutral' PublicKeyToken=db937bc2d44ff139"); " is 124.
Long Statement,PetaPoco.Providers,OracleDatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\OracleDatabaseProvider.cs,GetFactory,The length of the statement  "            return GetFactory("Oracle.ManagedDataAccess.Client.OracleClientFactory' Oracle.ManagedDataAccess' Culture=neutral' PublicKeyToken=89b483f429c47342"' " is 148.
Long Statement,PetaPoco.Providers,SqlServerDatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\SqlServerDatabaseProvider.cs,GetFactory,The length of the statement  "            return GetFactory("System.Data.SqlClient.SqlClientFactory' System.Data' Version=4.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"); " is 140.
Long Statement,PetaPoco.Providers,SqlServerDatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\SqlServerDatabaseProvider.cs,BuildPageQuery,The length of the statement  "            var sqlPage = string.Format("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn > @{2} AND peta_rn <= @{3}"' parts.SqlOrderBy ?? "ORDER BY (SELECT NULL)"' parts.SqlSelectRemoved' args.Length' args.Length + 1); " is 243.
Long Statement,PetaPoco.Providers,SqlServerCEDatabaseProviders,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\SqlServerCEDatabaseProviders.cs,GetFactory,The length of the statement  "            return GetFactory("System.Data.SqlServerCe.SqlCeProviderFactory' System.Data.SqlServerCe' Culture=neutral' PublicKeyToken=89845dcd8080cc91"); " is 141.
Long Statement,PetaPoco.Providers,SqlServerCEDatabaseProviders,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\SqlServerCEDatabaseProviders.cs,BuildPageQuery,The length of the statement  "            var sqlPage = string.Format("{0}\nOFFSET @{1} ROWS FETCH NEXT @{2} ROWS ONLY"' parts.Sql' args.Length' args.Length + 1); " is 120.
Long Statement,PetaPoco.Providers,MySqlDatabaseProvider,C:\repos\toptensoftware_PetaPoco\PetaPoco\Providers\MySqlDatabaseProvider.cs,GetFactory,The length of the statement  "            return GetFactory("MySql.Data.MySqlClient.MySqlClientFactory' MySql.Data' Culture=neutral' PublicKeyToken=c5687fc88969c44d"); " is 125.
Long Statement,PetaPoco.Utilities,PagingHelper,C:\repos\toptensoftware_PetaPoco\PetaPoco\Utilities\PagingHelper.cs,SplitSQL,The length of the statement  "                parts.SqlCount = sql.Substring(0' g.Index) + "COUNT(" + m.Groups[1].ToString().Trim() + ") " + sql.Substring(g.Index + g.Length); " is 129.
Complex Conditional,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetFactory,The conditional expression  "valuegetter != null                                 && valuegetter.ReturnType == srcType                                 && (valuegetter.ReturnType == dstType || valuegetter.ReturnType == Nullable.GetUnderlyingType(dstType))"  is complex.
Complex Conditional,PetaPoco.Core,PocoData,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\PocoData.cs,GetConverter,The conditional expression  "pc != null && pc.ForceToUtc && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?))"  is complex.
Magic Number,PetaPoco,Sql,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Sql.cs,Build,The following statement contains a magic number: if (!string.IsNullOrEmpty(_sql))              {                  // Add SQL to the string                  if (sb.Length > 0)                  {                      sb.Append("\n");                  }                    var sql = ParametersHelper.ProcessParams(_sql' _args' args);                    if (Is(lhs' "WHERE ") && Is(this' "WHERE "))                      sql = "AND " + sql.Substring(6);                  if (Is(lhs' "ORDER BY ") && Is(this' "ORDER BY "))                      sql = "' " + sql.Substring(9);                  // add set clause                  if (Is(lhs' "SET ") && Is(this' "SET "))                      sql = "' " + sql.Substring(4);                    sb.Append(sql);              }
Magic Number,PetaPoco,Sql,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Sql.cs,Build,The following statement contains a magic number: if (!string.IsNullOrEmpty(_sql))              {                  // Add SQL to the string                  if (sb.Length > 0)                  {                      sb.Append("\n");                  }                    var sql = ParametersHelper.ProcessParams(_sql' _args' args);                    if (Is(lhs' "WHERE ") && Is(this' "WHERE "))                      sql = "AND " + sql.Substring(6);                  if (Is(lhs' "ORDER BY ") && Is(this' "ORDER BY "))                      sql = "' " + sql.Substring(9);                  // add set clause                  if (Is(lhs' "SET ") && Is(this' "SET "))                      sql = "' " + sql.Substring(4);                    sb.Append(sql);              }
Magic Number,PetaPoco,Sql,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Sql.cs,Build,The following statement contains a magic number: if (!string.IsNullOrEmpty(_sql))              {                  // Add SQL to the string                  if (sb.Length > 0)                  {                      sb.Append("\n");                  }                    var sql = ParametersHelper.ProcessParams(_sql' _args' args);                    if (Is(lhs' "WHERE ") && Is(this' "WHERE "))                      sql = "AND " + sql.Substring(6);                  if (Is(lhs' "ORDER BY ") && Is(this' "ORDER BY "))                      sql = "' " + sql.Substring(9);                  // add set clause                  if (Is(lhs' "SET ") && Is(this' "SET "))                      sql = "' " + sql.Substring(4);                    sb.Append(sql);              }
Magic Number,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;
Magic Number,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,AddParam,The following statement contains a magic number: if (value == null)              {                  p.Value = DBNull.Value;                    if (pi != null && pi.PropertyType.Name == "Byte[]")                  {                      p.DbType = DbType.Binary;                  }              }              else              {                  // Give the database type first crack at converting to DB required type                  value = _provider.MapParameterValue(value);                    var t = value.GetType();                  if (t.IsEnum) // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = Convert.ChangeType(value' ((Enum)value).GetTypeCode());                  }                  else if (t == typeof(Guid) && !_provider.HasNativeGuidSupport)                  {                      p.Value = value.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000                      if ((value as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = Math.Max((value as string).Length + 1' 4000); // Help query plan caching by using common size                      p.Value = value;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((value as AnsiString).Value.Length + 1' 4000);                      p.Value = (value as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (value.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else if (value.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else                  {                      p.Value = value;                  }              }
Magic Number,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,AddParam,The following statement contains a magic number: if (value == null)              {                  p.Value = DBNull.Value;                    if (pi != null && pi.PropertyType.Name == "Byte[]")                  {                      p.DbType = DbType.Binary;                  }              }              else              {                  // Give the database type first crack at converting to DB required type                  value = _provider.MapParameterValue(value);                    var t = value.GetType();                  if (t.IsEnum) // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = Convert.ChangeType(value' ((Enum)value).GetTypeCode());                  }                  else if (t == typeof(Guid) && !_provider.HasNativeGuidSupport)                  {                      p.Value = value.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000                      if ((value as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = Math.Max((value as string).Length + 1' 4000); // Help query plan caching by using common size                      p.Value = value;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((value as AnsiString).Value.Length + 1' 4000);                      p.Value = (value as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (value.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else if (value.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else                  {                      p.Value = value;                  }              }
Magic Number,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,AddParam,The following statement contains a magic number: if (value == null)              {                  p.Value = DBNull.Value;                    if (pi != null && pi.PropertyType.Name == "Byte[]")                  {                      p.DbType = DbType.Binary;                  }              }              else              {                  // Give the database type first crack at converting to DB required type                  value = _provider.MapParameterValue(value);                    var t = value.GetType();                  if (t.IsEnum) // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = Convert.ChangeType(value' ((Enum)value).GetTypeCode());                  }                  else if (t == typeof(Guid) && !_provider.HasNativeGuidSupport)                  {                      p.Value = value.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000                      if ((value as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = Math.Max((value as string).Length + 1' 4000); // Help query plan caching by using common size                      p.Value = value;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((value as AnsiString).Value.Length + 1' 4000);                      p.Value = (value as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (value.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else if (value.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else                  {                      p.Value = value;                  }              }
Magic Number,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,AddParam,The following statement contains a magic number: if (value == null)              {                  p.Value = DBNull.Value;                    if (pi != null && pi.PropertyType.Name == "Byte[]")                  {                      p.DbType = DbType.Binary;                  }              }              else              {                  // Give the database type first crack at converting to DB required type                  value = _provider.MapParameterValue(value);                    var t = value.GetType();                  if (t.IsEnum) // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = Convert.ChangeType(value' ((Enum)value).GetTypeCode());                  }                  else if (t == typeof(Guid) && !_provider.HasNativeGuidSupport)                  {                      p.Value = value.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000                      if ((value as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = Math.Max((value as string).Length + 1' 4000); // Help query plan caching by using common size                      p.Value = value;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((value as AnsiString).Value.Length + 1' 4000);                      p.Value = (value as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (value.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else if (value.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = value;                  }                  else                  {                      p.Value = value;                  }              }
Magic Number,PetaPoco,Database,C:\repos\toptensoftware_PetaPoco\PetaPoco\Database.cs,Exists,The following statement contains a magic number: if (sqlCondition.TrimStart().StartsWith("where"' StringComparison.OrdinalIgnoreCase))                  sqlCondition = sqlCondition.TrimStart().Substring(5);
Magic Number,PetaPoco.Core.Inflection,EnglishInflector,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Inflection\EnglishInflector.cs,Ordanise,The following statement contains a magic number: var nMod100 = number%100;
Magic Number,PetaPoco.Core.Inflection,EnglishInflector,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Inflection\EnglishInflector.cs,Ordanise,The following statement contains a magic number: if (nMod100 >= 11 && nMod100 <= 13)              {                  return numberString + "th";              }
Magic Number,PetaPoco.Core.Inflection,EnglishInflector,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Inflection\EnglishInflector.cs,Ordanise,The following statement contains a magic number: if (nMod100 >= 11 && nMod100 <= 13)              {                  return numberString + "th";              }
Magic Number,PetaPoco.Core.Inflection,EnglishInflector,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Inflection\EnglishInflector.cs,Ordanise,The following statement contains a magic number: switch (number%10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,PetaPoco.Core.Inflection,EnglishInflector,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Inflection\EnglishInflector.cs,Ordanise,The following statement contains a magic number: switch (number%10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,PetaPoco.Core.Inflection,EnglishInflector,C:\repos\toptensoftware_PetaPoco\PetaPoco\Core\Inflection\EnglishInflector.cs,Ordanise,The following statement contains a magic number: switch (number%10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,PetaPoco.Internal,ArrayKey<T>,C:\repos\toptensoftware_PetaPoco\PetaPoco\Utilities\ArrayKey.cs,ArrayKey,The following statement contains a magic number: _hashCode = 17;
Magic Number,PetaPoco.Internal,ArrayKey<T>,C:\repos\toptensoftware_PetaPoco\PetaPoco\Utilities\ArrayKey.cs,ArrayKey,The following statement contains a magic number: foreach (var k in keys)              {                  _hashCode = _hashCode*23 + (k == null ? 0 : k.GetHashCode());              }
