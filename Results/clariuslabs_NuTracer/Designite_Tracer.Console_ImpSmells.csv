Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,Cyclomatic complexity of the method is 16
Long Statement,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The length of the statement  "		IDisposable handler = proxy.On<TraceEvent> ("TraceEvent"' trace => Tracer.Get (trace.Source).Trace (trace.EventType' trace.Message)); " is 133.
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: using (var hub = new HubConnection (TracerHubUrl' data)) {  	IHubProxy proxy = hub.CreateHubProxy (HubName);  	IDisposable handler = proxy.On<TraceEvent> ("TraceEvent"' trace => Tracer.Get (trace.Source).Trace (trace.EventType' trace.Message));  	#if DEBUG  	//hub.TraceLevel = TraceLevels.All;  	//hub.TraceWriter = Console.Out;  	#endif  	hub.Start ().Wait ();  	Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  	Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  	Console.WriteLine ("Press 'Q' to exit.");  	var line = Console.ReadLine ();  	while (!line.Equals ("Q"' StringComparison.InvariantCultureIgnoreCase)) {  		if (line.IndexOf (':') != -1) {  			var trace = line.Split (new[] {  				':'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (trace.Length == 3) {  				var type = TraceEventType.Information;  				switch (trace [0]) {  				case "E":  					type = TraceEventType.Error;  					break;  				case "W":  					type = TraceEventType.Warning;  					break;  				default:  					break;  				}  				proxy.Invoke ("TraceEvent"' new TraceEvent {  					EventType = type'  					Source = trace [1]'  					Message = trace [2]'  				});  			}  			else {  				Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  			}  		}  		else if (line.IndexOf ('=') != -1) {  			var trace = line.Split (new[] {  				'='  			}' StringSplitOptions.RemoveEmptyEntries);  			SourceLevels level;  			if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  				proxy.Invoke ("SetTracingLevel"' trace [0]' level);  			}  			else {  				Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  			}  		}  		line = Console.ReadLine ();  	}  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: using (var hub = new HubConnection (TracerHubUrl' data)) {  	IHubProxy proxy = hub.CreateHubProxy (HubName);  	IDisposable handler = proxy.On<TraceEvent> ("TraceEvent"' trace => Tracer.Get (trace.Source).Trace (trace.EventType' trace.Message));  	#if DEBUG  	//hub.TraceLevel = TraceLevels.All;  	//hub.TraceWriter = Console.Out;  	#endif  	hub.Start ().Wait ();  	Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  	Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  	Console.WriteLine ("Press 'Q' to exit.");  	var line = Console.ReadLine ();  	while (!line.Equals ("Q"' StringComparison.InvariantCultureIgnoreCase)) {  		if (line.IndexOf (':') != -1) {  			var trace = line.Split (new[] {  				':'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (trace.Length == 3) {  				var type = TraceEventType.Information;  				switch (trace [0]) {  				case "E":  					type = TraceEventType.Error;  					break;  				case "W":  					type = TraceEventType.Warning;  					break;  				default:  					break;  				}  				proxy.Invoke ("TraceEvent"' new TraceEvent {  					EventType = type'  					Source = trace [1]'  					Message = trace [2]'  				});  			}  			else {  				Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  			}  		}  		else if (line.IndexOf ('=') != -1) {  			var trace = line.Split (new[] {  				'='  			}' StringSplitOptions.RemoveEmptyEntries);  			SourceLevels level;  			if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  				proxy.Invoke ("SetTracingLevel"' trace [0]' level);  			}  			else {  				Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  			}  		}  		line = Console.ReadLine ();  	}  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: using (var hub = new HubConnection (TracerHubUrl' data)) {  	IHubProxy proxy = hub.CreateHubProxy (HubName);  	IDisposable handler = proxy.On<TraceEvent> ("TraceEvent"' trace => Tracer.Get (trace.Source).Trace (trace.EventType' trace.Message));  	#if DEBUG  	//hub.TraceLevel = TraceLevels.All;  	//hub.TraceWriter = Console.Out;  	#endif  	hub.Start ().Wait ();  	Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  	Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  	Console.WriteLine ("Press 'Q' to exit.");  	var line = Console.ReadLine ();  	while (!line.Equals ("Q"' StringComparison.InvariantCultureIgnoreCase)) {  		if (line.IndexOf (':') != -1) {  			var trace = line.Split (new[] {  				':'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (trace.Length == 3) {  				var type = TraceEventType.Information;  				switch (trace [0]) {  				case "E":  					type = TraceEventType.Error;  					break;  				case "W":  					type = TraceEventType.Warning;  					break;  				default:  					break;  				}  				proxy.Invoke ("TraceEvent"' new TraceEvent {  					EventType = type'  					Source = trace [1]'  					Message = trace [2]'  				});  			}  			else {  				Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  			}  		}  		else if (line.IndexOf ('=') != -1) {  			var trace = line.Split (new[] {  				'='  			}' StringSplitOptions.RemoveEmptyEntries);  			SourceLevels level;  			if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  				proxy.Invoke ("SetTracingLevel"' trace [0]' level);  			}  			else {  				Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  			}  		}  		line = Console.ReadLine ();  	}  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: while (!line.Equals ("Q"' StringComparison.InvariantCultureIgnoreCase)) {  	if (line.IndexOf (':') != -1) {  		var trace = line.Split (new[] {  			':'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (trace.Length == 3) {  			var type = TraceEventType.Information;  			switch (trace [0]) {  			case "E":  				type = TraceEventType.Error;  				break;  			case "W":  				type = TraceEventType.Warning;  				break;  			default:  				break;  			}  			proxy.Invoke ("TraceEvent"' new TraceEvent {  				EventType = type'  				Source = trace [1]'  				Message = trace [2]'  			});  		}  		else {  			Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  		}  	}  	else if (line.IndexOf ('=') != -1) {  		var trace = line.Split (new[] {  			'='  		}' StringSplitOptions.RemoveEmptyEntries);  		SourceLevels level;  		if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  			proxy.Invoke ("SetTracingLevel"' trace [0]' level);  		}  		else {  			Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  		}  	}  	line = Console.ReadLine ();  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: while (!line.Equals ("Q"' StringComparison.InvariantCultureIgnoreCase)) {  	if (line.IndexOf (':') != -1) {  		var trace = line.Split (new[] {  			':'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (trace.Length == 3) {  			var type = TraceEventType.Information;  			switch (trace [0]) {  			case "E":  				type = TraceEventType.Error;  				break;  			case "W":  				type = TraceEventType.Warning;  				break;  			default:  				break;  			}  			proxy.Invoke ("TraceEvent"' new TraceEvent {  				EventType = type'  				Source = trace [1]'  				Message = trace [2]'  			});  		}  		else {  			Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  		}  	}  	else if (line.IndexOf ('=') != -1) {  		var trace = line.Split (new[] {  			'='  		}' StringSplitOptions.RemoveEmptyEntries);  		SourceLevels level;  		if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  			proxy.Invoke ("SetTracingLevel"' trace [0]' level);  		}  		else {  			Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  		}  	}  	line = Console.ReadLine ();  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: while (!line.Equals ("Q"' StringComparison.InvariantCultureIgnoreCase)) {  	if (line.IndexOf (':') != -1) {  		var trace = line.Split (new[] {  			':'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (trace.Length == 3) {  			var type = TraceEventType.Information;  			switch (trace [0]) {  			case "E":  				type = TraceEventType.Error;  				break;  			case "W":  				type = TraceEventType.Warning;  				break;  			default:  				break;  			}  			proxy.Invoke ("TraceEvent"' new TraceEvent {  				EventType = type'  				Source = trace [1]'  				Message = trace [2]'  			});  		}  		else {  			Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  		}  	}  	else if (line.IndexOf ('=') != -1) {  		var trace = line.Split (new[] {  			'='  		}' StringSplitOptions.RemoveEmptyEntries);  		SourceLevels level;  		if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  			proxy.Invoke ("SetTracingLevel"' trace [0]' level);  		}  		else {  			Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  		}  	}  	line = Console.ReadLine ();  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: if (line.IndexOf (':') != -1) {  	var trace = line.Split (new[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (trace.Length == 3) {  		var type = TraceEventType.Information;  		switch (trace [0]) {  		case "E":  			type = TraceEventType.Error;  			break;  		case "W":  			type = TraceEventType.Warning;  			break;  		default:  			break;  		}  		proxy.Invoke ("TraceEvent"' new TraceEvent {  			EventType = type'  			Source = trace [1]'  			Message = trace [2]'  		});  	}  	else {  		Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  	}  }  else if (line.IndexOf ('=') != -1) {  	var trace = line.Split (new[] {  		'='  	}' StringSplitOptions.RemoveEmptyEntries);  	SourceLevels level;  	if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  		proxy.Invoke ("SetTracingLevel"' trace [0]' level);  	}  	else {  		Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  	}  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: if (line.IndexOf (':') != -1) {  	var trace = line.Split (new[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (trace.Length == 3) {  		var type = TraceEventType.Information;  		switch (trace [0]) {  		case "E":  			type = TraceEventType.Error;  			break;  		case "W":  			type = TraceEventType.Warning;  			break;  		default:  			break;  		}  		proxy.Invoke ("TraceEvent"' new TraceEvent {  			EventType = type'  			Source = trace [1]'  			Message = trace [2]'  		});  	}  	else {  		Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  	}  }  else if (line.IndexOf ('=') != -1) {  	var trace = line.Split (new[] {  		'='  	}' StringSplitOptions.RemoveEmptyEntries);  	SourceLevels level;  	if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  		proxy.Invoke ("SetTracingLevel"' trace [0]' level);  	}  	else {  		Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  	}  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: if (line.IndexOf (':') != -1) {  	var trace = line.Split (new[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (trace.Length == 3) {  		var type = TraceEventType.Information;  		switch (trace [0]) {  		case "E":  			type = TraceEventType.Error;  			break;  		case "W":  			type = TraceEventType.Warning;  			break;  		default:  			break;  		}  		proxy.Invoke ("TraceEvent"' new TraceEvent {  			EventType = type'  			Source = trace [1]'  			Message = trace [2]'  		});  	}  	else {  		Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  	}  }  else if (line.IndexOf ('=') != -1) {  	var trace = line.Split (new[] {  		'='  	}' StringSplitOptions.RemoveEmptyEntries);  	SourceLevels level;  	if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  		proxy.Invoke ("SetTracingLevel"' trace [0]' level);  	}  	else {  		Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  	}  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: if (trace.Length == 3) {  	var type = TraceEventType.Information;  	switch (trace [0]) {  	case "E":  		type = TraceEventType.Error;  		break;  	case "W":  		type = TraceEventType.Warning;  		break;  	default:  		break;  	}  	proxy.Invoke ("TraceEvent"' new TraceEvent {  		EventType = type'  		Source = trace [1]'  		Message = trace [2]'  	});  }  else {  	Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: if (trace.Length == 3) {  	var type = TraceEventType.Information;  	switch (trace [0]) {  	case "E":  		type = TraceEventType.Error;  		break;  	case "W":  		type = TraceEventType.Warning;  		break;  	default:  		break;  	}  	proxy.Invoke ("TraceEvent"' new TraceEvent {  		EventType = type'  		Source = trace [1]'  		Message = trace [2]'  	});  }  else {  	Console.WriteLine ("Send trace event:  [E(rror)|I(nformation)|W(arning)]:[Source]:[Message]");  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: proxy.Invoke ("TraceEvent"' new TraceEvent {  	EventType = type'  	Source = trace [1]'  	Message = trace [2]'  });  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: if (line.IndexOf ('=') != -1) {  	var trace = line.Split (new[] {  		'='  	}' StringSplitOptions.RemoveEmptyEntries);  	SourceLevels level;  	if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  		proxy.Invoke ("SetTracingLevel"' trace [0]' level);  	}  	else {  		Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  	}  }  
Magic Number,TracerHub,Program,C:\repos\clariuslabs_NuTracer\Tracer.Console\Program.cs,Main,The following statement contains a magic number: if (trace.Length == 2 && Enum.TryParse<SourceLevels> (trace [1]' out level)) {  	proxy.Invoke ("SetTracingLevel"' trace [0]' level);  }  else {  	Console.WriteLine ("Set tracing level: [Source]=[Off|Critical|Error|Warning|Information|Verbose|All]");  }  
