Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,HtmlEncode,Cyclomatic complexity of the method is 18
Complex Method,Veil.Compiler,VeilTemplateCompiler<T>,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Compiler\VeilTemplateCompiler.Block.cs,HandleNode,Cyclomatic complexity of the method is 11
Complex Method,Veil.Compiler,VeilTemplateCompiler<T>,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Compiler\VeilTemplateCompiler.Block.cs,ParseExpression,Cyclomatic complexity of the method is 8
Long Statement,Veil,Extensions,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Extensions.cs,GetCollectionInterface,The length of the statement  "            return IsNonGenericCollectionType(t) ? typeof(ICollection) : (IsCollectionType(t) ? t : t.GetInterfaces().First(IsCollectionType)); " is 131.
Long Statement,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,HtmlEncode,The length of the statement  "                // For longer strings' the number of Write calls becomes prohibitive' so sacrifice a call to ToCharArray to allow us to buffer the Write calls " is 142.
Long Statement,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,RuntimeBind,The length of the statement  "            var binder = lateBoundCache.GetOrAdd(Tuple.Create(model.GetType()' itemName)' new Func<Tuple<Type' string>' Func<object' object>>(pair => " is 137.
Long Statement,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,RuntimeBind,The length of the statement  "            if (binder == null) throw new VeilCompilerException("Unable to late-bind '{0}' against model {1}".FormatInvariant(itemName' model.GetType().Name)); " is 147.
Long Statement,Veil,NullVeilContext,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\NullVeilContext.cs,GetTemplateByName,The length of the statement  "            throw new InvalidOperationException("You have attempted to compile a template that uses \"includes\" without specifying an IVeilContext in your VeilEngine constructor. You need an IVeilEngine to allow the compiler to load named templates."); " is 241.
Long Statement,Veil,VeilEngine,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\VeilEngine.cs,Compile,The length of the statement  "            if (!VeilStaticConfiguration.IsParserRegistered(parserKey)) throw new ArgumentException("A parser with key '{0}' is not registered.".FormatInvariant(parserKey)' "parserKey"); " is 174.
Long Statement,Veil,VeilEngine,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\VeilEngine.cs,CreateIncludeParser,The length of the statement  "                    if (template == null) throw new InvalidOperationException("Unable to load template '{0}' using parser '{1}'".FormatInvariant(includeName' parserKey)); " is 150.
Long Statement,Veil,VeilStaticConfiguration,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\VeilStaticConfiguration.cs,RegisterParser,The length of the statement  "            if (parserFactories.ContainsKey(parserKey)) throw new ArgumentException("A parser with key '{0}' ({1}) is already registered.".FormatInvariant(parserKey' parserFactories[parserKey].GetType().Name)' "parserKey"); " is 211.
Long Statement,Veil.Compiler,VeilTemplateCompiler<T>,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Compiler\VeilTemplateCompiler.Block.cs,Compile,The length of the statement  "            return Expression.Lambda<Action<TextWriter' T>>(this.HandleNode(templateSyntaxTree)' this.writer' this.model).Compile(); " is 120.
Long Statement,Veil.Compiler,VeilTemplateCompiler<T>,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Compiler\VeilTemplateCompiler.Block.cs,HandleInclude,The length of the statement  "            if (template == null) throw new VeilCompilerException("Unable to load template '{0}'".FormatInvariant(node.TemplateName)); " is 122.
Long Statement,Veil.Compiler,VeilTemplateCompiler<T>,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Compiler\VeilTemplateCompiler.Block.cs,HandleNode,The length of the statement  "            if (node is ExtendTemplateNode) throw new VeilCompilerException("Found an ExtendTemplate node inside a SyntaxTree. Extend nodes must be the root of a tree."); " is 158.
Long Statement,Veil.Compiler,VeilTemplateCompiler<T>,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Compiler\VeilTemplateCompiler.Block.cs,HandleOverride,The length of the statement  "                if (node.IsRequired) throw new VeilCompilerException("Overrideable section '{0}' is required but not specified".FormatInvariant(node.OverrideName)); " is 148.
Long Statement,Veil.Parser.Nodes,CollectionHasItemsExpressionNode,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Parser\Nodes\Expressions\CollectionHasItemsExpressionNode.cs,Validate,The length of the statement  "            if (!this.collectionExpression.ResultType.HasCollectionInterface()) throw new VeilParserException("Expression assigned to CollectionHasItemsNode.CollectionExpression is not an ICollection"); " is 190.
Magic Number,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,HtmlEncode,The following statement contains a magic number: valueLength < 50
Magic Number,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,RuntimeBind,The following statement contains a magic number: var binder = lateBoundCache.GetOrAdd(Tuple.Create(model.GetType()' itemName)' new Func<Tuple<Type' string>' Func<object' object>>(pair =>              {                  var type = pair.Item1;                  var typeInfo = type.GetTypeInfo();                  var flags = GetBindingFlags(isCaseSensitive);                    if (pair.Item2.EndsWith("()"))                  {                      var function = typeInfo.GetMethod(pair.Item2.Substring(0' pair.Item2.Length - 2)' flags);                      if (function != null) return DelegateBuilder.FunctionCall(type' function);                  }                    var property = typeInfo.GetProperty(pair.Item2' flags);                  if (property != null) return DelegateBuilder.Property(type' property);                    var field = typeInfo.GetField(pair.Item2' flags);                  if (field != null) return DelegateBuilder.Field(type' field);                    var dictionaryType = type.GetDictionaryTypeWithKey<string>();                  if (dictionaryType != null) return DelegateBuilder.Dictionary(dictionaryType' pair.Item2);                    return null;              }));
Missing Default,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,HtmlEncode,The following switch statement is missing a default case: switch (currentChar)                      {                          case '&':                          case '<':                          case '>':                          case '"':                          case '\'':                              if (chars == null) chars = value.ToCharArray();                              if (currentIndex != startIndex) writer.Write(chars' startIndex' currentIndex - startIndex);                              startIndex = currentIndex + 1;                                switch (currentChar)                              {                                  case '&': writer.Write("&amp;"); break;                                  case '<': writer.Write("&lt;"); break;                                  case '>': writer.Write("&gt;"); break;                                  case '"': writer.Write("&quot;"); break;                                  case '\'': writer.Write("&#39;"); break;                              }                              break;                      }
Missing Default,Veil,Helpers,D:\research\architectureSmells\repos\csainty_Veil\src\Veil\Helpers.cs,HtmlEncode,The following switch statement is missing a default case: switch (currentChar)                              {                                  case '&': writer.Write("&amp;"); break;                                  case '<': writer.Write("&lt;"); break;                                  case '>': writer.Write("&gt;"); break;                                  case '"': writer.Write("&quot;"); break;                                  case '\'': writer.Write("&#39;"); break;                              }
