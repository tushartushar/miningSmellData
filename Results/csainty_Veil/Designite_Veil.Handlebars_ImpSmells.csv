Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Veil.Handlebars,HandlebarsToken,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsTokenizer.cs,HandlebarsToken,The method has 5 parameters. Parameters: isSyntaxToken' content' isHtmlEscape' trimLastLiteral' trimNextLiteral
Long Statement,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,AssertStackOnRootNode,The length of the statement  "                throw new VeilParserException(String.Format("Mismatched block found. Expected to find the end of the template but found '{0}' open blocks."' state.BlockStack.Count)); " is 166.
Long Statement,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,AssertInsideConditionalOrIteration,The length of the statement  "            faulted = faulted || !(state.BlockStack.IsCurrentBlockContainerOfType<ConditionalNode>() || state.BlockStack.IsCurrentBlockContainerOfType<IterateNode>()); " is 155.
Long Statement,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,AssertInsideConditionalOrIteration,The length of the statement  "                throw new VeilParserException(String.Format("Found token '{0}' outside of a conditional or iteration block."' foundToken)); " is 123.
Long Statement,Veil.Handlebars,HandlebarsExpressionParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsExpressionParser.cs,ParseAgainstModel,The length of the statement  "                var subModel = HandlebarsExpressionParser.ParseAgainstModel(modelType' expression.Substring(0' dotIndex)' expressionScope); " is 123.
Long Statement,Veil.Handlebars,HandlebarsExpressionParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsExpressionParser.cs,ParseAgainstModel,The length of the statement  "                    HandlebarsExpressionParser.ParseAgainstModel(subModel.ResultType' expression.Substring(dotIndex + 1)' ExpressionScope.CurrentModelOnStack) " is 138.
Long Statement,Veil.Handlebars,HandlebarsExpressionParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsExpressionParser.cs,ParseAgainstModel,The length of the statement  "            throw new VeilParserException(String.Format("Unable to parse model expression '{0}' against model '{1}'"' expression' modelType.Name)); " is 135.
Long Statement,Veil.Handlebars,HandlebarsParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsParser.cs,HandleUnless,The length of the statement  "            var conditional = SyntaxTree.Conditional(state.ParseExpression(state.CurrentToken.Content.Substring(8))' SyntaxTree.Block()' block); " is 132.
Magic Number,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,AssertInsideConditional,The following statement contains a magic number: var faulted = state.BlockStack.Count < 2;
Magic Number,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,AssertInsideIteration,The following statement contains a magic number: var faulted = state.BlockStack.Count < 2;
Magic Number,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,AssertInsideWith,The following statement contains a magic number: var faulted = state.BlockStack.Count < 2;
Magic Number,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,AssertInsideConditionalOrIteration,The following statement contains a magic number: var faulted = state.BlockStack.Count < 2;
Magic Number,Veil.Handlebars,Extensions,C:\repos\csainty_Veil\src\Veil.Handlebars\Extensions.cs,IsInEachBlock,The following statement contains a magic number: if (state.BlockStack.Count < 2)              {                  return false;              }
Magic Number,Veil.Handlebars,HandlebarsExpressionParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsExpressionParser.cs,Parse,The following statement contains a magic number: if (expression.StartsWith("../"))              {                  return ParseAgainstModel(blockStack.GetParentModelType()' expression.Substring(3)' ExpressionScope.ModelOfParentScope);              }
Magic Number,Veil.Handlebars,HandlebarsExpressionParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsExpressionParser.cs,ParseAgainstModel,The following statement contains a magic number: if (expression.EndsWith("()"))              {                  var func = FindMember(modelType' expression.Substring(0' expression.Length - 2)' MemberTypes.Method);                  if (func != null) return SyntaxTreeExpression.Function(modelType' func.Name' expressionScope);              }
Magic Number,Veil.Handlebars,HandlebarsParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsParser.cs,HandleIf,The following statement contains a magic number: var conditional = SyntaxTree.Conditional(state.ParseExpression(state.CurrentToken.Content.Substring(4))' block);
Magic Number,Veil.Handlebars,HandlebarsParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsParser.cs,HandleUnless,The following statement contains a magic number: var conditional = SyntaxTree.Conditional(state.ParseExpression(state.CurrentToken.Content.Substring(8))' SyntaxTree.Block()' block);
Magic Number,Veil.Handlebars,HandlebarsParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsParser.cs,HandleEach,The following statement contains a magic number: var iteration = SyntaxTree.Iterate(                  state.ParseExpression(state.CurrentToken.Content.Substring(6))'                  SyntaxTree.Block()              );
Magic Number,Veil.Handlebars,HandlebarsParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsParser.cs,HandleWith,The following statement contains a magic number: var modelExpression = state.ParseExpression(state.CurrentToken.Content.Substring(6).Trim());
Magic Number,Veil.Handlebars,HandlebarsTokenizer,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsTokenizer.cs,Tokenize,The following statement contains a magic number: foreach (Match match in matches)              {                  if (index < match.Index)                  {                      yield return new HandlebarsToken(false' template.Substring(index' match.Index - index)' false' false' false);                  }                    var token = match.Value.Trim();                  var isHtmlEscape = token.Count(c => c == '{') == 2;                  token = token.Trim('{'' '}');                  var trimLastLiteral = token.StartsWith("~");                  var trimNextLiteral = token.EndsWith("~");                  token = token.Trim('~').Trim();                  yield return new HandlebarsToken(true' token' isHtmlEscape' trimLastLiteral' trimNextLiteral);                    index = match.Index + match.Length;              }
Missing Default,Veil.Handlebars,HandlebarsExpressionParser,C:\repos\csainty_Veil\src\Veil.Handlebars\HandlebarsExpressionParser.cs,ParseAgainstModel,The following switch statement is missing a default case: switch (prop.MemberType)                  {                      case MemberTypes.Property: return SyntaxTreeExpression.Property(modelType' prop.Name' expressionScope);                      case MemberTypes.Field: return SyntaxTreeExpression.Field(modelType' prop.Name' expressionScope);                  }
