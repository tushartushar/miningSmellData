Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Snoop,ProperTreeView,C:\repos\cplotts_snoopwpf\Snoop\ProperTreeView.cs,ApplyReduceDepthFilterIfNeeded,Cyclomatic complexity of the method is 9
Complex Method,Snoop,VisualItem,C:\repos\cplotts_snoopwpf\Snoop\VisualItem.cs,Reload,Cyclomatic complexity of the method is 9
Complex Method,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,FindRoot,Cyclomatic complexity of the method is 8
Complex Method,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,SetOwnerWindow,Cyclomatic complexity of the method is 8
Complex Method,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,ConvertVisualToModel3D,Cyclomatic complexity of the method is 11
Complex Method,Snoop.Infrastructure,ResourceDictionaryKeyHelpers,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ResourceDictionaryKeyHelpers.cs,GetKeyOfResourceItem,Cyclomatic complexity of the method is 8
Long Parameter List,Snoop.DebugListenerTab,SnoopDebugListener,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SnoopDebugListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,Snoop.DebugListenerTab,SnoopDebugListener,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SnoopDebugListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,Snoop.DebugListenerTab,SnoopDebugListener,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SnoopDebugListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,Snoop.DebugListenerTab,SnoopDebugListener,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SnoopDebugListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,Snoop.DebugListenerTab,SnoopDebugListener,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SnoopDebugListener.cs,TraceTransfer,The method has 5 parameters. Parameters: eventCache' source' id' message' relatedActivityId
Long Parameter List,Snoop.Infrastructure,ObservableCollectionExtensions,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ObservableCollectionExtensions.cs,BinarySearch,The method has 5 parameters. Parameters: collection' item' startIndex' endIndex' comparer
Long Parameter List,Snoop.Infrastructure,ObservableCollectionExtensions,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ObservableCollectionExtensions.cs,Insert,The method has 5 parameters. Parameters: collection' item' startIndex' endIndex' comparison
Long Parameter List,Snoop.Shell,SnoopPSHostUserInterface,C:\repos\cplotts_snoopwpf\Snoop\Shell\SnoopPSHostUserInterface.cs,PromptForCredential,The method has 6 parameters. Parameters: caption' message' userName' targetName' allowedCredentialTypes' options
Long Identifier,Snoop,PropertyInformation,C:\repos\cplotts_snoopwpf\Snoop\PropertyInformation.cs,GetAllProperties,The length of the parameter nextBaseTypeWithDefaultConstructor is 34.
Long Identifier,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,CheckForOtherDispatchers,The length of the parameter presentationSourceRootVisualDispatcher is 38.
Long Identifier,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,,The length of the parameter comboBoxPresentationTraceLevel is 30.
Long Identifier,Snoop.Infrastructure,SnoopPartsRegistry,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\SnoopPartsRegistry.cs,,The length of the parameter _registeredSnoopVisualTreeRoots is 31.
Long Statement,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The length of the statement  "            this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler); " is 126.
Long Statement,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,_buttonCopyToClipboard_Click,The length of the statement  "				string message = string.Format("There was an error copying to the clipboard:\nMessage = {0}\n\nPlease copy the exception from the above textbox manually!"' ex.Message); " is 168.
Long Statement,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Hyperlink_RequestNavigate,The length of the statement  "				string message = string.Format("There was an error starting the browser. Please visit \"{0}\" to create the issue."' e.Uri.AbsoluteUri); " is 136.
Long Statement,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate); " is 156.
Long Statement,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate); " is 156.
Long Statement,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click); " is 124.
Long Statement,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click); " is 122.
Long Statement,Snoop,Injector,C:\repos\cplotts_snoopwpf\Snoop\Injector.cs,Suffix,The length of the statement  "				// a process is valid to snoop if it contains a dependency on PresentationFramework' PresentationCore' or milcore (wpfgfx). " is 123.
Long Statement,Snoop,PertinentPropertyFilter,C:\repos\cplotts_snoopwpf\Snoop\PertinentPropertyFilter.cs,Filter,The length of the statement  "			AttachedPropertyBrowsableForChildrenAttribute attachedPropertyForChildren = (AttachedPropertyBrowsableForChildrenAttribute)property.Attributes[typeof(AttachedPropertyBrowsableForChildrenAttribute)]; " is 198.
Long Statement,Snoop,PertinentPropertyFilter,C:\repos\cplotts_snoopwpf\Snoop\PertinentPropertyFilter.cs,Filter,The length of the statement  "			AttachedPropertyBrowsableForTypeAttribute attachedPropertyForType = (AttachedPropertyBrowsableForTypeAttribute)property.Attributes[typeof(AttachedPropertyBrowsableForTypeAttribute)]; " is 182.
Long Statement,Snoop,PertinentPropertyFilter,C:\repos\cplotts_snoopwpf\Snoop\PertinentPropertyFilter.cs,Filter,The length of the statement  "			AttachedPropertyBrowsableWhenAttributePresentAttribute attachedPropertyForAttribute = (AttachedPropertyBrowsableWhenAttributePresentAttribute)property.Attributes[typeof(AttachedPropertyBrowsableWhenAttributePresentAttribute)]; " is 226.
Long Statement,Snoop,PertinentPropertyFilter,C:\repos\cplotts_snoopwpf\Snoop\PertinentPropertyFilter.cs,Filter,The length of the statement  "				// when using [AttachedPropertyBrowsableForType(typeof(IMyInterface))] and IMyInterface is not a DependencyObject' Snoop crashes. " is 129.
Long Statement,Snoop,ZoomerControl,C:\repos\cplotts_snoopwpf\Snoop\ZoomerControl.xaml.cs,Connect,The length of the statement  "            this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown)); " is 146.
Long Statement,Snoop,ZoomerControl,C:\repos\cplotts_snoopwpf\Snoop\ZoomerControl.xaml.cs,Connect,The length of the statement  "            this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove)); " is 140.
Long Statement,Snoop,ZoomerControl,C:\repos\cplotts_snoopwpf\Snoop\ZoomerControl.xaml.cs,Connect,The length of the statement  "            this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp)); " is 142.
Long Statement,Snoop,AppChooser,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,Connect,The length of the statement  "            ((Snoop.AppChooser)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleMouseLeftButtonDown); " is 133.
Long Statement,Snoop,WindowInfo,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,GetModules,The length of the statement  "			var hModuleSnap = NativeMethods.CreateToolhelp32Snapshot(NativeMethods.SnapshotFlags.Module | NativeMethods.SnapshotFlags.Module32' processId); " is 143.
Long Statement,Snoop,PropertyInformation,C:\repos\cplotts_snoopwpf\Snoop\PropertyInformation.cs,GetProperties,The length of the statement  "			List<PropertyDescriptor> propertyDescriptors = GetAllProperties(obj' new Attribute[] { new PropertyFilterAttribute(PropertyFilterOptions.All) }); " is 145.
Long Statement,Snoop,ResourceDictionaryItem,C:\repos\cplotts_snoopwpf\Snoop\ResourceDictionaryItem.cs,Reload,The length of the statement  "					// e.g. I got this once when I was Snoop(ing) some xaml that was refering to an image resource that was no longer there. " is 120.
Long Statement,Snoop,SnoopabilityFeedbackWindow,C:\repos\cplotts_snoopwpf\Snoop\SnoopabilityFeedbackWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/snoopabilityfeedbackwindow.xaml"' System.UriKind.Relative); " is 121.
Long Statement,Snoop,EventsView,C:\repos\cplotts_snoopwpf\Snoop\EventsView.xaml.cs,Connect,The length of the statement  "            this.EventTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.EventTree_SelectedItemChanged); " is 135.
Long Statement,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TextBlock)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleNameClick); " is 140.
Long Statement,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,HandleSnipXaml,The length of the statement  "                MessageBox.Show("This brush has been copied to the clipboard. You can paste it into your project."' "Brush copied"' MessageBoxButton.OK); " is 137.
Long Statement,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,HandleTargetChanged,The length of the statement  "            if (inspector.lastRootTarget == inspector.RootTarget && e.OldValue != null && e.NewValue != null && inspector.checkBoxClearAfterDelve.IsChecked.HasValue && inspector.checkBoxClearAfterDelve.IsChecked.Value) " is 206.
Long Statement,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,GetCurrentTypeName,The length of the statement  "                    return skipDelve.NextValueType.ToString();//we want to make this "future friendly"' so we take into account that the string value of the property type may change. " is 162.
Long Statement,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,InitShell,The length of the statement  "                RoutedPropertyChangedEventHandler<object> onSelectedItemChanged = (sender' e) => shell.NotifySelected(this.CurrentSelection); " is 125.
Long Statement,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,GoBabyGo,The length of the statement  "				MessageBox.Show(string.Format("There was an error snooping! Message = {0}\n\nStack Trace:\n{1}"' ex.Message' ex.StackTrace)' "Error Snooping"' MessageBoxButton.OK); " is 164.
Long Statement,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,CheckForOtherDispatchers,The length of the statement  "						"Without having a separate Snoop window for each dispatcher' you will not be able to Snoop the windows in the dispatcher threads outside of the main dispatcher. " + " is 164.
Long Statement,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,CheckForOtherDispatchers,The length of the statement  "						"Also' note' that if you bring up additional windows in additional dispatchers (after Snooping)' you will need to Snoop again in order to launch Snoop windows for those additional dispatchers."' " is 194.
Long Statement,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Inspect,The length of the statement  "					//SnoopModes.MultipleDispatcherMode is always false for all scenarios except for cases where we are running multiple dispatchers. " is 129.
Long Statement,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Inspect,The length of the statement  "					//If SnoopModes.MultipleDispatcherMode was set to true' then there definitely was a root visual found in another dispatcher' so " is 127.
Long Statement,Snoop,EditedPropertiesHelper,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,DumpObjectsWithEditedProperties,The length of the statement  "			foreach (KeyValuePair<Dispatcher' Dictionary<VisualTreeItem' List<PropertyValueInfo>>> dispatcherKVP in _itemsWithEditedProperties) " is 131.
Long Statement,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The length of the statement  "            this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove)); " is 140.
Long Statement,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The length of the statement  "            this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown)); " is 146.
Long Statement,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The length of the statement  "            this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp)); " is 142.
Long Statement,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The length of the statement  "            this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseWheelEvent' new System.Windows.Input.MouseWheelEventHandler(this.Content_MouseWheel)); " is 147.
Long Statement,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The length of the statement  "            this.ZScaleSlider.ValueChanged += new System.Windows.RoutedPropertyChangedEventHandler<double>(this.ZScaleSlider_ValueChanged); " is 127.
Long Statement,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,ConvertVisualToModel3D,The length of the statement  "					Matrix3D matrix3D = new Matrix3D(matrix.M11' matrix.M12' 0' 0' matrix.M21' matrix.M22' 0' 0' 0' 0' 1' 0' matrix.OffsetX' matrix.OffsetY' 0' 1); " is 143.
Long Statement,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,MakeBrushFromVisual,The length of the statement  "			RenderTargetBitmap renderTargetBitmap = new RenderTargetBitmap((int)Math.Ceiling(bounds.Width)' (int)Math.Ceiling(bounds.Height)' 96' 96' PixelFormats.Default); " is 160.
Long Statement,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,MakeBrushFromVisual,The length of the statement  "				typeof(RenderTargetBitmap).GetMethod("RenderForBitmapEffect"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).Invoke(renderTargetBitmap' " is 172.
Long Statement,Snoop.Converters,SnoopDependencyPropertiesConverter,C:\repos\cplotts_snoopwpf\Snoop\Converters\SnoopParameterInfoConverter.cs,Convert,The length of the statement  "                    dependencyProperties.Add(new DependencyPropertyNameValuePair() { DependencyPropertyName = field.Name' DependencyProperty = (DependencyProperty)field.GetValue(null) }); " is 167.
Long Statement,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,buttonClearFilters_Click,The length of the statement  "			var result = MessageBox.Show("Are you sure you want to clear your filters?"' "Clear Filters Confirmation"' MessageBoxButton.YesNo); " is 131.
Long Statement,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,buttonSetFilters_Click,The length of the statement  "            string[] allLines = allText.ToString().Split(new string[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries); " is 122.
Long Statement,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,comboBoxPresentationTraceLevel_SelectionChanged,The length of the statement  "			if (this.comboBoxPresentationTraceLevel == null || this.comboBoxPresentationTraceLevel.Items == null || this.comboBoxPresentationTraceLevel.Items.Count <= this.comboBoxPresentationTraceLevel.SelectedIndex || this.comboBoxPresentationTraceLevel.SelectedIndex < 0) " is 262.
Long Statement,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,comboBoxPresentationTraceLevel_SelectionChanged,The length of the statement  "			var selectedComboBoxItem = this.comboBoxPresentationTraceLevel.Items[this.comboBoxPresentationTraceLevel.SelectedIndex] as ComboBoxItem; " is 136.
Long Statement,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/debuglistenertab/debuglistenercontrol.xaml"' System.UriKind.Relative); " is 132.
Long Statement,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The length of the statement  "            this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged); " is 167.
Long Statement,Snoop.DebugListenerTab,FiltersViewModel,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\FiltersViewModel.cs,SetIsSet,The length of the statement  "			if (filters.Count == 1 && filters[0] is SnoopSingleFilter && string.IsNullOrEmpty(((SnoopSingleFilter)filters[0]).Text)) " is 120.
Long Statement,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,buttonAddFilter_Click,The length of the statement  "			//this.listBoxFilters.ScrollIntoView(this.listBoxFilters.ItemContainerGenerator.ContainerFromIndex(this.listBoxFilters.Items.Count - 1)); " is 137.
Long Statement,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/debuglistenertab/setfilterswindow.xaml"' System.UriKind.Relative); " is 128.
Long Statement,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TextBox)(target)).Loaded += new System.Windows.RoutedEventHandler(this.textBlockFilter_Loaded); " is 121.
Long Statement,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.buttonRemoveFilter_Click); " is 121.
Long Statement,Snoop.Infrastructure,ZoomerUtilities,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ZoomerUtilities.cs,CreateRectangleForFrameworkElement,The length of the statement  "            if (uiElement.ActualHeight == 0 && uiElement.ActualWidth == 0)//sometimes the actual size might be 0 despite there being a rendered visual with a size greater than 0. This happens often on a custom panel (http://snoopwpf.codeplex.com/workitem/7217). Having a fixed size visual brush remedies the problem. " is 304.
Long Statement,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/methodstab/fulltypeselector.xaml"' System.UriKind.Relative); " is 122.
Long Statement,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The length of the statement  "            this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged); " is 143.
Long Statement,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,SetTargetToRootTarget,The length of the statement  "            if (this._checkBoxUseDataContext.IsChecked.Value && this.RootTarget is FrameworkElement && ((FrameworkElement)this.RootTarget).DataContext != null) " is 147.
Long Statement,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,RootTargetChanged,The length of the statement  "                this._checkBoxUseDataContext.IsEnabled = (this.RootTarget is FrameworkElement) && ((FrameworkElement)this.RootTarget).DataContext != null; " is 138.
Long Statement,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,TryToCreateParameters,The length of the statement  "                    else if (paramInfo.ParameterValue == null || paramInfo.ParameterType.IsAssignableFrom(paramInfo.ParameterValue.GetType())) " is 122.
Long Statement,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,TryToInvokeMethod,The length of the statement  "                    this.resultStringContainer.Visibility = this.textBlockResult.Visibility = this.textBlockResultLabel.Visibility = System.Windows.Visibility.Visible;                     " is 147.
Long Statement,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,TryToInvokeMethod,The length of the statement  "                //var properties = PropertyInformation.GetAllProperties(returnValue' new Attribute[] { new PropertyFilterAttribute(PropertyFilterOptions.All) }); " is 145.
Long Statement,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,ChangeTarget_Click,The length of the statement  "            paramCreator.TextBlockDescription.Text = "Delve into the new desired target by double-clicking on the property. Clicking OK will select the currently delved property to be the new target."; " is 189.
Long Statement,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/methodstab/methodscontrol.xaml"' System.UriKind.Relative); " is 120.
Long Statement,Snoop.MethodsTab,ParameterCreator,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\ParameterCreator.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/methodstab/parametercreator.xaml"' System.UriKind.Relative); " is 122.
Long Statement,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Start,The length of the statement  "            var action = new Action<VisualTreeItem>(item => this.Dispatcher.BeginInvoke(new Action(() => this.ProviderLocationChanged(item)))); " is 131.
Long Statement,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Start,The length of the statement  "            Invoke(string.Format("write-host 'To get started' try using the ${0} and ${1} variables.'"' ShellConstants.Root' ShellConstants.Selected)); " is 139.
Long Statement,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,FindAndLoadProfile,The length of the statement  "            if (LoadProfile(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\WindowsPowerShell"' ShellConstants.SnoopProfile))) " is 146.
Long Statement,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Invoke,The length of the statement  "                this.outputTextBox.AppendText(string.Format("Oops!  Uncaught exception invoking on the PowerShell runspace: {0}"' ex.Message)); " is 127.
Long Statement,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,OutputErrorRecord,The length of the statement  "            this.outputTextBox.AppendText(string.Format("{0}{1}"' error' error.InvocationInfo != null ? error.InvocationInfo.PositionMessage : string.Empty)); " is 146.
Long Statement,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,OutputErrorRecord,The length of the statement  "            this.outputTextBox.AppendText(string.Format("{1}  + CategoryInfo          : {0}"' error.CategoryInfo' Environment.NewLine)); " is 124.
Long Statement,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,OutputErrorRecord,The length of the statement  "            this.outputTextBox.AppendText(string.Format("{1}  + FullyQualifiedErrorId : {0}"' error.FullyQualifiedErrorId' Environment.NewLine)); " is 133.
Long Statement,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/valueeditors/mousewheelvalueeditor.xaml"' System.UriKind.Relative); " is 129.
Long Statement,Snoop.SampleData,ScreenshotVisualSample,C:\Intermediate\Snoop\Debug\SampleData\ScreenshotVisualSample.g.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Snoop;component/sampledata/screenshotvisualsample.xaml"' System.UriKind.Relative); " is 128.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\Intermediate\Snoop\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,HandleTargetChanged,The conditional expression  "inspector.lastRootTarget == inspector.RootTarget && e.OldValue != null && e.NewValue != null && inspector.checkBoxClearAfterDelve.IsChecked.HasValue && inspector.checkBoxClearAfterDelve.IsChecked.Value"  is complex.
Complex Conditional,Snoop,VisualTreeHelper2,C:\repos\cplotts_snoopwpf\Snoop\VisualTreeHelper2.cs,GetAncestor,The conditional expression  "cur != null && cur != root && (result == null || (predicate != null && !predicate(result' param)))"  is complex.
Complex Conditional,Snoop,VisualTreeHelper2,C:\repos\cplotts_snoopwpf\Snoop\VisualTreeHelper2.cs,DoEnumerateTree,The conditional expression  "(enumerateSelf && enumeratorCallback != null && enumeratorCallback(child' misc) == HitTestResultBehavior.Stop) ||  					(enumerateChildren && !DoEnumerateTree(child' filterCallback' enumeratorCallback' misc))"  is complex.
Complex Conditional,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,comboBoxPresentationTraceLevel_SelectionChanged,The conditional expression  "this.comboBoxPresentationTraceLevel == null || this.comboBoxPresentationTraceLevel.Items == null || this.comboBoxPresentationTraceLevel.Items.Count <= this.comboBoxPresentationTraceLevel.SelectedIndex || this.comboBoxPresentationTraceLevel.SelectedIndex < 0"  is complex.
Empty Catch Block,Snoop,AppChooser,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,OnSourceInitialized,The method has an empty catch block.
Empty Catch Block,Snoop,ProperTreeViewItem,C:\repos\cplotts_snoopwpf\Snoop\ProperTreeView.cs,MeasureOverride,The method has an empty catch block.
Empty Catch Block,Snoop,ProperTreeViewItem,C:\repos\cplotts_snoopwpf\Snoop\ProperTreeView.cs,ArrangeOverride,The method has an empty catch block.
Empty Catch Block,Snoop,PropertyInformation,C:\repos\cplotts_snoopwpf\Snoop\PropertyInformation.cs,PropertyInformation,The method has an empty catch block.
Empty Catch Block,Snoop,StandardValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\StandardValueEditor.cs,OnStringPropertyChanged,The method has an empty catch block.
Empty Catch Block,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,SnoopUI,The method has an empty catch block.
Empty Catch Block,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,OnSourceInitialized,The method has an empty catch block.
Empty Catch Block,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,OnSourceInitialized,The method has an empty catch block.
Magic Number,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterSetList = ((System.Windows.Controls.ListBox)(target));                            #line 73 "EditUserFilters.xaml"              this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler);                            #line default              #line hidden              return;              case 2:                            #line 94 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkHandler);                            #line default              #line hidden              return;              case 3:                            #line 102 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelHandler);                            #line default              #line hidden              return;              case 4:              this.MoveUp = ((System.Windows.Controls.Button)(target));                            #line 118 "EditUserFilters.xaml"              this.MoveUp.Click += new System.Windows.RoutedEventHandler(this.UpHandler);                            #line default              #line hidden              return;              case 5:              this.MoveDown = ((System.Windows.Controls.Button)(target));                            #line 127 "EditUserFilters.xaml"              this.MoveDown.Click += new System.Windows.RoutedEventHandler(this.DownHandler);                            #line default              #line hidden              return;              case 6:                            #line 138 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddHandler);                            #line default              #line hidden              return;              case 7:              this.DeleteItem = ((System.Windows.Controls.Button)(target));                            #line 146 "EditUserFilters.xaml"              this.DeleteItem.Click += new System.Windows.RoutedEventHandler(this.DeleteHandler);                            #line default              #line hidden              return;              }
Magic Number,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterSetList = ((System.Windows.Controls.ListBox)(target));                            #line 73 "EditUserFilters.xaml"              this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler);                            #line default              #line hidden              return;              case 2:                            #line 94 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkHandler);                            #line default              #line hidden              return;              case 3:                            #line 102 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelHandler);                            #line default              #line hidden              return;              case 4:              this.MoveUp = ((System.Windows.Controls.Button)(target));                            #line 118 "EditUserFilters.xaml"              this.MoveUp.Click += new System.Windows.RoutedEventHandler(this.UpHandler);                            #line default              #line hidden              return;              case 5:              this.MoveDown = ((System.Windows.Controls.Button)(target));                            #line 127 "EditUserFilters.xaml"              this.MoveDown.Click += new System.Windows.RoutedEventHandler(this.DownHandler);                            #line default              #line hidden              return;              case 6:                            #line 138 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddHandler);                            #line default              #line hidden              return;              case 7:              this.DeleteItem = ((System.Windows.Controls.Button)(target));                            #line 146 "EditUserFilters.xaml"              this.DeleteItem.Click += new System.Windows.RoutedEventHandler(this.DeleteHandler);                            #line default              #line hidden              return;              }
Magic Number,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterSetList = ((System.Windows.Controls.ListBox)(target));                            #line 73 "EditUserFilters.xaml"              this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler);                            #line default              #line hidden              return;              case 2:                            #line 94 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkHandler);                            #line default              #line hidden              return;              case 3:                            #line 102 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelHandler);                            #line default              #line hidden              return;              case 4:              this.MoveUp = ((System.Windows.Controls.Button)(target));                            #line 118 "EditUserFilters.xaml"              this.MoveUp.Click += new System.Windows.RoutedEventHandler(this.UpHandler);                            #line default              #line hidden              return;              case 5:              this.MoveDown = ((System.Windows.Controls.Button)(target));                            #line 127 "EditUserFilters.xaml"              this.MoveDown.Click += new System.Windows.RoutedEventHandler(this.DownHandler);                            #line default              #line hidden              return;              case 6:                            #line 138 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddHandler);                            #line default              #line hidden              return;              case 7:              this.DeleteItem = ((System.Windows.Controls.Button)(target));                            #line 146 "EditUserFilters.xaml"              this.DeleteItem.Click += new System.Windows.RoutedEventHandler(this.DeleteHandler);                            #line default              #line hidden              return;              }
Magic Number,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterSetList = ((System.Windows.Controls.ListBox)(target));                            #line 73 "EditUserFilters.xaml"              this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler);                            #line default              #line hidden              return;              case 2:                            #line 94 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkHandler);                            #line default              #line hidden              return;              case 3:                            #line 102 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelHandler);                            #line default              #line hidden              return;              case 4:              this.MoveUp = ((System.Windows.Controls.Button)(target));                            #line 118 "EditUserFilters.xaml"              this.MoveUp.Click += new System.Windows.RoutedEventHandler(this.UpHandler);                            #line default              #line hidden              return;              case 5:              this.MoveDown = ((System.Windows.Controls.Button)(target));                            #line 127 "EditUserFilters.xaml"              this.MoveDown.Click += new System.Windows.RoutedEventHandler(this.DownHandler);                            #line default              #line hidden              return;              case 6:                            #line 138 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddHandler);                            #line default              #line hidden              return;              case 7:              this.DeleteItem = ((System.Windows.Controls.Button)(target));                            #line 146 "EditUserFilters.xaml"              this.DeleteItem.Click += new System.Windows.RoutedEventHandler(this.DeleteHandler);                            #line default              #line hidden              return;              }
Magic Number,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterSetList = ((System.Windows.Controls.ListBox)(target));                            #line 73 "EditUserFilters.xaml"              this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler);                            #line default              #line hidden              return;              case 2:                            #line 94 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkHandler);                            #line default              #line hidden              return;              case 3:                            #line 102 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelHandler);                            #line default              #line hidden              return;              case 4:              this.MoveUp = ((System.Windows.Controls.Button)(target));                            #line 118 "EditUserFilters.xaml"              this.MoveUp.Click += new System.Windows.RoutedEventHandler(this.UpHandler);                            #line default              #line hidden              return;              case 5:              this.MoveDown = ((System.Windows.Controls.Button)(target));                            #line 127 "EditUserFilters.xaml"              this.MoveDown.Click += new System.Windows.RoutedEventHandler(this.DownHandler);                            #line default              #line hidden              return;              case 6:                            #line 138 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddHandler);                            #line default              #line hidden              return;              case 7:              this.DeleteItem = ((System.Windows.Controls.Button)(target));                            #line 146 "EditUserFilters.xaml"              this.DeleteItem.Click += new System.Windows.RoutedEventHandler(this.DeleteHandler);                            #line default              #line hidden              return;              }
Magic Number,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterSetList = ((System.Windows.Controls.ListBox)(target));                            #line 73 "EditUserFilters.xaml"              this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler);                            #line default              #line hidden              return;              case 2:                            #line 94 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkHandler);                            #line default              #line hidden              return;              case 3:                            #line 102 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelHandler);                            #line default              #line hidden              return;              case 4:              this.MoveUp = ((System.Windows.Controls.Button)(target));                            #line 118 "EditUserFilters.xaml"              this.MoveUp.Click += new System.Windows.RoutedEventHandler(this.UpHandler);                            #line default              #line hidden              return;              case 5:              this.MoveDown = ((System.Windows.Controls.Button)(target));                            #line 127 "EditUserFilters.xaml"              this.MoveDown.Click += new System.Windows.RoutedEventHandler(this.DownHandler);                            #line default              #line hidden              return;              case 6:                            #line 138 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddHandler);                            #line default              #line hidden              return;              case 7:              this.DeleteItem = ((System.Windows.Controls.Button)(target));                            #line 146 "EditUserFilters.xaml"              this.DeleteItem.Click += new System.Windows.RoutedEventHandler(this.DeleteHandler);                            #line default              #line hidden              return;              }
Magic Number,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._textBlockException = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this._buttonCopyToClipboard = ((System.Windows.Controls.Button)(target));                            #line 69 "ErrorDialog.xaml"              this._buttonCopyToClipboard.Click += new System.Windows.RoutedEventHandler(this._buttonCopyToClipboard_Click);                            #line default              #line hidden              return;              case 3:                            #line 75 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 4:                            #line 81 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 5:              this._checkBoxRemember = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:                            #line 116 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click);                            #line default              #line hidden              return;              case 7:                            #line 131 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._textBlockException = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this._buttonCopyToClipboard = ((System.Windows.Controls.Button)(target));                            #line 69 "ErrorDialog.xaml"              this._buttonCopyToClipboard.Click += new System.Windows.RoutedEventHandler(this._buttonCopyToClipboard_Click);                            #line default              #line hidden              return;              case 3:                            #line 75 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 4:                            #line 81 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 5:              this._checkBoxRemember = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:                            #line 116 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click);                            #line default              #line hidden              return;              case 7:                            #line 131 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._textBlockException = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this._buttonCopyToClipboard = ((System.Windows.Controls.Button)(target));                            #line 69 "ErrorDialog.xaml"              this._buttonCopyToClipboard.Click += new System.Windows.RoutedEventHandler(this._buttonCopyToClipboard_Click);                            #line default              #line hidden              return;              case 3:                            #line 75 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 4:                            #line 81 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 5:              this._checkBoxRemember = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:                            #line 116 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click);                            #line default              #line hidden              return;              case 7:                            #line 131 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._textBlockException = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this._buttonCopyToClipboard = ((System.Windows.Controls.Button)(target));                            #line 69 "ErrorDialog.xaml"              this._buttonCopyToClipboard.Click += new System.Windows.RoutedEventHandler(this._buttonCopyToClipboard_Click);                            #line default              #line hidden              return;              case 3:                            #line 75 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 4:                            #line 81 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 5:              this._checkBoxRemember = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:                            #line 116 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click);                            #line default              #line hidden              return;              case 7:                            #line 131 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._textBlockException = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this._buttonCopyToClipboard = ((System.Windows.Controls.Button)(target));                            #line 69 "ErrorDialog.xaml"              this._buttonCopyToClipboard.Click += new System.Windows.RoutedEventHandler(this._buttonCopyToClipboard_Click);                            #line default              #line hidden              return;              case 3:                            #line 75 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 4:                            #line 81 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 5:              this._checkBoxRemember = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:                            #line 116 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click);                            #line default              #line hidden              return;              case 7:                            #line 131 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._textBlockException = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this._buttonCopyToClipboard = ((System.Windows.Controls.Button)(target));                            #line 69 "ErrorDialog.xaml"              this._buttonCopyToClipboard.Click += new System.Windows.RoutedEventHandler(this._buttonCopyToClipboard_Click);                            #line default              #line hidden              return;              case 3:                            #line 75 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 4:                            #line 81 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 5:              this._checkBoxRemember = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:                            #line 116 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click);                            #line default              #line hidden              return;              case 7:                            #line 131 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop,EventsListener,C:\repos\cplotts_snoopwpf\Snoop\EventsListener.cs,HandleEvent,The following statement contains a magic number: if (EventsListener.current != null && sender == EventsListener.current.visual)  			{  				if (string.IsNullOrEmpty(EventsListener.Filter) || e.RoutedEvent.Name.ToLower().Contains(EventsListener.Filter))  				{  					EventsListener.current.events.Add(new EventInformation(e));    					while (EventsListener.current.events.Count > 100)  						EventsListener.current.events.RemoveAt(0);  				}  			}
Magic Number,Snoop,Injector,C:\repos\cplotts_snoopwpf\Snoop\Injector.cs,Suffix,The following statement contains a magic number: string bitness = IntPtr.Size == 8 ? "64" : "32";
Magic Number,Snoop,Injector,C:\repos\cplotts_snoopwpf\Snoop\Injector.cs,Suffix,The following statement contains a magic number: foreach (var module in window.Modules)  			{  				// a process is valid to snoop if it contains a dependency on PresentationFramework' PresentationCore' or milcore (wpfgfx).  				// this includes the files:  				// PresentationFramework.dll' PresentationFramework.ni.dll  				// PresentationCore.dll' PresentationCore.ni.dll  				// wpfgfx_v0300.dll (WPF 3.0/3.5)  				// wpfgrx_v0400.dll (WPF 4.0)    				// note: sometimes PresentationFramework.dll doesn't show up in the list of modules.  				// so' it makes sense to also check for the unmanaged milcore component (wpfgfx_vxxxx.dll).  				// see for more info: http://snoopwpf.codeplex.com/Thread/View.aspx?ThreadId=236335    				// sometimes the module names aren't always the same case. compare case insensitive.  				// see for more info: http://snoopwpf.codeplex.com/workitem/6090    				if  				(  					module.szModule.StartsWith("PresentationFramework"' StringComparison.OrdinalIgnoreCase) ||  					module.szModule.StartsWith("PresentationCore"' StringComparison.OrdinalIgnoreCase) ||  					module.szModule.StartsWith("wpfgfx"' StringComparison.OrdinalIgnoreCase)  				)  				{  					if (FileVersionInfo.GetVersionInfo(module.szExePath).FileMajorPart > 3)  					{  						clr = "4.0";  					}  				}  				if (module.szModule.Contains("wow64.dll"))  				{  					if (FileVersionInfo.GetVersionInfo(module.szExePath).FileMajorPart > 3)  					{  						bitness = "32";  					}  				}  			}
Magic Number,Snoop,Injector,C:\repos\cplotts_snoopwpf\Snoop\Injector.cs,Suffix,The following statement contains a magic number: foreach (var module in window.Modules)  			{  				// a process is valid to snoop if it contains a dependency on PresentationFramework' PresentationCore' or milcore (wpfgfx).  				// this includes the files:  				// PresentationFramework.dll' PresentationFramework.ni.dll  				// PresentationCore.dll' PresentationCore.ni.dll  				// wpfgfx_v0300.dll (WPF 3.0/3.5)  				// wpfgrx_v0400.dll (WPF 4.0)    				// note: sometimes PresentationFramework.dll doesn't show up in the list of modules.  				// so' it makes sense to also check for the unmanaged milcore component (wpfgfx_vxxxx.dll).  				// see for more info: http://snoopwpf.codeplex.com/Thread/View.aspx?ThreadId=236335    				// sometimes the module names aren't always the same case. compare case insensitive.  				// see for more info: http://snoopwpf.codeplex.com/workitem/6090    				if  				(  					module.szModule.StartsWith("PresentationFramework"' StringComparison.OrdinalIgnoreCase) ||  					module.szModule.StartsWith("PresentationCore"' StringComparison.OrdinalIgnoreCase) ||  					module.szModule.StartsWith("wpfgfx"' StringComparison.OrdinalIgnoreCase)  				)  				{  					if (FileVersionInfo.GetVersionInfo(module.szExePath).FileMajorPart > 3)  					{  						clr = "4.0";  					}  				}  				if (module.szModule.Contains("wow64.dll"))  				{  					if (FileVersionInfo.GetVersionInfo(module.szExePath).FileMajorPart > 3)  					{  						bitness = "32";  					}  				}  			}
Magic Number,Snoop,ZoomerControl,C:\repos\cplotts_snoopwpf\Snoop\ZoomerControl.xaml.cs,DoMouseWheel,The following statement contains a magic number: if (IsValidTarget)  			{  				double zoom = Math.Pow(ZoomFactor' e.Delta / 120.0);  				Point offset = e.GetPosition(this.Viewbox);  				this.Zoom(zoom' offset);  			}
Magic Number,Snoop,ZoomerControl,C:\repos\cplotts_snoopwpf\Snoop\ZoomerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.DocumentRoot = ((System.Windows.Controls.Grid)(target));                            #line 23 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown));                            #line default              #line hidden                            #line 24 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove));                            #line default              #line hidden                            #line 25 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp));                            #line default              #line hidden              return;              case 2:              this.Viewbox = ((System.Windows.Controls.Viewbox)(target));              return;              case 3:              this.ColorSlider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Snoop,ZoomerControl,C:\repos\cplotts_snoopwpf\Snoop\ZoomerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.DocumentRoot = ((System.Windows.Controls.Grid)(target));                            #line 23 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown));                            #line default              #line hidden                            #line 24 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove));                            #line default              #line hidden                            #line 25 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp));                            #line default              #line hidden              return;              case 2:              this.Viewbox = ((System.Windows.Controls.Viewbox)(target));              return;              case 3:              this.ColorSlider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Snoop,AppChooser,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 21 "AppChooser.xaml"              ((Snoop.AppChooser)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleMouseLeftButtonDown);                            #line default              #line hidden              return;              case 2:              this.grid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.windowsComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.minimizeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.closeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Snoop,AppChooser,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 21 "AppChooser.xaml"              ((Snoop.AppChooser)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleMouseLeftButtonDown);                            #line default              #line hidden              return;              case 2:              this.grid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.windowsComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.minimizeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.closeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Snoop,AppChooser,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 21 "AppChooser.xaml"              ((Snoop.AppChooser)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleMouseLeftButtonDown);                            #line default              #line hidden              return;              case 2:              this.grid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.windowsComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.minimizeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.closeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Snoop,AppChooser,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 21 "AppChooser.xaml"              ((Snoop.AppChooser)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleMouseLeftButtonDown);                            #line default              #line hidden              return;              case 2:              this.grid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.windowsComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.minimizeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.closeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Snoop,ProperTreeView,C:\repos\cplotts_snoopwpf\Snoop\ProperTreeView.cs,OnRootLoaded,The following statement contains a magic number: if (itemsPresenter != null)  			{  				int levelLayoutDepth = 2;  				DependencyObject tmp = itemsPresenter;  				while (tmp != root)  				{  					++levelLayoutDepth;  					tmp = VisualTreeHelper.GetParent(tmp);  				}    				int rootLayoutDepth = 0;  				while (tmp != null)  				{  					++rootLayoutDepth;  					tmp = VisualTreeHelper.GetParent(tmp);  				}    				_maxDepth = (240 - rootLayoutDepth) / levelLayoutDepth;  				_rootItem = new WeakReference((VisualTreeItem)root.DataContext);  			}
Magic Number,Snoop,ProperTreeView,C:\repos\cplotts_snoopwpf\Snoop\ProperTreeView.cs,OnRootLoaded,The following statement contains a magic number: if (itemsPresenter != null)  			{  				int levelLayoutDepth = 2;  				DependencyObject tmp = itemsPresenter;  				while (tmp != root)  				{  					++levelLayoutDepth;  					tmp = VisualTreeHelper.GetParent(tmp);  				}    				int rootLayoutDepth = 0;  				while (tmp != null)  				{  					++rootLayoutDepth;  					tmp = VisualTreeHelper.GetParent(tmp);  				}    				_maxDepth = (240 - rootLayoutDepth) / levelLayoutDepth;  				_rootItem = new WeakReference((VisualTreeItem)root.DataContext);  			}
Magic Number,Snoop,ProperTreeViewItem,C:\repos\cplotts_snoopwpf\Snoop\ProperTreeView.cs,GetContainerForItemOverride,The following statement contains a magic number: treeViewItem.Indent = this.Indent + 12;
Magic Number,Snoop,PropertyInformation,C:\repos\cplotts_snoopwpf\Snoop\PropertyInformation.cs,OnValueChanged,The following statement contains a magic number: if (this.isRunning)  			{  				if (this.breakOnChange)  				{  					if (!Debugger.IsAttached)  						Debugger.Launch();  					Debugger.Break();  				}    				this.HasChangedRecently = true;  				if (this.changeTimer == null)  				{  					this.changeTimer = new DispatcherTimer();  					this.changeTimer.Interval = TimeSpan.FromSeconds(1.5);  					this.changeTimer.Tick += this.HandleChangeExpiry;  					this.changeTimer.Start();  				}  				else  				{  					this.changeTimer.Stop();  					this.changeTimer.Start();  				}  			}
Magic Number,Snoop,PropertyInformation,C:\repos\cplotts_snoopwpf\Snoop\PropertyInformation.cs,CollectionIndex,The following statement contains a magic number: if (this.IsCollection())              {                  return int.Parse(this.DisplayName.Substring(5' this.DisplayName.Length - 6));              }
Magic Number,Snoop,PropertyInformation,C:\repos\cplotts_snoopwpf\Snoop\PropertyInformation.cs,CollectionIndex,The following statement contains a magic number: if (this.IsCollection())              {                  return int.Parse(this.DisplayName.Substring(5' this.DisplayName.Length - 6));              }
Magic Number,Snoop,SnoopabilityFeedbackWindow,C:\repos\cplotts_snoopwpf\Snoop\SnoopabilityFeedbackWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.dogNormal = ((System.Windows.Shapes.Path)(target));              return;              case 2:              this.dogAnimated = ((System.Windows.Shapes.Path)(target));              return;              case 3:              this.tbWindowName = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Snoop,SnoopabilityFeedbackWindow,C:\repos\cplotts_snoopwpf\Snoop\SnoopabilityFeedbackWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.dogNormal = ((System.Windows.Shapes.Path)(target));              return;              case 2:              this.dogAnimated = ((System.Windows.Shapes.Path)(target));              return;              case 3:              this.tbWindowName = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,Viewport_MouseMove,The following statement contains a magic number: if (this.isRotating)  			{  				Point point = e.MouseDevice.GetPosition(this.viewport);  				Vector3D newMouseDirection = GetDirectionFromPoint(point' this.viewport.RenderSize);  				Quaternion q = GetRotationFromStartAndEnd(newMouseDirection' this.mouseDirection' 2);  				this.orientation *= q;  				this.mouseDirection = newMouseDirection;    				this.UpdateCamera();  				e.Handled = true;  			}
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,Viewport_MouseWheel,The following statement contains a magic number: this.zoom *= Math.Pow(TrackballBehavior.ZoomFactor' e.Delta / 120.0);
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,GetDirectionFromPoint,The following statement contains a magic number: double rx = size.Width / 2;
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,GetDirectionFromPoint,The following statement contains a magic number: double ry = size.Height / 2;
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,GetDirectionFromPoint,The following statement contains a magic number: if (rSquared <= 1)  			{  				return new Vector3D(dx' dy' -Math.Sqrt(2 - rSquared));  			}  			else  			{  				return new Vector3D(dx' dy' -1 / Math.Sqrt(rSquared));  			}
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,GetRotationFromStartAndEnd,The following statement contains a magic number: if (factor < 1e-6)  			{  				// One or both of the input directions is close to zero in length.  				return Quaternion.Identity;  			}  			else  			{  				// Both input directions have nonzero length.  				Vector3D axis = Vector3D.CrossProduct(start' end);  				double dotProduct = Vector3D.DotProduct(start' end) / factor;  				double angle = Math.Acos(dotProduct < -1 ? -1 : dotProduct > 1 ? 1 : dotProduct);    				if (axis.LengthSquared < 1e-12)  				{  					if (dotProduct > 0)  					{  						// The input directions are parallel' so no rotation is needed.  						return Quaternion.Identity;  					}  					else  					{  						// The directions are antiparallel' and therefore a rotation  						// of 180 degrees about any direction perpendicular to 'start'  						// (or 'end') will rotate 'start' into 'end'.  						//  						// The following construction will guarantee that  						// dot(axis' start) == 0.  						//  						axis = Vector3D.CrossProduct(start' new Vector3D(1' 0' 0));  						if (axis.LengthSquared < 1e-12)  						{  							axis = Vector3D.CrossProduct(start' new Vector3D(0' 1' 0));  						}  					}  				}  				return new Quaternion(axis' angleMultiplier * angle * 180 / Math.PI);  			}
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,GetRotationFromStartAndEnd,The following statement contains a magic number: if (factor < 1e-6)  			{  				// One or both of the input directions is close to zero in length.  				return Quaternion.Identity;  			}  			else  			{  				// Both input directions have nonzero length.  				Vector3D axis = Vector3D.CrossProduct(start' end);  				double dotProduct = Vector3D.DotProduct(start' end) / factor;  				double angle = Math.Acos(dotProduct < -1 ? -1 : dotProduct > 1 ? 1 : dotProduct);    				if (axis.LengthSquared < 1e-12)  				{  					if (dotProduct > 0)  					{  						// The input directions are parallel' so no rotation is needed.  						return Quaternion.Identity;  					}  					else  					{  						// The directions are antiparallel' and therefore a rotation  						// of 180 degrees about any direction perpendicular to 'start'  						// (or 'end') will rotate 'start' into 'end'.  						//  						// The following construction will guarantee that  						// dot(axis' start) == 0.  						//  						axis = Vector3D.CrossProduct(start' new Vector3D(1' 0' 0));  						if (axis.LengthSquared < 1e-12)  						{  							axis = Vector3D.CrossProduct(start' new Vector3D(0' 1' 0));  						}  					}  				}  				return new Quaternion(axis' angleMultiplier * angle * 180 / Math.PI);  			}
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,GetRotationFromStartAndEnd,The following statement contains a magic number: if (factor < 1e-6)  			{  				// One or both of the input directions is close to zero in length.  				return Quaternion.Identity;  			}  			else  			{  				// Both input directions have nonzero length.  				Vector3D axis = Vector3D.CrossProduct(start' end);  				double dotProduct = Vector3D.DotProduct(start' end) / factor;  				double angle = Math.Acos(dotProduct < -1 ? -1 : dotProduct > 1 ? 1 : dotProduct);    				if (axis.LengthSquared < 1e-12)  				{  					if (dotProduct > 0)  					{  						// The input directions are parallel' so no rotation is needed.  						return Quaternion.Identity;  					}  					else  					{  						// The directions are antiparallel' and therefore a rotation  						// of 180 degrees about any direction perpendicular to 'start'  						// (or 'end') will rotate 'start' into 'end'.  						//  						// The following construction will guarantee that  						// dot(axis' start) == 0.  						//  						axis = Vector3D.CrossProduct(start' new Vector3D(1' 0' 0));  						if (axis.LengthSquared < 1e-12)  						{  							axis = Vector3D.CrossProduct(start' new Vector3D(0' 1' 0));  						}  					}  				}  				return new Quaternion(axis' angleMultiplier * angle * 180 / Math.PI);  			}
Magic Number,Snoop,TrackballBehavior,C:\repos\cplotts_snoopwpf\Snoop\TrackballBehavior.cs,GetRotationFromStartAndEnd,The following statement contains a magic number: if (factor < 1e-6)  			{  				// One or both of the input directions is close to zero in length.  				return Quaternion.Identity;  			}  			else  			{  				// Both input directions have nonzero length.  				Vector3D axis = Vector3D.CrossProduct(start' end);  				double dotProduct = Vector3D.DotProduct(start' end) / factor;  				double angle = Math.Acos(dotProduct < -1 ? -1 : dotProduct > 1 ? 1 : dotProduct);    				if (axis.LengthSquared < 1e-12)  				{  					if (dotProduct > 0)  					{  						// The input directions are parallel' so no rotation is needed.  						return Quaternion.Identity;  					}  					else  					{  						// The directions are antiparallel' and therefore a rotation  						// of 180 degrees about any direction perpendicular to 'start'  						// (or 'end') will rotate 'start' into 'end'.  						//  						// The following construction will guarantee that  						// dot(axis' start) == 0.  						//  						axis = Vector3D.CrossProduct(start' new Vector3D(1' 0' 0));  						if (axis.LengthSquared < 1e-12)  						{  							axis = Vector3D.CrossProduct(start' new Vector3D(0' 1' 0));  						}  					}  				}  				return new Quaternion(axis' angleMultiplier * angle * 180 / Math.PI);  			}
Magic Number,Snoop,VisualItem,C:\repos\cplotts_snoopwpf\Snoop\VisualItem.cs,OnSelectionChanged,The following statement contains a magic number: if (adorners != null && visualElement != null)  			{  				if (this.IsSelected && this.adorner == null)  				{  					Border border = new Border();  					border.BorderThickness = new Thickness(4);    					Color borderColor = new Color();  					borderColor.ScA = .3f;  					borderColor.ScR = 1;  					border.BorderBrush = new SolidColorBrush(borderColor);    					border.IsHitTestVisible = false;  					this.adorner = new AdornerContainer(visualElement);  					adorner.Child = border;  					adorners.Add(adorner);  				}  				else if (this.adorner != null)  				{  					adorners.Remove(this.adorner);  					this.adorner.Child = null;  					this.adorner = null;  				}  			}
Magic Number,Snoop,EventsView,C:\repos\cplotts_snoopwpf\Snoop\EventsView.xaml.cs,HandleEventHandled,The following statement contains a magic number: if (visual != null && !visual.IsPartOfSnoopVisualTree())  			{  				Action action =  					() =>  					{  						this.interestingEvents.Add(trackedEvent);    						while (this.interestingEvents.Count > 100)  							this.interestingEvents.RemoveAt(0);    						TreeViewItem tvi = (TreeViewItem)this.EventTree.ItemContainerGenerator.ContainerFromItem(trackedEvent);  						if (tvi != null)  							tvi.BringIntoView();  					};    				if (!this.Dispatcher.CheckAccess())  				{  					this.Dispatcher.BeginInvoke(action);  				}  				else  				{  					action.Invoke();  				}  			}
Magic Number,Snoop,EventsView,C:\repos\cplotts_snoopwpf\Snoop\EventsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Events = ((Snoop.EventsView)(target));              return;              case 2:              this.EventChooser = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.EventTree = ((System.Windows.Controls.TreeView)(target));                            #line 326 "EventsView.xaml"              this.EventTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.EventTree_SelectedItemChanged);                            #line default              #line hidden              return;              }
Magic Number,Snoop,EventsView,C:\repos\cplotts_snoopwpf\Snoop\EventsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Events = ((Snoop.EventsView)(target));              return;              case 2:              this.EventChooser = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.EventTree = ((System.Windows.Controls.TreeView)(target));                            #line 326 "EventsView.xaml"              this.EventTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.EventTree_SelectedItemChanged);                            #line default              #line hidden              return;              }
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,PropertyGrid2,The following statement contains a magic number: filterTimer.Interval = TimeSpan.FromSeconds(0.3);
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,ProcessIncrementalPropertyAdd,The following statement contains a magic number: int numberToAdd = 10;
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,HandleShowBindingErrors,The following statement contains a magic number: window.Width = 400;
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,HandleShowBindingErrors,The following statement contains a magic number: window.Height = 300;
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,GetNewSortDirection,The following statement contains a magic number: return (ListSortDirection)(columnHeader.Tag = (ListSortDirection)(((int)direction + 1) % 2));
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,HandleNameClick,The following statement contains a magic number: if (e.ClickCount == 2)  			{  				PropertyInformation property = (PropertyInformation)((FrameworkElement)sender).DataContext;    				object newTarget = null;    				if (Keyboard.Modifiers == ModifierKeys.Shift)  					newTarget = property.Binding;  				else if (Keyboard.Modifiers == ModifierKeys.Control)  					newTarget = property.BindingExpression;  				else if (Keyboard.Modifiers == ModifierKeys.None)  					newTarget = property.Value;    				if (newTarget != null)  				{  					PropertyInspector.DelveCommand.Execute(property' this);  				}  			}
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PropertyGrid = ((Snoop.PropertyGrid2)(target));              return;              case 2:              this.ListView = ((System.Windows.Controls.ListView)(target));              return;              }
Magic Number,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 272 "PropertyGrid2.xaml"              ((System.Windows.Controls.TextBlock)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleNameClick);                            #line default              #line hidden              break;              }
Magic Number,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,PopTarget,The following statement contains a magic number: if (this.inspectStack.Count > 1)              {                  this.Target = this.inspectStack[this.inspectStack.Count - 2];                  this.inspectStack.RemoveAt(this.inspectStack.Count - 2);                  this.inspectStack.RemoveAt(this.inspectStack.Count - 2);                    if (this._delvePathList.Count > 0)                  {                      this._delvePathList.RemoveAt(this._delvePathList.Count - 1);                      this.OnPropertyChanged("DelvePath");                  }              }
Magic Number,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,PopTarget,The following statement contains a magic number: if (this.inspectStack.Count > 1)              {                  this.Target = this.inspectStack[this.inspectStack.Count - 2];                  this.inspectStack.RemoveAt(this.inspectStack.Count - 2);                  this.inspectStack.RemoveAt(this.inspectStack.Count - 2);                    if (this._delvePathList.Count > 0)                  {                      this._delvePathList.RemoveAt(this._delvePathList.Count - 1);                      this.OnPropertyChanged("DelvePath");                  }              }
Magic Number,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,PopTarget,The following statement contains a magic number: if (this.inspectStack.Count > 1)              {                  this.Target = this.inspectStack[this.inspectStack.Count - 2];                  this.inspectStack.RemoveAt(this.inspectStack.Count - 2);                  this.inspectStack.RemoveAt(this.inspectStack.Count - 2);                    if (this._delvePathList.Count > 0)                  {                      this._delvePathList.RemoveAt(this._delvePathList.Count - 1);                      this.OnPropertyChanged("DelvePath");                  }              }
Magic Number,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 2:              this.PropertiesFilter = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.checkBoxClearAfterDelve = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FilterSetCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.PropertyGrid = ((Snoop.PropertyGrid2)(target));              return;              }
Magic Number,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 2:              this.PropertiesFilter = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.checkBoxClearAfterDelve = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FilterSetCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.PropertyGrid = ((Snoop.PropertyGrid2)(target));              return;              }
Magic Number,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 2:              this.PropertiesFilter = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.checkBoxClearAfterDelve = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FilterSetCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.PropertyGrid = ((Snoop.PropertyGrid2)(target));              return;              }
Magic Number,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 2:              this.PropertiesFilter = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.checkBoxClearAfterDelve = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FilterSetCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.PropertyGrid = ((Snoop.PropertyGrid2)(target));              return;              }
Magic Number,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,SnoopUI,The following statement contains a magic number: filterTimer.Interval = TimeSpan.FromSeconds(0.3);
Magic Number,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.Tree = ((Snoop.ProperTreeView)(target));              return;              case 3:              this.GridSplitter = ((System.Windows.Controls.GridSplitter)(target));              return;              case 4:              this.PropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 5:              this.DataContextPropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 6:              this.PowerShellTab = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.PreviewArea = ((Snoop.Previewer)(target));              return;              }
Magic Number,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.Tree = ((Snoop.ProperTreeView)(target));              return;              case 3:              this.GridSplitter = ((System.Windows.Controls.GridSplitter)(target));              return;              case 4:              this.PropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 5:              this.DataContextPropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 6:              this.PowerShellTab = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.PreviewArea = ((Snoop.Previewer)(target));              return;              }
Magic Number,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.Tree = ((Snoop.ProperTreeView)(target));              return;              case 3:              this.GridSplitter = ((System.Windows.Controls.GridSplitter)(target));              return;              case 4:              this.PropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 5:              this.DataContextPropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 6:              this.PowerShellTab = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.PreviewArea = ((Snoop.Previewer)(target));              return;              }
Magic Number,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.Tree = ((Snoop.ProperTreeView)(target));              return;              case 3:              this.GridSplitter = ((System.Windows.Controls.GridSplitter)(target));              return;              case 4:              this.PropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 5:              this.DataContextPropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 6:              this.PowerShellTab = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.PreviewArea = ((Snoop.Previewer)(target));              return;              }
Magic Number,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.Tree = ((Snoop.ProperTreeView)(target));              return;              case 3:              this.GridSplitter = ((System.Windows.Controls.GridSplitter)(target));              return;              case 4:              this.PropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 5:              this.DataContextPropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 6:              this.PowerShellTab = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.PreviewArea = ((Snoop.Previewer)(target));              return;              }
Magic Number,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.Tree = ((Snoop.ProperTreeView)(target));              return;              case 3:              this.GridSplitter = ((System.Windows.Controls.GridSplitter)(target));              return;              case 4:              this.PropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 5:              this.DataContextPropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 6:              this.PowerShellTab = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.PreviewArea = ((Snoop.Previewer)(target));              return;              }
Magic Number,Snoop,VisualTreeItem,C:\repos\cplotts_snoopwpf\Snoop\VisualTreeItem.cs,ToString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(50);
Magic Number,Snoop,WindowFinder,C:\repos\cplotts_snoopwpf\Snoop\WindowFinder.xaml.cs,UpdateFeedbackWindowPosition,The following statement contains a magic number: if (_feedbackWindow != null)  			{  				var mouse = NativeMethods.GetCursorPosition();  				_feedbackWindow.Left = mouse.X - 34;//.Left;  				_feedbackWindow.Top = mouse.Y + 10; // windowRect.Top;  			}
Magic Number,Snoop,WindowFinder,C:\repos\cplotts_snoopwpf\Snoop\WindowFinder.xaml.cs,UpdateFeedbackWindowPosition,The following statement contains a magic number: if (_feedbackWindow != null)  			{  				var mouse = NativeMethods.GetCursorPosition();  				_feedbackWindow.Left = mouse.X - 34;//.Left;  				_feedbackWindow.Top = mouse.Y + 10; // windowRect.Top;  			}
Magic Number,Snoop,WindowFinder,C:\repos\cplotts_snoopwpf\Snoop\WindowFinder.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnStartWindowsSearch = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.snoopCrosshairsImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,HandlePanLeft,The following statement contains a magic number: this.translation.X -= 5;
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,HandlePanRight,The following statement contains a magic number: this.translation.X += 5;
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,HandlePanUp,The following statement contains a magic number: this.translation.Y -= 5;
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,HandlePanDown,The following statement contains a magic number: this.translation.Y += 5;
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Content_MouseWheel,The following statement contains a magic number: double zoom = Math.Pow(Zoomer.ZoomFactor' e.Delta / 120.0);
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,ZScaleSlider_ValueChanged,The following statement contains a magic number: if (this.visualTree3DView != null)  			{  				this.visualTree3DView.ZScale = Math.Pow(10' e.NewValue);  			}
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.DocumentRoot = ((System.Windows.Controls.Grid)(target));                            #line 22 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove));                            #line default              #line hidden                            #line 23 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown));                            #line default              #line hidden                            #line 24 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp));                            #line default              #line hidden                            #line 25 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseWheelEvent' new System.Windows.Input.MouseWheelEventHandler(this.Content_MouseWheel));                            #line default              #line hidden              return;              case 2:              this.Viewbox = ((System.Windows.Controls.Viewbox)(target));              return;              case 3:              this.ColorSlider = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.ZScaleSlider = ((System.Windows.Controls.Slider)(target));                            #line 125 "Zoomer.xaml"              this.ZScaleSlider.ValueChanged += new System.Windows.RoutedPropertyChangedEventHandler<double>(this.ZScaleSlider_ValueChanged);                            #line default              #line hidden              return;              }
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.DocumentRoot = ((System.Windows.Controls.Grid)(target));                            #line 22 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove));                            #line default              #line hidden                            #line 23 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown));                            #line default              #line hidden                            #line 24 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp));                            #line default              #line hidden                            #line 25 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseWheelEvent' new System.Windows.Input.MouseWheelEventHandler(this.Content_MouseWheel));                            #line default              #line hidden              return;              case 2:              this.Viewbox = ((System.Windows.Controls.Viewbox)(target));              return;              case 3:              this.ColorSlider = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.ZScaleSlider = ((System.Windows.Controls.Slider)(target));                            #line 125 "Zoomer.xaml"              this.ZScaleSlider.ValueChanged += new System.Windows.RoutedPropertyChangedEventHandler<double>(this.ZScaleSlider_ValueChanged);                            #line default              #line hidden              return;              }
Magic Number,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.DocumentRoot = ((System.Windows.Controls.Grid)(target));                            #line 22 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove));                            #line default              #line hidden                            #line 23 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown));                            #line default              #line hidden                            #line 24 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp));                            #line default              #line hidden                            #line 25 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseWheelEvent' new System.Windows.Input.MouseWheelEventHandler(this.Content_MouseWheel));                            #line default              #line hidden              return;              case 2:              this.Viewbox = ((System.Windows.Controls.Viewbox)(target));              return;              case 3:              this.ColorSlider = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.ZScaleSlider = ((System.Windows.Controls.Slider)(target));                            #line 125 "Zoomer.xaml"              this.ZScaleSlider.ValueChanged += new System.Windows.RoutedPropertyChangedEventHandler<double>(this.ZScaleSlider_ValueChanged);                            #line default              #line hidden              return;              }
Magic Number,Snoop,Previewer,C:\repos\cplotts_snoopwpf\Snoop\Previewer.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Zoomer = ((Snoop.ZoomerControl)(target));              return;              case 2:              this.Image = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: double fieldOfView = 45;
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: Point3D lookAtPoint = new Point3D(bounds.X + bounds.SizeX / 2' bounds.Y + bounds.SizeY / 2' bounds.Z + bounds.SizeZ / 2);
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: Point3D lookAtPoint = new Point3D(bounds.X + bounds.SizeX / 2' bounds.Y + bounds.SizeY / 2' bounds.Z + bounds.SizeZ / 2);
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: Point3D lookAtPoint = new Point3D(bounds.X + bounds.SizeX / 2' bounds.Y + bounds.SizeY / 2' bounds.Z + bounds.SizeZ / 2);
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: double cameraDistance = 0.5 * bounds.SizeX / Math.Tan(0.5 * fieldOfView * Math.PI / 180);
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: double cameraDistance = 0.5 * bounds.SizeX / Math.Tan(0.5 * fieldOfView * Math.PI / 180);
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: double cameraDistance = 0.5 * bounds.SizeX / Math.Tan(0.5 * fieldOfView * Math.PI / 180);
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: this.Width = 500;
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,VisualTree3DView,The following statement contains a magic number: this.Height = 500;
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,ConvertVisualToModel3D,The following statement contains a magic number: if (!bounds.IsEmpty && bounds.Width > 0 && bounds.Height > 0)  			{  				MeshGeometry3D mesh = new MeshGeometry3D();  				mesh.Positions.Add(new Point3D(bounds.Left' bounds.Top' z));  				mesh.Positions.Add(new Point3D(bounds.Right' bounds.Top' z));  				mesh.Positions.Add(new Point3D(bounds.Right' bounds.Bottom' z));  				mesh.Positions.Add(new Point3D(bounds.Left' bounds.Bottom' z));  				mesh.TextureCoordinates.Add(new Point(0' 0));  				mesh.TextureCoordinates.Add(new Point(1' 0));  				mesh.TextureCoordinates.Add(new Point(1' 1));  				mesh.TextureCoordinates.Add(new Point(0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.TriangleIndices = new Int32Collection(new int[] { 0' 1' 2' 2' 3' 0 });  				mesh.Freeze();    				Brush brush = this.MakeBrushFromVisual(visual' bounds);  				DiffuseMaterial material = new DiffuseMaterial(brush);  				material.Freeze();    				model = new GeometryModel3D(mesh' material);  				((GeometryModel3D)model).BackMaterial = material;    				z -= 1;  			}
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,ConvertVisualToModel3D,The following statement contains a magic number: if (!bounds.IsEmpty && bounds.Width > 0 && bounds.Height > 0)  			{  				MeshGeometry3D mesh = new MeshGeometry3D();  				mesh.Positions.Add(new Point3D(bounds.Left' bounds.Top' z));  				mesh.Positions.Add(new Point3D(bounds.Right' bounds.Top' z));  				mesh.Positions.Add(new Point3D(bounds.Right' bounds.Bottom' z));  				mesh.Positions.Add(new Point3D(bounds.Left' bounds.Bottom' z));  				mesh.TextureCoordinates.Add(new Point(0' 0));  				mesh.TextureCoordinates.Add(new Point(1' 0));  				mesh.TextureCoordinates.Add(new Point(1' 1));  				mesh.TextureCoordinates.Add(new Point(0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.TriangleIndices = new Int32Collection(new int[] { 0' 1' 2' 2' 3' 0 });  				mesh.Freeze();    				Brush brush = this.MakeBrushFromVisual(visual' bounds);  				DiffuseMaterial material = new DiffuseMaterial(brush);  				material.Freeze();    				model = new GeometryModel3D(mesh' material);  				((GeometryModel3D)model).BackMaterial = material;    				z -= 1;  			}
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,ConvertVisualToModel3D,The following statement contains a magic number: if (!bounds.IsEmpty && bounds.Width > 0 && bounds.Height > 0)  			{  				MeshGeometry3D mesh = new MeshGeometry3D();  				mesh.Positions.Add(new Point3D(bounds.Left' bounds.Top' z));  				mesh.Positions.Add(new Point3D(bounds.Right' bounds.Top' z));  				mesh.Positions.Add(new Point3D(bounds.Right' bounds.Bottom' z));  				mesh.Positions.Add(new Point3D(bounds.Left' bounds.Bottom' z));  				mesh.TextureCoordinates.Add(new Point(0' 0));  				mesh.TextureCoordinates.Add(new Point(1' 0));  				mesh.TextureCoordinates.Add(new Point(1' 1));  				mesh.TextureCoordinates.Add(new Point(0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.Normals.Add(new Vector3D(0' 0' 1));  				mesh.TriangleIndices = new Int32Collection(new int[] { 0' 1' 2' 2' 3' 0 });  				mesh.Freeze();    				Brush brush = this.MakeBrushFromVisual(visual' bounds);  				DiffuseMaterial material = new DiffuseMaterial(brush);  				material.Freeze();    				model = new GeometryModel3D(mesh' material);  				((GeometryModel3D)model).BackMaterial = material;    				z -= 1;  			}
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,MakeBrushFromVisual,The following statement contains a magic number: if (viewport == null)  			{  				Drawing drawing = VisualTreeHelper.GetDrawing(visual);  				if (this.drawOutlines)  				{  					bounds.Inflate(VisualTree3DView.OutlinePen.Thickness / 2' VisualTree3DView.OutlinePen.Thickness / 2);  				}    				Matrix offsetMatrix = new Matrix(1' 0' 0' 1' -bounds.Left' -bounds.Top);  				MatrixTransform offsetMatrixTransform = new MatrixTransform(offsetMatrix);  				offsetMatrixTransform.Freeze();    				DrawingVisual drawingVisual = new DrawingVisual();  				DrawingContext drawingContext = drawingVisual.RenderOpen();  				drawingContext.PushTransform(offsetMatrixTransform);  				if (this.drawOutlines)  				{  					drawingContext.DrawRectangle(null' VisualTree3DView.OutlinePen' bounds);  				}  				drawingContext.DrawDrawing(drawing);  				drawingContext.Pop();  				drawingContext.Close();    				visual = drawingVisual;  			}
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,MakeBrushFromVisual,The following statement contains a magic number: if (viewport == null)  			{  				Drawing drawing = VisualTreeHelper.GetDrawing(visual);  				if (this.drawOutlines)  				{  					bounds.Inflate(VisualTree3DView.OutlinePen.Thickness / 2' VisualTree3DView.OutlinePen.Thickness / 2);  				}    				Matrix offsetMatrix = new Matrix(1' 0' 0' 1' -bounds.Left' -bounds.Top);  				MatrixTransform offsetMatrixTransform = new MatrixTransform(offsetMatrix);  				offsetMatrixTransform.Freeze();    				DrawingVisual drawingVisual = new DrawingVisual();  				DrawingContext drawingContext = drawingVisual.RenderOpen();  				drawingContext.PushTransform(offsetMatrixTransform);  				if (this.drawOutlines)  				{  					drawingContext.DrawRectangle(null' VisualTree3DView.OutlinePen' bounds);  				}  				drawingContext.DrawDrawing(drawing);  				drawingContext.Pop();  				drawingContext.Close();    				visual = drawingVisual;  			}
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,MakeBrushFromVisual,The following statement contains a magic number: RenderTargetBitmap renderTargetBitmap = new RenderTargetBitmap((int)Math.Ceiling(bounds.Width)' (int)Math.Ceiling(bounds.Height)' 96' 96' PixelFormats.Default);
Magic Number,Snoop,VisualTree3DView,C:\repos\cplotts_snoopwpf\Snoop\VisualTree3DView.cs,MakeBrushFromVisual,The following statement contains a magic number: RenderTargetBitmap renderTargetBitmap = new RenderTargetBitmap((int)Math.Ceiling(bounds.Width)' (int)Math.Ceiling(bounds.Height)' 96' 96' PixelFormats.Default);
Magic Number,Snoop.Converters,ArgbToPartsConverter,C:\repos\cplotts_snoopwpf\Snoop\Converters\ArgbToPartsConverter.cs,Convert,The following statement contains a magic number: if (val.Length < 9)  			{  				return new ArgumentException("Expected converter parameter to be a string in the form of #FF102030");  			}
Magic Number,Snoop.Converters,ArgbToPartsConverter,C:\repos\cplotts_snoopwpf\Snoop\Converters\ArgbToPartsConverter.cs,Convert,The following statement contains a magic number: string ret = val.Substring((part*2) + 1' 2);
Magic Number,Snoop.Converters,ArgbToPartsConverter,C:\repos\cplotts_snoopwpf\Snoop\Converters\ArgbToPartsConverter.cs,Convert,The following statement contains a magic number: string ret = val.Substring((part*2) + 1' 2);
Magic Number,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listBoxFilters = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.menuItemGroupFilters = ((System.Windows.Controls.MenuItem)(target));                            #line 24 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemGroupFilters.Click += new System.Windows.RoutedEventHandler(this.menuItemGroupFilters_Click);                            #line default              #line hidden              return;              case 3:              this.menuItemClearFilterGroups = ((System.Windows.Controls.MenuItem)(target));                            #line 29 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemClearFilterGroups.Click += new System.Windows.RoutedEventHandler(this.menuItemClearFilterGroups_Click);                            #line default              #line hidden              return;              case 4:              this.menuItemSetInverse = ((System.Windows.Controls.MenuItem)(target));                            #line 34 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemSetInverse.Click += new System.Windows.RoutedEventHandler(this.menuItemSetInverse_Click);                            #line default              #line hidden              return;              case 7:              this.buttonAddFilter = ((System.Windows.Controls.Button)(target));                            #line 102 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonAddFilter.Click += new System.Windows.RoutedEventHandler(this.buttonAddFilter_Click);                            #line default              #line hidden              return;              case 8:              this.buttonSetFilter = ((System.Windows.Controls.Button)(target));                            #line 106 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonSetFilter.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilter_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listBoxFilters = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.menuItemGroupFilters = ((System.Windows.Controls.MenuItem)(target));                            #line 24 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemGroupFilters.Click += new System.Windows.RoutedEventHandler(this.menuItemGroupFilters_Click);                            #line default              #line hidden              return;              case 3:              this.menuItemClearFilterGroups = ((System.Windows.Controls.MenuItem)(target));                            #line 29 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemClearFilterGroups.Click += new System.Windows.RoutedEventHandler(this.menuItemClearFilterGroups_Click);                            #line default              #line hidden              return;              case 4:              this.menuItemSetInverse = ((System.Windows.Controls.MenuItem)(target));                            #line 34 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemSetInverse.Click += new System.Windows.RoutedEventHandler(this.menuItemSetInverse_Click);                            #line default              #line hidden              return;              case 7:              this.buttonAddFilter = ((System.Windows.Controls.Button)(target));                            #line 102 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonAddFilter.Click += new System.Windows.RoutedEventHandler(this.buttonAddFilter_Click);                            #line default              #line hidden              return;              case 8:              this.buttonSetFilter = ((System.Windows.Controls.Button)(target));                            #line 106 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonSetFilter.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilter_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listBoxFilters = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.menuItemGroupFilters = ((System.Windows.Controls.MenuItem)(target));                            #line 24 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemGroupFilters.Click += new System.Windows.RoutedEventHandler(this.menuItemGroupFilters_Click);                            #line default              #line hidden              return;              case 3:              this.menuItemClearFilterGroups = ((System.Windows.Controls.MenuItem)(target));                            #line 29 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemClearFilterGroups.Click += new System.Windows.RoutedEventHandler(this.menuItemClearFilterGroups_Click);                            #line default              #line hidden              return;              case 4:              this.menuItemSetInverse = ((System.Windows.Controls.MenuItem)(target));                            #line 34 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemSetInverse.Click += new System.Windows.RoutedEventHandler(this.menuItemSetInverse_Click);                            #line default              #line hidden              return;              case 7:              this.buttonAddFilter = ((System.Windows.Controls.Button)(target));                            #line 102 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonAddFilter.Click += new System.Windows.RoutedEventHandler(this.buttonAddFilter_Click);                            #line default              #line hidden              return;              case 8:              this.buttonSetFilter = ((System.Windows.Controls.Button)(target));                            #line 106 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonSetFilter.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilter_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listBoxFilters = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.menuItemGroupFilters = ((System.Windows.Controls.MenuItem)(target));                            #line 24 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemGroupFilters.Click += new System.Windows.RoutedEventHandler(this.menuItemGroupFilters_Click);                            #line default              #line hidden              return;              case 3:              this.menuItemClearFilterGroups = ((System.Windows.Controls.MenuItem)(target));                            #line 29 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemClearFilterGroups.Click += new System.Windows.RoutedEventHandler(this.menuItemClearFilterGroups_Click);                            #line default              #line hidden              return;              case 4:              this.menuItemSetInverse = ((System.Windows.Controls.MenuItem)(target));                            #line 34 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemSetInverse.Click += new System.Windows.RoutedEventHandler(this.menuItemSetInverse_Click);                            #line default              #line hidden              return;              case 7:              this.buttonAddFilter = ((System.Windows.Controls.Button)(target));                            #line 102 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonAddFilter.Click += new System.Windows.RoutedEventHandler(this.buttonAddFilter_Click);                            #line default              #line hidden              return;              case 8:              this.buttonSetFilter = ((System.Windows.Controls.Button)(target));                            #line 106 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonSetFilter.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilter_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listBoxFilters = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.menuItemGroupFilters = ((System.Windows.Controls.MenuItem)(target));                            #line 24 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemGroupFilters.Click += new System.Windows.RoutedEventHandler(this.menuItemGroupFilters_Click);                            #line default              #line hidden              return;              case 3:              this.menuItemClearFilterGroups = ((System.Windows.Controls.MenuItem)(target));                            #line 29 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemClearFilterGroups.Click += new System.Windows.RoutedEventHandler(this.menuItemClearFilterGroups_Click);                            #line default              #line hidden              return;              case 4:              this.menuItemSetInverse = ((System.Windows.Controls.MenuItem)(target));                            #line 34 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemSetInverse.Click += new System.Windows.RoutedEventHandler(this.menuItemSetInverse_Click);                            #line default              #line hidden              return;              case 7:              this.buttonAddFilter = ((System.Windows.Controls.Button)(target));                            #line 102 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonAddFilter.Click += new System.Windows.RoutedEventHandler(this.buttonAddFilter_Click);                            #line default              #line hidden              return;              case 8:              this.buttonSetFilter = ((System.Windows.Controls.Button)(target));                            #line 106 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonSetFilter.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilter_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 5:                            #line 80 "DebugListenerTab\SetFiltersWindow.xaml"              ((System.Windows.Controls.TextBox)(target)).Loaded += new System.Windows.RoutedEventHandler(this.textBlockFilter_Loaded);                            #line default              #line hidden              break;              case 6:                            #line 81 "DebugListenerTab\SetFiltersWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.buttonRemoveFilter_Click);                            #line default              #line hidden              break;              }
Magic Number,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 5:                            #line 80 "DebugListenerTab\SetFiltersWindow.xaml"              ((System.Windows.Controls.TextBox)(target)).Loaded += new System.Windows.RoutedEventHandler(this.textBlockFilter_Loaded);                            #line default              #line hidden              break;              case 6:                            #line 81 "DebugListenerTab\SetFiltersWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.buttonRemoveFilter_Click);                            #line default              #line hidden              break;              }
Magic Number,Snoop.Infrastructure,ObservableCollectionExtensions,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ObservableCollectionExtensions.cs,BinarySearch,The following statement contains a magic number: int middle = (startIndex + endIndex) / 2;
Magic Number,Snoop.Infrastructure,ObservableCollectionExtensions,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ObservableCollectionExtensions.cs,BinarySearch,The following statement contains a magic number: int middle = (startIndex + endIndex) / 2;
Magic Number,Snoop.Infrastructure,ObservableCollectionExtensions,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ObservableCollectionExtensions.cs,Insert,The following statement contains a magic number: int middle = (startIndex + endIndex) / 2;
Magic Number,Snoop.Infrastructure,ObservableCollectionExtensions,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ObservableCollectionExtensions.cs,Insert,The following statement contains a magic number: int middle = (startIndex + endIndex) / 2;
Magic Number,Snoop.Infrastructure,ZoomerUtilities,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ZoomerUtilities.cs,CreateIfPossible,The following statement contains a magic number: if (item is FrameworkElement)              {                  FrameworkElement uiElement = (FrameworkElement)item;                  return CreateRectangleForFrameworkElement(uiElement);              }              else if (item is Visual)              {                  Visual visual = (Visual)item;                  return CreateRectangleForVisual(visual);              }              else if (item is ResourceDictionary)              {                  StackPanel stackPanel = new StackPanel();                    foreach (object value in ((ResourceDictionary)item).Values)                  {                      UIElement element = CreateIfPossible(value);                      if (element != null)                          stackPanel.Children.Add(element);                  }                  return stackPanel;              }              else if (item is Brush)              {                  Rectangle rect = new Rectangle();                  rect.Width = 10;                  rect.Height = 10;                  rect.Fill = (Brush)item;                  return rect;              }              else if (item is ImageSource)              {                  Image image = new Image();                  image.Source = (ImageSource)item;                  return image;              }
Magic Number,Snoop.Infrastructure,ZoomerUtilities,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ZoomerUtilities.cs,CreateIfPossible,The following statement contains a magic number: if (item is FrameworkElement)              {                  FrameworkElement uiElement = (FrameworkElement)item;                  return CreateRectangleForFrameworkElement(uiElement);              }              else if (item is Visual)              {                  Visual visual = (Visual)item;                  return CreateRectangleForVisual(visual);              }              else if (item is ResourceDictionary)              {                  StackPanel stackPanel = new StackPanel();                    foreach (object value in ((ResourceDictionary)item).Values)                  {                      UIElement element = CreateIfPossible(value);                      if (element != null)                          stackPanel.Children.Add(element);                  }                  return stackPanel;              }              else if (item is Brush)              {                  Rectangle rect = new Rectangle();                  rect.Width = 10;                  rect.Height = 10;                  rect.Fill = (Brush)item;                  return rect;              }              else if (item is ImageSource)              {                  Image image = new Image();                  image.Source = (ImageSource)item;                  return image;              }
Magic Number,Snoop.Infrastructure,ZoomerUtilities,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ZoomerUtilities.cs,CreateRectangleForVisual,The following statement contains a magic number: rect.Width = 50;
Magic Number,Snoop.Infrastructure,ZoomerUtilities,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ZoomerUtilities.cs,CreateRectangleForVisual,The following statement contains a magic number: rect.Height = 50;
Magic Number,Snoop.Infrastructure,ZoomerUtilities,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ZoomerUtilities.cs,CreateRectangleForFrameworkElement,The following statement contains a magic number: if (uiElement.ActualHeight == 0 && uiElement.ActualWidth == 0)//sometimes the actual size might be 0 despite there being a rendered visual with a size greater than 0. This happens often on a custom panel (http://snoopwpf.codeplex.com/workitem/7217). Having a fixed size visual brush remedies the problem.              {                  rect.Width = 50;                  rect.Height = 50;              }              else              {                  rect.Width = uiElement.ActualWidth;                  rect.Height = uiElement.ActualHeight;              }
Magic Number,Snoop.Infrastructure,ZoomerUtilities,C:\repos\cplotts_snoopwpf\Snoop\Infrastructure\ZoomerUtilities.cs,CreateRectangleForFrameworkElement,The following statement contains a magic number: if (uiElement.ActualHeight == 0 && uiElement.ActualWidth == 0)//sometimes the actual size might be 0 despite there being a rendered visual with a size greater than 0. This happens often on a custom panel (http://snoopwpf.codeplex.com/workitem/7217). Having a fixed size visual brush remedies the problem.              {                  rect.Width = 50;                  rect.Height = 50;              }              else              {                  rect.Width = uiElement.ActualWidth;                  rect.Height = uiElement.ActualHeight;              }
Magic Number,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Magic Number,Snoop.MethodsTab,ParameterCreator,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\ParameterCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextBlockDescription = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 3:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 34 "MethodsTab\ParameterCreator.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.OKClick);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 35 "MethodsTab\ParameterCreator.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.CancelClick);                            #line default              #line hidden              return;              }
Magic Number,Snoop.MethodsTab,ParameterCreator,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\ParameterCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextBlockDescription = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 3:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 34 "MethodsTab\ParameterCreator.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.OKClick);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 35 "MethodsTab\ParameterCreator.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.CancelClick);                            #line default              #line hidden              return;              }
Magic Number,Snoop.MethodsTab,ParameterCreator,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\ParameterCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextBlockDescription = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 3:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 34 "MethodsTab\ParameterCreator.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.OKClick);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 35 "MethodsTab\ParameterCreator.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.CancelClick);                            #line default              #line hidden              return;              }
Magic Number,Snoop.MethodsTab,TypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\TypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 16 "MethodsTab\TypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 3:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 17 "MethodsTab\TypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop.MethodsTab,TypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\TypeSelector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 16 "MethodsTab\TypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 3:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 17 "MethodsTab\TypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              }
Magic Number,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Invoke,The following statement contains a magic number: try              {                  using (var pipe = this.runspace.CreatePipeline(script' addToHistory))                  {                      var cmd = new Command("Out-String");                      cmd.Parameters.Add("Width"' Math.Max(2' (int)(this.ActualWidth * 0.7)));                      pipe.Commands.Add(cmd);                        foreach (var item in pipe.Invoke())                      {                          this.outputTextBox.AppendText(item.ToString());                      }                        foreach (PSObject item in pipe.Error.ReadToEnd())                      {                          var error = (ErrorRecord)item.BaseObject;                          this.OutputErrorRecord(error);                      }                  }              }              catch (RuntimeException ex)              {                  this.OutputErrorRecord(ex.ErrorRecord);              }              catch (Exception ex)              {                  this.outputTextBox.AppendText(string.Format("Oops!  Uncaught exception invoking on the PowerShell runspace: {0}"' ex.Message));              }
Magic Number,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Invoke,The following statement contains a magic number: try              {                  using (var pipe = this.runspace.CreatePipeline(script' addToHistory))                  {                      var cmd = new Command("Out-String");                      cmd.Parameters.Add("Width"' Math.Max(2' (int)(this.ActualWidth * 0.7)));                      pipe.Commands.Add(cmd);                        foreach (var item in pipe.Invoke())                      {                          this.outputTextBox.AppendText(item.ToString());                      }                        foreach (PSObject item in pipe.Error.ReadToEnd())                      {                          var error = (ErrorRecord)item.BaseObject;                          this.OutputErrorRecord(error);                      }                  }              }              catch (RuntimeException ex)              {                  this.OutputErrorRecord(ex.ErrorRecord);              }              catch (Exception ex)              {                  this.outputTextBox.AppendText(string.Format("Oops!  Uncaught exception invoking on the PowerShell runspace: {0}"' ex.Message));              }
Magic Number,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.autoExpandCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.outputTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.commandTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.autoExpandCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.outputTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.commandTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeIntValue,The following statement contains a magic number: if (largeIncrement)  			{  				change *= 10;  			}
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeDoubleValue,The following statement contains a magic number: if (largeIncrement)  			{  				change *= 10;  			}
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeDoubleValue,The following statement contains a magic number: if (tinyIncrement)  			{  				change /= 10;  			}
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeThicknessValuePart,The following statement contains a magic number: if (largeIncrement)  			{  				change *= 20;  			}
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeThicknessValuePart,The following statement contains a magic number: string newValue = String.Format(@"{0}'{1}'{2}'{3}"' fields[0]' fields[1]' fields[2]' fields[3]);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeThicknessValuePart,The following statement contains a magic number: string newValue = String.Format(@"{0}'{1}'{2}'{3}"' fields[0]' fields[1]' fields[2]' fields[3]);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: if (largeIncrement)  			{  				change *= 16;  			}
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: ret = Math.Min(255' Math.Max(0' ret + change));
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: string[] fields = new string[4];
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[0] = currentValue.Substring(1' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[1] = currentValue.Substring(3' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[1] = currentValue.Substring(3' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[2] = currentValue.Substring(5' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[2] = currentValue.Substring(5' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[2] = currentValue.Substring(5' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[3] = currentValue.Substring(7' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[3] = currentValue.Substring(7' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: fields[3] = currentValue.Substring(7' 2);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: string newValue = String.Format(@"#{0}{1}{2}{3}"' fields[0]' fields[1]' fields[2]' fields[3]);
Magic Number,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,ChangeBrushValuePart,The following statement contains a magic number: string newValue = String.Format(@"#{0}{1}{2}{3}"' fields[0]' fields[1]' fields[2]' fields[3]);
Missing Default,Snoop,EditUserFilters,C:\repos\cplotts_snoopwpf\Snoop\EditUserFilters.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.filterSetList = ((System.Windows.Controls.ListBox)(target));                            #line 73 "EditUserFilters.xaml"              this.filterSetList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SelectionChangedHandler);                            #line default              #line hidden              return;              case 2:                            #line 94 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkHandler);                            #line default              #line hidden              return;              case 3:                            #line 102 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelHandler);                            #line default              #line hidden              return;              case 4:              this.MoveUp = ((System.Windows.Controls.Button)(target));                            #line 118 "EditUserFilters.xaml"              this.MoveUp.Click += new System.Windows.RoutedEventHandler(this.UpHandler);                            #line default              #line hidden              return;              case 5:              this.MoveDown = ((System.Windows.Controls.Button)(target));                            #line 127 "EditUserFilters.xaml"              this.MoveDown.Click += new System.Windows.RoutedEventHandler(this.DownHandler);                            #line default              #line hidden              return;              case 6:                            #line 138 "EditUserFilters.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddHandler);                            #line default              #line hidden              return;              case 7:              this.DeleteItem = ((System.Windows.Controls.Button)(target));                            #line 146 "EditUserFilters.xaml"              this.DeleteItem.Click += new System.Windows.RoutedEventHandler(this.DeleteHandler);                            #line default              #line hidden              return;              }
Missing Default,Snoop,ErrorDialog,C:\repos\cplotts_snoopwpf\Snoop\ErrorDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this._textBlockException = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this._buttonCopyToClipboard = ((System.Windows.Controls.Button)(target));                            #line 69 "ErrorDialog.xaml"              this._buttonCopyToClipboard.Click += new System.Windows.RoutedEventHandler(this._buttonCopyToClipboard_Click);                            #line default              #line hidden              return;              case 3:                            #line 75 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 4:                            #line 81 "ErrorDialog.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Hyperlink_RequestNavigate);                            #line default              #line hidden              return;              case 5:              this._checkBoxRemember = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:                            #line 116 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseDoNotMarkHandled_Click);                            #line default              #line hidden              return;              case 7:                            #line 131 "ErrorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseAndMarkHandled_Click);                            #line default              #line hidden              return;              }
Missing Default,Snoop,ZoomerControl,C:\repos\cplotts_snoopwpf\Snoop\ZoomerControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.DocumentRoot = ((System.Windows.Controls.Grid)(target));                            #line 23 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown));                            #line default              #line hidden                            #line 24 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove));                            #line default              #line hidden                            #line 25 "ZoomerControl.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp));                            #line default              #line hidden              return;              case 2:              this.Viewbox = ((System.Windows.Controls.Viewbox)(target));              return;              case 3:              this.ColorSlider = ((System.Windows.Controls.Slider)(target));              return;              }
Missing Default,Snoop,AppChooser,C:\repos\cplotts_snoopwpf\Snoop\AppChooser.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 21 "AppChooser.xaml"              ((Snoop.AppChooser)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleMouseLeftButtonDown);                            #line default              #line hidden              return;              case 2:              this.grid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.windowsComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.minimizeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.closeButton = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,Snoop,ScreenshotDialog,C:\repos\cplotts_snoopwpf\Snoop\ScreenshotDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.dpiBox = ((System.Windows.Controls.ComboBox)(target));              return;              }
Missing Default,Snoop,SnoopabilityFeedbackWindow,C:\repos\cplotts_snoopwpf\Snoop\SnoopabilityFeedbackWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.dogNormal = ((System.Windows.Shapes.Path)(target));              return;              case 2:              this.dogAnimated = ((System.Windows.Shapes.Path)(target));              return;              case 3:              this.tbWindowName = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,Snoop,EventsView,C:\repos\cplotts_snoopwpf\Snoop\EventsView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Events = ((Snoop.EventsView)(target));              return;              case 2:              this.EventChooser = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.EventTree = ((System.Windows.Controls.TreeView)(target));                            #line 326 "EventsView.xaml"              this.EventTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.EventTree_SelectedItemChanged);                            #line default              #line hidden              return;              }
Missing Default,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,HandleSort,The following switch statement is missing a default case: switch (columnHeader.Text)  			{  				case "Name":  					this.Sort(PropertyGrid2.CompareNames' direction);  					break;  				case "Value":  					this.Sort(PropertyGrid2.CompareValues' direction);  					break;  				case "Value Source":  					this.Sort(PropertyGrid2.CompareValueSources' direction);  					break;  			}
Missing Default,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.PropertyGrid = ((Snoop.PropertyGrid2)(target));              return;              case 2:              this.ListView = ((System.Windows.Controls.ListView)(target));              return;              }
Missing Default,Snoop,PropertyGrid2,C:\repos\cplotts_snoopwpf\Snoop\PropertyGrid2.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 3:                            #line 272 "PropertyGrid2.xaml"              ((System.Windows.Controls.TextBlock)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.HandleNameClick);                            #line default              #line hidden              break;              }
Missing Default,Snoop,PropertyInspector,C:\repos\cplotts_snoopwpf\Snoop\PropertyInspector.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 2:              this.PropertiesFilter = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.checkBoxClearAfterDelve = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FilterSetCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.PropertyGrid = ((Snoop.PropertyGrid2)(target));              return;              }
Missing Default,Snoop,SnoopUI,C:\repos\cplotts_snoopwpf\Snoop\SnoopUI.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.filterComboBox = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.Tree = ((Snoop.ProperTreeView)(target));              return;              case 3:              this.GridSplitter = ((System.Windows.Controls.GridSplitter)(target));              return;              case 4:              this.PropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 5:              this.DataContextPropertyGrid = ((Snoop.PropertyInspector)(target));              return;              case 6:              this.PowerShellTab = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.PreviewArea = ((Snoop.Previewer)(target));              return;              }
Missing Default,Snoop,WindowFinder,C:\repos\cplotts_snoopwpf\Snoop\WindowFinder.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.btnStartWindowsSearch = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.snoopCrosshairsImage = ((System.Windows.Controls.Image)(target));              return;              }
Missing Default,Snoop,Zoomer,C:\repos\cplotts_snoopwpf\Snoop\Zoomer.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.DocumentRoot = ((System.Windows.Controls.Grid)(target));                            #line 22 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseMoveEvent' new System.Windows.Input.MouseEventHandler(this.Content_MouseMove));                            #line default              #line hidden                            #line 23 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseDownEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseDown));                            #line default              #line hidden                            #line 24 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseUpEvent' new System.Windows.Input.MouseButtonEventHandler(this.Content_MouseUp));                            #line default              #line hidden                            #line 25 "Zoomer.xaml"              this.DocumentRoot.AddHandler(System.Windows.Input.Mouse.MouseWheelEvent' new System.Windows.Input.MouseWheelEventHandler(this.Content_MouseWheel));                            #line default              #line hidden              return;              case 2:              this.Viewbox = ((System.Windows.Controls.Viewbox)(target));              return;              case 3:              this.ColorSlider = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.ZScaleSlider = ((System.Windows.Controls.Slider)(target));                            #line 125 "Zoomer.xaml"              this.ZScaleSlider.ValueChanged += new System.Windows.RoutedPropertyChangedEventHandler<double>(this.ZScaleSlider_ValueChanged);                            #line default              #line hidden              return;              }
Missing Default,Snoop,Previewer,C:\repos\cplotts_snoopwpf\Snoop\Previewer.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Zoomer = ((Snoop.ZoomerControl)(target));              return;              case 2:              this.Image = ((System.Windows.Controls.Image)(target));              return;              }
Missing Default,Snoop.DebugListenerTab,DebugListenerControl,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\DebugListenerControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.gridTopRow = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.checkBoxStartListening = ((System.Windows.Controls.CheckBox)(target));                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Checked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Checked);                            #line default              #line hidden                            #line 25 "DebugListenerTab\DebugListenerControl.xaml"              this.checkBoxStartListening.Unchecked += new System.Windows.RoutedEventHandler(this.checkBoxStartListening_Unchecked);                            #line default              #line hidden              return;              case 3:              this.comboBoxPresentationTraceLevel = ((System.Windows.Controls.ComboBox)(target));                            #line 31 "DebugListenerTab\DebugListenerControl.xaml"              this.comboBoxPresentationTraceLevel.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxPresentationTraceLevel_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.buttonClear = ((System.Windows.Controls.Button)(target));                            #line 61 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClear.Click += new System.Windows.RoutedEventHandler(this.buttonClear_Click);                            #line default              #line hidden              return;              case 5:              this.buttonClearFilters = ((System.Windows.Controls.Button)(target));                            #line 64 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonClearFilters.Click += new System.Windows.RoutedEventHandler(this.buttonClearFilters_Click);                            #line default              #line hidden              return;              case 6:              this.buttonSetFilters = ((System.Windows.Controls.Button)(target));                            #line 67 "DebugListenerTab\DebugListenerControl.xaml"              this.buttonSetFilters.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilters_Click);                            #line default              #line hidden              return;              case 7:              this.textBlockStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 8:              this.textBoxDebugContent = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.listBoxFilters = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.menuItemGroupFilters = ((System.Windows.Controls.MenuItem)(target));                            #line 24 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemGroupFilters.Click += new System.Windows.RoutedEventHandler(this.menuItemGroupFilters_Click);                            #line default              #line hidden              return;              case 3:              this.menuItemClearFilterGroups = ((System.Windows.Controls.MenuItem)(target));                            #line 29 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemClearFilterGroups.Click += new System.Windows.RoutedEventHandler(this.menuItemClearFilterGroups_Click);                            #line default              #line hidden              return;              case 4:              this.menuItemSetInverse = ((System.Windows.Controls.MenuItem)(target));                            #line 34 "DebugListenerTab\SetFiltersWindow.xaml"              this.menuItemSetInverse.Click += new System.Windows.RoutedEventHandler(this.menuItemSetInverse_Click);                            #line default              #line hidden              return;              case 7:              this.buttonAddFilter = ((System.Windows.Controls.Button)(target));                            #line 102 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonAddFilter.Click += new System.Windows.RoutedEventHandler(this.buttonAddFilter_Click);                            #line default              #line hidden              return;              case 8:              this.buttonSetFilter = ((System.Windows.Controls.Button)(target));                            #line 106 "DebugListenerTab\SetFiltersWindow.xaml"              this.buttonSetFilter.Click += new System.Windows.RoutedEventHandler(this.buttonSetFilter_Click);                            #line default              #line hidden              return;              }
Missing Default,Snoop.DebugListenerTab,SetFiltersWindow,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SetFiltersWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 5:                            #line 80 "DebugListenerTab\SetFiltersWindow.xaml"              ((System.Windows.Controls.TextBox)(target)).Loaded += new System.Windows.RoutedEventHandler(this.textBlockFilter_Loaded);                            #line default              #line hidden              break;              case 6:                            #line 81 "DebugListenerTab\SetFiltersWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.buttonRemoveFilter_Click);                            #line default              #line hidden              break;              }
Missing Default,Snoop.DebugListenerTab,SnoopSingleFilter,C:\repos\cplotts_snoopwpf\Snoop\DebugListenerTab\SnoopSingleFilter.cs,FilterMatches,The following switch statement is missing a default case: switch (FilterType)  			{  				case FilterType.Contains:  					filterMatches = debugLine.Contains(text);  					break;  				case FilterType.StartsWith:  					filterMatches = debugLine.StartsWith(text);  					break;  				case FilterType.EndsWith:  					filterMatches = debugLine.EndsWith(text);  					break;  				case FilterType.RegularExpression:  					filterMatches = TryMatch(debugLine' text);  					break;  			}
Missing Default,Snoop.MethodsTab,FullTypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\FullTypeSelector.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.comboBoxAssemblies = ((System.Windows.Controls.ComboBox)(target));                            #line 17 "MethodsTab\FullTypeSelector.xaml"              this.comboBoxAssemblies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxAssemblies_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 21 "MethodsTab\FullTypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 6:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 22 "MethodsTab\FullTypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              case 7:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.textBoxConvertFrom = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,Snoop.MethodsTab,MethodsControl,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\MethodsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 153 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeTarget_Click);                            #line default              #line hidden              return;              case 2:              this._checkBoxUseDataContext = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.comboBoxMethods = ((System.Windows.Controls.ComboBox)(target));              return;              case 4:              this.parametersContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 5:              this.itemsControlParameters = ((System.Windows.Controls.ItemsControl)(target));              return;              case 6:                            #line 223 "MethodsTab\MethodsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.InvokeMethodClick);                            #line default              #line hidden              return;              case 7:              this.resultStringContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.textBlockResultLabel = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlockResult = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.resultProperties = ((System.Windows.Controls.Grid)(target));              return;              case 11:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              }
Missing Default,Snoop.MethodsTab,ParameterCreator,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\ParameterCreator.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.TextBlockDescription = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.propertyInspector = ((Snoop.PropertyInspector)(target));              return;              case 3:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 34 "MethodsTab\ParameterCreator.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.OKClick);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 35 "MethodsTab\ParameterCreator.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.CancelClick);                            #line default              #line hidden              return;              }
Missing Default,Snoop.MethodsTab,TypeSelector,C:\repos\cplotts_snoopwpf\Snoop\MethodsTab\TypeSelector.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.comboBoxTypes = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.buttonCreateInstance = ((System.Windows.Controls.Button)(target));                            #line 16 "MethodsTab\TypeSelector.xaml"              this.buttonCreateInstance.Click += new System.Windows.RoutedEventHandler(this.buttonCreateInstance_Click);                            #line default              #line hidden              return;              case 3:              this.buttonCancel = ((System.Windows.Controls.Button)(target));                            #line 17 "MethodsTab\TypeSelector.xaml"              this.buttonCancel.Click += new System.Windows.RoutedEventHandler(this.buttonCancel_Click);                            #line default              #line hidden              return;              }
Missing Default,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Start,The following switch statement is missing a default case: switch (e.PropertyName)                  {                      case "CurrentSelection":                          SetVariable(ShellConstants.Selected' ui.CurrentSelection);                          break;                      case "Root":                          SetVariable(ShellConstants.Root' ui.Root);                          break;                  }
Missing Default,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,OnCommandTextBoxPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Up:                      SetCommandTextToHistory(++this.historyIndex);                      break;                  case Key.Down:                      if (this.historyIndex - 1 <= 0)                      {                          this.commandTextBox.Clear();                      }                      else                      {                          SetCommandTextToHistory(--this.historyIndex);                      }                      break;                  case Key.Return:                      this.outputTextBox.AppendText(Environment.NewLine);                      this.outputTextBox.AppendText(this.commandTextBox.Text);                      this.outputTextBox.AppendText(Environment.NewLine);                        Invoke(this.commandTextBox.Text' true);                      this.commandTextBox.Clear();                      break;              }
Missing Default,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,OnPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.F5:                      Invoke(string.Format("if (${0}) {{ . ${0} }}"' ShellConstants.Profile));                      break;                  case Key.F12:                      this.outputTextBox.Clear();                      break;              }
Missing Default,Snoop.Shell,EmbeddedShellView,C:\repos\cplotts_snoopwpf\Snoop\Shell\EmbeddedShellView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.autoExpandCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.outputTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.commandTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,Snoop.ValueEditors,MouseWheelValueEditor,C:\repos\cplotts_snoopwpf\Snoop\ValueEditors\MouseWheelValueEditor.xaml.cs,MouseWheelHandler,The following switch statement is missing a default case: switch (PropertyInfo.Property.PropertyType.Name)  				{  					case "Double":  						PropertyInfo.StringValue = ChangeDoubleValue(tb.Text' increment' largeIncrement' tinyIncrement);  						break;    					case "Int32":  					case "Int16":  						PropertyInfo.StringValue = ChangeIntValue(tb.Text' increment' largeIncrement);  						break;    					case "Boolean":  						PropertyInfo.StringValue = ChangeBooleanValue(tb.Text);  						break;    					case "Visibility":  						PropertyInfo.StringValue = ChangeEnumValue<Visibility>(tb.Text' increment);  						break;    					case "HorizontalAlignment":  						PropertyInfo.StringValue = ChangeEnumValue<HorizontalAlignment>(tb.Text' increment);  						break;  					case "VerticalAlignment":  						PropertyInfo.StringValue = ChangeEnumValue<VerticalAlignment>(tb.Text' increment);  						break;    					case "Thickness":  						ChangeThicknessValuePart(fieldNum' tb.Text' increment' largeIncrement);  						break;    					case "Brush":  						ChangeBrushValuePart(fieldNum' tb.Text' increment' largeIncrement);  						break;    					case "Color":  						ChangeBrushValuePart(fieldNum' tb.Text' increment' largeIncrement);  						break;  				}
