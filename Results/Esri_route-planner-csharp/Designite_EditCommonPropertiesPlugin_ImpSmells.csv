Implementation smell,Namespace,Class,File,Method,Description
Long Method,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The method has 189 lines of code.
Long Method,EditCommonPropertiesPlugin,EditCommonDefaultRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDefaultRoutePropertiesCmd.cs,makeEdit,The method has 179 lines of code.
Long Method,EditCommonPropertiesPlugin,EditCommonVehiclePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonVehiclePropertiesCmd.cs,makeEdit,The method has 106 lines of code.
Long Method,EditCommonPropertiesPlugin,EditCommonOrderPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonOrderPropertiesCmd.cs,makeEdit,The method has 206 lines of code.
Complex Method,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,Cyclomatic complexity of the method is 60
Complex Method,EditCommonPropertiesPlugin,EditCommonDefaultRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDefaultRoutePropertiesCmd.cs,makeEdit,Cyclomatic complexity of the method is 54
Complex Method,EditCommonPropertiesPlugin,EditCommonDriverPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDriverPropertiesCmd.cs,makeEdit,Cyclomatic complexity of the method is 21
Complex Method,EditCommonPropertiesPlugin,EditCommonVehiclePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonVehiclePropertiesCmd.cs,makeEdit,Cyclomatic complexity of the method is 24
Complex Method,EditCommonPropertiesPlugin,EditCommonOrderPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonOrderPropertiesCmd.cs,makeEdit,Cyclomatic complexity of the method is 53
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,Execute,The length of the statement  "            if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Route" == selector.SelectedItems[0].GetType().ToString()) " is 130.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,Current_Navigated,The length of the statement  "                ((INotifyCollectionChanged)selector.SelectedItems).CollectionChanged += new NotifyCollectionChangedEventHandler(selected_CollectionChanged); " is 140.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0)) " is 135.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0)) " is 140.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0)) " is 135.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0)) " is 140.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0)) " is 135.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0)) " is 140.
Long Statement,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,selected_CollectionChanged,The length of the statement  "                if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Route" == selector.SelectedItems[0].GetType().ToString()) " is 130.
Long Statement,EditCommonPropertiesPlugin,EditCommonDefaultRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDefaultRoutePropertiesCmd.cs,Execute,The length of the statement  "            if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Route" == selector.SelectedItems[0].GetType().ToString()) " is 130.
Long Statement,EditCommonPropertiesPlugin,EditCommonDefaultRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDefaultRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0)) " is 135.
Long Statement,EditCommonPropertiesPlugin,EditCommonDefaultRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDefaultRoutePropertiesCmd.cs,makeEdit,The length of the statement  "                            else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0)) " is 140.
Long Statement,EditCommonPropertiesPlugin,EditCommonDriverPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDriverPropertiesCmd.cs,Execute,The length of the statement  "            if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Driver" == selector.SelectedItems[0].GetType().ToString()) " is 131.
Long Statement,EditCommonPropertiesPlugin,EditCommonStopPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonStopPropertiesCmd.cs,Execute,The length of the statement  "            if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Stop" == selector.SelectedItems[0].GetType().ToString()) " is 129.
Long Statement,EditCommonPropertiesPlugin,EditCommonStopPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonStopPropertiesCmd.cs,Current_Navigated,The length of the statement  "                ((INotifyCollectionChanged)selector.SelectedItems).CollectionChanged += new NotifyCollectionChangedEventHandler(selected_CollectionChanged); " is 140.
Long Statement,EditCommonPropertiesPlugin,EditCommonStopPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonStopPropertiesCmd.cs,selected_CollectionChanged,The length of the statement  "                if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Stop" == selector.SelectedItems[0].GetType().ToString()) " is 129.
Long Statement,EditCommonPropertiesPlugin,EditCommonVehiclePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonVehiclePropertiesCmd.cs,Execute,The length of the statement  "            if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Vehicle" == selector.SelectedItems[0].GetType().ToString()) " is 132.
Long Statement,EditCommonPropertiesPlugin,EditCommonOrderPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonOrderPropertiesCmd.cs,Execute,The length of the statement  "            if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Order" == selector.SelectedItems[0].GetType().ToString()) " is 130.
Long Statement,EditCommonPropertiesPlugin,EditCommonOrderPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonOrderPropertiesCmd.cs,Current_Navigated,The length of the statement  "                ((INotifyCollectionChanged)selector.SelectedItems).CollectionChanged += new NotifyCollectionChangedEventHandler(selected_CollectionChanged); " is 140.
Long Statement,EditCommonPropertiesPlugin,EditCommonOrderPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonOrderPropertiesCmd.cs,selected_CollectionChanged,The length of the statement  "                if (selector.SelectedItems.Count > 0 && "ESRI.ArcLogistics.DomainObjects.Order" == selector.SelectedItems[0].GetType().ToString()) " is 130.
Long Statement,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,makeEdit,The length of the statement  "                case "EditCommonPropertiesPlugin.EditCommonOrderPropertiesCmd": EditCommonOrderPropertiesCmd.makeEdit(field' value); break; " is 123.
Long Statement,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,makeEdit,The length of the statement  "                case "EditCommonPropertiesPlugin.EditCommonVehiclePropertiesCmd": EditCommonVehiclePropertiesCmd.makeEdit(field' value); break; " is 127.
Long Statement,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,makeEdit,The length of the statement  "                case "EditCommonPropertiesPlugin.EditCommonDriverPropertiesCmd": EditCommonDriverPropertiesCmd.makeEdit(field' value); break; " is 125.
Long Statement,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,makeEdit,The length of the statement  "                case "EditCommonPropertiesPlugin.EditCommonDefaultRoutePropertiesCmd": EditCommonDefaultRoutePropertiesCmd.makeEdit(field' value); break; " is 137.
Long Statement,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,makeEdit,The length of the statement  "                case "EditCommonPropertiesPlugin.EditCommonDailyRoutePropertiesCmd": EditCommonDailyRoutePropertiesCmd.makeEdit(field' value); break; " is 133.
Complex Conditional,EditCommonPropertiesPlugin,EditCommonStopPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonStopPropertiesCmd.cs,selected_CollectionChanged,The conditional expression  "(isLocked && !isUnlocked) || (!isLocked && isUnlocked)"  is complex.
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(116' 112);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(116' 112);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(75' 23);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(75' 23);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.TabIndex = 4;
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(197' 112);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(197' 112);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 5;
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(99' 60);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(99' 60);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(173' 20);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(173' 20);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 2;
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(56' 63);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(56' 63);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cbox.Location = new System.Drawing.Point(99' 13);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cbox.Location = new System.Drawing.Point(99' 13);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cbox.Size = new System.Drawing.Size(173' 21);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.cbox.Size = new System.Drawing.Size(173' 21);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 16);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 16);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(81' 13);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(81' 13);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 5;
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Location = new System.Drawing.Point(18' 112);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Location = new System.Drawing.Point(18' 112);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size(75' 23);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size(75' 23);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.TabIndex = 3;
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(287' 155);
Magic Number,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(287' 155);
Missing Default,EditCommonPropertiesPlugin,EditCommonDailyRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDailyRoutePropertiesCmd.cs,makeEdit,The following switch statement is missing a default case: switch (field)                      {                          #region Case Statements                            case "RoutesName": routeRef.Name = value; break;                            case "Visible":                              if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0))                                  routeRef.IsVisible = true;                              else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0))                                  routeRef.IsVisible = false;                              break;                            case "Locked":                              if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0))                                  routeRef.IsLocked = true;                              else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0))                                  routeRef.IsLocked = false;                              break;                            case "Vehicle":                              foreach (Vehicle v in App.Current.Project.Vehicles)                              {                                  if (v.Name == value)                                      routeRef.Vehicle = v;                              }                              break;                            case "Driver":                              foreach (Driver d in App.Current.Project.Drivers)                              {                                  if (d.Name == value)                                      routeRef.Driver = d;                              }                              break;                              case "StartTimeWindowStart":                              if (DateTime.TryParse(value' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      routeRef.StartTimeWindow.From = TWdateTime.TimeOfDay;                                      routeRef.StartTimeWindow.IsWideOpen = false;                                  }                              }                              break;                            case "StartTimeWindowFinish":                              if (DateTime.TryParse(value' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      routeRef.StartTimeWindow.To = TWdateTime.TimeOfDay;                                      routeRef.StartTimeWindow.IsWideOpen = false;                                  }                              }                              break;                            case "StartLocation":                              foreach (Location l in App.Current.Project.Locations)                              {                                  if (l.Name == value)                                      routeRef.StartLocation = l;                              }                              break;                            case "TimeAtStart":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.TimeAtStart = tempD;                              break;                            case "EndLocation":                              foreach (Location l in App.Current.Project.Locations)                              {                                  if (l.Name == value)                                      routeRef.EndLocation = l;                              }                              break;                            case "TimeAtEnd":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.TimeAtEnd = tempD;                              break;                            case "RenewalLocation":                              if (value != "")                              {                                  string[] stringSeparators2 = new string[] { ";"' "'" };                                  string[] locations2 = value.Split(stringSeparators2' StringSplitOptions.None);                                  foreach (string s in locations2)                                  {                                      bool locationFound = false;                                      bool addToRoute = true;                                      Location l = new Location();                                      l.Name = s;                                        foreach (Location L in App.Current.Project.Locations)                                      {                                          if (String.Compare(L.Name' l.Name' true) == 0)                                          {                                              L.CopyTo(l);                                              locationFound = true;                                              break;                                          }                                      }                                      foreach (Location L in routeRef.RenewalLocations)                                      {                                          if (String.Compare(L.Name' l.Name' true) == 0)                                          {                                              addToRoute = false;                                              break;                                          }                                      }                                        if (locationFound && addToRoute)                                          routeRef.RenewalLocations.Add(l);                                  }                              }                              break;                            case "TimeAtRenewal":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.TimeAtRenewal = tempD;                              break;                            case "MaxOrders":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxOrders = (int)tempD;                              break;                            case "MaxTravelDistance":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxTravelDistance = tempD;                              break;                            case "MaxTravelDuration":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxTravelDuration = tempD;                              break;                            case "MaxTotalDuration":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxTotalDuration = tempD;                              break;                            case "Zones":                              if (value != "")                              {                                  string[] stringSeparators = new string[] { ";"' "'" };                                  string[] zones = value.Split(stringSeparators' StringSplitOptions.None);                                  foreach (string s in zones)                                  {                                      bool zoneFound = false;                                      bool addToRoute = true;                                      Zone z = new Zone();                                      z.Name = s;                                        foreach (Zone Z in App.Current.Project.Zones)                                      {                                          if (String.Compare(Z.Name' z.Name' true) == 0)                                          {                                              Z.CopyTo(z);                                              zoneFound = true;                                              break;                                          }                                      }                                      foreach (Zone Z in routeRef.Zones)                                      {                                          if (String.Compare(Z.Name' z.Name' true) == 0)                                          {                                              addToRoute = false;                                              break;                                          }                                      }                                        if (zoneFound && addToRoute)                                          routeRef.Zones.Add(z);                                  }                              }                              break;                            case "HardZones":                              if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0))                                  routeRef.HardZones = true;                              else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0))                                  routeRef.HardZones = false;                              break;                            case "Comment": routeRef.Comment = value; break;                            #endregion                        }
Missing Default,EditCommonPropertiesPlugin,EditCommonDefaultRoutePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDefaultRoutePropertiesCmd.cs,makeEdit,The following switch statement is missing a default case: switch (field)                      {                          #region Case Statements                            case "RouteName": routeRef.Name = value; break;                                                    case "Vehicle":                              foreach (Vehicle v in App.Current.Project.Vehicles)                              {                                  if (v.Name == value)                                      routeRef.Vehicle = v;                              }                              break;                            case "Driver":                              foreach (Driver d in App.Current.Project.Drivers)                              {                                  if (d.Name == value)                                      routeRef.Driver = d;                              }                              break;                              case"StartTimeWindowStart":                              if (DateTime.TryParse(value' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      routeRef.StartTimeWindow.From = TWdateTime.TimeOfDay;                                      routeRef.StartTimeWindow.IsWideOpen = false;                                  }                              }                              break;                                                    case "StartTimeWindowFinish":                              if (DateTime.TryParse(value' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      routeRef.StartTimeWindow.To = TWdateTime.TimeOfDay;                                      routeRef.StartTimeWindow.IsWideOpen = false;                                  }                              }                              break;                            case "StartLocation":                              foreach (Location l in App.Current.Project.Locations)                              {                                  if (l.Name == value)                                      routeRef.StartLocation = l;                              }                              break;                            case "TimeAtStart":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.TimeAtStart = tempD;                              break;                            case "EndLocation":                              foreach (Location l in App.Current.Project.Locations)                              {                                  if (l.Name == value)                                      routeRef.EndLocation = l;                              }                              break;                            case "TimeAtEnd":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.TimeAtEnd = tempD;                              break;                            case "RenewalLocation":                              if (value != "")                              {                                  string[] stringSeparators2 = new string[] { ";"' "'" };                                  string[] locations2 = value.Split(stringSeparators2' StringSplitOptions.None);                                  foreach (string s in locations2)                                  {                                      bool locationFound = false;                                      bool addToRoute = true;                                      Location l = new Location();                                      l.Name = s;                                        foreach (Location L in App.Current.Project.Locations)                                      {                                          if (String.Compare(L.Name' l.Name' true) == 0)                                          {                                              L.CopyTo(l);                                              locationFound = true;                                              break;                                          }                                      }                                      foreach (Location L in routeRef.RenewalLocations)                                      {                                          if (String.Compare(L.Name' l.Name' true) == 0)                                          {                                              addToRoute = false;                                              break;                                          }                                      }                                        if(locationFound && addToRoute)                                          routeRef.RenewalLocations.Add(l);                                  }                              }                              break;                           case "TimeAtRenewal":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.TimeAtRenewal = tempD;                              break;                            case "MaxOrders":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxOrders =(int) tempD;                              break;                            case "MaxTravelDistance":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxTravelDistance = tempD;                              break;                            case "MaxTravelDuration":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxTravelDuration = tempD;                              break;                            case "MaxTotalDuration":                              if (Double.TryParse(value.ToString()' out tempD))                                  routeRef.MaxTotalDuration = tempD;                              break;                            case "Zones":                              if (value != "")                              {                                  string[] stringSeparators = new string[] { ";"' "'" };                                  string[] zones = value.Split(stringSeparators' StringSplitOptions.None);                                  foreach (string s in zones)                                  {                                      bool zoneFound = false;                                      bool addToRoute = true;                                      Zone z = new Zone();                                      z.Name = s;                                        foreach (Zone Z in App.Current.Project.Zones)                                      {                                          if (String.Compare(Z.Name' z.Name' true) == 0)                                          {                                              Z.CopyTo(z);                                              zoneFound = true;                                              break;                                          }                                      }                                      foreach (Zone Z in routeRef.Zones)                                      {                                          if (String.Compare(Z.Name' z.Name' true) == 0)                                          {                                              addToRoute = false;                                              break;                                          }                                      }                                        if (zoneFound && addToRoute)                                          routeRef.Zones.Add(z);                                  }                              }                              break;                            case "HardZones":                              if ((String.Compare(value' "Yes"' true) == 0) || (String.Compare(value' "Y"' true) == 0) || (String.Compare(value' "True"' true) == 0))                                  routeRef.HardZones = true;                              else if ((String.Compare(value' "NO"' true) == 0) || (String.Compare(value' "N"' true) == 0) || (String.Compare(value' "False"' true) == 0))                                  routeRef.HardZones = false;                              break;                            case "Comment":routeRef.Comment = value; break;                            #endregion                        }
Missing Default,EditCommonPropertiesPlugin,EditCommonDriverPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonDriverPropertiesCmd.cs,makeEdit,The following switch statement is missing a default case: switch (field)                      {                          #region Case Statements                            case "DriverName": driverRef.Name = value; break;                          case "FixedCost":                              if (Double.TryParse(value.ToString()' out tempD))                                  driverRef.FixedCost = tempD;                              break;                            case "PerHourSalary":                              if (Double.TryParse(value.ToString()' out tempD))                                  driverRef.PerHourSalary = tempD;                              break;                            case "PerHourOTSalary":                              if (Double.TryParse(value.ToString()' out tempD))                                  driverRef.PerHourOTSalary = tempD;                              break;                            case "Specialties":                              if (value != "")                              {                                  string[] stringSeparators2 = new string[] { ";"' "'" };                                  string[] specialties2 = value.Split(stringSeparators2' StringSplitOptions.None);                                  foreach (string s in specialties2)                                  {                                      DriverSpecialty ds = new DriverSpecialty();                                      ds.Name = s;                                        foreach (DriverSpecialty D in App.Current.Project.DriverSpecialties)                                      {                                          if (String.Compare(D.Name' ds.Name' true) == 0)                                          {                                              D.CopyTo(ds);                                              App.Current.Project.DriverSpecialties.Remove(D);                                              break;                                          }                                      }                                      foreach (DriverSpecialty D in driverRef.Specialties)                                      {                                          if (String.Compare(D.Name' ds.Name' true) == 0)                                          {                                              D.CopyTo(ds);                                              driverRef.Specialties.Remove(D);                                              break;                                          }                                      }                                        App.Current.Project.DriverSpecialties.Add(ds);                                      driverRef.Specialties.Add(ds);                                  }                              }                              break;                            case "MobileDevice":                              foreach (MobileDevice m in App.Current.Project.MobileDevices)                              {                                  if (m.Name == value)                                      driverRef.MobileDevice = m;                              }                              break;                            case "TimeBeforeOT":                              if (Double.TryParse(value.ToString()' out tempD))                                  driverRef.TimeBeforeOT = tempD;                              break;                            case "Comment": driverRef.Comment = value; break;                            #endregion                        }
Missing Default,EditCommonPropertiesPlugin,EditCommonVehiclePropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonVehiclePropertiesCmd.cs,makeEdit,The following switch statement is missing a default case: switch (field)                      {                          #region Case Statements                                                    case "VehicleName": vehicleRef.Name = value; break;                          case "FixedCost":                              if (Double.TryParse(value.ToString()' out tempD))                                  vehicleRef.FixedCost = tempD;                              break;                            case "FuelEconomy":                              if (Double.TryParse(value.ToString()' out tempD))                                  vehicleRef.FuelEconomy = tempD;                              break;                            case "FuelType":                              foreach( FuelType f in App.Current.Project.FuelTypes)                              {                                  if (f.Name == value)                                      vehicleRef.FuelType = f;                              }                              break;                            case "Specialties":                              if (value != "")                              {                                  string[] stringSeparators = new string[] { ";"' "'" };                                  string[] specialties = value.Split(stringSeparators' StringSplitOptions.None);                                  foreach (string s in specialties)                                  {                                      VehicleSpecialty vs = new VehicleSpecialty();                                      vs.Name = s;                                      foreach (VehicleSpecialty V in App.Current.Project.VehicleSpecialties)                                      {                                          if (String.Compare(V.Name' vs.Name' true) == 0)                                          {                                              V.CopyTo(vs);                                              App.Current.Project.VehicleSpecialties.Remove(V);                                              break;                                          }                                      }                                        foreach (VehicleSpecialty V in vehicleRef.Specialties)                                      {                                          if (String.Compare(V.Name' vs.Name' true) == 0)                                          {                                              V.CopyTo(vs);                                              vehicleRef.Specialties.Remove(V);                                              break;                                          }                                      }                                        App.Current.Project.VehicleSpecialties.Add(vs);                                      vehicleRef.Specialties.Add(vs);                                  }                              }                              break;                            case "MobileDevice":                              foreach( MobileDevice m in App.Current.Project.MobileDevices)                              {                                  if (m.Name == value)                                      vehicleRef.MobileDevice = m;                              }                              break;                            case "Comment": vehicleRef.Comment = value; break;                                                       #endregion                        }
Missing Default,EditCommonPropertiesPlugin,EditCommonOrderPropertiesCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonOrderPropertiesCmd.cs,makeEdit,The following switch statement is missing a default case: switch (field)                      {                          #region Case Statements                          case "Name": orderRef.Name = value; break;                          case "Address": orderRef.Address.AddressLine = value; break;                          case "City": orderRef.Address.Locality3 = value; break;                          case "State": orderRef.Address.StateProvince = value; break;                          case "Zip": orderRef.Address.PostalCode1 = value; break;                          case "Zip4": orderRef.Address.PostalCode2 = value; break;                          case "Country": orderRef.Address.Country = value; break;                            case "PlannedDate":                              DateTime tempDT = new DateTime();                              if (System.DateTime.TryParse(value' out tempDT))                                  orderRef.PlannedDate = tempDT;                              break;                            case "Priority":                              if (value == "High") orderRef.Priority = OrderPriority.High;                              else if (value == "Normal") orderRef.Priority = OrderPriority.Normal;                              break;                            case "OrderType":                              if (value == "Pickup")                                   orderRef.Type = OrderType.Pickup;                              else if (value == "Delivery")                                   orderRef.Type = OrderType.Delivery;                              break;                            case "ServiceTime":                              if (Double.TryParse(value.ToString()' out tempD))                                  orderRef.ServiceTime = tempD;                              break;                           case "TimeWindowStart":                              string tempS = value;                              if (DateTime.TryParse(tempS' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      orderRef.TimeWindow.From = TWdateTime.TimeOfDay;                                      orderRef.TimeWindow.IsWideOpen = false;                                  }                              }                              break;                            case "TimeWindowFinish":                              if (DateTime.TryParse(value' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      orderRef.TimeWindow.To = TWdateTime.TimeOfDay;                                      orderRef.TimeWindow.IsWideOpen = false;                                  }                              }                              break;                            case "TimeWindow2Start":                                if (DateTime.TryParse(value' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      orderRef.TimeWindow2.From = TWdateTime.TimeOfDay;                                      orderRef.TimeWindow2.IsWideOpen = false;                                  }                              }                              break;                            case "TimeWindow2Finish":                                if (DateTime.TryParse(value' out TWdateTime))                              {                                  if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                  {                                      orderRef.TimeWindow2.To = TWdateTime.TimeOfDay;                                      orderRef.TimeWindow2.IsWideOpen = false;                                  }                              }                              break;                            case "MaxViolationTime":                              if (Double.TryParse(value' out tempD))                                  orderRef.MaxViolationTime = tempD;                              break;                            case "VehicleSpecialties":                              if (value != "")                              {                                  string[] stringSeparators = new string[] { ";"' "'" };                                  string[] specialties = value.Split(stringSeparators' StringSplitOptions.None);                                  foreach (string s in specialties)                                  {                                      VehicleSpecialty vs = new VehicleSpecialty();                                      vs.Name = s;                                      foreach (VehicleSpecialty V in App.Current.Project.VehicleSpecialties)                                      {                                          if (String.Compare(V.Name' vs.Name' true) == 0)                                          {                                              V.CopyTo(vs);                                              App.Current.Project.VehicleSpecialties.Remove(V);                                              break;                                          }                                      }                                                                            foreach (VehicleSpecialty V in orderRef.VehicleSpecialties)                                      {                                          if (String.Compare(V.Name' vs.Name' true) == 0)                                          {                                              V.CopyTo(vs);                                              orderRef.VehicleSpecialties.Remove(V);                                              break;                                          }                                      }                                        App.Current.Project.VehicleSpecialties.Add(vs);                                      orderRef.VehicleSpecialties.Add(vs);                                  }                              }                              break;                            case "DriverSpecialties":                              if (value != "")                              {                                  string[] stringSeparators2 = new string[] { ";"' "'" };                                  string[] specialties2 = value.Split(stringSeparators2' StringSplitOptions.None);                                  foreach (string s in specialties2)                                  {                                      DriverSpecialty ds = new DriverSpecialty();                                      ds.Name = s;                                        foreach (DriverSpecialty D in App.Current.Project.DriverSpecialties)                                      {                                          if (String.Compare(D.Name' ds.Name' true) == 0)                                          {                                              D.CopyTo(ds);                                              App.Current.Project.DriverSpecialties.Remove(D);                                              break;                                          }                                      }                                      foreach (DriverSpecialty D in orderRef.DriverSpecialties)                                      {                                          if (String.Compare(D.Name' ds.Name' true) == 0)                                          {                                              D.CopyTo(ds);                                              orderRef.DriverSpecialties.Remove(D);                                              break;                                          }                                      }                                        App.Current.Project.DriverSpecialties.Add(ds);                                      orderRef.DriverSpecialties.Add(ds);                                  }                              }                              break;                          //end of case statements                          #endregion                       }
Missing Default,EditCommonPropertiesPlugin,EditCommonPropertiesPopup,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\EditCommonPropertiesPlugin\Source\EditCommonPropertiesPopup.cs,makeEdit,The following switch statement is missing a default case: switch (ownerType)              {                  case "EditCommonPropertiesPlugin.EditCommonOrderPropertiesCmd": EditCommonOrderPropertiesCmd.makeEdit(field' value); break;                  case "EditCommonPropertiesPlugin.EditCommonVehiclePropertiesCmd": EditCommonVehiclePropertiesCmd.makeEdit(field' value); break;                  case "EditCommonPropertiesPlugin.EditCommonDriverPropertiesCmd": EditCommonDriverPropertiesCmd.makeEdit(field' value); break;                  case "EditCommonPropertiesPlugin.EditCommonDefaultRoutePropertiesCmd": EditCommonDefaultRoutePropertiesCmd.makeEdit(field' value); break;                  case "EditCommonPropertiesPlugin.EditCommonDailyRoutePropertiesCmd": EditCommonDailyRoutePropertiesCmd.makeEdit(field' value); break;              }
