Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,The method has 236 lines of code.
Complex Method,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,Cyclomatic complexity of the method is 62
Long Statement,ImportExportDataPlugin,ImportExportPluginPreferencesPage,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportExportPluginPreferencesPage.xaml.cs,SaveUserSettings,The length of the statement  "            string[] A = new string[] { Params.Instance.exportName' Params.exportPath' Params.Instance.importName' Params.importPath }; " is 123.
Magic Number,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,Execute,The following statement contains a magic number: p.WaitForExit(600 * 1000);
Magic Number,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,Execute,The following statement contains a magic number: p.WaitForExit(600 * 1000);
Magic Number,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,The following statement contains a magic number: switch (table.Columns[i].ColumnName)                          {                              #region Case Statements                              case "Name": resultOrder.Name = row["Name"].ToString(); break;                              case "Address": resultOrder.Address.AddressLine = row["Address"].ToString(); break;                              case "City": resultOrder.Address.Locality3 = row["City"].ToString(); break;                              case "State": resultOrder.Address.StateProvince = row["State"].ToString(); break;                              case "Zip": resultOrder.Address.PostalCode1 = row["Zip"].ToString(); break;                              case "Zip4": resultOrder.Address.PostalCode2 = row["Zip4"].ToString(); break;                              case "Country": resultOrder.Address.Country = row["Country"].ToString(); break;                                case "PlannedDate":                                   DateTime tempDT = new DateTime();                                  if (System.DateTime.TryParse(row["PlannedDate"].ToString()' out tempDT))                                      resultOrder.PlannedDate = tempDT;                                  break;                                case "Priority":                                  if (row["Priority"].ToString() == "High") resultOrder.Priority = OrderPriority.High;                                  else if (row["Priority"].ToString() == "Normal") resultOrder.Priority = OrderPriority.Normal;                                  break;                                case "OrderType":                                  if (row["OrderType"].ToString() == "Pickup") resultOrder.Type = OrderType.Pickup;                                  else if (row["OrderType"].ToString() == "Delivery") resultOrder.Type = OrderType.Delivery;                                  break;                                case "ServiceTime":                                  if (Double.TryParse(row["ServiceTime"].ToString()' out tempD))                                      resultOrder.ServiceTime = tempD;                                  break;                                case "TimeWindowStart":                                  string tempS = row["TimeWindowStart"].ToString();                                  if (DateTime.TryParse(tempS' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindowFinish":                                  if (DateTime.TryParse(row["TimeWindowFinish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Start":                                    if (DateTime.TryParse(row["TimeWindow2Start"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Finish":                                    if (DateTime.TryParse(row["TimeWindow2Finish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "MaxViolationTime":                                  if (Double.TryParse(row["MaxViolationTime"].ToString()' out tempD))                                      resultOrder.MaxViolationTime = tempD;                                  break;                                case "VehicleSpecialties":                                  if (row["VehicleSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators = new string[] { ";"' "'" };                                      string[] specialties = row["VehicleSpecialties"].ToString().Split(stringSeparators' StringSplitOptions.None);                                      foreach (string s in specialties)                                      {                                          VehicleSpecialty vs = new VehicleSpecialty();                                          vs.Name = s;                                          foreach (VehicleSpecialty V in m_application.Project.VehicleSpecialties)                                          {                                              if (String.Compare(V.Name' vs.Name' true) == 0)                                              {                                                  V.CopyTo(vs);                                                  m_application.Project.VehicleSpecialties.Remove(V);                                                  break;                                              }                                          }                                          m_application.Project.VehicleSpecialties.Add(vs);                                          resultOrder.VehicleSpecialties.Add(vs);                                      }                                  }                                  break;                                case "DriverSpecialties":                                  if (row["DriverSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators2 = new string[] { ";"' "'" };                                      string[] specialties2 = row["DriverSpecialties"].ToString().Split(stringSeparators2' StringSplitOptions.None);                                      foreach (string s in specialties2)                                      {                                          DriverSpecialty ds = new DriverSpecialty();                                          ds.Name = s;                                            foreach (DriverSpecialty D in m_application.Project.DriverSpecialties)                                          {                                              if (String.Compare(D.Name' ds.Name' true) == 0)                                              {                                                  D.CopyTo(ds);                                                  m_application.Project.DriverSpecialties.Remove(D);                                                  break;                                              }                                          }                                          m_application.Project.DriverSpecialties.Add(ds);                                          resultOrder.DriverSpecialties.Add(ds);                                      }                                  }                                  break;                                case "X":                                  string x = row["X"].ToString();                                  if (x != "" && x != null)                                      if (Double.TryParse(row["X"].ToString()' out tempX))                                      {                                          if (tempX >= -180.0 && tempX <= 180.0 && tempX != 0.0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempX == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                                case "Y":                                  string y = row["Y"].ToString();                                  if (y != "" && y != null)                                      if (Double.TryParse(row["Y"].ToString()' out tempY))                                      {                                          if (tempY >= -90.0 && tempY <= 90.0 && tempY != 0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempY == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                              #endregion                          }
Magic Number,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,The following statement contains a magic number: switch (table.Columns[i].ColumnName)                          {                              #region Case Statements                              case "Name": resultOrder.Name = row["Name"].ToString(); break;                              case "Address": resultOrder.Address.AddressLine = row["Address"].ToString(); break;                              case "City": resultOrder.Address.Locality3 = row["City"].ToString(); break;                              case "State": resultOrder.Address.StateProvince = row["State"].ToString(); break;                              case "Zip": resultOrder.Address.PostalCode1 = row["Zip"].ToString(); break;                              case "Zip4": resultOrder.Address.PostalCode2 = row["Zip4"].ToString(); break;                              case "Country": resultOrder.Address.Country = row["Country"].ToString(); break;                                case "PlannedDate":                                   DateTime tempDT = new DateTime();                                  if (System.DateTime.TryParse(row["PlannedDate"].ToString()' out tempDT))                                      resultOrder.PlannedDate = tempDT;                                  break;                                case "Priority":                                  if (row["Priority"].ToString() == "High") resultOrder.Priority = OrderPriority.High;                                  else if (row["Priority"].ToString() == "Normal") resultOrder.Priority = OrderPriority.Normal;                                  break;                                case "OrderType":                                  if (row["OrderType"].ToString() == "Pickup") resultOrder.Type = OrderType.Pickup;                                  else if (row["OrderType"].ToString() == "Delivery") resultOrder.Type = OrderType.Delivery;                                  break;                                case "ServiceTime":                                  if (Double.TryParse(row["ServiceTime"].ToString()' out tempD))                                      resultOrder.ServiceTime = tempD;                                  break;                                case "TimeWindowStart":                                  string tempS = row["TimeWindowStart"].ToString();                                  if (DateTime.TryParse(tempS' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindowFinish":                                  if (DateTime.TryParse(row["TimeWindowFinish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Start":                                    if (DateTime.TryParse(row["TimeWindow2Start"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Finish":                                    if (DateTime.TryParse(row["TimeWindow2Finish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "MaxViolationTime":                                  if (Double.TryParse(row["MaxViolationTime"].ToString()' out tempD))                                      resultOrder.MaxViolationTime = tempD;                                  break;                                case "VehicleSpecialties":                                  if (row["VehicleSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators = new string[] { ";"' "'" };                                      string[] specialties = row["VehicleSpecialties"].ToString().Split(stringSeparators' StringSplitOptions.None);                                      foreach (string s in specialties)                                      {                                          VehicleSpecialty vs = new VehicleSpecialty();                                          vs.Name = s;                                          foreach (VehicleSpecialty V in m_application.Project.VehicleSpecialties)                                          {                                              if (String.Compare(V.Name' vs.Name' true) == 0)                                              {                                                  V.CopyTo(vs);                                                  m_application.Project.VehicleSpecialties.Remove(V);                                                  break;                                              }                                          }                                          m_application.Project.VehicleSpecialties.Add(vs);                                          resultOrder.VehicleSpecialties.Add(vs);                                      }                                  }                                  break;                                case "DriverSpecialties":                                  if (row["DriverSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators2 = new string[] { ";"' "'" };                                      string[] specialties2 = row["DriverSpecialties"].ToString().Split(stringSeparators2' StringSplitOptions.None);                                      foreach (string s in specialties2)                                      {                                          DriverSpecialty ds = new DriverSpecialty();                                          ds.Name = s;                                            foreach (DriverSpecialty D in m_application.Project.DriverSpecialties)                                          {                                              if (String.Compare(D.Name' ds.Name' true) == 0)                                              {                                                  D.CopyTo(ds);                                                  m_application.Project.DriverSpecialties.Remove(D);                                                  break;                                              }                                          }                                          m_application.Project.DriverSpecialties.Add(ds);                                          resultOrder.DriverSpecialties.Add(ds);                                      }                                  }                                  break;                                case "X":                                  string x = row["X"].ToString();                                  if (x != "" && x != null)                                      if (Double.TryParse(row["X"].ToString()' out tempX))                                      {                                          if (tempX >= -180.0 && tempX <= 180.0 && tempX != 0.0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempX == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                                case "Y":                                  string y = row["Y"].ToString();                                  if (y != "" && y != null)                                      if (Double.TryParse(row["Y"].ToString()' out tempY))                                      {                                          if (tempY >= -90.0 && tempY <= 90.0 && tempY != 0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempY == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                              #endregion                          }
Magic Number,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,The following statement contains a magic number: switch (table.Columns[i].ColumnName)                          {                              #region Case Statements                              case "Name": resultOrder.Name = row["Name"].ToString(); break;                              case "Address": resultOrder.Address.AddressLine = row["Address"].ToString(); break;                              case "City": resultOrder.Address.Locality3 = row["City"].ToString(); break;                              case "State": resultOrder.Address.StateProvince = row["State"].ToString(); break;                              case "Zip": resultOrder.Address.PostalCode1 = row["Zip"].ToString(); break;                              case "Zip4": resultOrder.Address.PostalCode2 = row["Zip4"].ToString(); break;                              case "Country": resultOrder.Address.Country = row["Country"].ToString(); break;                                case "PlannedDate":                                   DateTime tempDT = new DateTime();                                  if (System.DateTime.TryParse(row["PlannedDate"].ToString()' out tempDT))                                      resultOrder.PlannedDate = tempDT;                                  break;                                case "Priority":                                  if (row["Priority"].ToString() == "High") resultOrder.Priority = OrderPriority.High;                                  else if (row["Priority"].ToString() == "Normal") resultOrder.Priority = OrderPriority.Normal;                                  break;                                case "OrderType":                                  if (row["OrderType"].ToString() == "Pickup") resultOrder.Type = OrderType.Pickup;                                  else if (row["OrderType"].ToString() == "Delivery") resultOrder.Type = OrderType.Delivery;                                  break;                                case "ServiceTime":                                  if (Double.TryParse(row["ServiceTime"].ToString()' out tempD))                                      resultOrder.ServiceTime = tempD;                                  break;                                case "TimeWindowStart":                                  string tempS = row["TimeWindowStart"].ToString();                                  if (DateTime.TryParse(tempS' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindowFinish":                                  if (DateTime.TryParse(row["TimeWindowFinish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Start":                                    if (DateTime.TryParse(row["TimeWindow2Start"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Finish":                                    if (DateTime.TryParse(row["TimeWindow2Finish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "MaxViolationTime":                                  if (Double.TryParse(row["MaxViolationTime"].ToString()' out tempD))                                      resultOrder.MaxViolationTime = tempD;                                  break;                                case "VehicleSpecialties":                                  if (row["VehicleSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators = new string[] { ";"' "'" };                                      string[] specialties = row["VehicleSpecialties"].ToString().Split(stringSeparators' StringSplitOptions.None);                                      foreach (string s in specialties)                                      {                                          VehicleSpecialty vs = new VehicleSpecialty();                                          vs.Name = s;                                          foreach (VehicleSpecialty V in m_application.Project.VehicleSpecialties)                                          {                                              if (String.Compare(V.Name' vs.Name' true) == 0)                                              {                                                  V.CopyTo(vs);                                                  m_application.Project.VehicleSpecialties.Remove(V);                                                  break;                                              }                                          }                                          m_application.Project.VehicleSpecialties.Add(vs);                                          resultOrder.VehicleSpecialties.Add(vs);                                      }                                  }                                  break;                                case "DriverSpecialties":                                  if (row["DriverSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators2 = new string[] { ";"' "'" };                                      string[] specialties2 = row["DriverSpecialties"].ToString().Split(stringSeparators2' StringSplitOptions.None);                                      foreach (string s in specialties2)                                      {                                          DriverSpecialty ds = new DriverSpecialty();                                          ds.Name = s;                                            foreach (DriverSpecialty D in m_application.Project.DriverSpecialties)                                          {                                              if (String.Compare(D.Name' ds.Name' true) == 0)                                              {                                                  D.CopyTo(ds);                                                  m_application.Project.DriverSpecialties.Remove(D);                                                  break;                                              }                                          }                                          m_application.Project.DriverSpecialties.Add(ds);                                          resultOrder.DriverSpecialties.Add(ds);                                      }                                  }                                  break;                                case "X":                                  string x = row["X"].ToString();                                  if (x != "" && x != null)                                      if (Double.TryParse(row["X"].ToString()' out tempX))                                      {                                          if (tempX >= -180.0 && tempX <= 180.0 && tempX != 0.0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempX == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                                case "Y":                                  string y = row["Y"].ToString();                                  if (y != "" && y != null)                                      if (Double.TryParse(row["Y"].ToString()' out tempY))                                      {                                          if (tempY >= -90.0 && tempY <= 90.0 && tempY != 0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempY == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                              #endregion                          }
Magic Number,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,The following statement contains a magic number: switch (table.Columns[i].ColumnName)                          {                              #region Case Statements                              case "Name": resultOrder.Name = row["Name"].ToString(); break;                              case "Address": resultOrder.Address.AddressLine = row["Address"].ToString(); break;                              case "City": resultOrder.Address.Locality3 = row["City"].ToString(); break;                              case "State": resultOrder.Address.StateProvince = row["State"].ToString(); break;                              case "Zip": resultOrder.Address.PostalCode1 = row["Zip"].ToString(); break;                              case "Zip4": resultOrder.Address.PostalCode2 = row["Zip4"].ToString(); break;                              case "Country": resultOrder.Address.Country = row["Country"].ToString(); break;                                case "PlannedDate":                                   DateTime tempDT = new DateTime();                                  if (System.DateTime.TryParse(row["PlannedDate"].ToString()' out tempDT))                                      resultOrder.PlannedDate = tempDT;                                  break;                                case "Priority":                                  if (row["Priority"].ToString() == "High") resultOrder.Priority = OrderPriority.High;                                  else if (row["Priority"].ToString() == "Normal") resultOrder.Priority = OrderPriority.Normal;                                  break;                                case "OrderType":                                  if (row["OrderType"].ToString() == "Pickup") resultOrder.Type = OrderType.Pickup;                                  else if (row["OrderType"].ToString() == "Delivery") resultOrder.Type = OrderType.Delivery;                                  break;                                case "ServiceTime":                                  if (Double.TryParse(row["ServiceTime"].ToString()' out tempD))                                      resultOrder.ServiceTime = tempD;                                  break;                                case "TimeWindowStart":                                  string tempS = row["TimeWindowStart"].ToString();                                  if (DateTime.TryParse(tempS' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindowFinish":                                  if (DateTime.TryParse(row["TimeWindowFinish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Start":                                    if (DateTime.TryParse(row["TimeWindow2Start"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Finish":                                    if (DateTime.TryParse(row["TimeWindow2Finish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "MaxViolationTime":                                  if (Double.TryParse(row["MaxViolationTime"].ToString()' out tempD))                                      resultOrder.MaxViolationTime = tempD;                                  break;                                case "VehicleSpecialties":                                  if (row["VehicleSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators = new string[] { ";"' "'" };                                      string[] specialties = row["VehicleSpecialties"].ToString().Split(stringSeparators' StringSplitOptions.None);                                      foreach (string s in specialties)                                      {                                          VehicleSpecialty vs = new VehicleSpecialty();                                          vs.Name = s;                                          foreach (VehicleSpecialty V in m_application.Project.VehicleSpecialties)                                          {                                              if (String.Compare(V.Name' vs.Name' true) == 0)                                              {                                                  V.CopyTo(vs);                                                  m_application.Project.VehicleSpecialties.Remove(V);                                                  break;                                              }                                          }                                          m_application.Project.VehicleSpecialties.Add(vs);                                          resultOrder.VehicleSpecialties.Add(vs);                                      }                                  }                                  break;                                case "DriverSpecialties":                                  if (row["DriverSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators2 = new string[] { ";"' "'" };                                      string[] specialties2 = row["DriverSpecialties"].ToString().Split(stringSeparators2' StringSplitOptions.None);                                      foreach (string s in specialties2)                                      {                                          DriverSpecialty ds = new DriverSpecialty();                                          ds.Name = s;                                            foreach (DriverSpecialty D in m_application.Project.DriverSpecialties)                                          {                                              if (String.Compare(D.Name' ds.Name' true) == 0)                                              {                                                  D.CopyTo(ds);                                                  m_application.Project.DriverSpecialties.Remove(D);                                                  break;                                              }                                          }                                          m_application.Project.DriverSpecialties.Add(ds);                                          resultOrder.DriverSpecialties.Add(ds);                                      }                                  }                                  break;                                case "X":                                  string x = row["X"].ToString();                                  if (x != "" && x != null)                                      if (Double.TryParse(row["X"].ToString()' out tempX))                                      {                                          if (tempX >= -180.0 && tempX <= 180.0 && tempX != 0.0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempX == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                                case "Y":                                  string y = row["Y"].ToString();                                  if (y != "" && y != null)                                      if (Double.TryParse(row["Y"].ToString()' out tempY))                                      {                                          if (tempY >= -90.0 && tempY <= 90.0 && tempY != 0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempY == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                              #endregion                          }
Magic Number,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,The following statement contains a magic number: candidate1.Score = 100;
Magic Number,ImportExportDataPlugin,ExportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ExportDataCmd.cs,Execute,The following statement contains a magic number: p.WaitForExit(600*1000);
Magic Number,ImportExportDataPlugin,ExportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ExportDataCmd.cs,Execute,The following statement contains a magic number: p.WaitForExit(600*1000);
Magic Number,ImportExportDataPlugin,ImportExportPluginPreferencesPage,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportExportPluginPreferencesPage.xaml.cs,LoadUserSettings,The following statement contains a magic number: Params.Instance.importName = result[2];
Magic Number,ImportExportDataPlugin,ImportExportPluginPreferencesPage,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportExportPluginPreferencesPage.xaml.cs,LoadUserSettings,The following statement contains a magic number: result.Length > 2
Magic Number,ImportExportDataPlugin,ImportExportPluginPreferencesPage,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportExportPluginPreferencesPage.xaml.cs,LoadUserSettings,The following statement contains a magic number: Params.importPath = result[3];
Magic Number,ImportExportDataPlugin,ImportExportPluginPreferencesPage,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportExportPluginPreferencesPage.xaml.cs,LoadUserSettings,The following statement contains a magic number: result.Length > 3
Missing Default,ImportExportDataPlugin,ImportDataCmd,D:\research\architectureSmells\repos\Esri_route-planner-csharp\RoutePlanner_DeveloperTools\Plugin SDK 1.10\Sample Plugins\ImportExportDataPlugin\Source\ImportDataCmd.cs,processOrders,The following switch statement is missing a default case: switch (table.Columns[i].ColumnName)                          {                              #region Case Statements                              case "Name": resultOrder.Name = row["Name"].ToString(); break;                              case "Address": resultOrder.Address.AddressLine = row["Address"].ToString(); break;                              case "City": resultOrder.Address.Locality3 = row["City"].ToString(); break;                              case "State": resultOrder.Address.StateProvince = row["State"].ToString(); break;                              case "Zip": resultOrder.Address.PostalCode1 = row["Zip"].ToString(); break;                              case "Zip4": resultOrder.Address.PostalCode2 = row["Zip4"].ToString(); break;                              case "Country": resultOrder.Address.Country = row["Country"].ToString(); break;                                case "PlannedDate":                                   DateTime tempDT = new DateTime();                                  if (System.DateTime.TryParse(row["PlannedDate"].ToString()' out tempDT))                                      resultOrder.PlannedDate = tempDT;                                  break;                                case "Priority":                                  if (row["Priority"].ToString() == "High") resultOrder.Priority = OrderPriority.High;                                  else if (row["Priority"].ToString() == "Normal") resultOrder.Priority = OrderPriority.Normal;                                  break;                                case "OrderType":                                  if (row["OrderType"].ToString() == "Pickup") resultOrder.Type = OrderType.Pickup;                                  else if (row["OrderType"].ToString() == "Delivery") resultOrder.Type = OrderType.Delivery;                                  break;                                case "ServiceTime":                                  if (Double.TryParse(row["ServiceTime"].ToString()' out tempD))                                      resultOrder.ServiceTime = tempD;                                  break;                                case "TimeWindowStart":                                  string tempS = row["TimeWindowStart"].ToString();                                  if (DateTime.TryParse(tempS' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindowFinish":                                  if (DateTime.TryParse(row["TimeWindowFinish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Start":                                    if (DateTime.TryParse(row["TimeWindow2Start"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.From = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "TimeWindow2Finish":                                    if (DateTime.TryParse(row["TimeWindow2Finish"].ToString()' out TWdateTime))                                  {                                      if (TWdateTime.TimeOfDay != TimeSpan.Zero)                                      {                                          resultOrder.TimeWindow2.To = TWdateTime.TimeOfDay;                                          resultOrder.TimeWindow2.IsWideOpen = false;                                      }                                  }                                  break;                                case "MaxViolationTime":                                  if (Double.TryParse(row["MaxViolationTime"].ToString()' out tempD))                                      resultOrder.MaxViolationTime = tempD;                                  break;                                case "VehicleSpecialties":                                  if (row["VehicleSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators = new string[] { ";"' "'" };                                      string[] specialties = row["VehicleSpecialties"].ToString().Split(stringSeparators' StringSplitOptions.None);                                      foreach (string s in specialties)                                      {                                          VehicleSpecialty vs = new VehicleSpecialty();                                          vs.Name = s;                                          foreach (VehicleSpecialty V in m_application.Project.VehicleSpecialties)                                          {                                              if (String.Compare(V.Name' vs.Name' true) == 0)                                              {                                                  V.CopyTo(vs);                                                  m_application.Project.VehicleSpecialties.Remove(V);                                                  break;                                              }                                          }                                          m_application.Project.VehicleSpecialties.Add(vs);                                          resultOrder.VehicleSpecialties.Add(vs);                                      }                                  }                                  break;                                case "DriverSpecialties":                                  if (row["DriverSpecialties"].ToString() != "")                                  {                                      string[] stringSeparators2 = new string[] { ";"' "'" };                                      string[] specialties2 = row["DriverSpecialties"].ToString().Split(stringSeparators2' StringSplitOptions.None);                                      foreach (string s in specialties2)                                      {                                          DriverSpecialty ds = new DriverSpecialty();                                          ds.Name = s;                                            foreach (DriverSpecialty D in m_application.Project.DriverSpecialties)                                          {                                              if (String.Compare(D.Name' ds.Name' true) == 0)                                              {                                                  D.CopyTo(ds);                                                  m_application.Project.DriverSpecialties.Remove(D);                                                  break;                                              }                                          }                                          m_application.Project.DriverSpecialties.Add(ds);                                          resultOrder.DriverSpecialties.Add(ds);                                      }                                  }                                  break;                                case "X":                                  string x = row["X"].ToString();                                  if (x != "" && x != null)                                      if (Double.TryParse(row["X"].ToString()' out tempX))                                      {                                          if (tempX >= -180.0 && tempX <= 180.0 && tempX != 0.0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempX == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                                case "Y":                                  string y = row["Y"].ToString();                                  if (y != "" && y != null)                                      if (Double.TryParse(row["Y"].ToString()' out tempY))                                      {                                          if (tempY >= -90.0 && tempY <= 90.0 && tempY != 0)                                          {                                              geocodeProvided = true;                                              geocodeCorrect = true;                                          }                                          else if (tempY == 0.0)                                              geocodeCorrect = true;                                      }                                    break;                              #endregion                          }
