Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Aggregator.ConsoleApp,RequestContext,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\RequestContext.cs,GetProjectProperties,The length of the statement  "            ics.GetProjectProperties(projectUri.ToString()' out projectName' out projectState' out templateId' out projectProperties); " is 122.
Long Statement,Aggregator.ConsoleApp,RequestContext,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\RequestContext.cs,GetProjectProperties,The length of the statement  "            return projectProperties.Select(p => (IProjectProperty)new ProjectPropertyWrapper() { Name = p.Name' Value = p.Value }).ToArray(); " is 130.
Magic Number,Aggregator.ConsoleApp,ConsoleTextLogger,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\ConsoleTextLogger.cs,Log,The following statement contains a magic number: try              {                  string message = args != null ? string.Format(format' args: args) : format;                    ConsoleColor save = Console.ForegroundColor;                  Console.ForegroundColor = MapColor(level);                    const int LogLevelMaximumStringLength = 11; // Len(Information)                  string levelAsString = level.ToString();    #pragma warning disable S3220 // Method calls should not resolve ambiguously to overloads with "params"                  Console.Write(                      "[{0}]{1} {2:00}.{3:000} "'                      levelAsString'                      string.Empty.PadLeft(LogLevelMaximumStringLength - levelAsString.Length)'                      this.clock.ElapsedMilliseconds / 1000'                      this.clock.ElapsedMilliseconds % 1000);  #pragma warning restore S3220 // Method calls should not resolve ambiguously to overloads with "params"                    Console.WriteLine(message);                    Console.ForegroundColor = save;              }              finally              {                  this.clock.Start();              }
Magic Number,Aggregator.ConsoleApp,ConsoleTextLogger,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\ConsoleTextLogger.cs,Log,The following statement contains a magic number: try              {                  string message = args != null ? string.Format(format' args: args) : format;                    ConsoleColor save = Console.ForegroundColor;                  Console.ForegroundColor = MapColor(level);                    const int LogLevelMaximumStringLength = 11; // Len(Information)                  string levelAsString = level.ToString();    #pragma warning disable S3220 // Method calls should not resolve ambiguously to overloads with "params"                  Console.Write(                      "[{0}]{1} {2:00}.{3:000} "'                      levelAsString'                      string.Empty.PadLeft(LogLevelMaximumStringLength - levelAsString.Length)'                      this.clock.ElapsedMilliseconds / 1000'                      this.clock.ElapsedMilliseconds % 1000);  #pragma warning restore S3220 // Method calls should not resolve ambiguously to overloads with "params"                    Console.WriteLine(message);                    Console.ForegroundColor = save;              }              finally              {                  this.clock.Start();              }
Magic Number,Aggregator.ConsoleApp,ConsoleTextLogger,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\ConsoleTextLogger.cs,Log,The following statement contains a magic number: try              {                  string message = args != null ? string.Format(format' args: args) : format;                    ConsoleColor save = Console.ForegroundColor;                  Console.ForegroundColor = MapColor(level);                    const int LogLevelMaximumStringLength = 11; // Len(Information)                  string levelAsString = level.ToString();    #pragma warning disable S3220 // Method calls should not resolve ambiguously to overloads with "params"                  Console.Write(                      "[{0}]{1} {2:00}.{3:000} "'                      levelAsString'                      string.Empty.PadLeft(LogLevelMaximumStringLength - levelAsString.Length)'                      this.clock.ElapsedMilliseconds / 1000'                      this.clock.ElapsedMilliseconds % 1000);  #pragma warning restore S3220 // Method calls should not resolve ambiguously to overloads with "params"                    Console.WriteLine(message);                    Console.ForegroundColor = save;              }              finally              {                  this.clock.Start();              }
Magic Number,Aggregator.ConsoleApp,Program,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\Program.cs,Main,The following statement contains a magic number: int rc = 42;
Magic Number,Aggregator.ConsoleApp,Program,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\Program.cs,Main,The following statement contains a magic number: try              {                  // locate any commands in the assembly (or use an IoC container' or whatever source)                  var commands = ConsoleCommandDispatcher.FindCommandsInSameAssemblyAs(typeof(Program));                    // then run them.                  rc = ConsoleCommandDispatcher.DispatchCommand(commands' args' Console.Out);                  if (rc == 0)                  {                      ConsoleColor save = Console.ForegroundColor;                      Console.ForegroundColor = ConsoleColor.Green;                      Console.WriteLine("Succeeded.");                      Console.ForegroundColor = save;                  }              }              catch (Exception e)              {                  e.Dump(Console.Out);                  rc = 99;              }
Magic Number,Aggregator.ConsoleApp,RunCommand,C:\repos\tfsaggregator_tfsaggregator\Aggregator.ConsoleApp\RunCommand.cs,Run,The following statement contains a magic number: if (runtime.HasErrors)              {                  return 3;              }
