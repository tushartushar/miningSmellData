Implementation smell,Namespace,Class,File,Method,Description
Long Method,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The method has 203 lines of code.
Complex Method,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,Cyclomatic complexity of the method is 87
Long Parameter List,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,ToAscii,The method has 5 parameters.
Long Parameter List,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,CreateNamedPipe,The method has 8 parameters.
Long Parameter List,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,InsertMenu,The method has 5 parameters.
Long Parameter List,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,TrackPopupMenu,The method has 7 parameters.
Long Parameter List,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,TrackPopupMenuEx,The method has 6 parameters.
Long Parameter List,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,BitBlt,The method has 9 parameters.
Long Statement,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,GetThumbnailUsingPrintWindow,The length of the statement  "	//RedrawWindow(hWnd' IntPtr.Zero' IntPtr.Zero' (RedrawWindowFlags)(0x0400/*RDW_FRAME*/ | 0x0100/*RDW_UPDATENOW*/ | 0x0001/*RDW_INVALIDATE*/ | 0x80 /*All children*/)); " is 166.
Long Statement,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,GetThumbnailUsingCopyFromScreen,The length of the statement  "	g.CopyFromScreen (rect.Left' rect.Top' 0' 0' new System.Drawing.Size (rect.Width' rect.Height)' CopyPixelOperation.SourceCopy); " is 127.
Complex Conditional,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HandleDoubleClickLogic,The conditional expression  "_state.LastDownButton == button // has to be same button  && _state.LastDownPt.X == x // has to be same X-coord  && _state.LastDownPt.Y == y // has to be same Y-coord  && time - _state.LastDownTime <= Win32.GetDoubleClickTime ()"  is complex.
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,Install,The following statement contains a magic number: key.SetValue ("LowLevelHooksTimeout"' 10000' RegistryValueKind.DWord);  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0) {  	Win32.MSLLHOOKSTRUCT info = (Win32.MSLLHOOKSTRUCT)Marshal.PtrToStructure (lParam' typeof(Win32.MSLLHOOKSTRUCT));  	bool isDown = false;  	int nClicks = 1;  	MouseButtons button = MouseButtons.None;  	#region setting mouse data  	Win32.INPUT input = new Win32.INPUT ();  	input.type = (IntPtr)Win32.INPUTF.MOUSE;  	input.mi.dwExtraInfo = (IntPtr)0;  	input.mi.mouseData = 0;  	input.mi.time = (IntPtr)0;  	input.mi.dx = (IntPtr)0;  	input.mi.dy = (IntPtr)0;  	switch (wParam) // figure out which button was pressed' if any  	{  	////////// down events  	case (int)Win32.WM.LBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  		button = MouseButtons.Left;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.RBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  		button = MouseButtons.Right;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.MBUTTONDOWN:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  		button = MouseButtons.Middle;  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	case (int)Win32.WM.XBUTTONDOWN:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		isDown = true;  		nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  		break;  	////////// up events  	case (int)Win32.WM.LBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  		button = MouseButtons.Left;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.RBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  		button = MouseButtons.Right;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.MBUTTONUP:  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  		button = MouseButtons.Middle;  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	case (int)Win32.WM.XBUTTONUP:  		if ((wParam >> 16) == 1) {  			// high-order word specifies which button was pressed  			button = MouseButtons.XButton1;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else if ((wParam >> 16) == 2) {  			button = MouseButtons.XButton2;  			input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  		}  		else  			Debug.Fail ("XButton message received without a button identifier.");  		nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  		break;  	}  	short delta = -1;  	// wheel  	if (wParam == (int)Win32.WM.MOUSEWHEEL) {  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  		delta = (short)((info.mouseData >> 16) & 0xffff);  		nClicks = 0;  	}  	#endregion  	MouseEventArgs e = null;  	switch (_strategy) {  	case MoveStrategy.Standard:  		_curr = new Point (info.pt.x' info.pt.y);  		_prev = _curr;  		Win32.SetCursorPos (_curr.X' _curr.Y);  		break;  	case MoveStrategy.Clipped:  		// set up the event argument  		int deltx = info.pt.x - _prev.X;  		int delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  		}  		break;  	case MoveStrategy.Relative:  		deltx = info.pt.x - _prev.X;  		delty = info.pt.y - _prev.Y;  		if (deltx < 100 && delty < 100) {  			int newx = _curr.X + deltx;  			int newy = _curr.Y + delty;  			_curr.X += deltx;  			_curr.Y += delty;  			_physicalCursorLocation.X += deltx;  			_physicalCursorLocation.Y += delty;  			_prev = _physicalCursorLocation;  			#region clip to the screen bounds  			if (_curr.X < 0)  				_curr.X = 0;  			else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  				_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  			if (_curr.Y < 0)  				_curr.Y = 0;  			else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  				_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  			#endregion  			Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  		}  		break;  	}  	e = new MouseEventArgs (button' nClicks' _curr.X' _curr.Y' delta);  	// fire the appropriate event  	if (button != MouseButtons.None) {  		if (isDown) {  			if (OnPreviewMouseDown != null) {  				SuppressArgs hp = new SuppressArgs ();  				OnPreviewMouseDown (e' hp);  				if (!hp.SuppressMouseEvent) {  					Win32.SendMouseDown (e);  					if (OnMouseDown != null)  						OnMouseDown (this' e);  				}  			}  			else {  				Win32.SendMouseDown (e);  				if (OnMouseDown != null)  					OnMouseDown (this' e);  			}  		}  		else// button came up  		 {  			if (Control.MouseButtons != MouseButtons.None)  				Win32.SendMouseUp (e);  			if (_state.IssueDoubleClickOnMouseUp) {  				if (OnMouseDoubleClick != null)  					OnMouseDoubleClick (this' e);  				_state = DoubleClickState.Empty;  				// unset  			}  			else if (_state.IssueClickOnMouseUp) {  				if (OnMouseClick != null)  					OnMouseClick (this' e);  				_state.IssueClickOnMouseUp = false;  				// unset  			}  			if (OnMouseUp != null) {  				OnMouseUp (this' e);  			}  		}  	}  	else// no buttons -- wheel or mouse movement  	 {  		if (delta != -1) {  			Win32.SendMouseWheel (e);  			//Win32.SendInput(1' ref input' Marshal.SizeOf(new Win32.INPUT()));  			if (OnMouseWheel != null) {  				OnMouseWheel (this' e);  			}  		}  		else// mouse movement  		 {  			if (OnMouseMove != null) {  				OnMouseMove (this' e);  			}  		}  	}  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 1) {  	// high-order word specifies which button was pressed  	button = MouseButtons.XButton1;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  }  else if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 1) {  	// high-order word specifies which button was pressed  	button = MouseButtons.XButton1;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  }  else if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 1) {  	// high-order word specifies which button was pressed  	button = MouseButtons.XButton1;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  }  else if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 1) {  	// high-order word specifies which button was pressed  	button = MouseButtons.XButton1;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 1) {  	// high-order word specifies which button was pressed  	button = MouseButtons.XButton1;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 1) {  	// high-order word specifies which button was pressed  	button = MouseButtons.XButton1;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if ((wParam >> 16) == 2) {  	button = MouseButtons.XButton2;  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  }  else  	Debug.Fail ("XButton message received without a button identifier.");  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (wParam == (int)Win32.WM.MOUSEWHEEL) {  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.WHEEL;  	delta = (short)((info.mouseData >> 16) & 0xffff);  	nClicks = 0;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: delta = (short)((info.mouseData >> 16) & 0xffff);  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (_strategy) {  case MoveStrategy.Standard:  	_curr = new Point (info.pt.x' info.pt.y);  	_prev = _curr;  	Win32.SetCursorPos (_curr.X' _curr.Y);  	break;  case MoveStrategy.Clipped:  	// set up the event argument  	int deltx = info.pt.x - _prev.X;  	int delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  	}  	break;  case MoveStrategy.Relative:  	deltx = info.pt.x - _prev.X;  	delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		_physicalCursorLocation.X += deltx;  		_physicalCursorLocation.Y += delty;  		_prev = _physicalCursorLocation;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  		Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  	}  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (_strategy) {  case MoveStrategy.Standard:  	_curr = new Point (info.pt.x' info.pt.y);  	_prev = _curr;  	Win32.SetCursorPos (_curr.X' _curr.Y);  	break;  case MoveStrategy.Clipped:  	// set up the event argument  	int deltx = info.pt.x - _prev.X;  	int delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  	}  	break;  case MoveStrategy.Relative:  	deltx = info.pt.x - _prev.X;  	delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		_physicalCursorLocation.X += deltx;  		_physicalCursorLocation.Y += delty;  		_prev = _physicalCursorLocation;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  		Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  	}  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (_strategy) {  case MoveStrategy.Standard:  	_curr = new Point (info.pt.x' info.pt.y);  	_prev = _curr;  	Win32.SetCursorPos (_curr.X' _curr.Y);  	break;  case MoveStrategy.Clipped:  	// set up the event argument  	int deltx = info.pt.x - _prev.X;  	int delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  	}  	break;  case MoveStrategy.Relative:  	deltx = info.pt.x - _prev.X;  	delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		_physicalCursorLocation.X += deltx;  		_physicalCursorLocation.Y += delty;  		_prev = _physicalCursorLocation;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  		Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  	}  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch (_strategy) {  case MoveStrategy.Standard:  	_curr = new Point (info.pt.x' info.pt.y);  	_prev = _curr;  	Win32.SetCursorPos (_curr.X' _curr.Y);  	break;  case MoveStrategy.Clipped:  	// set up the event argument  	int deltx = info.pt.x - _prev.X;  	int delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  	}  	break;  case MoveStrategy.Relative:  	deltx = info.pt.x - _prev.X;  	delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		_physicalCursorLocation.X += deltx;  		_physicalCursorLocation.Y += delty;  		_prev = _physicalCursorLocation;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  		Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  	}  	break;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (deltx < 100 && delty < 100) {  	int newx = _curr.X + deltx;  	int newy = _curr.Y + delty;  	_curr.X += deltx;  	_curr.Y += delty;  	#region clip to the screen bounds  	if (_curr.X < 0)  		_curr.X = 0;  	else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  		_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  	if (_curr.Y < 0)  		_curr.Y = 0;  	else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  		_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  	#endregion  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (deltx < 100 && delty < 100) {  	int newx = _curr.X + deltx;  	int newy = _curr.Y + delty;  	_curr.X += deltx;  	_curr.Y += delty;  	#region clip to the screen bounds  	if (_curr.X < 0)  		_curr.X = 0;  	else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  		_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  	if (_curr.Y < 0)  		_curr.Y = 0;  	else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  		_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  	#endregion  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (deltx < 100 && delty < 100) {  	int newx = _curr.X + deltx;  	int newy = _curr.Y + delty;  	_curr.X += deltx;  	_curr.Y += delty;  	_physicalCursorLocation.X += deltx;  	_physicalCursorLocation.Y += delty;  	_prev = _physicalCursorLocation;  	#region clip to the screen bounds  	if (_curr.X < 0)  		_curr.X = 0;  	else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  		_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  	if (_curr.Y < 0)  		_curr.Y = 0;  	else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  		_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  	#endregion  	Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: if (deltx < 100 && delty < 100) {  	int newx = _curr.X + deltx;  	int newy = _curr.Y + delty;  	_curr.X += deltx;  	_curr.Y += delty;  	_physicalCursorLocation.X += deltx;  	_physicalCursorLocation.Y += delty;  	_prev = _physicalCursorLocation;  	#region clip to the screen bounds  	if (_curr.X < 0)  		_curr.X = 0;  	else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  		_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  	if (_curr.Y < 0)  		_curr.Y = 0;  	else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  		_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  	#endregion  	Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HandleDoubleClickLogic,The following statement contains a magic number: if (_state.LastDownButton == button // has to be same button  && _state.LastDownPt.X == x // has to be same X-coord  && _state.LastDownPt.Y == y // has to be same Y-coord  && time - _state.LastDownTime <= Win32.GetDoubleClickTime ())// has to happen fast enough   {  	_state.IssueDoubleClickOnMouseUp = true;  	// dlbclk determination is made on the second down  	_state.IssueClickOnMouseUp = false;  	// no single click is now loaded  	nClicks = 2;  }  else// no double click here' so set this state   {  	_state.LastDownButton = button;  	_state.LastDownTime = time;  	_state.LastDownPt = new Point (x' y);  	_state.IssueDoubleClickOnMouseUp = false;  	// no double click was determined  	_state.IssueClickOnMouseUp = true;  	// a single click is "loaded'" and the first mouse-up of any button unloads it  	nClicks = 1;  }  
Magic Number,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HandleDoubleClickLogic,The following statement contains a magic number: nClicks = 2;  
Magic Number,PrefabWinAPI,Win32,C:\repos\prefab_io\Win32\Win32.cs,GetProcessPathFromWindowHandle,The following statement contains a magic number: try {  	uint pid = 0;  	StringBuilder sb = new StringBuilder (2000);  	GetWindowThreadProcessId (hwnd' ref pid);  	Process p = Process.GetProcessById ((int)pid);  	string filename = p.MainModule.FileName;  	p.Dispose ();  	return filename;  }  catch (Exception e) {  	return "exception: " + e.Message;  }  
Missing Default,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following switch statement is missing a default case: switch (wParam) // figure out which button was pressed' if any  {  ////////// down events  case (int)Win32.WM.LBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTDOWN;  	button = MouseButtons.Left;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.RBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTDOWN;  	button = MouseButtons.Right;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.MBUTTONDOWN:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEDOWN;  	button = MouseButtons.Middle;  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  case (int)Win32.WM.XBUTTONDOWN:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON1;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XBUTTON2;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	isDown = true;  	nClicks = HandleDoubleClickLogic (button' info.pt.x' info.pt.y' now);  	break;  ////////// up events  case (int)Win32.WM.LBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.LEFTUP;  	button = MouseButtons.Left;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.RBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.RIGHTUP;  	button = MouseButtons.Right;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.MBUTTONUP:  	input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.MIDDLEUP;  	button = MouseButtons.Middle;  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  case (int)Win32.WM.XBUTTONUP:  	if ((wParam >> 16) == 1) {  		// high-order word specifies which button was pressed  		button = MouseButtons.XButton1;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else if ((wParam >> 16) == 2) {  		button = MouseButtons.XButton2;  		input.mi.dwFlags = (IntPtr)Win32.MOUSEEVENTF.XUP;  	}  	else  		Debug.Fail ("XButton message received without a button identifier.");  	nClicks = _state.IssueDoubleClickOnMouseUp ? 2 : 1;  	break;  }  
Missing Default,PrefabWinAPI,LowLevelMouseHook,C:\repos\prefab_io\Win32\LowLevelMouseHook.cs,HookCallback,The following switch statement is missing a default case: switch (_strategy) {  case MoveStrategy.Standard:  	_curr = new Point (info.pt.x' info.pt.y);  	_prev = _curr;  	Win32.SetCursorPos (_curr.X' _curr.Y);  	break;  case MoveStrategy.Clipped:  	// set up the event argument  	int deltx = info.pt.x - _prev.X;  	int delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  	}  	break;  case MoveStrategy.Relative:  	deltx = info.pt.x - _prev.X;  	delty = info.pt.y - _prev.Y;  	if (deltx < 100 && delty < 100) {  		int newx = _curr.X + deltx;  		int newy = _curr.Y + delty;  		_curr.X += deltx;  		_curr.Y += delty;  		_physicalCursorLocation.X += deltx;  		_physicalCursorLocation.Y += delty;  		_prev = _physicalCursorLocation;  		#region clip to the screen bounds  		if (_curr.X < 0)  			_curr.X = 0;  		else if (_curr.X >= System.Windows.SystemParameters.VirtualScreenWidth)  			_curr.X = (int)System.Windows.SystemParameters.VirtualScreenWidth - 1;  		if (_curr.Y < 0)  			_curr.Y = 0;  		else if (_curr.Y >= System.Windows.SystemParameters.VirtualScreenHeight)  			_curr.Y = (int)System.Windows.SystemParameters.VirtualScreenHeight - 1;  		#endregion  		Win32.SetCursorPos (_physicalCursorLocation.X' _physicalCursorLocation.Y);  	}  	break;  }  
