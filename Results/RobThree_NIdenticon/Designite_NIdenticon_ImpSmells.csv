Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,Cyclomatic complexity of the method is 11
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,BlockGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\BlockGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,IBlockGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\IBlockGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,RectangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RectangleGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,IdenticonGenerator,The method has 5 parameters. Parameters: algorithm' size' defaultBackgroundColor' defaultBlocks' encoding
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,IdenticonGenerator,The method has 6 parameters. Parameters: algorithm' size' defaultBackgroundColor' defaultBlocks' encoding' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,IdenticonGenerator,The method has 7 parameters. Parameters: algorithm' size' defaultBackgroundColor' defaultBlocks' encoding' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 5 parameters. Parameters: value' size' backgroundcolor' blocks' encoding
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 6 parameters. Parameters: value' size' backgroundcolor' blocks' encoding' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 7 parameters. Parameters: value' size' backgroundcolor' blocks' encoding' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 8 parameters. Parameters: value' size' backgroundcolor' blocks' encoding' blockGenerators' brushGenerator' algorithm
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 5 parameters. Parameters: ipaddress' size' backgroundcolor' blocks' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 6 parameters. Parameters: ipaddress' size' backgroundcolor' blocks' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 7 parameters. Parameters: ipaddress' size' backgroundcolor' blocks' blockGenerators' brushGenerator' algorithm
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 5 parameters. Parameters: value' size' backgroundcolor' blocks' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 6 parameters. Parameters: value' size' backgroundcolor' blocks' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 7 parameters. Parameters: value' size' backgroundcolor' blocks' blockGenerators' brushGenerator' algorithm
Long Statement,Devcorner.NIdenticon.BrushGenerators,StaticColorBrushGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\StaticColorBrushGenerator.cs,ColorFromText,The length of the statement  "            return Color.FromArgb(255' Color.FromArgb(BitConverter.ToInt32(new MD5CryptoServiceProvider().ComputeHash(encoding.GetBytes(value))' 0))); " is 138.
Long Statement,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The length of the statement  "            return this.Create(value' size' backgroundcolor' blocks' encoding' blockGenerators' brushGenerator' this.DefaultAlgorithm); " is 123.
Long Statement,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The length of the statement  "            return this.Create(encoding.GetBytes(value ?? string.Empty)' size' backgroundcolor' blocks' blockGenerators' brushGenerator); " is 125.
Long Statement,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The length of the statement  "            return this.Create(ipaddress.GetAddressBytes()' size' backgroundcolor' blocks' blockGenerators' brushGenerator' algorithm); " is 123.
Long Statement,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The length of the statement  "                throw new Exception("At least one symmetrical blockgenerator required for identicons with uneven number of horizontal blocks"); " is 127.
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,RectangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RectangleGenerator.cs,Draw,The following statement contains a magic number: if (seed % 2 == 0)                  g.FillRectangle(fg' r);
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,Draw,The following statement contains a magic number: var t = ((int)(seed & 0xEFFF) + (fliphorizontal ? 2 : 0)) % 4;
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,Draw,The following statement contains a magic number: var t = ((int)(seed & 0xEFFF) + (fliphorizontal ? 2 : 0)) % 4;
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,GetTriangle,The following statement contains a magic number: switch (type)              {                  case 0: //  ◢                      return new[] {                          new Point(r.Left' r.Bottom)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };                  case 1: //  ◤                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Left' r.Bottom)                      };                  case 2: //  ◣                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Bottom)'                          new Point(r.Left' r.Bottom)                      };                  case 3: //  ◥                  default:                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,GetTriangle,The following statement contains a magic number: switch (type)              {                  case 0: //  ◢                      return new[] {                          new Point(r.Left' r.Bottom)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };                  case 1: //  ◤                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Left' r.Bottom)                      };                  case 2: //  ◣                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Bottom)'                          new Point(r.Left' r.Bottom)                      };                  case 3: //  ◥                  default:                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };              }
Magic Number,Devcorner.NIdenticon.BrushGenerators,RandomColorBrushGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\RandomColorBrushGenerator.cs,GetBrush,The following statement contains a magic number: unchecked              {                  return new SolidBrush(Color.FromArgb(255' Color.FromArgb((int)seed)));              }
Magic Number,Devcorner.NIdenticon.BrushGenerators,StaticColorBrushGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\StaticColorBrushGenerator.cs,ColorFromIPAddress,The following statement contains a magic number: return Color.FromArgb(255' Color.FromArgb(BitConverter.ToInt32(ipaddress.GetAddressBytes()' 0)));
Magic Number,Devcorner.NIdenticon.BrushGenerators,StaticColorBrushGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\StaticColorBrushGenerator.cs,ColorFromText,The following statement contains a magic number: return Color.FromArgb(255' Color.FromArgb(BitConverter.ToInt32(new MD5CryptoServiceProvider().ComputeHash(encoding.GetBytes(value))' 0)));
Magic Number,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The following statement contains a magic number: bool hasunevencols = blocks.Width % 2 != 0;
Magic Number,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The following statement contains a magic number: using (var bgbrush = new SolidBrush(backgroundcolor))              using (var gfx = Graphics.FromImage(result))              {                  gfx.FillRectangle(bgbrush' 0' 0' size.Width' size.Height);                    var dhash = hash.Concat(hash).ToArray();                  int hashlen = hash.Length;                  int i = 0;                  int halfwidth = blocks.Width / 2;                  for (var x = 0; x < (hasunevencols ? halfwidth+1 : halfwidth); x++)                  {                      for (var y = 0; y < blocks.Height; y++' i++)                      {                          var blockgen = GetBlockGenerator((x == halfwidth && hasunevencols) ? symblockgens : allblockgens' hash[i % hashlen]);                          var seed = BitConverter.ToUInt32(dhash' i % hashlen);                            using (var fgbrush = brushGenerator.GetBrush(seed))                          {                              Rectangle rl = new Rectangle(x * blockwidth' y * blockheight' blockwidth' blockheight);                              blockgen.Draw(gfx' rl' bgbrush' fgbrush' seed' false);                                if ((x != halfwidth) || ((x==halfwidth) && !hasunevencols))                              {                                  Rectangle rr = new Rectangle((size.Width - blockwidth) - (x * blockwidth)' y * blockheight' blockwidth' blockheight);                                  blockgen.Draw(gfx' rr' bgbrush' fgbrush' seed' true);                              }                          }                      }                  }              }
Magic Number,Devcorner.NIdenticon,IdenticonGenerator,C:\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,GetBlockGenerator,The following statement contains a magic number: var f = ((double)totalweight / 256);
