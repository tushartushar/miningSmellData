Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,Cyclomatic complexity of the method is 14
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,BlockGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\BlockGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,IBlockGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\IBlockGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,RectangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RectangleGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,Draw,The method has 6 parameters. Parameters: g' r' bg' fg' seed' fliphorizontal
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,IdenticonGenerator,The method has 5 parameters. Parameters: algorithm' size' defaultBackgroundColor' defaultBlocks' encoding
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,IdenticonGenerator,The method has 6 parameters. Parameters: algorithm' size' defaultBackgroundColor' defaultBlocks' encoding' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,IdenticonGenerator,The method has 7 parameters. Parameters: algorithm' size' defaultBackgroundColor' defaultBlocks' encoding' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 5 parameters. Parameters: value' size' backgroundcolor' blocks' encoding
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 6 parameters. Parameters: value' size' backgroundcolor' blocks' encoding' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 7 parameters. Parameters: value' size' backgroundcolor' blocks' encoding' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 8 parameters. Parameters: value' size' backgroundcolor' blocks' encoding' blockGenerators' brushGenerator' algorithm
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 5 parameters. Parameters: ipaddress' size' backgroundcolor' blocks' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 6 parameters. Parameters: ipaddress' size' backgroundcolor' blocks' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 7 parameters. Parameters: ipaddress' size' backgroundcolor' blocks' blockGenerators' brushGenerator' algorithm
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 5 parameters. Parameters: value' size' backgroundcolor' blocks' blockGenerators
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 6 parameters. Parameters: value' size' backgroundcolor' blocks' blockGenerators' brushGenerator
Long Parameter List,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The method has 7 parameters. Parameters: value' size' backgroundcolor' blocks' blockGenerators' brushGenerator' algorithm
Long Statement,Devcorner.NIdenticon.BrushGenerators,StaticColorBrushGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\StaticColorBrushGenerator.cs,ColorFromText,The length of the statement  "            return Color.FromArgb(255' Color.FromArgb(BitConverter.ToInt32(new MD5CryptoServiceProvider().ComputeHash(encoding.GetBytes(value))' 0))); " is 138.
Long Statement,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The length of the statement  "            return Create(encoding.GetBytes(value ?? string.Empty)' size' backgroundcolor' blocks' blockGenerators' brushGenerator); " is 120.
Long Statement,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The length of the statement  "                throw new Exception("At least one symmetrical blockgenerator required for identicons with uneven number of horizontal blocks"); " is 127.
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,PieGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\PieGenerator.cs,Draw,The following statement contains a magic number: switch ((seed + (fliphorizontal ? 2 : 0)) % 4)              {                  case 0: //  ◞                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top - r.Height' r.Width * 2' r.Height * 2)' 0' 90);                      break;                  case 1: //  ◜                      g.FillPie(fg' new Rectangle(r.Left' r.Top' r.Width * 2' r.Height * 2)' -90' -90);                      break;                  case 2: //  ◟                      g.FillPie(fg' new Rectangle(r.Left' r.Top - r.Height' r.Width * 2' r.Height * 2)' 90' 90);                      break;                  case 3: //  ◝                  default:                      g.FillPie(fg' new Rectangle(r.Left - r.Width' r.Top' r.Width * 2' r.Height * 2)' 0' -90);                      break;              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,RectangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RectangleGenerator.cs,Draw,The following statement contains a magic number: seed % 2 == 0
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,RotatedRectangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\RotatedRectangleGenerator.cs,Draw,The following statement contains a magic number: g.FillPolygon(fg' new[] {                      new Point(r.Left + (r.Width / 2)' r.Top)'                      new Point(r.Right' r.Top + (r.Height / 2))'                      new Point(r.Left + (r.Width / 2)' r.Bottom)'                      new Point(r.Left' r.Top + (r.Height / 2))'                  });
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,Draw,The following statement contains a magic number: var t = ((int)(seed & 0xEFFF) + (fliphorizontal ? 2 : 0)) % 4;
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,Draw,The following statement contains a magic number: var t = ((int)(seed & 0xEFFF) + (fliphorizontal ? 2 : 0)) % 4;
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,GetTriangle,The following statement contains a magic number: switch (type)              {                  case 0: //  ◢                      return new[] {                          new Point(r.Left' r.Bottom)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };                  case 1: //  ◤                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Left' r.Bottom)                      };                  case 2: //  ◣                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Bottom)'                          new Point(r.Left' r.Bottom)                      };                  case 3: //  ◥                  default:                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };              }
Magic Number,Devcorner.NIdenticon.BlockGenerators,TriangleGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BlockGenerators\TriangleGenerator.cs,GetTriangle,The following statement contains a magic number: switch (type)              {                  case 0: //  ◢                      return new[] {                          new Point(r.Left' r.Bottom)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };                  case 1: //  ◤                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Left' r.Bottom)                      };                  case 2: //  ◣                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Bottom)'                          new Point(r.Left' r.Bottom)                      };                  case 3: //  ◥                  default:                      return new[] {                          new Point(r.Left' r.Top)'                          new Point(r.Right' r.Top)'                          new Point(r.Right' r.Bottom)                      };              }
Magic Number,Devcorner.NIdenticon.BrushGenerators,RandomColorBrushGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\RandomColorBrushGenerator.cs,GetBrush,The following statement contains a magic number: return new SolidBrush(Color.FromArgb(255' Color.FromArgb((int)seed)));
Magic Number,Devcorner.NIdenticon.BrushGenerators,StaticColorBrushGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\StaticColorBrushGenerator.cs,ColorFromIPAddress,The following statement contains a magic number: return Color.FromArgb(255' Color.FromArgb(BitConverter.ToInt32(ipaddress.GetAddressBytes()' 0)));
Magic Number,Devcorner.NIdenticon.BrushGenerators,StaticColorBrushGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\BrushGenerators\StaticColorBrushGenerator.cs,ColorFromText,The following statement contains a magic number: return Color.FromArgb(255' Color.FromArgb(BitConverter.ToInt32(new MD5CryptoServiceProvider().ComputeHash(encoding.GetBytes(value))' 0)));
Magic Number,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The following statement contains a magic number: bool hasunevencols = blocks.Width % 2 != 0;
Magic Number,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,Create,The following statement contains a magic number: int halfwidth = blocks.Width / 2;
Magic Number,Devcorner.NIdenticon,IdenticonGenerator,C:\research\architectureSmells\repos\RobThree_NIdenticon\NIdenticon\IdenticonGenerator.cs,GetBlockGenerator,The following statement contains a magic number: var f = ((double)totalweight / 256);
