Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Winium.Mobile.Connectivity.Emulator,EmulatorController,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Emulator\EmulatorController.cs,TranslatePhoneToVirtualmachinePoint,Cyclomatic complexity of the method is 8
Long Statement,Winium.Mobile.Connectivity,Devices,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Devices.cs,GetMatchingDevice,The length of the statement  "	deviceInfo = this.AvailableDevices.FirstOrDefault (x => x.ToString ().Equals (desiredName' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,Winium.Mobile.Connectivity,Devices,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Devices.cs,GetMatchingDevice,The length of the statement  "		deviceInfo = this.AvailableDevices.FirstOrDefault (x => x.ToString ().StartsWith (desiredName' StringComparison.OrdinalIgnoreCase)); " is 132.
Long Statement,Winium.Mobile.Connectivity,Retry,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Retry.cs,WithRetry,The length of the statement  "				Logger.Warn ("Exception {0} {1} caught' going to retry. Retries left {2}."' exception.GetType ().ToString ()' exception.Message' triesLeft); " is 140.
Long Statement,Winium.Mobile.Connectivity.Gestures,FlickGesture,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Gestures\FlickGesture.cs,Distance,The length of the statement  "	return Math.Sqrt (Math.Pow (this.StartPosition.X - this.EndPosition.X' 2) + Math.Pow (this.StartPosition.Y - this.EndPosition.Y' 2)); " is 133.
Magic Number,Winium.Mobile.Connectivity.Gestures,FlickGesture,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Gestures\FlickGesture.cs,FlickGesture,The following statement contains a magic number: this.PeriodBetweenPoints = TimeSpan.FromMilliseconds (25);  
Magic Number,Winium.Mobile.Connectivity.Gestures,FlickGesture,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Gestures\FlickGesture.cs,Distance,The following statement contains a magic number: return Math.Sqrt (Math.Pow (this.StartPosition.X - this.EndPosition.X' 2) + Math.Pow (this.StartPosition.Y - this.EndPosition.Y' 2));  
Magic Number,Winium.Mobile.Connectivity.Gestures,FlickGesture,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Gestures\FlickGesture.cs,Distance,The following statement contains a magic number: return Math.Sqrt (Math.Pow (this.StartPosition.X - this.EndPosition.X' 2) + Math.Pow (this.StartPosition.Y - this.EndPosition.Y' 2));  
Magic Number,Winium.Mobile.Connectivity.Gestures,ScrollGesture,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Gestures\ScrollGesture.cs,ScrollGesture,The following statement contains a magic number: this.NumberOfIntermediatePoints = 5;  
Magic Number,Winium.Mobile.Connectivity.Gestures,ScrollGesture,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Gestures\ScrollGesture.cs,ScrollGesture,The following statement contains a magic number: if (this.PeriodBetweenPoints == default(TimeSpan)) {  	this.PeriodBetweenPoints = TimeSpan.FromMilliseconds (50);  }  
Magic Number,Winium.Mobile.Connectivity.Gestures,ScrollGesture,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Gestures\ScrollGesture.cs,ScrollGesture,The following statement contains a magic number: this.PeriodBetweenPoints = TimeSpan.FromMilliseconds (50);  
Missing Default,Winium.Mobile.Connectivity.Emulator,EmulatorController,F:\newReposMay17\2gis_windows-universal-app-driver\Winium\Winium.Mobile.Connectivity\Emulator\EmulatorController.cs,TranslatePhoneToVirtualmachinePoint,The following switch statement is missing a default case: switch (this.client.DisplayOrientation) {  case DisplayOrientation.LandscapeLeft:  	translatedPoint.X = this.virtualScreenSize.Width - location.Y;  	translatedPoint.Y = location.X;  	break;  case DisplayOrientation.LandscapeRight:  	translatedPoint.X = location.Y;  	translatedPoint.Y = this.virtualScreenSize.Height - location.X;  	break;  }  
