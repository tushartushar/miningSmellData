Implementation smell,Namespace,Class,File,Method,Description
Long Method,Bonobo.Git.Server.Data.Update.Sqlite,AddGuidColumn,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\Sqlite\AddGuidColumn.cs,CreateTables,The method has 120 lines of code.
Long Method,Bonobo.Git.Server.Data.Update.SqlServer,AddGuidColumn,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\SqlServer\AddGuidColumn.cs,CreateTables,The method has 119 lines of code.
Long Method,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The method has 136 lines of code.
Complex Method,Bonobo.Git.Server,WebAuthorizeRepositoryAttribute,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\WebAuthorizeRepositoryAttribute.cs,OnAuthorization,Cyclomatic complexity of the method is 9
Complex Method,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,Cyclomatic complexity of the method is 9
Complex Method,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,Cyclomatic complexity of the method is 15
Complex Method,Bonobo.Git.Server.Helpers,ADHelper,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetAllDomainPossibilities,Cyclomatic complexity of the method is 8
Long Parameter List,System.Linq,AnonymousComparer,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' compareKeySelector
Long Parameter List,System.Linq,AnonymousComparer,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' compareKeySelector
Long Parameter List,System.Linq,AnonymousComparer,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' compareKeySelector
Long Parameter List,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetCommits,The method has 5 parameters. Parameters: name' page' pageSize' referenceName' totalCount
Long Parameter List,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetTags,The method has 5 parameters. Parameters: name' page' p' referenceName' totalCount
Long Parameter List,Bonobo.Git.Server.Data,EFRepositoryRepository,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\EFRepositoryRepository.cs,AddMembers,The method has 5 parameters. Parameters: users' admins' teams' repo' database
Long Parameter List,Bonobo.Git.Server.Git.GitService,IGitService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\IGitService.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService,GitServiceExecutor,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceExecutor.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService,GitServiceExtensions,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceExtensions.cs,ExecuteGitUploadPack,The method has 5 parameters. Parameters: self' correlationId' repositoryName' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService,GitServiceExtensions,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceExtensions.cs,ExecuteGitReceivePack,The method has 5 parameters. Parameters: self' correlationId' repositoryName' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,DurableGitServiceResult,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\DurableGitServiceResult.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackCommit,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackCommit.cs,ReceivePackCommit,The method has 6 parameters. Parameters: id' tree' parents' author' committer' message
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ParsedReceivePack,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ParsedReceivePack.cs,ParsedReceivePack,The method has 6 parameters. Parameters: packId' repositoryName' pktLines' pushedByUser' timestamp' commits
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Owin.Windows,NativeMethods,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,AcquireCredentialsHandle,The method has 9 parameters. Parameters: pszPrincipal' pszPackage' fCredentialUse' PAuthenticationID' pAuthData' pGetKeyFn' pvGetKeyArgument' phCredential' ptsExpiry
Long Parameter List,Bonobo.Git.Server.Owin.Windows,NativeMethods,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,AcceptSecurityContext,The method has 9 parameters. Parameters: phCredential' phContext' pInput' fContextReq' TargetDataRep' phNewContext' pOutput' pfContextAttr' ptsTimeStamp
Long Parameter List,Bonobo.Git.Server.Owin.Windows,NativeMethods,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,AcceptSecurityContext,The method has 9 parameters. Parameters: phCredential' phContext' pInput' fContextReq' TargetDataRep' phNewContext' pOutput' pfContextAttr' ptsTimeStamp
Long Parameter List,Bonobo.Git.Server.Security,ADMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\ADMembershipService.cs,CreateUser,The method has 6 parameters. Parameters: username' password' givenName' surname' email' id
Long Parameter List,Bonobo.Git.Server.Security,ADMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\ADMembershipService.cs,CreateUser,The method has 5 parameters. Parameters: username' password' givenName' surname' email
Long Parameter List,Bonobo.Git.Server.Security,ADMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\ADMembershipService.cs,UpdateUser,The method has 6 parameters. Parameters: id' username' givenName' surname' email' password
Long Parameter List,Bonobo.Git.Server.Security,EFMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\EFMembershipService.cs,CreateUser,The method has 5 parameters. Parameters: username' password' givenName' surname' email
Long Parameter List,Bonobo.Git.Server.Security,EFMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\EFMembershipService.cs,CreateUser,The method has 6 parameters. Parameters: username' password' givenName' surname' email' id
Long Parameter List,Bonobo.Git.Server.Security,EFMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\EFMembershipService.cs,UpdateUser,The method has 6 parameters. Parameters: id' username' givenName' surname' email' password
Long Parameter List,Bonobo.Git.Server.Security,RepositoryPermissionService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,HasPermission,The method has 5 parameters. Parameters: userId' userTeams' userIsSystemAdministrator' repositoryModel' requiredLevel
Long Parameter List,Bonobo.Git.Server.Security,RepositoryPermissionService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,CheckNamedUserPermission,The method has 5 parameters. Parameters: userId' userTeams' userIsSystemAdministrator' repository' requiredLevel
Long Parameter List,Bonobo.Git.Server.Security,IMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\IMembershipService.cs,CreateUser,The method has 5 parameters. Parameters: username' password' givenName' surname' email
Long Parameter List,Bonobo.Git.Server.Security,IMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\IMembershipService.cs,CreateUser,The method has 6 parameters. Parameters: username' password' givenName' surname' email' id
Long Parameter List,Bonobo.Git.Server.Security,IMembershipService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\IMembershipService.cs,UpdateUser,The method has 6 parameters. Parameters: id' username' givenName' surname' email' password
Long Identifier,Bonobo.Git.Server,RepositoryNameNormalizerAttribute,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\RepositoryNameNormalizerAttribute.cs,OnActionExecuting,The length of the parameter incomingRepositoryNameParameter is 31.
Long Identifier,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The length of the parameter isReceivePackRecoveryProcessEnabled is 35.
Long Identifier,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,ReceivePackRecovery,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\ReceivePackRecovery.cs,ReceivePackRecovery,The length of the parameter failedPackWaitTimeBeforeExecution is 33.
Long Identifier,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,ReceivePackRecovery,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\ReceivePackRecovery.cs,,The length of the parameter failedPackWaitTimeBeforeExecution is 33.
Long Identifier,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,,The length of the parameter SecurityNativeDataRepresentation is 32.
Long Statement,System.Linq,AnonymousComparer,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,GroupJoin,The length of the statement  "            return outer.GroupJoin(inner' outerKeySelector' innerKeySelector' resultSelector' AnonymousComparer.Create(compareKeySelector)); " is 128.
Long Statement,System.Linq,AnonymousComparer,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,Join,The length of the statement  "            return outer.Join(inner' outerKeySelector' innerKeySelector' resultSelector' AnonymousComparer.Create(compareKeySelector)); " is 123.
Long Statement,Bonobo.Git.Server.Attributes,AllViewsFilter,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\AllViewsAttribute.cs,OnActionExecuting,The length of the statement  "            filterContext.Controller.ViewBag.PermittedRepositories = PopulateRepoGoToList(filterContext.HttpContext.User.Id()' filterContext.Controller.ControllerContext); " is 159.
Long Statement,Bonobo.Git.Server.Attributes,AllViewsFilter,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\AllViewsAttribute.cs,PopulateRepoGoToList,The length of the statement  "            var firstList = pullList.Union(adminList' new InlineComparer<RepositoryModel>((lhs' rhs) => lhs.Id == rhs.Id' obj => obj.Id.GetHashCode())) " is 139.
Long Statement,Bonobo.Git.Server,UserExtensions,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Extensions\UserExtensions.cs,IsWindowsAuthenticated,The length of the statement  "            return !String.IsNullOrEmpty(authenticationMethod) && authenticationMethod.Equals("Windows"' StringComparison.OrdinalIgnoreCase); " is 129.
Long Statement,Bonobo.Git.Server,GitAuthorizeAttribute,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\GitAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "            if (httpContext.Request.IsAuthenticated && httpContext.User != null && httpContext.User.Identity is System.Security.Claims.ClaimsIdentity) " is 138.
Long Statement,Bonobo.Git.Server,WebAuthorizeAttribute,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\WebAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "                if (!filterContext.HttpContext.User.IsInRole(Definitions.Roles.Member) && !filterContext.HttpContext.User.Identity.IsAuthenticated) " is 131.
Long Statement,Bonobo.Git.Server,WebAuthorizeRepositoryAttribute,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\WebAuthorizeRepositoryAttribute.cs,OnAuthorization,The length of the statement  "                    if (action.Equals("index"' StringComparison.OrdinalIgnoreCase) && controller.Equals("repository"' StringComparison.OrdinalIgnoreCase)) " is 134.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetTags,The length of the statement  "            var commits = new HashSet<RepositoryCommitModel>(AnonymousComparer.Create<RepositoryCommitModel>((x' y) => x.ID == y.ID' obj => obj.ID.GetHashCode())); " is 151.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetHistory,The length of the statement  "                              .Where(c => c.Parents.Count() < 2 && c[path] != null && (c.Parents.Count() == 0 || c.Parents.FirstOrDefault()[path] == null || c[path].Target.Id != c.Parents.FirstOrDefault()[path].Target.Id)) " is 192.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetTreeModelsWithDetails,The length of the statement  "            var ancestors = _repository.Commits.QueryBy(new CommitFilter { IncludeReachableFrom = commit' SortBy = CommitSortStrategies.Topological | CommitSortStrategies.Reverse }).ToList(); " is 179.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,ToModel,The length of the statement  "            TreeChanges changes = !commit.Parents.Any() ? _repository.Diff.Compare<TreeChanges>(null' commit.Tree) : _repository.Diff.Compare<TreeChanges>(commit.Parents.First().Tree' commit.Tree); " is 185.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,ToModel,The length of the statement  "            Patch patches = !commit.Parents.Any() ? _repository.Diff.Compare<Patch>(null' commit.Tree) : _repository.Diff.Compare<Patch>(commit.Parents.First().Tree' commit.Tree); " is 167.
Long Statement,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_Start,The length of the statement  "                    throw new ConfigurationErrorsException("Please ensure that the sqlite connection string contains 'BinaryGUID=false;'."); " is 120.
Long Statement,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The length of the statement  "                        new NamedArguments.FailedPackWaitTimeBeforeExecution(TimeSpan.FromSeconds(0)))); // on start up set time to wait = 0 so that recovery for all waiting packs is attempted " is 168.
Long Statement,Bonobo.Git.Server.Configuration,DiagnosticReporter,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,CheckInternalMembership,The length of the statement  "                SafelyReport("User count"' () => new EFMembershipService { CreateContext = () => new BonoboGitServerContext() }.GetAllUsers().Count); " is 133.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,The length of the statement  "                if (model.OldPassword != null && MembershipService.ValidateUser(model.Username' model.OldPassword) != ValidationResult.Success) " is 127.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,The length of the statement  "                if (User.IsInRole(Definitions.Roles.Administrator) && model.Id == User.Id() && !(model.PostedSelectedRoles != null && model.PostedSelectedRoles.Contains(Definitions.Roles.Administrator))) " is 187.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,CreateADUser,The length of the statement  "                if (MembershipService.CreateUser(credentials' Guid.NewGuid().ToString()' adUser.GivenName' adUser.Surname' adUser.EmailAddress' userId)) " is 136.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,CreateADUser,The length of the statement  "                        AuthenticationManager.AuthenticationResponseGrant = new AuthenticationResponseGrant(new ClaimsPrincipal(Identity)' new AuthenticationProperties { IsPersistent = true }); " is 169.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The length of the statement  "            if ((Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)) " is 168.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The length of the statement  "            if ((Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)) " is 168.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,ForgotPassword,The length of the statement  "                    var resetUrl = Url.Action("ResetPassword"' "Home"' new {digest = HttpUtility.UrlEncode(Encoding.UTF8.GetBytes(token))}'Request.Url.Scheme); " is 139.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,WindowsLogin,The length of the statement  "                Request.GetOwinContext().Authentication.Challenge(authenticationProperties' WindowsAuthenticationDefaults.AuthenticationType); " is 126.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,LogOn,The length of the statement  "                        AuthenticationProvider.SignIn(model.Username' Url.IsLocalUrl(model.ReturnUrl) ? model.ReturnUrl : Url.Action("Index"' "Home")' model.RememberMe); " is 145.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,LogOn,The length of the statement  "                        if (Request.IsLocal && model.DatabaseResetCode > 0 && model.Username == "admin" && ConfigurationManager.AppSettings["AllowDBReset"] == "true" ) " is 143.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Edit,The length of the statement  "                var currentUserIsInAdminList = model.PostedSelectedAdministrators != null && model.PostedSelectedAdministrators.Contains(User.Id()); " is 132.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Detail,The length of the statement  "                model.IsCurrentUserAdministrator = RepositoryPermissionService.HasPermission(User.Id()' model.Id' RepositoryAccessLevel.Administer); " is 132.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,GetIndexModel,The length of the statement  "            return RepositoryPermissionService.GetAllPermittedRepositories(User.Id()' RepositoryAccessLevel.Pull).Select(x => ConvertRepositoryModel(x' User)).ToList(); " is 156.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,ConvertRepositoryDetailModel,The length of the statement  "                Users = model.PostedSelectedUsers != null ? model.PostedSelectedUsers.Select(x => MembershipService.GetUserModel(x)).ToArray() : new UserModel[0]' " is 146.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,ConvertRepositoryDetailModel,The length of the statement  "                Administrators = model.PostedSelectedAdministrators != null ? model.PostedSelectedAdministrators.Select(x => MembershipService.GetUserModel(x)).ToArray() : new UserModel[0]' " is 173.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,ConvertRepositoryDetailModel,The length of the statement  "                Teams = model.PostedSelectedTeams != null ? model.PostedSelectedTeams.Select(x => TeamRepository.GetTeam(x)).ToArray() : new TeamModel[0]' " is 138.
Long Statement,Bonobo.Git.Server.Controllers,TeamController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\TeamController.cs,ConvertTeamDetailModel,The length of the statement  "                Members = model.PostedSelectedUsers == null ? new UserModel[0] : model.PostedSelectedUsers.Select(x => MembershipService.GetUserModel(x)).ToArray()' " is 148.
Long Statement,Bonobo.Git.Server.Controllers,GitController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,SecureGetInfoRefs,The length of the statement  "                Log.Warning("GitC: SecureGetInfoRefs unauth because User {UserId} doesn't have permission {Permission} on  repo {RepositoryName}"'  " is 130.
Long Statement,Bonobo.Git.Server.Data,ADBackend,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateRepositories,The length of the statement  "                UserModel[] usersToRemove = repository.Users.Where(repoUser => !Users.Select(u => u.Id).Contains(repoUser.Id)).ToArray(); " is 121.
Long Statement,Bonobo.Git.Server.Data,ADBackend,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateRepositories,The length of the statement  "                TeamModel[] teamsToRemove = repository.Teams.Where(repoTeam => !Teams.Select(team => team.Id).Contains(repoTeam.Id)).ToArray(); " is 127.
Long Statement,Bonobo.Git.Server.Data,ADBackend,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateUsers,The length of the statement  "                    foreach (string username in group.GetMembers(true).OfType<UserPrincipal>().Select(x => x.UserPrincipalName).Where(x => x != null)) " is 130.
Long Statement,Bonobo.Git.Server.Data,ADBackend,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateTeams,The length of the statement  "            foreach (var team in Teams.Select(x => new { x.Id' Name = x.Name }).Where(x => !ActiveDirectorySettings.TeamNameToGroupNameMapping.Keys.Contains(x.Name' StringComparer.OrdinalIgnoreCase))) " is 188.
Long Statement,Bonobo.Git.Server.Data,ADBackend,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateTeams,The length of the statement  "                            Members = group.GetMembers(true).Select(x => MembershipService.GetUserModel(x.Guid.Value)).Where(o => o != null).ToArray() " is 122.
Long Statement,Bonobo.Git.Server.Data,ADBackend,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateRoles,The length of the statement  "            foreach (var role in Roles.Select(x => new { x.Id' Name = x.Name }).Where(x => !ActiveDirectorySettings.RoleNameToGroupNameMapping.Keys.Contains(x.Name' StringComparer.OrdinalIgnoreCase))) " is 188.
Long Statement,Bonobo.Git.Server.Data,EFRepositoryRepository,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\EFRepositoryRepository.cs,Create,The length of the statement  "                AddMembers(model.Users.Select(x => x.Id)' model.Administrators.Select(x => x.Id)' model.Teams.Select(x => x.Id)' repository' database); " is 135.
Long Statement,Bonobo.Git.Server.Data,EFRepositoryRepository,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\EFRepositoryRepository.cs,Update,The length of the statement  "                    AddMembers(model.Users.Select(x => x.Id)' model.Administrators.Select(x => x.Id)' model.Teams.Select(x => x.Id)' repo' db); " is 123.
Long Statement,Bonobo.Git.Server.Data.Update.ADBackendUpdate,Pre600UpdateTo600,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\UpdateADBackend.cs,UpdateADBackend,The length of the statement  "            var backupDirectory = PathEncoder.GetRootPath(ActiveDirectorySettings.BackendPath + "_pre6.0.0_" + DateTime.UtcNow.ToString("yyyyMMdd_HHmmss")); " is 144.
Long Statement,Bonobo.Git.Server.Data.Update.ADBackendUpdate,Pre600UpdateTo600,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\UpdateADBackend.cs,MakeBackupOfBackendDirectory,The length of the statement  "                    // Normally it's only the top most dir that fails to delete for some reason (usually because Explorer is holding a handle to stuff)... " is 134.
Long Statement,Bonobo.Git.Server.Data.Update.Sqlite,AddGuidColumn,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\Sqlite\AddGuidColumn.cs,CopyUsers,The length of the statement  "                // Existing users will have had passwords which were salted with their username' so we need to replicate that into the Salt column " is 130.
Long Statement,Bonobo.Git.Server.Data.Update.SqlServer,AddGuidColumn,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\SqlServer\AddGuidColumn.cs,CopyUsers,The length of the statement  "                // Existing users will have had passwords which were salted with their username' so we need to replicate that into the Salt column " is 130.
Long Statement,Bonobo.Git.Server.Extensions,TypeExtensions,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Extensions\TypeExtensions.cs,GetDisplayValue,The length of the statement  "            var displayAttribute = propertyInfo.GetCustomAttributes(true).FirstOrDefault(i => i.GetType().IsAssignableFrom(typeof(DisplayAttribute))) as DisplayAttribute; " is 158.
Long Statement,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,DurableGitServiceResult,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\DurableGitServiceResult.cs,ExecuteServiceByName,The length of the statement  "                    this.gitService.ExecuteServiceByName(correlationId' repositoryName' serviceName' options' inStream' new ReplicatingStream(outStream' resultFileStream)); " is 152.
Long Statement,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,ReceivePackRecovery,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\ReceivePackRecovery.cs,RecoverAll,The length of the statement  "                    var failedPackResultFilePath = recoveryFilePathBuilder.GetPathToResultFile(pack.PackId' pack.RepositoryName' "receive-pack"); " is 125.
Long Statement,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The length of the statement  "                gitService.ExecuteServiceByName(correlationId' repositoryName' serviceName' options' inStream' new ReplicatingStream(outStream' capturedOutputStream)); " is 151.
Long Statement,Bonobo.Git.Server.Helpers,ADHelper,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetUserPrincipal,The length of the statement  "            Log.Verbose("GetUserPrincipal: username {UserName}' domain {DomainName}' stripped {StrippedUserName}"' username' parsedDomainName' strippedUsername); " is 149.
Long Statement,Bonobo.Git.Server.Helpers,ADHelper,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetUserPrincipal,The length of the statement  "                    Log.Verbose("GetUserPrincipal: Did not find user {UserName} in domain {DomainName} by SamAccountName"' strippedUsername' domain.Name); " is 134.
Long Statement,Bonobo.Git.Server.Helpers,ADHelper,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetUserPrincipal,The length of the statement  "                Log.Error(exp' "GetUserPrincipal in domain: {DomainName}' user: {FullUserName} ({StrippedUserName})"' domain.Name' fullUsername' strippedUsername); " is 147.
Long Statement,Bonobo.Git.Server.Owin.Windows,SecurityBufferDesciption,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,Dispose,The length of the statement  "                        IntPtr SecBufferpvBuffer = Marshal.ReadIntPtr(pBuffers' CurrentOffset + Marshal.SizeOf(typeof(int)) + Marshal.SizeOf(typeof(int))); " is 131.
Long Statement,Bonobo.Git.Server.Owin.Windows,SecurityBufferDesciption,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,GetBytes,The length of the statement  "                    IntPtr SecBufferpvBuffer = Marshal.ReadIntPtr(pBuffers' CurrentOffset + Marshal.SizeOf(typeof(int)) + Marshal.SizeOf(typeof(int))); " is 131.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The length of the statement  "                                    Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername); " is 142.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,TryAcquireServerChallenge,The length of the statement  "                if (NativeMethods.AcquireCredentialsHandle(null' "NTLM"' SecurityCredentialsInbound' IntPtr.Zero' IntPtr.Zero' 0' IntPtr.Zero' ref credentials' ref lifetime) == 0) " is 163.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,TryAcquireServerChallenge,The length of the statement  "                    if (NativeMethods.AcceptSecurityContext(ref credentials' IntPtr.Zero' ref clientToken' StandardContextAttributes' SecurityNativeDataRepresentation' out context' out serverToken' out contextAttributes' out lifetime) == IntermediateResult) " is 237.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,IsClientResponseValid,The length of the statement  "                if (NativeMethods.AcceptSecurityContext(ref credentials' ref context' ref clientToken' StandardContextAttributes' SecurityNativeDataRepresentation' out context' out serverToken' out contextAttributes' out lifetime) == 0) " is 220.
Long Statement,Bonobo.Git.Server.Security,CookieAuthenticationProvider,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\CookieAuthenticationProvider.cs,SignIn,The length of the statement  "            ClaimsIdentity identity = new ClaimsIdentity(GetClaimsForUser(username)' CookieAuthenticationDefaults.AuthenticationType); " is 122.
Long Statement,Bonobo.Git.Server.Security,FederationAuthenticationProvider,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\FederationAuthenticationProvider.cs,Configure,The length of the statement  "                        if (context.OwinContext.Response.StatusCode == (int)HttpStatusCode.Unauthorized && context.Request.Headers.ContainsKey("AuthNoRedirect")) " is 137.
Long Statement,Bonobo.Git.Server.Security,FederationAuthenticationProvider,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\FederationAuthenticationProvider.cs,SignIn,The length of the statement  "            HttpContext.Current.GetOwinContext().Authentication.Challenge(authprop' WsFederationAuthenticationDefaults.AuthenticationType); " is 127.
Long Statement,Bonobo.Git.Server.Security,FederationAuthenticationProvider,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\FederationAuthenticationProvider.cs,SignOut,The length of the statement  "            HttpContext.Current.GetOwinContext().Authentication.SignOut(WsFederationAuthenticationDefaults.AuthenticationType' CookieAuthenticationDefaults.AuthenticationType); " is 164.
Long Statement,Bonobo.Git.Server.Security,WindowsAuthenticationProvider,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\WindowsAuthenticationProvider.cs,Configure,The length of the statement  "                        if (context.Request.Path != WindowsAuthenticationOptions.DefaultRedirectPath && !context.Request.Headers.ContainsKey("AuthNoRedirect")) " is 135.
Long Statement,Bonobo.Git.Server.Security,WindowsAuthenticationProvider,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\WindowsAuthenticationProvider.cs,SignIn,The length of the statement  "            ClaimsIdentity identity = new ClaimsIdentity(GetClaimsForUser(username)' WindowsAuthenticationDefaults.AuthenticationType); " is 123.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,HasPermission,The length of the statement  "            return HasPermission(userId' TeamRepository.GetTeams(userId)' IsSystemAdministrator(userId)' Repository.GetRepository(repositoryId)' requiredLevel); " is 148.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,GetAllPermittedRepositories,The length of the statement  "            return Repository.GetAllRepositories().Where(repo => HasPermission(userId' userTeams' userIsSystemAdministrator' repo' requiredLevel)); " is 135.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,CheckAnonymousPermission,The length of the statement  "                    return repository.AllowAnonymousPush == RepositoryPushMode.Yes || (repository.AllowAnonymousPush == RepositoryPushMode.Global && UserConfiguration.Current.AllowAnonymousPush); " is 175.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,CheckNamedUserPermission,The length of the statement  "            Log.Verbose("RepoPerms: Checking user {UserId} (admin? {IsAdmin}) has permission {Permission} on repo {RepositoryName}"' " is 120.
Long Statement,Bonobo.Git.Server.Security,PasswordService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\PasswordService.cs,ComparePassword,The length of the statement  "                There's test to cover it "TestThatValidatingAUserWithOldStyleSaltUpgradesTheirSalt" which can be turned off if necessary " is 120.
Long Statement,Bonobo.Git.Server.Security,PasswordService,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\PasswordService.cs,ComparePassword,The length of the statement  "            // This is the only use of username - to allow us to access accounts with deprecated hashes.  It's not used for salting any more " is 128.
Long Statement,Bonobo.Git.Server.App_Start,BundleConfig,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\App_Start\BundleConfig.cs,RegisterBundles,The length of the statement  "                .Include("~/Scripts/jquery.validate*"' "~/Content/uni/js/uni-form-validation.jquery.js"' "~/Scripts/MicrosoftAjax.js"' "~/Scripts/MicrosoftMvcAjax.js") " is 151.
Complex Conditional,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,The conditional expression  "User.IsInRole(Definitions.Roles.Administrator) && model.Id == User.Id() && !(model.PostedSelectedRoles != null && model.PostedSelectedRoles.Contains(Definitions.Roles.Administrator))"  is complex.
Complex Conditional,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The conditional expression  "(Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)"  is complex.
Complex Conditional,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The conditional expression  "(Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)"  is complex.
Complex Conditional,Bonobo.Git.Server.Controllers,HomeController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,LogOn,The conditional expression  "Request.IsLocal && model.DatabaseResetCode > 0 && model.Username == "admin" && ConfigurationManager.AppSettings["AllowDBReset"] == "true""  is complex.
Complex Conditional,Bonobo.Git.Server.Helpers,PathEncoder,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Encode,The conditional expression  "(('a' <= b) && (b <= 'z')) || // a-z                      (('A' <= b) && (b <= 'Z')) || // A-Z                      (('0' <= b) && (b <= '9')) || // 0-9                      ('-' == b) || ('.' == b) || ('_' == b) || // - . _                      (allowSlash && ('/' == b))"  is complex.
Empty Catch Block,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The method has an empty catch block.
Empty Catch Block,Bonobo.Git.Server.Configuration,DiagnosticReporter,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,DirectoryIsWritable,The method has an empty catch block.
Empty Catch Block,Bonobo.Git.Server.Data.Update.Pre600ADBackend,Pre600Functions,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\ADBackendPre6.0.0Models.cs,LoadContent,The method has an empty catch block.
Empty Catch Block,Bonobo.Git.Server.Data.Update,AutomaticUpdater,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\AutomaticUpdater.cs,DoUpdate,The method has an empty catch block.
Magic Number,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetHistory,The following statement contains a magic number: return _repository.Commits                                .QueryBy(new CommitFilter { IncludeReachableFrom = commit' SortBy = CommitSortStrategies.Topological })                                .Where(c => c.Parents.Count() < 2 && c[path] != null && (c.Parents.Count() == 0 || c.Parents.FirstOrDefault()[path] == null || c[path].Target.Id != c.Parents.FirstOrDefault()[path].Target.Id))                                .Select(s => ToModel(s)).ToList();
Magic Number,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,CreateRepositoryDetailModel,The following statement contains a magic number: var maximumMessageLength = 50;
Magic Number,Bonobo.Git.Server,RepositoryBrowser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,ToModel,The following statement contains a magic number: var shortMessageDetails = RepositoryCommitModelHelpers.MakeCommitMessage(commit.Message' 50);
Magic Number,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_AcquireRequestState,The following statement contains a magic number: if (culture == null)              {                  culture = !String.IsNullOrEmpty(UserConfiguration.Current.DefaultLanguage)                                ? new CultureInfo(UserConfiguration.Current.DefaultLanguage)                                : null;                    if (culture == null)                  {                      string langName = "en";                        if (HttpContext.Current.Request.UserLanguages != null &&                          HttpContext.Current.Request.UserLanguages.Length != 0 &&                          HttpContext.Current.Request.UserLanguages[0].Length > 2)                      {                          langName = HttpContext.Current.Request.UserLanguages[0].Substring(0' 2);                      }                        culture = new CultureInfo(langName);                      Session["Culture"] = culture;                  }              }
Magic Number,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_AcquireRequestState,The following statement contains a magic number: if (culture == null)              {                  culture = !String.IsNullOrEmpty(UserConfiguration.Current.DefaultLanguage)                                ? new CultureInfo(UserConfiguration.Current.DefaultLanguage)                                : null;                    if (culture == null)                  {                      string langName = "en";                        if (HttpContext.Current.Request.UserLanguages != null &&                          HttpContext.Current.Request.UserLanguages.Length != 0 &&                          HttpContext.Current.Request.UserLanguages[0].Length > 2)                      {                          langName = HttpContext.Current.Request.UserLanguages[0].Substring(0' 2);                      }                        culture = new CultureInfo(langName);                      Session["Culture"] = culture;                  }              }
Magic Number,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The following statement contains a magic number: if (isReceivePackRecoveryProcessEnabled)              {                  // git service execution durability registrations to enable receive-pack hook execution after failures                  container.RegisterType<IGitService' DurableGitServiceResult>();                  container.RegisterType<IHookReceivePack' ReceivePackRecovery>();                  container.RegisterType<IRecoveryFilePathBuilder' AutoCreateMissingRecoveryDirectories>();                  container.RegisterType<IRecoveryFilePathBuilder' OneFolderRecoveryFilePathBuilder>();                  container.RegisterInstance(new NamedArguments.FailedPackWaitTimeBeforeExecution(TimeSpan.FromSeconds(5 * 60)));                                    container.RegisterInstance(new NamedArguments.ReceivePackRecoveryDirectory(                      Path.IsPathRooted(ConfigurationManager.AppSettings["RecoveryDataPath"]) ?                          ConfigurationManager.AppSettings["RecoveryDataPath"] :                          HttpContext.Current.Server.MapPath(ConfigurationManager.AppSettings["RecoveryDataPath"])));              }
Magic Number,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The following statement contains a magic number: if (isReceivePackRecoveryProcessEnabled)              {                  // git service execution durability registrations to enable receive-pack hook execution after failures                  container.RegisterType<IGitService' DurableGitServiceResult>();                  container.RegisterType<IHookReceivePack' ReceivePackRecovery>();                  container.RegisterType<IRecoveryFilePathBuilder' AutoCreateMissingRecoveryDirectories>();                  container.RegisterType<IRecoveryFilePathBuilder' OneFolderRecoveryFilePathBuilder>();                  container.RegisterInstance(new NamedArguments.FailedPackWaitTimeBeforeExecution(TimeSpan.FromSeconds(5 * 60)));                                    container.RegisterInstance(new NamedArguments.ReceivePackRecoveryDirectory(                      Path.IsPathRooted(ConfigurationManager.AppSettings["RecoveryDataPath"]) ?                          ConfigurationManager.AppSettings["RecoveryDataPath"] :                          HttpContext.Current.Server.MapPath(ConfigurationManager.AppSettings["RecoveryDataPath"])));              }
Magic Number,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_Error,The following statement contains a magic number: if (exception != null)              {                  Response.Clear();                  HttpException httpException = exception as HttpException;                    RouteData routeData = new RouteData();                  routeData.Values.Add("controller"' "Home");                  if (httpException == null)                  {                      routeData.Values.Add("action"' "Error");                      if (exception != null)                      {                          Log.Error(exception' "Exception caught in Global.asax1");                      }                  }                  else                  {                      switch (httpException.GetHttpCode())                      {                          case 404:                              routeData.Values.Add("action"' "PageNotFound");                              break;                          case 500:                              routeData.Values.Add("action"' "ServerError");                              Log.Error(exception' "500 Exception caught in Global.asax");                              break;                          default:                              routeData.Values.Add("action"' "Error");                              Log.Error(exception' "Exception caught in Global.asax (code {Code})"' httpException.GetHttpCode());                              break;                      }                  }                  Server.ClearError();                  Response.TrySkipIisCustomErrors = true;                  IController errorController = new HomeController();                  errorController.Execute(new RequestContext(new HttpContextWrapper(Context)' routeData));              }
Magic Number,Bonobo.Git.Server,MvcApplication,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_Error,The following statement contains a magic number: if (exception != null)              {                  Response.Clear();                  HttpException httpException = exception as HttpException;                    RouteData routeData = new RouteData();                  routeData.Values.Add("controller"' "Home");                  if (httpException == null)                  {                      routeData.Values.Add("action"' "Error");                      if (exception != null)                      {                          Log.Error(exception' "Exception caught in Global.asax1");                      }                  }                  else                  {                      switch (httpException.GetHttpCode())                      {                          case 404:                              routeData.Values.Add("action"' "PageNotFound");                              break;                          case 500:                              routeData.Values.Add("action"' "ServerError");                              Log.Error(exception' "500 Exception caught in Global.asax");                              break;                          default:                              routeData.Values.Add("action"' "Error");                              Log.Error(exception' "Exception caught in Global.asax (code {Code})"' httpException.GetHttpCode());                              break;                      }                  }                  Server.ClearError();                  Response.TrySkipIisCustomErrors = true;                  IController errorController = new HomeController();                  errorController.Execute(new RequestContext(new HttpContextWrapper(Context)' routeData));              }
Magic Number,Bonobo.Git.Server,FileDisplayHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\FileDisplayHandler.cs,GetFileSizeString,The following statement contains a magic number: if (absolute_i >= 0x40000000)              {                  suffix = "GB";                  readable = (i >> 20);              }              else if (absolute_i >= 0x100000)              {                  suffix = "MB";                  readable = (i >> 10);              }              else if (absolute_i >= 0x400)              {                  suffix = "kB";                  readable = i;              }              else              {                  return i.ToString("0 B");              }
Magic Number,Bonobo.Git.Server,FileDisplayHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\FileDisplayHandler.cs,GetFileSizeString,The following statement contains a magic number: if (absolute_i >= 0x40000000)              {                  suffix = "GB";                  readable = (i >> 20);              }              else if (absolute_i >= 0x100000)              {                  suffix = "MB";                  readable = (i >> 10);              }              else if (absolute_i >= 0x400)              {                  suffix = "kB";                  readable = i;              }              else              {                  return i.ToString("0 B");              }
Magic Number,Bonobo.Git.Server,FileDisplayHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\FileDisplayHandler.cs,GetFileSizeString,The following statement contains a magic number: readable = readable / 1024;
Magic Number,Bonobo.Git.Server.Configuration,ActiveDirectorySettings,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\ActiveDirectorySettings.cs,CreateMapping,The following statement contains a magic number: if (!String.IsNullOrEmpty(definition))              {                  foreach (string entry in definition.Split('''' ';'))                  {                      string[] mapping = entry.Split('=');                      if (mapping.Length == 2)                      {                          string key = mapping[0].Trim();                          string value = mapping[1].Trim();                          if (!String.IsNullOrEmpty(key) && !String.IsNullOrEmpty(value))                          {                              result.Add(key' value);                          }                      }                  }              }
Magic Number,Bonobo.Git.Server.Configuration,DiagnosticReporter,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,DirectoryIsWritable,The following statement contains a magic number: try              {                  File.WriteAllBytes(probeFile' new byte[16]);                  return true;              }              catch (Exception ex)              {                  Report("Exception probing dir " + directory' ex.Message);                  return false;              }              finally              {                  try                  {                      File.Delete(probeFile);                  }                  catch                  {                      // We deliberately ignore these exceptions' we don't care                  }              }
Magic Number,Bonobo.Git.Server.Configuration,DiagnosticReporter,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,ExceptionLog,The following statement contains a magic number: SafelyRun(() =>              {                  var nameFormat = MvcApplication.GetLogFileNameFormat();                  var todayLogFileName = nameFormat.Replace("{Date}"' DateTime.Now.ToString("yyyyMMdd"));                  SafelyReport("LogFileName: "' () => todayLogFileName);                  var chunkSize = 10000;                  var length = new FileInfo(todayLogFileName).Length;                  Report("Log File total length"' length);                    var startingPoint = Math.Max(0' length - chunkSize);                  Report("Starting log dump from "' startingPoint);                    using (var logText = File.Open(todayLogFileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  {                      logText.Seek(startingPoint' SeekOrigin.Begin);                      var reader = new StreamReader(logText);                      _report.AppendLine(reader.ReadToEnd());                  }              });
Magic Number,Bonobo.Git.Server.Controllers,AccountController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,CreateADUser,The following statement contains a magic number: if (adUser != null)              {                  var userId = adUser.Guid.GetValueOrDefault(Guid.NewGuid());                  if (MembershipService.CreateUser(credentials' Guid.NewGuid().ToString()' adUser.GivenName' adUser.Surname' adUser.EmailAddress' userId))                  {                      // 2 because we just added the user and there is the default admin user.                      if (AuthenticationSettings.ImportWindowsAuthUsersAsAdmin || efms.UserCount() == 2)                      {                          Log.Information("Making AD user {User} into an admin"' credentials);                            var id = MembershipService.GetUserModel(credentials).Id;                          RoleProvider.AddUserToRoles(id' new[] {Definitions.Roles.Administrator});                            // Add the administrator role to the Identity/cookie                          var Identity = (ClaimsIdentity)User.Identity;                          Identity.AddClaim(new Claim(ClaimTypes.Role' Definitions.Roles.Administrator));                          var AuthenticationManager = HttpContext.GetOwinContext().Authentication;                          AuthenticationManager.AuthenticationResponseGrant = new AuthenticationResponseGrant(new ClaimsPrincipal(Identity)' new AuthenticationProperties { IsPersistent = true });                      }                        return RedirectToAction("Index"' "Repository");                  }                  else                  {                      ModelState.AddModelError("Username"' Resources.Account_Create_AccountAlreadyExists);                      return RedirectToAction("Index");                  }              }              else              {                  return RedirectToAction("Unauthorized"' "Home");              }
Magic Number,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Tags,The following statement contains a magic number: using (var browser = new RepositoryBrowser(Path.Combine(UserConfiguration.Current.Repositories' repo.Name)))              {                  var name = PathEncoder.Decode(encodedName);                  string referenceName;                  int totalCount;                  var commits = browser.GetTags(name' page' 10' out referenceName' out totalCount);                  PopulateBranchesData(browser' referenceName);                  ViewBag.TotalCount = totalCount;                  return View(new RepositoryCommitsModel {                      Commits = commits'                      Name = repo.Name'                      Logo = new RepositoryLogoDetailModel(repo.Logo)                  });              }
Magic Number,Bonobo.Git.Server.Controllers,RepositoryController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Commits,The following statement contains a magic number: using (var browser = new RepositoryBrowser(Path.Combine(UserConfiguration.Current.Repositories' repo.Name)))              {                  var name = PathEncoder.Decode(encodedName);                  string referenceName;                  int totalCount;                  var commits = browser.GetCommits(name' page.Value' 10' out referenceName' out totalCount);                  PopulateBranchesData(browser' referenceName);                  ViewBag.TotalCount = totalCount;                    var linksreg = repo.LinksUseGlobal ? UserConfiguration.Current.LinksRegex : repo.LinksRegex;                  var linksurl = repo.LinksUseGlobal ? UserConfiguration.Current.LinksUrl : repo.LinksUrl;                  foreach (var commit in commits)                  {                      var links = new List<string>();                      if (!string.IsNullOrEmpty(linksreg))                      {                          try                          {                              var matches = Regex.Matches(commit.Message' linksreg);                              if (matches.Count > 0)                              {                                  foreach (Match match in matches)                                  {                                      IEnumerable<Group> groups = match.Groups.Cast<Group>();                                      var link = "";                                      try                                      {                                          var m = groups.Select(x => x.ToString()).ToArray();                                          link = string.Format(linksurl' m);                                      }                                      catch (FormatException e)                                      {                                          link = "An error occured while trying to format the link. Exception: " + e.Message;                                      }                                      links.Add(link);                                  }                              }                          }                          catch (ArgumentException e)                          {                              links.Add("An error occured while trying to match the regualar expression. Error: " + e.Message);                          }                      }                      commit.Links = links;                  }                  return View(new RepositoryCommitsModel {                      Commits = commits'                      Name = repo.Name'                      Logo = new RepositoryLogoDetailModel(repo.Logo)                  });              }
Magic Number,Bonobo.Git.Server.Controllers,GitController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,GetInfoRefs,The following statement contains a magic number: Response.StatusCode = 200;
Magic Number,Bonobo.Git.Server.Controllers,GitController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,GetInfoRefs,The following statement contains a magic number: string serviceName = service.Substring(4);
Magic Number,Bonobo.Git.Server.Controllers,GitController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,UnauthorizedResult,The following statement contains a magic number: return new HttpStatusCodeResult(401);
Magic Number,Bonobo.Git.Server.Controllers,GitController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,FormatMessage,The following statement contains a magic number: return (input.Length + 4).ToString("X").PadLeft(4' '0') + input;
Magic Number,Bonobo.Git.Server.Controllers,GitController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,FormatMessage,The following statement contains a magic number: return (input.Length + 4).ToString("X").PadLeft(4' '0') + input;
Magic Number,Bonobo.Git.Server.Controllers,GitController,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,OnException,The following statement contains a magic number: filterContext.HttpContext.Response.StatusCode = 500;
Magic Number,Bonobo.Git.Server.Data,ADBackend,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,ADBackend,The following statement contains a magic number: if (enableAutoUpdate)              {                  updateTimer = new Timer(Update' null' TimeSpan.FromSeconds(0)' TimeSpan.FromSeconds(180));              }
Magic Number,Bonobo.Git.Server.Data.Update.ADBackendUpdate,Pre600UpdateTo600,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\UpdateADBackend.cs,MakeBackupOfBackendDirectory,The following statement contains a magic number: int attemptsRemaining = 5;
Magic Number,Bonobo.Git.Server.Data.Update.ADBackendUpdate,Pre600UpdateTo600,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\UpdateADBackend.cs,MakeBackupOfBackendDirectory,The following statement contains a magic number: while (attemptsRemaining-- > 0)              {                  try                  {                      Directory.Delete(backendDirectory' true);                      return;                  }                  catch (IOException) // System.IO.IOException: The directory is not empty                  {                      // Normally it's only the top most dir that fails to delete for some reason (usually because Explorer is holding a handle to stuff)...                      // If any json files are left we have a problem' if only folders are left                      // we can let it update without any problems. Leaving the old json files                      // means they would get loaded next run and crash the server.                      if (attemptsRemaining == 0 && Directory.EnumerateFiles(backendDirectory' "*.json").Any())                      {                          throw;                      }                      Thread.Sleep(1000);                  }              }
Magic Number,Bonobo.Git.Server.Git.GitService,GitServiceResultParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceResultParser.cs,ParseResult,The following statement contains a magic number: if (outputStream.Length >= 10)              {                  var buff5 = new byte[5];                    if (outputStream.Read(buff5' 0' buff5.Length) != buff5.Length)                  {                      throw new Exception("Unexpected number of bytes read");                  }                  if (outputStream.Read(buff5' 0' buff5.Length) != buff5.Length)                  {                      throw new Exception("Unexpected number of bytes read");                  }                    var firstChars = Encoding.ASCII.GetString(buff5);                  hasError = firstChars == "error";              }
Magic Number,Bonobo.Git.Server.Git.GitService,GitServiceResultParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceResultParser.cs,ParseResult,The following statement contains a magic number: if (outputStream.Length >= 10)              {                  var buff5 = new byte[5];                    if (outputStream.Read(buff5' 0' buff5.Length) != buff5.Length)                  {                      throw new Exception("Unexpected number of bytes read");                  }                  if (outputStream.Read(buff5' 0' buff5.Length) != buff5.Length)                  {                      throw new Exception("Unexpected number of bytes read");                  }                    var firstChars = Encoding.ASCII.GetString(buff5);                  hasError = firstChars == "error";              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: if (serviceName == "receive-pack" && inStream.Length > 0)              {                  // PARSING RECEIVE-PACK THAT IS OF THE FOLLOWING FORMAT:                   // (NEW LINES added for ease of reading)                  // (LLLL is length of the line (expressed in HEX) until next LLLL value)                  //                  // LLLL------ REF LINE -----------\0------- OHTER DATA -----------                  // LLLL------ REF LINE ----------------                  // ...                  // ...                  // 0000PACK------- REST OF PACKAGE --------                  //                    var pktLines = new List<ReceivePackPktLine>();                    var buff1 = new byte[1];                  var buff4 = new byte[4];                  var buff20 = new byte[20];                  var buff16K = new byte[1024 * 16];                     while (true)                  {                      ReadStream(inStream' buff4);                      var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);                      if (len == 0)                      {                          break;                      }                      len = len - buff4.Length;                        var accum = new LinkedList<byte>();                        while (len > 0)                      {                          len -= 1;                          ReadStream(inStream' buff1);                          if (buff1[0] == 0)                          {                              break;                          }                          accum.AddLast(buff1[0]);                      }                      if (len > 0)                      {                          inStream.Seek(len' SeekOrigin.Current);                      }                      var pktLine = Encoding.UTF8.GetString(accum.ToArray());                      var pktLineItems = pktLine.Split(' ');                        var fromCommit = pktLineItems[0];                      var toCommit = pktLineItems[1];                      var refName = pktLineItems[2];                        pktLines.Add(new ReceivePackPktLine(fromCommit' toCommit' refName));                  }                    // parse PACK contents                  var packCommits = new List<ReceivePackCommit>();                    // PACK format                  // https://www.kernel.org/pub/software/scm/git/docs/technical/pack-format.html                  // http://schacon.github.io/gitbook/7_the_packfile.html                    if (inStream.Position < inStream.Length)                  {                      ReadStream(inStream' buff4);                      if (Encoding.UTF8.GetString(buff4) != "PACK")                      {                          throw new Exception("Unexpected receive-pack 'PACK' content.");                      }                      ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var versionNum = BitConverter.ToInt32(buff4' 0);                        ReadStream(inStream' buff4);                      Array.Reverse(buff4);                      var numObjects = BitConverter.ToInt32(buff4' 0);                        while (numObjects > 0)                      {                          numObjects -= 1;                            ReadStream(inStream' buff1);                          var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);                          long len = buff1[0] & 15;                            var shiftAmount = 4;                          while ((buff1[0] >> 7) == 1)                          {                              ReadStream(inStream' buff1);                              len = len | ((long)(buff1[0] & 127) << shiftAmount);                                shiftAmount += 7;                          }                            if (type == GIT_OBJ_TYPE.OBJ_REF_DELTA)                          {                              // read ref name                              ReadStream(inStream' buff20);                          }                          if (type == GIT_OBJ_TYPE.OBJ_OFS_DELTA)                          {                              // read negative offset                              ReadStream(inStream' buff1);                              while ((buff1[0] >> 7) == 1)                              {                                  ReadStream(inStream' buff1);                              }                          }                            var origPosition = inStream.Position;                          long offsetVal = 0;                            using (var zlibStream = new ZlibStream(inStream' CompressionMode.Decompress' true))                          {                              // read compressed data max 16KB at a time                              var readRemaining = len;                              do                              {                                  var bytesUncompressed = zlibStream.Read(buff16K' 0' buff16K.Length);                                  readRemaining -= bytesUncompressed;                              } while (readRemaining > 0);                                if (type == GIT_OBJ_TYPE.OBJ_COMMIT)                              {                                  var parsedCommit = ParseCommitDetails(buff16K' len);                                  packCommits.Add(parsedCommit);                              }                              offsetVal = zlibStream.TotalIn;                          }                          // move back position a bit because ZLibStream reads more than needed for inflating                          inStream.Seek(origPosition + offsetVal' SeekOrigin.Begin);                      }                  }                  // -------------------                    var user = HttpContext.Current.User.Username();                  receivedPack = new ParsedReceivePack(correlationId' repositoryName' pktLines' user' DateTime.Now' packCommits);                    inStream.Seek(0' SeekOrigin.Begin);                    receivePackHandler.PrePackReceive(receivedPack);              }
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ParseSignature,The following statement contains a magic number: var timestampString = commitHeaderData.Substring(emailEnd + 2);
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ParseSignature,The following statement contains a magic number: var timestamp = new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero);
Magic Number,Bonobo.Git.Server.Helpers,RepositoryCommitModelHelpers,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\RepositoryCommitModelHelpers.cs,MakeCommitMessage,The following statement contains a magic number: return BreakLine(message' 25);
Magic Number,Bonobo.Git.Server.Helpers,ContentDispositionUtil,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ContentDispositionUtil.cs,AddByteToStringBuilder,The following statement contains a magic number: AddHexDigitToStringBuilder(num >> 4' builder);
Magic Number,Bonobo.Git.Server.Helpers,ContentDispositionUtil,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ContentDispositionUtil.cs,AddByteToStringBuilder,The following statement contains a magic number: AddHexDigitToStringBuilder(num % 16' builder);
Magic Number,Bonobo.Git.Server.Helpers,ContentDispositionUtil,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ContentDispositionUtil.cs,GetHeaderValue,The following statement contains a magic number: foreach (char c in fileName)                  if ((int)c > 127)                      return CreateRfc2231HeaderValue(fileName);
Magic Number,Bonobo.Git.Server.Helpers,PathEncoder,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Decode,The following statement contains a magic number: for (var i = 0; i < encodedPathLength; i++)              {                  // Capture current char/byte                  var c = encodedPath[i];                  var b = (byte)c;                  if (c != b)                  {                      // Throw for invalid input (non-byte character)                      throw new FormatException("Invalid non-byte input character.");                  }                  if ('~' == b)                  {                      // Decode URL encoded character                      byte value;                      if ((encodedPathLength <= i + 2) ||                          !byte.TryParse(encodedPath.Substring(i + 1' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out value))                      {                          // Throw for invalid input (insufficient space or non-hex value)                          throw new FormatException("Invalid format for encoded path character.");                      }                      // Add decoded byte and advance index                      bytes.Add(value);                      i += 2;                  }                  else                  {                      // Add unreserved characters as-is                      bytes.Add(b);                  }              }
Magic Number,Bonobo.Git.Server.Helpers,PathEncoder,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Decode,The following statement contains a magic number: for (var i = 0; i < encodedPathLength; i++)              {                  // Capture current char/byte                  var c = encodedPath[i];                  var b = (byte)c;                  if (c != b)                  {                      // Throw for invalid input (non-byte character)                      throw new FormatException("Invalid non-byte input character.");                  }                  if ('~' == b)                  {                      // Decode URL encoded character                      byte value;                      if ((encodedPathLength <= i + 2) ||                          !byte.TryParse(encodedPath.Substring(i + 1' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out value))                      {                          // Throw for invalid input (insufficient space or non-hex value)                          throw new FormatException("Invalid format for encoded path character.");                      }                      // Add decoded byte and advance index                      bytes.Add(value);                      i += 2;                  }                  else                  {                      // Add unreserved characters as-is                      bytes.Add(b);                  }              }
Magic Number,Bonobo.Git.Server.Helpers,PathEncoder,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Decode,The following statement contains a magic number: for (var i = 0; i < encodedPathLength; i++)              {                  // Capture current char/byte                  var c = encodedPath[i];                  var b = (byte)c;                  if (c != b)                  {                      // Throw for invalid input (non-byte character)                      throw new FormatException("Invalid non-byte input character.");                  }                  if ('~' == b)                  {                      // Decode URL encoded character                      byte value;                      if ((encodedPathLength <= i + 2) ||                          !byte.TryParse(encodedPath.Substring(i + 1' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out value))                      {                          // Throw for invalid input (insufficient space or non-hex value)                          throw new FormatException("Invalid format for encoded path character.");                      }                      // Add decoded byte and advance index                      bytes.Add(value);                      i += 2;                  }                  else                  {                      // Add unreserved characters as-is                      bytes.Add(b);                  }              }
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following statement contains a magic number: if (handshakeId != null && Options.Handshakes.TryGet(handshakeId' out handshake))              {                  WindowsAuthenticationToken token = WindowsAuthenticationToken.Create(Request.Headers["Authorization"]);                    switch (token.AuthorizationStage)                  {                      case AuthenticationStage.Request:                          if (handshake.TryAcquireServerChallenge(token))                          {                              Log.Verbose("WinAuth: Obtained challenge token OK");                                Response.Headers.Add("WWW-Authenticate"' new[] { string.Concat("NTLM "' token.Challenge) });                              Response.StatusCode = 401;                              return Task.FromResult(new AuthenticationTicket(null' properties));                          }                          break;                      case AuthenticationStage.Response:                          if (handshake.IsClientResponseValid(token))                          {                              properties = handshake.AuthenticationProperties;                              var uid = handshake.AuthenticatedUsername.ToLowerInvariant();                              var claimdelegate = Options.GetClaimsForUser(uid);                                Log.Verbose("WinAuth: Valid response for uid {UserId}"' uid);                                if (claimdelegate == null)                               {                                  string domainName = handshake.AuthenticatedUsername.GetDomain();                                    Log.Verbose("WinAuth: New user - looking-up user {UserName} in domain {DomainName}"'                                      handshake.AuthenticatedUsername' domainName);                                    var dc = new PrincipalContext(ContextType.Domain' domainName);                                  var adUser = UserPrincipal.FindByIdentity(dc' handshake.AuthenticatedUsername);                                    if (adUser == null)                                  {                                      Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername);                                      Response.StatusCode = 401;                                      return Task.FromResult(new AuthenticationTicket(null' null));                                  }                                    Log.Verbose("WinAuth: DC returned adUser {ADUser}"' adUser.GivenName);                                    ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                  List<Claim> result = new List<Claim>();                                  if (!String.IsNullOrEmpty(adUser.GivenName))                                  {                                      result.Add(new Claim(ClaimTypes.GivenName' adUser.GivenName));                                  }                                  if (!String.IsNullOrEmpty(adUser.Surname))                                  {                                      result.Add(new Claim(ClaimTypes.Surname' adUser.Surname));                                  }                                  result.Add(new Claim(ClaimTypes.NameIdentifier' adUser.Guid.ToString()));                                  result.Add(new Claim(ClaimTypes.Name' handshake.AuthenticatedUsername));                                  if (!String.IsNullOrEmpty(adUser.EmailAddress))                                  {                                      result.Add(new Claim(ClaimTypes.Email' adUser.EmailAddress));                                  }                                  identity.AddClaims(result);                                  identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                  Options.Handshakes.TryRemove(handshakeId);                                    Log.Verbose("WinAuth: New user - about to redirect to CreateADUser");                                    // user does not exist! Redirect to create page.                                  properties.RedirectUri = "/Account/CreateADUser";                                  return Task.FromResult(new AuthenticationTicket(identity' properties));                              }                              else                              {                                  Claim[] claims = claimdelegate.ToArray();                                  Log.Verbose("WinAuth: Found existing uid {UserId}' has {Claims} claims"' uid' claims.Length);                                  if (claims.Length > 0)                                  {                                      ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                      identity.AddClaims(claims);                                      identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                      Options.Handshakes.TryRemove(handshakeId);                                        Log.Verbose("WinAuth: Returning id auth ticket' claims: {Claims}"' claims);                                        return Task.FromResult(new AuthenticationTicket(identity' properties));                                  }                              }                          }                          break;                  }                  Response.Headers.Add("WWW-Authenticate"' new[] { "NTLM" });                  Response.StatusCode = 401;              }
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following statement contains a magic number: if (handshakeId != null && Options.Handshakes.TryGet(handshakeId' out handshake))              {                  WindowsAuthenticationToken token = WindowsAuthenticationToken.Create(Request.Headers["Authorization"]);                    switch (token.AuthorizationStage)                  {                      case AuthenticationStage.Request:                          if (handshake.TryAcquireServerChallenge(token))                          {                              Log.Verbose("WinAuth: Obtained challenge token OK");                                Response.Headers.Add("WWW-Authenticate"' new[] { string.Concat("NTLM "' token.Challenge) });                              Response.StatusCode = 401;                              return Task.FromResult(new AuthenticationTicket(null' properties));                          }                          break;                      case AuthenticationStage.Response:                          if (handshake.IsClientResponseValid(token))                          {                              properties = handshake.AuthenticationProperties;                              var uid = handshake.AuthenticatedUsername.ToLowerInvariant();                              var claimdelegate = Options.GetClaimsForUser(uid);                                Log.Verbose("WinAuth: Valid response for uid {UserId}"' uid);                                if (claimdelegate == null)                               {                                  string domainName = handshake.AuthenticatedUsername.GetDomain();                                    Log.Verbose("WinAuth: New user - looking-up user {UserName} in domain {DomainName}"'                                      handshake.AuthenticatedUsername' domainName);                                    var dc = new PrincipalContext(ContextType.Domain' domainName);                                  var adUser = UserPrincipal.FindByIdentity(dc' handshake.AuthenticatedUsername);                                    if (adUser == null)                                  {                                      Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername);                                      Response.StatusCode = 401;                                      return Task.FromResult(new AuthenticationTicket(null' null));                                  }                                    Log.Verbose("WinAuth: DC returned adUser {ADUser}"' adUser.GivenName);                                    ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                  List<Claim> result = new List<Claim>();                                  if (!String.IsNullOrEmpty(adUser.GivenName))                                  {                                      result.Add(new Claim(ClaimTypes.GivenName' adUser.GivenName));                                  }                                  if (!String.IsNullOrEmpty(adUser.Surname))                                  {                                      result.Add(new Claim(ClaimTypes.Surname' adUser.Surname));                                  }                                  result.Add(new Claim(ClaimTypes.NameIdentifier' adUser.Guid.ToString()));                                  result.Add(new Claim(ClaimTypes.Name' handshake.AuthenticatedUsername));                                  if (!String.IsNullOrEmpty(adUser.EmailAddress))                                  {                                      result.Add(new Claim(ClaimTypes.Email' adUser.EmailAddress));                                  }                                  identity.AddClaims(result);                                  identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                  Options.Handshakes.TryRemove(handshakeId);                                    Log.Verbose("WinAuth: New user - about to redirect to CreateADUser");                                    // user does not exist! Redirect to create page.                                  properties.RedirectUri = "/Account/CreateADUser";                                  return Task.FromResult(new AuthenticationTicket(identity' properties));                              }                              else                              {                                  Claim[] claims = claimdelegate.ToArray();                                  Log.Verbose("WinAuth: Found existing uid {UserId}' has {Claims} claims"' uid' claims.Length);                                  if (claims.Length > 0)                                  {                                      ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                      identity.AddClaims(claims);                                      identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                      Options.Handshakes.TryRemove(handshakeId);                                        Log.Verbose("WinAuth: Returning id auth ticket' claims: {Claims}"' claims);                                        return Task.FromResult(new AuthenticationTicket(identity' properties));                                  }                              }                          }                          break;                  }                  Response.Headers.Add("WWW-Authenticate"' new[] { "NTLM" });                  Response.StatusCode = 401;              }
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following statement contains a magic number: if (handshakeId != null && Options.Handshakes.TryGet(handshakeId' out handshake))              {                  WindowsAuthenticationToken token = WindowsAuthenticationToken.Create(Request.Headers["Authorization"]);                    switch (token.AuthorizationStage)                  {                      case AuthenticationStage.Request:                          if (handshake.TryAcquireServerChallenge(token))                          {                              Log.Verbose("WinAuth: Obtained challenge token OK");                                Response.Headers.Add("WWW-Authenticate"' new[] { string.Concat("NTLM "' token.Challenge) });                              Response.StatusCode = 401;                              return Task.FromResult(new AuthenticationTicket(null' properties));                          }                          break;                      case AuthenticationStage.Response:                          if (handshake.IsClientResponseValid(token))                          {                              properties = handshake.AuthenticationProperties;                              var uid = handshake.AuthenticatedUsername.ToLowerInvariant();                              var claimdelegate = Options.GetClaimsForUser(uid);                                Log.Verbose("WinAuth: Valid response for uid {UserId}"' uid);                                if (claimdelegate == null)                               {                                  string domainName = handshake.AuthenticatedUsername.GetDomain();                                    Log.Verbose("WinAuth: New user - looking-up user {UserName} in domain {DomainName}"'                                      handshake.AuthenticatedUsername' domainName);                                    var dc = new PrincipalContext(ContextType.Domain' domainName);                                  var adUser = UserPrincipal.FindByIdentity(dc' handshake.AuthenticatedUsername);                                    if (adUser == null)                                  {                                      Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername);                                      Response.StatusCode = 401;                                      return Task.FromResult(new AuthenticationTicket(null' null));                                  }                                    Log.Verbose("WinAuth: DC returned adUser {ADUser}"' adUser.GivenName);                                    ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                  List<Claim> result = new List<Claim>();                                  if (!String.IsNullOrEmpty(adUser.GivenName))                                  {                                      result.Add(new Claim(ClaimTypes.GivenName' adUser.GivenName));                                  }                                  if (!String.IsNullOrEmpty(adUser.Surname))                                  {                                      result.Add(new Claim(ClaimTypes.Surname' adUser.Surname));                                  }                                  result.Add(new Claim(ClaimTypes.NameIdentifier' adUser.Guid.ToString()));                                  result.Add(new Claim(ClaimTypes.Name' handshake.AuthenticatedUsername));                                  if (!String.IsNullOrEmpty(adUser.EmailAddress))                                  {                                      result.Add(new Claim(ClaimTypes.Email' adUser.EmailAddress));                                  }                                  identity.AddClaims(result);                                  identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                  Options.Handshakes.TryRemove(handshakeId);                                    Log.Verbose("WinAuth: New user - about to redirect to CreateADUser");                                    // user does not exist! Redirect to create page.                                  properties.RedirectUri = "/Account/CreateADUser";                                  return Task.FromResult(new AuthenticationTicket(identity' properties));                              }                              else                              {                                  Claim[] claims = claimdelegate.ToArray();                                  Log.Verbose("WinAuth: Found existing uid {UserId}' has {Claims} claims"' uid' claims.Length);                                  if (claims.Length > 0)                                  {                                      ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                      identity.AddClaims(claims);                                      identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                      Options.Handshakes.TryRemove(handshakeId);                                        Log.Verbose("WinAuth: Returning id auth ticket' claims: {Claims}"' claims);                                        return Task.FromResult(new AuthenticationTicket(identity' properties));                                  }                              }                          }                          break;                  }                  Response.Headers.Add("WWW-Authenticate"' new[] { "NTLM" });                  Response.StatusCode = 401;              }
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: if (Response.StatusCode == 401 && Response.Headers.ContainsKey("WWW-Authenticate") == false)              {                  var challenge = Helper.LookupChallenge(Options.AuthenticationType' Options.AuthenticationMode);                    if (challenge != null)                  {                      AuthenticationProperties challengeProperties = challenge.Properties;                        if (string.IsNullOrEmpty(challengeProperties.RedirectUri))                      {                          throw new ArgumentNullException("RedirectUri");                      }                        string protectedProperties = Options.StateDataFormat.Protect(challengeProperties);                      string handshakeId = Guid.NewGuid().ToString();                        WindowsAuthenticationHandshake handshake = new WindowsAuthenticationHandshake()                      {                          AuthenticationProperties = challengeProperties                      };                        Options.Handshakes.Add(handshakeId' handshake);                      Response.Redirect(WebUtilities.AddQueryString(Request.PathBase + Options.CallbackPath.Value' "id"' handshakeId));                  }              }
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationToken,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationToken.cs,Create,The following statement contains a magic number: if (!string.IsNullOrEmpty(headerValue) && headerValue.StartsWith("NTLM "))              {                  data = Convert.FromBase64String(headerValue.Substring(5));              }
Magic Number,Bonobo.Git.Server.Security,CookieAuthenticationProvider,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\CookieAuthenticationProvider.cs,Configure,The following statement contains a magic number: app.UseCookieAuthentication(new CookieAuthenticationOptions              {                  AuthenticationType = CookieAuthenticationDefaults.AuthenticationType'                  LoginPath = new PathString("/Home/LogOn")'                  ExpireTimeSpan = TimeSpan.FromDays(3)'                  SlidingExpiration = true'                  Provider = new Microsoft.Owin.Security.Cookies.CookieAuthenticationProvider                  {                      OnApplyRedirect = context =>                      {                          if (!context.Request.Headers.ContainsKey("AuthNoRedirect"))                          {                              context.Response.Redirect(context.RedirectUri);                          }                      }                  }'              });
Magic Number,Bonobo.Git.Server.Data.Mapping,RepositoryMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RepositoryMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Name)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RepositoryMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RepositoryMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Group)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RepositoryMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RepositoryMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Description)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RoleMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RoleMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Name)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RoleMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RoleMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Description)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,TeamMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\TeamMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Name)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,TeamMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\TeamMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Description)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.GivenName)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Surname)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Username)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Password)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Email)                  .IsRequired()                  .HasMaxLength(255);
Missing Default,Bonobo.Git.Server.Helpers,ContentDispositionUtil,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ContentDispositionUtil.cs,IsByteValidHeaderValueCharacter,The following switch statement is missing a default case: switch (b)              {                  case (byte)'-':                  case (byte)'.':                  case (byte)'_':                  case (byte)'~':                  case (byte)':':                  case (byte)'!':                  case (byte)'$':                  case (byte)'&':                  case (byte)'+':                      return true;              }
Missing Default,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,C:\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following switch statement is missing a default case: switch (token.AuthorizationStage)                  {                      case AuthenticationStage.Request:                          if (handshake.TryAcquireServerChallenge(token))                          {                              Log.Verbose("WinAuth: Obtained challenge token OK");                                Response.Headers.Add("WWW-Authenticate"' new[] { string.Concat("NTLM "' token.Challenge) });                              Response.StatusCode = 401;                              return Task.FromResult(new AuthenticationTicket(null' properties));                          }                          break;                      case AuthenticationStage.Response:                          if (handshake.IsClientResponseValid(token))                          {                              properties = handshake.AuthenticationProperties;                              var uid = handshake.AuthenticatedUsername.ToLowerInvariant();                              var claimdelegate = Options.GetClaimsForUser(uid);                                Log.Verbose("WinAuth: Valid response for uid {UserId}"' uid);                                if (claimdelegate == null)                               {                                  string domainName = handshake.AuthenticatedUsername.GetDomain();                                    Log.Verbose("WinAuth: New user - looking-up user {UserName} in domain {DomainName}"'                                      handshake.AuthenticatedUsername' domainName);                                    var dc = new PrincipalContext(ContextType.Domain' domainName);                                  var adUser = UserPrincipal.FindByIdentity(dc' handshake.AuthenticatedUsername);                                    if (adUser == null)                                  {                                      Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername);                                      Response.StatusCode = 401;                                      return Task.FromResult(new AuthenticationTicket(null' null));                                  }                                    Log.Verbose("WinAuth: DC returned adUser {ADUser}"' adUser.GivenName);                                    ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                  List<Claim> result = new List<Claim>();                                  if (!String.IsNullOrEmpty(adUser.GivenName))                                  {                                      result.Add(new Claim(ClaimTypes.GivenName' adUser.GivenName));                                  }                                  if (!String.IsNullOrEmpty(adUser.Surname))                                  {                                      result.Add(new Claim(ClaimTypes.Surname' adUser.Surname));                                  }                                  result.Add(new Claim(ClaimTypes.NameIdentifier' adUser.Guid.ToString()));                                  result.Add(new Claim(ClaimTypes.Name' handshake.AuthenticatedUsername));                                  if (!String.IsNullOrEmpty(adUser.EmailAddress))                                  {                                      result.Add(new Claim(ClaimTypes.Email' adUser.EmailAddress));                                  }                                  identity.AddClaims(result);                                  identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                  Options.Handshakes.TryRemove(handshakeId);                                    Log.Verbose("WinAuth: New user - about to redirect to CreateADUser");                                    // user does not exist! Redirect to create page.                                  properties.RedirectUri = "/Account/CreateADUser";                                  return Task.FromResult(new AuthenticationTicket(identity' properties));                              }                              else                              {                                  Claim[] claims = claimdelegate.ToArray();                                  Log.Verbose("WinAuth: Found existing uid {UserId}' has {Claims} claims"' uid' claims.Length);                                  if (claims.Length > 0)                                  {                                      ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                      identity.AddClaims(claims);                                      identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                      Options.Handshakes.TryRemove(handshakeId);                                        Log.Verbose("WinAuth: Returning id auth ticket' claims: {Claims}"' claims);                                        return Task.FromResult(new AuthenticationTicket(identity' properties));                                  }                              }                          }                          break;                  }
