Implementation smell,Namespace,Class,File,Method,Description
Long Method,Bonobo.Git.Server.Data.Update.Sqlite,AddGuidColumn,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\Sqlite\AddGuidColumn.cs,CreateTables,The method has 120 lines of code.
Long Method,Bonobo.Git.Server.Data.Update.SqlServer,AddGuidColumn,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\SqlServer\AddGuidColumn.cs,CreateTables,The method has 119 lines of code.
Long Method,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The method has 136 lines of code.
Complex Method,Bonobo.Git.Server,FileDisplayHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\FileDisplayHandler.cs,GetBrush,Cyclomatic complexity of the method is 26
Complex Method,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,Cyclomatic complexity of the method is 10
Complex Method,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Clone,Cyclomatic complexity of the method is 8
Complex Method,Bonobo.Git.Server.Data.Update.Sqlite,AddGuidColumn,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\Sqlite\AddGuidColumn.cs,CopyUsers,Cyclomatic complexity of the method is 8
Complex Method,Bonobo.Git.Server.Data.Update.SqlServer,AddGuidColumn,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\SqlServer\AddGuidColumn.cs,CopyUsers,Cyclomatic complexity of the method is 8
Complex Method,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,Cyclomatic complexity of the method is 16
Complex Method,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ParseCommitDetails,Cyclomatic complexity of the method is 11
Complex Method,Bonobo.Git.Server.Helpers,ADHelper,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetAllDomainPossibilities,Cyclomatic complexity of the method is 8
Complex Method,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,Cyclomatic complexity of the method is 11
Long Parameter List,System.Linq,AnonymousComparer,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' compareKeySelector
Long Parameter List,System.Linq,AnonymousComparer,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' compareKeySelector
Long Parameter List,System.Linq,AnonymousComparer,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' compareKeySelector
Long Parameter List,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetCommits,The method has 5 parameters. Parameters: name' page' pageSize' referenceName' totalCount
Long Parameter List,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetTags,The method has 5 parameters. Parameters: name' page' p' referenceName' totalCount
Long Parameter List,Bonobo.Git.Server.Data,EFRepositoryRepository,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\EFRepositoryRepository.cs,AddMembers,The method has 5 parameters. Parameters: users' admins' teams' repo' database
Long Parameter List,Bonobo.Git.Server.Git.GitService,IGitService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\IGitService.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService,GitServiceExecutor,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceExecutor.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService,GitServiceExtensions,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceExtensions.cs,ExecuteGitUploadPack,The method has 5 parameters. Parameters: self' correlationId' repositoryName' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService,GitServiceExtensions,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceExtensions.cs,ExecuteGitReceivePack,The method has 5 parameters. Parameters: self' correlationId' repositoryName' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,DurableGitServiceResult,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\DurableGitServiceResult.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackCommit,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackCommit.cs,ReceivePackCommit,The method has 6 parameters. Parameters: id' tree' parents' author' committer' message
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ParsedReceivePack,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ParsedReceivePack.cs,ParsedReceivePack,The method has 6 parameters. Parameters: packId' repositoryName' pktLines' pushedByUser' timestamp' commits
Long Parameter List,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The method has 6 parameters. Parameters: correlationId' repositoryName' serviceName' options' inStream' outStream
Long Parameter List,Bonobo.Git.Server.Owin.Windows,NativeMethods,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,AcquireCredentialsHandle,The method has 9 parameters. Parameters: pszPrincipal' pszPackage' fCredentialUse' PAuthenticationID' pAuthData' pGetKeyFn' pvGetKeyArgument' phCredential' ptsExpiry
Long Parameter List,Bonobo.Git.Server.Owin.Windows,NativeMethods,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,AcceptSecurityContext,The method has 9 parameters. Parameters: phCredential' phContext' pInput' fContextReq' TargetDataRep' phNewContext' pOutput' pfContextAttr' ptsTimeStamp
Long Parameter List,Bonobo.Git.Server.Owin.Windows,NativeMethods,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,AcceptSecurityContext,The method has 9 parameters. Parameters: phCredential' phContext' pInput' fContextReq' TargetDataRep' phNewContext' pOutput' pfContextAttr' ptsTimeStamp
Long Parameter List,Bonobo.Git.Server.Security,ADMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\ADMembershipService.cs,CreateUser,The method has 6 parameters. Parameters: username' password' givenName' surname' email' id
Long Parameter List,Bonobo.Git.Server.Security,ADMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\ADMembershipService.cs,CreateUser,The method has 5 parameters. Parameters: username' password' givenName' surname' email
Long Parameter List,Bonobo.Git.Server.Security,ADMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\ADMembershipService.cs,UpdateUser,The method has 6 parameters. Parameters: id' username' givenName' surname' email' password
Long Parameter List,Bonobo.Git.Server.Security,EFMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\EFMembershipService.cs,CreateUser,The method has 5 parameters. Parameters: username' password' givenName' surname' email
Long Parameter List,Bonobo.Git.Server.Security,EFMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\EFMembershipService.cs,CreateUser,The method has 6 parameters. Parameters: username' password' givenName' surname' email' id
Long Parameter List,Bonobo.Git.Server.Security,EFMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\EFMembershipService.cs,UpdateUser,The method has 6 parameters. Parameters: id' username' givenName' surname' email' password
Long Parameter List,Bonobo.Git.Server.Security,RepositoryPermissionService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,HasPermission,The method has 5 parameters. Parameters: userId' userTeams' userIsSystemAdministrator' repositoryModel' requiredLevel
Long Parameter List,Bonobo.Git.Server.Security,RepositoryPermissionService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,CheckNamedUserPermission,The method has 5 parameters. Parameters: userId' userTeams' userIsSystemAdministrator' repository' requiredLevel
Long Parameter List,Bonobo.Git.Server.Security,IMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\IMembershipService.cs,CreateUser,The method has 5 parameters. Parameters: username' password' givenName' surname' email
Long Parameter List,Bonobo.Git.Server.Security,IMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\IMembershipService.cs,CreateUser,The method has 6 parameters. Parameters: username' password' givenName' surname' email' id
Long Parameter List,Bonobo.Git.Server.Security,IMembershipService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\IMembershipService.cs,UpdateUser,The method has 6 parameters. Parameters: id' username' givenName' surname' email' password
Long Identifier,Bonobo.Git.Server,RepositoryNameNormalizerAttribute,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\RepositoryNameNormalizerAttribute.cs,OnActionExecuting,The length of the parameter incomingRepositoryNameParameter is 31.
Long Identifier,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The length of the parameter isReceivePackRecoveryProcessEnabled is 35.
Long Identifier,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,ReceivePackRecovery,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\ReceivePackRecovery.cs,ReceivePackRecovery,The length of the parameter failedPackWaitTimeBeforeExecution is 33.
Long Identifier,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,ReceivePackRecovery,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\ReceivePackRecovery.cs,,The length of the parameter failedPackWaitTimeBeforeExecution is 33.
Long Identifier,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,,The length of the parameter SecurityNativeDataRepresentation is 32.
Long Statement,System.Linq,AnonymousComparer,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,GroupJoin,The length of the statement  "            return outer.GroupJoin(inner' outerKeySelector' innerKeySelector' resultSelector' AnonymousComparer.Create(compareKeySelector)); " is 128.
Long Statement,System.Linq,AnonymousComparer,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\AnonymousComparer.cs,Join,The length of the statement  "            return outer.Join(inner' outerKeySelector' innerKeySelector' resultSelector' AnonymousComparer.Create(compareKeySelector)); " is 123.
Long Statement,Bonobo.Git.Server.Attributes,AllViewsFilter,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\AllViewsAttribute.cs,OnActionExecuting,The length of the statement  "            filterContext.Controller.ViewBag.PermittedRepositories = PopulateRepoGoToList(filterContext.HttpContext.User.Id()' filterContext.Controller.ControllerContext); " is 159.
Long Statement,Bonobo.Git.Server.Attributes,AllViewsFilter,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\AllViewsAttribute.cs,PopulateRepoGoToList,The length of the statement  "            var firstList = pullList.Union(adminList' new InlineComparer<RepositoryModel>((lhs' rhs) => lhs.Id == rhs.Id' obj => obj.Id.GetHashCode())) " is 139.
Long Statement,Bonobo.Git.Server,UserExtensions,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Extensions\UserExtensions.cs,IsWindowsAuthenticated,The length of the statement  "            return !String.IsNullOrEmpty(authenticationMethod) && authenticationMethod.Equals("Windows"' StringComparison.OrdinalIgnoreCase); " is 129.
Long Statement,Bonobo.Git.Server,GitAuthorizeAttribute,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\GitAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "            if (httpContext.Request.IsAuthenticated && httpContext.User != null && httpContext.User.Identity is System.Security.Claims.ClaimsIdentity) " is 138.
Long Statement,Bonobo.Git.Server,WebAuthorizeAttribute,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\WebAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "                if (!filterContext.HttpContext.User.IsInRole(Definitions.Roles.Member) && !filterContext.HttpContext.User.Identity.IsAuthenticated) " is 131.
Long Statement,Bonobo.Git.Server,WebAuthorizeRepositoryAttribute,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Attributes\WebAuthorizeRepositoryAttribute.cs,OnAuthorization,The length of the statement  "                    if (action.Equals("index"' StringComparison.OrdinalIgnoreCase) && controller.Equals("repository"' StringComparison.OrdinalIgnoreCase)) " is 134.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetTags,The length of the statement  "            var commits = new HashSet<RepositoryCommitModel>(AnonymousComparer.Create<RepositoryCommitModel>((x' y) => x.ID == y.ID' obj => obj.ID.GetHashCode())); " is 151.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetHistory,The length of the statement  "                              .Where(c => c.Parents.Count() < 2 && c[path] != null && (c.Parents.Count() == 0 || c.Parents.FirstOrDefault()[path] == null || c[path].Target.Id != c.Parents.FirstOrDefault()[path].Target.Id)) " is 192.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetTreeModelsWithDetails,The length of the statement  "            var ancestors = _repository.Commits.QueryBy(new CommitFilter { IncludeReachableFrom = commit' SortBy = CommitSortStrategies.Topological | CommitSortStrategies.Reverse }).ToList(); " is 179.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,ToModel,The length of the statement  "            TreeChanges changes = !commit.Parents.Any() ? _repository.Diff.Compare<TreeChanges>(null' commit.Tree) : _repository.Diff.Compare<TreeChanges>(commit.Parents.First().Tree' commit.Tree); " is 185.
Long Statement,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,ToModel,The length of the statement  "            Patch patches = !commit.Parents.Any() ? _repository.Diff.Compare<Patch>(null' commit.Tree) : _repository.Diff.Compare<Patch>(commit.Parents.First().Tree' commit.Tree); " is 167.
Long Statement,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_Start,The length of the statement  "                    throw new ConfigurationErrorsException("Please ensure that the sqlite connection string contains 'BinaryGUID=false;'."); " is 120.
Long Statement,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The length of the statement  "                        new NamedArguments.FailedPackWaitTimeBeforeExecution(TimeSpan.FromSeconds(0)))); // on start up set time to wait = 0 so that recovery for all waiting packs is attempted " is 168.
Long Statement,Bonobo.Git.Server.Configuration,DiagnosticReporter,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,CheckInternalMembership,The length of the statement  "                SafelyReport("User count"' () => new EFMembershipService { CreateContext = () => new BonoboGitServerContext() }.GetAllUsers().Count); " is 133.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,The length of the statement  "                if (model.OldPassword != null && MembershipService.ValidateUser(model.Username' model.OldPassword) != ValidationResult.Success) " is 127.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,The length of the statement  "                if (User.IsInRole(Definitions.Roles.Administrator) && model.Id == User.Id() && !(model.PostedSelectedRoles != null && model.PostedSelectedRoles.Contains(Definitions.Roles.Administrator))) " is 187.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,CreateADUser,The length of the statement  "                if (MembershipService.CreateUser(credentials' Guid.NewGuid().ToString()' adUser.GivenName' adUser.Surname' adUser.EmailAddress' userId)) " is 136.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,CreateADUser,The length of the statement  "                        AuthenticationManager.AuthenticationResponseGrant = new AuthenticationResponseGrant(new ClaimsPrincipal(Identity)' new AuthenticationProperties { IsPersistent = true }); " is 169.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The length of the statement  "            if ((Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)) " is 168.
Long Statement,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The length of the statement  "            if ((Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)) " is 168.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,ForgotPassword,The length of the statement  "                    var resetUrl = Url.Action("ResetPassword"' "Home"' new {digest = HttpUtility.UrlEncode(Encoding.UTF8.GetBytes(token))}'Request.Url.Scheme); " is 139.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,WindowsLogin,The length of the statement  "                Request.GetOwinContext().Authentication.Challenge(authenticationProperties' WindowsAuthenticationDefaults.AuthenticationType); " is 126.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,LogOn,The length of the statement  "                        AuthenticationProvider.SignIn(model.Username' Url.IsLocalUrl(model.ReturnUrl) ? model.ReturnUrl : Url.Action("Index"' "Home")' model.RememberMe); " is 145.
Long Statement,Bonobo.Git.Server.Controllers,HomeController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,LogOn,The length of the statement  "                        if (Request.IsLocal && model.DatabaseResetCode > 0 && model.Username == "admin" && ConfigurationManager.AppSettings["AllowDBReset"] == "true" ) " is 143.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Edit,The length of the statement  "                var currentUserIsInAdminList = model.PostedSelectedAdministrators != null && model.PostedSelectedAdministrators.Contains(User.Id()); " is 132.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Detail,The length of the statement  "                model.IsCurrentUserAdministrator = RepositoryPermissionService.HasPermission(User.Id()' model.Id' RepositoryAccessLevel.Administer); " is 132.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,GetIndexModel,The length of the statement  "            return RepositoryPermissionService.GetAllPermittedRepositories(User.Id()' RepositoryAccessLevel.Pull).Select(x => ConvertRepositoryModel(x' User)).ToList(); " is 156.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,ConvertRepositoryDetailModel,The length of the statement  "                Users = model.PostedSelectedUsers != null ? model.PostedSelectedUsers.Select(x => MembershipService.GetUserModel(x)).ToArray() : new UserModel[0]' " is 146.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,ConvertRepositoryDetailModel,The length of the statement  "                Administrators = model.PostedSelectedAdministrators != null ? model.PostedSelectedAdministrators.Select(x => MembershipService.GetUserModel(x)).ToArray() : new UserModel[0]' " is 173.
Long Statement,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,ConvertRepositoryDetailModel,The length of the statement  "                Teams = model.PostedSelectedTeams != null ? model.PostedSelectedTeams.Select(x => TeamRepository.GetTeam(x)).ToArray() : new TeamModel[0]' " is 138.
Long Statement,Bonobo.Git.Server.Controllers,TeamController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\TeamController.cs,ConvertTeamDetailModel,The length of the statement  "                Members = model.PostedSelectedUsers == null ? new UserModel[0] : model.PostedSelectedUsers.Select(x => MembershipService.GetUserModel(x)).ToArray()' " is 148.
Long Statement,Bonobo.Git.Server.Controllers,GitController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,SecureGetInfoRefs,The length of the statement  "                Log.Warning("GitC: SecureGetInfoRefs unauth because User {UserId} doesn't have permission {Permission} on  repo {RepositoryName}"'  " is 130.
Long Statement,Bonobo.Git.Server.Data,ADBackend,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateRepositories,The length of the statement  "                UserModel[] usersToRemove = repository.Users.Where(repoUser => !Users.Select(u => u.Id).Contains(repoUser.Id)).ToArray(); " is 121.
Long Statement,Bonobo.Git.Server.Data,ADBackend,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateRepositories,The length of the statement  "                TeamModel[] teamsToRemove = repository.Teams.Where(repoTeam => !Teams.Select(team => team.Id).Contains(repoTeam.Id)).ToArray(); " is 127.
Long Statement,Bonobo.Git.Server.Data,ADBackend,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateUsers,The length of the statement  "                    foreach (string username in group.GetMembers(true).OfType<UserPrincipal>().Select(x => x.UserPrincipalName).Where(x => x != null)) " is 130.
Long Statement,Bonobo.Git.Server.Data,ADBackend,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateTeams,The length of the statement  "            foreach (var team in Teams.Select(x => new { x.Id' Name = x.Name }).Where(x => !ActiveDirectorySettings.TeamNameToGroupNameMapping.Keys.Contains(x.Name' StringComparer.OrdinalIgnoreCase))) " is 188.
Long Statement,Bonobo.Git.Server.Data,ADBackend,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateTeams,The length of the statement  "                            Members = group.GetMembers(true).Select(x => MembershipService.GetUserModel(x.Guid.Value)).Where(o => o != null).ToArray() " is 122.
Long Statement,Bonobo.Git.Server.Data,ADBackend,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,UpdateRoles,The length of the statement  "            foreach (var role in Roles.Select(x => new { x.Id' Name = x.Name }).Where(x => !ActiveDirectorySettings.RoleNameToGroupNameMapping.Keys.Contains(x.Name' StringComparer.OrdinalIgnoreCase))) " is 188.
Long Statement,Bonobo.Git.Server.Data,EFRepositoryRepository,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\EFRepositoryRepository.cs,Create,The length of the statement  "                AddMembers(model.Users.Select(x => x.Id)' model.Administrators.Select(x => x.Id)' model.Teams.Select(x => x.Id)' repository' database); " is 135.
Long Statement,Bonobo.Git.Server.Data,EFRepositoryRepository,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\EFRepositoryRepository.cs,Update,The length of the statement  "                    AddMembers(model.Users.Select(x => x.Id)' model.Administrators.Select(x => x.Id)' model.Teams.Select(x => x.Id)' repo' db); " is 123.
Long Statement,Bonobo.Git.Server.Data.Update.ADBackendUpdate,Pre600UpdateTo600,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\UpdateADBackend.cs,UpdateADBackend,The length of the statement  "            var backupDirectory = PathEncoder.GetRootPath(ActiveDirectorySettings.BackendPath + "_pre6.0.0_" + DateTime.UtcNow.ToString("yyyyMMdd_HHmmss")); " is 144.
Long Statement,Bonobo.Git.Server.Data.Update.ADBackendUpdate,Pre600UpdateTo600,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\UpdateADBackend.cs,MakeBackupOfBackendDirectory,The length of the statement  "                    // Normally it's only the top most dir that fails to delete for some reason (usually because Explorer is holding a handle to stuff)... " is 134.
Long Statement,Bonobo.Git.Server.Data.Update.Sqlite,AddGuidColumn,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\Sqlite\AddGuidColumn.cs,CopyUsers,The length of the statement  "                // Existing users will have had passwords which were salted with their username' so we need to replicate that into the Salt column " is 130.
Long Statement,Bonobo.Git.Server.Data.Update.SqlServer,AddGuidColumn,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\SqlServer\AddGuidColumn.cs,CopyUsers,The length of the statement  "                // Existing users will have had passwords which were salted with their username' so we need to replicate that into the Salt column " is 130.
Long Statement,Bonobo.Git.Server.Extensions,TypeExtensions,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Extensions\TypeExtensions.cs,GetDisplayValue,The length of the statement  "            var displayAttribute = propertyInfo.GetCustomAttributes(true).FirstOrDefault(i => i.GetType().IsAssignableFrom(typeof(DisplayAttribute))) as DisplayAttribute; " is 158.
Long Statement,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,DurableGitServiceResult,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\DurableGitServiceResult.cs,ExecuteServiceByName,The length of the statement  "                    this.gitService.ExecuteServiceByName(correlationId' repositoryName' serviceName' options' inStream' new ReplicatingStream(outStream' resultFileStream)); " is 152.
Long Statement,Bonobo.Git.Server.Git.GitService.ReceivePackHook.Durability,ReceivePackRecovery,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\Durability\ReceivePackRecovery.cs,RecoverAll,The length of the statement  "                    var failedPackResultFilePath = recoveryFilePathBuilder.GetPathToResultFile(pack.PackId' pack.RepositoryName' "receive-pack"); " is 125.
Long Statement,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The length of the statement  "                gitService.ExecuteServiceByName(correlationId' repositoryName' serviceName' options' inStream' new ReplicatingStream(outStream' capturedOutputStream)); " is 151.
Long Statement,Bonobo.Git.Server.Helpers,ADHelper,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetUserPrincipal,The length of the statement  "            Log.Verbose("GetUserPrincipal: username {UserName}' domain {DomainName}' stripped {StrippedUserName}"' username' parsedDomainName' strippedUsername); " is 149.
Long Statement,Bonobo.Git.Server.Helpers,ADHelper,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetUserPrincipal,The length of the statement  "                    Log.Verbose("GetUserPrincipal: Did not find user {UserName} in domain {DomainName} by SamAccountName"' strippedUsername' domain.Name); " is 134.
Long Statement,Bonobo.Git.Server.Helpers,ADHelper,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ADHelper.cs,GetUserPrincipal,The length of the statement  "                Log.Error(exp' "GetUserPrincipal in domain: {DomainName}' user: {FullUserName} ({StrippedUserName})"' domain.Name' fullUsername' strippedUsername); " is 147.
Long Statement,Bonobo.Git.Server.Owin.Windows,SecurityBufferDesciption,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,Dispose,The length of the statement  "                        IntPtr SecBufferpvBuffer = Marshal.ReadIntPtr(pBuffers' CurrentOffset + Marshal.SizeOf(typeof(int)) + Marshal.SizeOf(typeof(int))); " is 131.
Long Statement,Bonobo.Git.Server.Owin.Windows,SecurityBufferDesciption,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\NativeMethods.cs,GetBytes,The length of the statement  "                    IntPtr SecBufferpvBuffer = Marshal.ReadIntPtr(pBuffers' CurrentOffset + Marshal.SizeOf(typeof(int)) + Marshal.SizeOf(typeof(int))); " is 131.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The length of the statement  "                                    Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername); " is 142.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,TryAcquireServerChallenge,The length of the statement  "                if (NativeMethods.AcquireCredentialsHandle(null' "NTLM"' SecurityCredentialsInbound' IntPtr.Zero' IntPtr.Zero' 0' IntPtr.Zero' ref credentials' ref lifetime) == 0) " is 163.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,TryAcquireServerChallenge,The length of the statement  "                    if (NativeMethods.AcceptSecurityContext(ref credentials' IntPtr.Zero' ref clientToken' StandardContextAttributes' SecurityNativeDataRepresentation' out context' out serverToken' out contextAttributes' out lifetime) == IntermediateResult) " is 237.
Long Statement,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandshake,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandshake.cs,IsClientResponseValid,The length of the statement  "                if (NativeMethods.AcceptSecurityContext(ref credentials' ref context' ref clientToken' StandardContextAttributes' SecurityNativeDataRepresentation' out context' out serverToken' out contextAttributes' out lifetime) == 0) " is 220.
Long Statement,Bonobo.Git.Server.Security,CookieAuthenticationProvider,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\CookieAuthenticationProvider.cs,SignIn,The length of the statement  "            ClaimsIdentity identity = new ClaimsIdentity(GetClaimsForUser(username)' CookieAuthenticationDefaults.AuthenticationType); " is 122.
Long Statement,Bonobo.Git.Server.Security,FederationAuthenticationProvider,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\FederationAuthenticationProvider.cs,Configure,The length of the statement  "                        if (context.OwinContext.Response.StatusCode == (int)HttpStatusCode.Unauthorized && context.Request.Headers.ContainsKey("AuthNoRedirect")) " is 137.
Long Statement,Bonobo.Git.Server.Security,FederationAuthenticationProvider,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\FederationAuthenticationProvider.cs,SignIn,The length of the statement  "            HttpContext.Current.GetOwinContext().Authentication.Challenge(authprop' WsFederationAuthenticationDefaults.AuthenticationType); " is 127.
Long Statement,Bonobo.Git.Server.Security,FederationAuthenticationProvider,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\FederationAuthenticationProvider.cs,SignOut,The length of the statement  "            HttpContext.Current.GetOwinContext().Authentication.SignOut(WsFederationAuthenticationDefaults.AuthenticationType' CookieAuthenticationDefaults.AuthenticationType); " is 164.
Long Statement,Bonobo.Git.Server.Security,WindowsAuthenticationProvider,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\WindowsAuthenticationProvider.cs,Configure,The length of the statement  "                        if (context.Request.Path != WindowsAuthenticationOptions.DefaultRedirectPath && !context.Request.Headers.ContainsKey("AuthNoRedirect")) " is 135.
Long Statement,Bonobo.Git.Server.Security,WindowsAuthenticationProvider,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\WindowsAuthenticationProvider.cs,SignIn,The length of the statement  "            ClaimsIdentity identity = new ClaimsIdentity(GetClaimsForUser(username)' WindowsAuthenticationDefaults.AuthenticationType); " is 123.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,HasPermission,The length of the statement  "            return HasPermission(userId' TeamRepository.GetTeams(userId)' IsSystemAdministrator(userId)' Repository.GetRepository(repositoryId)' requiredLevel); " is 148.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,GetAllPermittedRepositories,The length of the statement  "            return Repository.GetAllRepositories().Where(repo => HasPermission(userId' userTeams' userIsSystemAdministrator' repo' requiredLevel)); " is 135.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,CheckAnonymousPermission,The length of the statement  "                    return repository.AllowAnonymousPush == RepositoryPushMode.Yes || (repository.AllowAnonymousPush == RepositoryPushMode.Global && UserConfiguration.Current.AllowAnonymousPush); " is 175.
Long Statement,Bonobo.Git.Server.Security,RepositoryPermissionService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\RepositoryPermissionService.cs,CheckNamedUserPermission,The length of the statement  "            Log.Verbose("RepoPerms: Checking user {UserId} (admin? {IsAdmin}) has permission {Permission} on repo {RepositoryName}"' " is 120.
Long Statement,Bonobo.Git.Server.Security,PasswordService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\PasswordService.cs,ComparePassword,The length of the statement  "                There's test to cover it "TestThatValidatingAUserWithOldStyleSaltUpgradesTheirSalt" which can be turned off if necessary " is 120.
Long Statement,Bonobo.Git.Server.Security,PasswordService,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\PasswordService.cs,ComparePassword,The length of the statement  "            // This is the only use of username - to allow us to access accounts with deprecated hashes.  It's not used for salting any more " is 128.
Long Statement,Bonobo.Git.Server.App_Start,BundleConfig,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\App_Start\BundleConfig.cs,RegisterBundles,The length of the statement  "                .Include("~/Scripts/jquery.validate*"' "~/Content/uni/js/uni-form-validation.jquery.js"' "~/Scripts/MicrosoftAjax.js"' "~/Scripts/MicrosoftMvcAjax.js") " is 151.
Complex Conditional,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Edit,The conditional expression  "User.IsInRole(Definitions.Roles.Administrator) && model.Id == User.Id() && !(model.PostedSelectedRoles != null && model.PostedSelectedRoles.Contains(Definitions.Roles.Administrator))"  is complex.
Complex Conditional,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The conditional expression  "(Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)"  is complex.
Complex Conditional,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,Create,The conditional expression  "(Request.IsAuthenticated && !User.IsInRole(Definitions.Roles.Administrator)) || (!Request.IsAuthenticated && !UserConfiguration.Current.AllowAnonymousRegistration)"  is complex.
Complex Conditional,Bonobo.Git.Server.Controllers,HomeController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\HomeController.cs,LogOn,The conditional expression  "Request.IsLocal && model.DatabaseResetCode > 0 && model.Username == "admin" && ConfigurationManager.AppSettings["AllowDBReset"] == "true""  is complex.
Complex Conditional,Bonobo.Git.Server.Helpers,PathEncoder,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Encode,The conditional expression  "(('a' <= b) && (b <= 'z')) || // a-z                      (('A' <= b) && (b <= 'Z')) || // A-Z                      (('0' <= b) && (b <= '9')) || // 0-9                      ('-' == b) || ('.' == b) || ('_' == b) || // - . _                      (allowSlash && ('/' == b))"  is complex.
Empty Catch Block,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The method has an empty catch block.
Empty Catch Block,Bonobo.Git.Server.Configuration,DiagnosticReporter,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,DirectoryIsWritable,The method has an empty catch block.
Empty Catch Block,Bonobo.Git.Server.Data.Update.Pre600ADBackend,Pre600Functions,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\ADBackendPre6.0.0Models.cs,LoadContent,The method has an empty catch block.
Empty Catch Block,Bonobo.Git.Server.Data.Update,AutomaticUpdater,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\AutomaticUpdater.cs,DoUpdate,The method has an empty catch block.
Magic Number,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,GetHistory,The following statement contains a magic number: return _repository.Commits                                .QueryBy(new CommitFilter { IncludeReachableFrom = commit' SortBy = CommitSortStrategies.Topological })                                .Where(c => c.Parents.Count() < 2 && c[path] != null && (c.Parents.Count() == 0 || c.Parents.FirstOrDefault()[path] == null || c[path].Target.Id != c.Parents.FirstOrDefault()[path].Target.Id))                                .Select(s => ToModel(s)).ToList();
Magic Number,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,CreateRepositoryDetailModel,The following statement contains a magic number: var maximumMessageLength = 50;
Magic Number,Bonobo.Git.Server,RepositoryBrowser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\RepositoryBrowser.cs,ToModel,The following statement contains a magic number: var shortMessageDetails = RepositoryCommitModelHelpers.MakeCommitMessage(commit.Message' 50);
Magic Number,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_AcquireRequestState,The following statement contains a magic number: langName = HttpContext.Current.Request.UserLanguages[0].Substring(0' 2);
Magic Number,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,Application_AcquireRequestState,The following statement contains a magic number: HttpContext.Current.Request.UserLanguages != null &&                          HttpContext.Current.Request.UserLanguages.Length != 0 &&                          HttpContext.Current.Request.UserLanguages[0].Length > 2
Magic Number,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The following statement contains a magic number: container.RegisterInstance(new NamedArguments.FailedPackWaitTimeBeforeExecution(TimeSpan.FromSeconds(5 * 60)));
Magic Number,Bonobo.Git.Server,MvcApplication,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Global.asax.cs,EnablePushAuditAnalysis,The following statement contains a magic number: container.RegisterInstance(new NamedArguments.FailedPackWaitTimeBeforeExecution(TimeSpan.FromSeconds(5 * 60)));
Magic Number,Bonobo.Git.Server,FileDisplayHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\FileDisplayHandler.cs,GetFileSizeString,The following statement contains a magic number: readable = (i >> 20);
Magic Number,Bonobo.Git.Server,FileDisplayHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\FileDisplayHandler.cs,GetFileSizeString,The following statement contains a magic number: readable = readable / 1024;
Magic Number,Bonobo.Git.Server.Configuration,ActiveDirectorySettings,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\ActiveDirectorySettings.cs,CreateMapping,The following statement contains a magic number: mapping.Length == 2
Magic Number,Bonobo.Git.Server.Configuration,DiagnosticReporter,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,DirectoryIsWritable,The following statement contains a magic number: File.WriteAllBytes(probeFile' new byte[16]);
Magic Number,Bonobo.Git.Server.Configuration,DiagnosticReporter,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Configuration\DiagnosticReporter.cs,ExceptionLog,The following statement contains a magic number: SafelyRun(() =>              {                  var nameFormat = MvcApplication.GetLogFileNameFormat();                  var todayLogFileName = nameFormat.Replace("{Date}"' DateTime.Now.ToString("yyyyMMdd"));                  SafelyReport("LogFileName: "' () => todayLogFileName);                  var chunkSize = 10000;                  var length = new FileInfo(todayLogFileName).Length;                  Report("Log File total length"' length);                    var startingPoint = Math.Max(0' length - chunkSize);                  Report("Starting log dump from "' startingPoint);                    using (var logText = File.Open(todayLogFileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  {                      logText.Seek(startingPoint' SeekOrigin.Begin);                      var reader = new StreamReader(logText);                      _report.AppendLine(reader.ReadToEnd());                  }              });
Magic Number,Bonobo.Git.Server.Controllers,AccountController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\AccountController.cs,CreateADUser,The following statement contains a magic number: AuthenticationSettings.ImportWindowsAuthUsersAsAdmin || efms.UserCount() == 2
Magic Number,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Tags,The following statement contains a magic number: var commits = browser.GetTags(name' page' 10' out referenceName' out totalCount);
Magic Number,Bonobo.Git.Server.Controllers,RepositoryController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\RepositoryController.cs,Commits,The following statement contains a magic number: var commits = browser.GetCommits(name' page.Value' 10' out referenceName' out totalCount);
Magic Number,Bonobo.Git.Server.Controllers,GitController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,GetInfoRefs,The following statement contains a magic number: Response.StatusCode = 200;
Magic Number,Bonobo.Git.Server.Controllers,GitController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,GetInfoRefs,The following statement contains a magic number: string serviceName = service.Substring(4);
Magic Number,Bonobo.Git.Server.Controllers,GitController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,UnauthorizedResult,The following statement contains a magic number: return new HttpStatusCodeResult(401);
Magic Number,Bonobo.Git.Server.Controllers,GitController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,FormatMessage,The following statement contains a magic number: return (input.Length + 4).ToString("X").PadLeft(4' '0') + input;
Magic Number,Bonobo.Git.Server.Controllers,GitController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,FormatMessage,The following statement contains a magic number: return (input.Length + 4).ToString("X").PadLeft(4' '0') + input;
Magic Number,Bonobo.Git.Server.Controllers,GitController,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Controllers\GitController.cs,OnException,The following statement contains a magic number: filterContext.HttpContext.Response.StatusCode = 500;
Magic Number,Bonobo.Git.Server.Data,ADBackend,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\ADBackend.cs,ADBackend,The following statement contains a magic number: updateTimer = new Timer(Update' null' TimeSpan.FromSeconds(0)' TimeSpan.FromSeconds(180));
Magic Number,Bonobo.Git.Server.Data.Update.ADBackendUpdate,Pre600UpdateTo600,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Update\ADBackend\UpdateADBackend.cs,MakeBackupOfBackendDirectory,The following statement contains a magic number: int attemptsRemaining = 5;
Magic Number,Bonobo.Git.Server.Git.GitService,GitServiceResultParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceResultParser.cs,ParseResult,The following statement contains a magic number: var buff5 = new byte[5];
Magic Number,Bonobo.Git.Server.Git.GitService,GitServiceResultParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\GitServiceResultParser.cs,ParseResult,The following statement contains a magic number: outputStream.Length >= 10
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var buff4 = new byte[4];
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var buff20 = new byte[20];
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var buff16K = new byte[1024 * 16];
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var buff16K = new byte[1024 * 16];
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var len = Convert.ToInt32(Encoding.UTF8.GetString(buff4)' 16);
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var refName = pktLineItems[2];
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var type = (GIT_OBJ_TYPE)((buff1[0] >> 4) & 7);
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: long len = buff1[0] & 15;
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: var shiftAmount = 4;
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: len = len | ((long)(buff1[0] & 127) << shiftAmount);
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: shiftAmount += 7;
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: (buff1[0] >> 7) == 1
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ExecuteServiceByName,The following statement contains a magic number: (buff1[0] >> 7) == 1
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ParseSignature,The following statement contains a magic number: var timestampString = commitHeaderData.Substring(emailEnd + 2);
Magic Number,Bonobo.Git.Server.Git.GitService.ReceivePackHook,ReceivePackParser,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Git\GitService\ReceivePackHook\ReceivePackParser.cs,ParseSignature,The following statement contains a magic number: var timestamp = new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero);
Magic Number,Bonobo.Git.Server.Helpers,RepositoryCommitModelHelpers,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\RepositoryCommitModelHelpers.cs,MakeCommitMessage,The following statement contains a magic number: return BreakLine(message' 25);
Magic Number,Bonobo.Git.Server.Helpers,ContentDispositionUtil,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ContentDispositionUtil.cs,AddByteToStringBuilder,The following statement contains a magic number: AddHexDigitToStringBuilder(num >> 4' builder);
Magic Number,Bonobo.Git.Server.Helpers,ContentDispositionUtil,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ContentDispositionUtil.cs,AddByteToStringBuilder,The following statement contains a magic number: AddHexDigitToStringBuilder(num % 16' builder);
Magic Number,Bonobo.Git.Server.Helpers,PathEncoder,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Decode,The following statement contains a magic number: (encodedPathLength <= i + 2) ||                          !byte.TryParse(encodedPath.Substring(i + 1' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out value)
Magic Number,Bonobo.Git.Server.Helpers,PathEncoder,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Decode,The following statement contains a magic number: (encodedPathLength <= i + 2) ||                          !byte.TryParse(encodedPath.Substring(i + 1' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out value)
Magic Number,Bonobo.Git.Server.Helpers,PathEncoder,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\PathEncoder.cs,Decode,The following statement contains a magic number: i += 2;
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following statement contains a magic number: switch (token.AuthorizationStage)                  {                      case AuthenticationStage.Request:                          if (handshake.TryAcquireServerChallenge(token))                          {                              Log.Verbose("WinAuth: Obtained challenge token OK");                                Response.Headers.Add("WWW-Authenticate"' new[] { string.Concat("NTLM "' token.Challenge) });                              Response.StatusCode = 401;                              return Task.FromResult(new AuthenticationTicket(null' properties));                          }                          break;                      case AuthenticationStage.Response:                          if (handshake.IsClientResponseValid(token))                          {                              properties = handshake.AuthenticationProperties;                              var uid = handshake.AuthenticatedUsername.ToLowerInvariant();                              var claimdelegate = Options.GetClaimsForUser(uid);                                Log.Verbose("WinAuth: Valid response for uid {UserId}"' uid);                                if (claimdelegate == null)                               {                                  string domainName = handshake.AuthenticatedUsername.GetDomain();                                    Log.Verbose("WinAuth: New user - looking-up user {UserName} in domain {DomainName}"'                                      handshake.AuthenticatedUsername' domainName);                                    var dc = new PrincipalContext(ContextType.Domain' domainName);                                  var adUser = UserPrincipal.FindByIdentity(dc' handshake.AuthenticatedUsername);                                    if (adUser == null)                                  {                                      Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername);                                      Response.StatusCode = 401;                                      return Task.FromResult(new AuthenticationTicket(null' null));                                  }                                    Log.Verbose("WinAuth: DC returned adUser {ADUser}"' adUser.GivenName);                                    ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                  List<Claim> result = new List<Claim>();                                  if (!String.IsNullOrEmpty(adUser.GivenName))                                  {                                      result.Add(new Claim(ClaimTypes.GivenName' adUser.GivenName));                                  }                                  if (!String.IsNullOrEmpty(adUser.Surname))                                  {                                      result.Add(new Claim(ClaimTypes.Surname' adUser.Surname));                                  }                                  result.Add(new Claim(ClaimTypes.NameIdentifier' adUser.Guid.ToString()));                                  result.Add(new Claim(ClaimTypes.Name' handshake.AuthenticatedUsername));                                  if (!String.IsNullOrEmpty(adUser.EmailAddress))                                  {                                      result.Add(new Claim(ClaimTypes.Email' adUser.EmailAddress));                                  }                                  identity.AddClaims(result);                                  identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                  Options.Handshakes.TryRemove(handshakeId);                                    Log.Verbose("WinAuth: New user - about to redirect to CreateADUser");                                    // user does not exist! Redirect to create page.                                  properties.RedirectUri = "/Account/CreateADUser";                                  return Task.FromResult(new AuthenticationTicket(identity' properties));                              }                              else                              {                                  Claim[] claims = claimdelegate.ToArray();                                  Log.Verbose("WinAuth: Found existing uid {UserId}' has {Claims} claims"' uid' claims.Length);                                  if (claims.Length > 0)                                  {                                      ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                      identity.AddClaims(claims);                                      identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                      Options.Handshakes.TryRemove(handshakeId);                                        Log.Verbose("WinAuth: Returning id auth ticket' claims: {Claims}"' claims);                                        return Task.FromResult(new AuthenticationTicket(identity' properties));                                  }                              }                          }                          break;                  }
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following statement contains a magic number: switch (token.AuthorizationStage)                  {                      case AuthenticationStage.Request:                          if (handshake.TryAcquireServerChallenge(token))                          {                              Log.Verbose("WinAuth: Obtained challenge token OK");                                Response.Headers.Add("WWW-Authenticate"' new[] { string.Concat("NTLM "' token.Challenge) });                              Response.StatusCode = 401;                              return Task.FromResult(new AuthenticationTicket(null' properties));                          }                          break;                      case AuthenticationStage.Response:                          if (handshake.IsClientResponseValid(token))                          {                              properties = handshake.AuthenticationProperties;                              var uid = handshake.AuthenticatedUsername.ToLowerInvariant();                              var claimdelegate = Options.GetClaimsForUser(uid);                                Log.Verbose("WinAuth: Valid response for uid {UserId}"' uid);                                if (claimdelegate == null)                               {                                  string domainName = handshake.AuthenticatedUsername.GetDomain();                                    Log.Verbose("WinAuth: New user - looking-up user {UserName} in domain {DomainName}"'                                      handshake.AuthenticatedUsername' domainName);                                    var dc = new PrincipalContext(ContextType.Domain' domainName);                                  var adUser = UserPrincipal.FindByIdentity(dc' handshake.AuthenticatedUsername);                                    if (adUser == null)                                  {                                      Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername);                                      Response.StatusCode = 401;                                      return Task.FromResult(new AuthenticationTicket(null' null));                                  }                                    Log.Verbose("WinAuth: DC returned adUser {ADUser}"' adUser.GivenName);                                    ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                  List<Claim> result = new List<Claim>();                                  if (!String.IsNullOrEmpty(adUser.GivenName))                                  {                                      result.Add(new Claim(ClaimTypes.GivenName' adUser.GivenName));                                  }                                  if (!String.IsNullOrEmpty(adUser.Surname))                                  {                                      result.Add(new Claim(ClaimTypes.Surname' adUser.Surname));                                  }                                  result.Add(new Claim(ClaimTypes.NameIdentifier' adUser.Guid.ToString()));                                  result.Add(new Claim(ClaimTypes.Name' handshake.AuthenticatedUsername));                                  if (!String.IsNullOrEmpty(adUser.EmailAddress))                                  {                                      result.Add(new Claim(ClaimTypes.Email' adUser.EmailAddress));                                  }                                  identity.AddClaims(result);                                  identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                  Options.Handshakes.TryRemove(handshakeId);                                    Log.Verbose("WinAuth: New user - about to redirect to CreateADUser");                                    // user does not exist! Redirect to create page.                                  properties.RedirectUri = "/Account/CreateADUser";                                  return Task.FromResult(new AuthenticationTicket(identity' properties));                              }                              else                              {                                  Claim[] claims = claimdelegate.ToArray();                                  Log.Verbose("WinAuth: Found existing uid {UserId}' has {Claims} claims"' uid' claims.Length);                                  if (claims.Length > 0)                                  {                                      ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                      identity.AddClaims(claims);                                      identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                      Options.Handshakes.TryRemove(handshakeId);                                        Log.Verbose("WinAuth: Returning id auth ticket' claims: {Claims}"' claims);                                        return Task.FromResult(new AuthenticationTicket(identity' properties));                                  }                              }                          }                          break;                  }
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following statement contains a magic number: Response.StatusCode = 401;
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: Response.StatusCode == 401 && Response.Headers.ContainsKey("WWW-Authenticate") == false
Magic Number,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationToken,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationToken.cs,Create,The following statement contains a magic number: data = Convert.FromBase64String(headerValue.Substring(5));
Magic Number,Bonobo.Git.Server.Security,CookieAuthenticationProvider,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Security\CookieAuthenticationProvider.cs,Configure,The following statement contains a magic number: app.UseCookieAuthentication(new CookieAuthenticationOptions              {                  AuthenticationType = CookieAuthenticationDefaults.AuthenticationType'                  LoginPath = new PathString("/Home/LogOn")'                  ExpireTimeSpan = TimeSpan.FromDays(3)'                  SlidingExpiration = true'                  Provider = new Microsoft.Owin.Security.Cookies.CookieAuthenticationProvider                  {                      OnApplyRedirect = context =>                      {                          if (!context.Request.Headers.ContainsKey("AuthNoRedirect"))                          {                              context.Response.Redirect(context.RedirectUri);                          }                      }                  }'              });
Magic Number,Bonobo.Git.Server.Data.Mapping,RepositoryMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RepositoryMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Name)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RepositoryMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RepositoryMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Group)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RepositoryMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RepositoryMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Description)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RoleMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RoleMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Name)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,RoleMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\RoleMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Description)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,TeamMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\TeamMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Name)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,TeamMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\TeamMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Description)                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.GivenName)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Surname)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Username)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Password)                  .IsRequired()                  .HasMaxLength(255);
Magic Number,Bonobo.Git.Server.Data.Mapping,UserMap,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Data\Mapping\UserMap.cs,SetProperties,The following statement contains a magic number: Property(t => t.Email)                  .IsRequired()                  .HasMaxLength(255);
Missing Default,Bonobo.Git.Server.Helpers,ContentDispositionUtil,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Helpers\ContentDispositionUtil.cs,IsByteValidHeaderValueCharacter,The following switch statement is missing a default case: switch (b)              {                  case (byte)'-':                  case (byte)'.':                  case (byte)'_':                  case (byte)'~':                  case (byte)':':                  case (byte)'!':                  case (byte)'$':                  case (byte)'&':                  case (byte)'+':                      return true;              }
Missing Default,Bonobo.Git.Server.Owin.Windows,WindowsAuthenticationHandler,D:\research\architectureSmells\repos\jakubgarfield_Bonobo-Git-Server\Bonobo.Git.Server\Owin\WindowsAuthenticationHandler.cs,AuthenticateCoreAsync,The following switch statement is missing a default case: switch (token.AuthorizationStage)                  {                      case AuthenticationStage.Request:                          if (handshake.TryAcquireServerChallenge(token))                          {                              Log.Verbose("WinAuth: Obtained challenge token OK");                                Response.Headers.Add("WWW-Authenticate"' new[] { string.Concat("NTLM "' token.Challenge) });                              Response.StatusCode = 401;                              return Task.FromResult(new AuthenticationTicket(null' properties));                          }                          break;                      case AuthenticationStage.Response:                          if (handshake.IsClientResponseValid(token))                          {                              properties = handshake.AuthenticationProperties;                              var uid = handshake.AuthenticatedUsername.ToLowerInvariant();                              var claimdelegate = Options.GetClaimsForUser(uid);                                Log.Verbose("WinAuth: Valid response for uid {UserId}"' uid);                                if (claimdelegate == null)                               {                                  string domainName = handshake.AuthenticatedUsername.GetDomain();                                    Log.Verbose("WinAuth: New user - looking-up user {UserName} in domain {DomainName}"'                                      handshake.AuthenticatedUsername' domainName);                                    var dc = new PrincipalContext(ContextType.Domain' domainName);                                  var adUser = UserPrincipal.FindByIdentity(dc' handshake.AuthenticatedUsername);                                    if (adUser == null)                                  {                                      Log.Error("DC for domain {DomainName} has returned null for username {UserName} - failing auth"' domainName' handshake.AuthenticatedUsername);                                      Response.StatusCode = 401;                                      return Task.FromResult(new AuthenticationTicket(null' null));                                  }                                    Log.Verbose("WinAuth: DC returned adUser {ADUser}"' adUser.GivenName);                                    ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                  List<Claim> result = new List<Claim>();                                  if (!String.IsNullOrEmpty(adUser.GivenName))                                  {                                      result.Add(new Claim(ClaimTypes.GivenName' adUser.GivenName));                                  }                                  if (!String.IsNullOrEmpty(adUser.Surname))                                  {                                      result.Add(new Claim(ClaimTypes.Surname' adUser.Surname));                                  }                                  result.Add(new Claim(ClaimTypes.NameIdentifier' adUser.Guid.ToString()));                                  result.Add(new Claim(ClaimTypes.Name' handshake.AuthenticatedUsername));                                  if (!String.IsNullOrEmpty(adUser.EmailAddress))                                  {                                      result.Add(new Claim(ClaimTypes.Email' adUser.EmailAddress));                                  }                                  identity.AddClaims(result);                                  identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                  Options.Handshakes.TryRemove(handshakeId);                                    Log.Verbose("WinAuth: New user - about to redirect to CreateADUser");                                    // user does not exist! Redirect to create page.                                  properties.RedirectUri = "/Account/CreateADUser";                                  return Task.FromResult(new AuthenticationTicket(identity' properties));                              }                              else                              {                                  Claim[] claims = claimdelegate.ToArray();                                  Log.Verbose("WinAuth: Found existing uid {UserId}' has {Claims} claims"' uid' claims.Length);                                  if (claims.Length > 0)                                  {                                      ClaimsIdentity identity = new ClaimsIdentity(Options.SignInAsAuthenticationType);                                      identity.AddClaims(claims);                                      identity.AddClaim(new Claim(ClaimTypes.AuthenticationMethod' WindowsAuthenticationDefaults.AuthenticationType));                                      Options.Handshakes.TryRemove(handshakeId);                                        Log.Verbose("WinAuth: Returning id auth ticket' claims: {Claims}"' claims);                                        return Task.FromResult(new AuthenticationTicket(identity' properties));                                  }                              }                          }                          break;                  }
