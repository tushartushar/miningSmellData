Implementation smell,Namespace,Class,File,Method,Description
Long Method,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,GetXMLTorrentUpload,The method has 109 lines of code.
Long Method,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,ReadFile,The method has 153 lines of code.
Long Method,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,ToStringPublish,The method has 110 lines of code.
Long Method,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,ReadDirectory,The method has 106 lines of code.
Long Method,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The method has 103 lines of code.
Complex Method,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,GetXMLTorrentUpload,Cyclomatic complexity of the method is 10
Complex Method,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,ReadFile,Cyclomatic complexity of the method is 22
Complex Method,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,ToStringPublish,Cyclomatic complexity of the method is 13
Complex Method,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,ReadDirectory,Cyclomatic complexity of the method is 19
Complex Method,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,ToStringMedia,Cyclomatic complexity of the method is 13
Complex Method,Mono.Options,Option,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,GetMediaListLine,The method has 5 parameters. Parameters: mf' widthFileName' widthDura' widthRes' widthFileSizes
Long Parameter List,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,MediaInfo_GetI,The method has 5 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo
Long Parameter List,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,MediaInfoA_GetI,The method has 5 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo
Long Parameter List,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,MediaInfo_Get,The method has 6 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,MediaInfoA_Get,The method has 6 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The method has 5 parameters. Parameters: StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,MediaInfoLib,MediaInfoList,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,MediaInfoList_GetI,The method has 6 parameters. Parameters: Handle' FilePos' StreamKind' StreamNumber' Parameter' KindOfInfo
Long Parameter List,MediaInfoLib,MediaInfoList,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,MediaInfoList_Get,The method has 7 parameters. Parameters: Handle' FilePos' StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,MediaInfoLib,MediaInfoList,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The method has 6 parameters. Parameters: FilePos' StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,MediaInfoLib,MediaInfoList,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The method has 5 parameters. Parameters: FilePos' StreamKind' StreamNumber' Parameter' KindOfInfo
Long Parameter List,MediaInfoLib,MediaInfoList,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The method has 5 parameters. Parameters: FilePos' StreamKind' StreamNumber' Parameter' KindOfInfo
Long Statement,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,GetXMLTorrentUpload,The length of the statement  "            if (string.IsNullOrEmpty(res) && !string.IsNullOrEmpty(mi.Overall.Video.Height) && !string.IsNullOrEmpty(mi.Overall.Video.Width)) " is 129.
Long Statement,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,MoveDirectory,The length of the statement  "                if (MessageBox.Show("Would you like to move old Root folder content to the new location?"' Application.ProductName' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 186.
Long Statement,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,ThreadDoWork,The length of the statement  "                string fp = Path.Combine(Info.TaskSettings.TorrentFolder' MediaHelper.GetMediaName(Info.TaskSettings.Media.Location)) + ".xml"; " is 127.
Long Statement,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,TakeScreenshots,The length of the statement  "                    TakeScreenshots(Info.TaskSettings.Media.Overall' FileSystem.GetScreenShotsDir(Info.TaskSettings.Media.Overall.FilePath)); " is 121.
Long Statement,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,CreateTorrent,The length of the statement  "            if (Info.TaskSettings.Profile != null && Info.TaskSettings.Profile.Trackers != null && (File.Exists(p) || Directory.Exists(p))) " is 127.
Long Statement,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,CreateTorrent,The length of the statement  "                    string torrentFileName = string.Format("{0}.torrent"' (File.Exists(p) ? Path.GetFileNameWithoutExtension(p) : MediaHelper.GetMediaName(p))); " is 140.
Long Statement,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,CreateTorrent,The length of the statement  "                    Info.TaskSettings.TorrentFilePath = Path.Combine(Path.Combine(Info.TaskSettings.TorrentFolder' uri.Host)' torrentFileName); " is 123.
Long Statement,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,GetMTNString,The length of the statement  "            sb.AppendLine(string.Format("Size: {0}' Duration: {1}' Average bitrate: {2}"' this.FileSizeString' this.DurationString2' this.BitrateOverall)); " is 143.
Long Statement,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,GetMTNString,The length of the statement  "            sb.AppendLine(string.Format("Video: {0}' {1}' {2}' {3}"' this.Video.Codec' this.Video.Resolution' this.Video.Bitrate' this.Video.FrameRate)); " is 141.
Long Statement,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,GetMTNString,The length of the statement  "                sb.AppendLine(string.Format("Audio {0}: {1}' {2}' {3}' {4}"' aiCount++' ai.Format' ai.SamplingRate' ai.Channels' ai.Bitrate)); " is 126.
Long Statement,TDMakerLib,App,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Program.cs,WriteTemplates,The length of the statement  "                string[] tFiles = new string[] { "Disc.txt"' "File.txt"' "DiscAudioInfo.txt"' "FileAudioInfo.txt"' "GeneralInfo.txt"' "FileVideoInfo.txt"' "DiscVideoInfo.txt" }; " is 161.
Long Statement,TDMakerLib,FFmpegThumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\FFmpegThumbnailer.cs,TakeScreenshots,The length of the statement  "            string tempScreenshotPathFormat = Path.Combine(ScreenshotDir' string.Format("{0}-%03d.png"' Path.GetFileNameWithoutExtension(MediaFile.FilePath))); " is 147.
Long Statement,TDMakerLib,FFmpegThumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\FFmpegThumbnailer.cs,TakeScreenshots,The length of the statement  "            psi.Arguments = string.Format("-i \"{0}\" -f image2 -vf fps=1/{1} -vframes {2} \"{3}\""' MediaFile.FilePath' TimeSlice' Options.ScreenshotCount' tempScreenshotPathFormat); " is 171.
Long Statement,TDMakerLib,FFmpegThumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\FFmpegThumbnailer.cs,TakeScreenshots,The length of the statement  "                string tempScreenshotPath = Path.Combine(ScreenshotDir' string.Format("{0}-{1:000}.png"' Path.GetFileNameWithoutExtension(MediaFile.FilePath)' i)); " is 147.
Long Statement,TDMakerLib,TemplateReader,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Templates\TemplateReader.cs,GetStyles,The length of the statement  "                App.Settings.ProfileActive.FontSizeHeading1 + App.Settings.ProfileActive.FontSizeIncr : App.Settings.ProfileActive.FontSizeHeading1); " is 133.
Long Statement,TDMakerLib,TemplateReader,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Templates\TemplateReader.cs,GetStyles,The length of the statement  "                App.Settings.ProfileActive.FontSizeHeading2 + App.Settings.ProfileActive.FontSizeIncr : App.Settings.ProfileActive.FontSizeHeading2); " is 133.
Long Statement,TDMakerLib,TemplateReader,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Templates\TemplateReader.cs,GetStyles,The length of the statement  "                App.Settings.ProfileActive.FontSizeHeading3 + App.Settings.ProfileActive.FontSizeIncr : App.Settings.ProfileActive.FontSizeHeading3); " is 133.
Long Statement,TDMakerLib,TemplateReader,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Templates\TemplateReader.cs,GetStyles,The length of the statement  "                App.Settings.ProfileActive.FontSizeBody + App.Settings.ProfileActive.FontSizeIncr : App.Settings.ProfileActive.FontSizeBody); " is 125.
Long Statement,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The length of the statement  "                // worker.ReportProgress((int)ProgressType.UPDATE_STATUSBAR_DEBUG' string.Format("Taking screenshot {0} of {1} for {2}"' i + 1' Options.ScreenshotCount' mediaFileName)); " is 169.
Long Statement,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The length of the statement  "                string tempScreenshotPath = Path.Combine(ScreenshotDir' string.Format("{0}-{1}."' mediaFileName' timeSliceElapsed.ToString("00000"))); " is 134.
Long Statement,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The length of the statement  "                        psi.Arguments = string.Format("-ss {0} -i \"{1}\" -f image2 -vframes 1 -y \"{2}\""' timeSliceElapsed' MediaFile.FilePath' tempScreenshotPath); " is 142.
Long Statement,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,Finish,The length of the statement  "                                temp_fp = Path.Combine(ScreenshotDir' Path.GetFileNameWithoutExtension(MediaFile.FilePath) + "_s." + Options.FFmpegThumbnailExtension); " is 135.
Long Statement,TDMakerLib,TorrentInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Torrents\TorrentInfo.cs,ToStringPublishInternal,The length of the statement  "            string info = ts.MediaOptions.MediaTypeChoice == MediaType.MusicAudioAlbum ? ts.Media.ToStringAudio() : ts.ToStringMedia(); " is 123.
Long Statement,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "                String ToReturn = Marshal.PtrToStringAnsi(MediaInfoA_Get(Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' Parameter_Ptr' (IntPtr)KindOfInfo' (IntPtr)KindOfSearch)); " is 165.
Long Statement,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "                return Marshal.PtrToStringUni(MediaInfo_Get(Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' Parameter' (IntPtr)KindOfInfo' (IntPtr)KindOfSearch)); " is 148.
Long Statement,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "                return Marshal.PtrToStringAnsi(MediaInfoA_GetI(Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' (IntPtr)Parameter' (IntPtr)KindOfInfo)); " is 137.
Long Statement,MediaInfoLib,MediaInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "                return Marshal.PtrToStringUni(MediaInfo_GetI(Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' (IntPtr)Parameter' (IntPtr)KindOfInfo)); " is 135.
Long Statement,MediaInfoLib,MediaInfoList,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "            return Marshal.PtrToStringUni(MediaInfoList_Get(Handle' (IntPtr)FilePos' (IntPtr)StreamKind' (IntPtr)StreamNumber' Parameter' (IntPtr)KindOfInfo' (IntPtr)KindOfSearch)); " is 169.
Long Statement,MediaInfoLib,MediaInfoList,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "            return Marshal.PtrToStringUni(MediaInfoList_GetI(Handle' (IntPtr)FilePos' (IntPtr)StreamKind' (IntPtr)StreamNumber' (IntPtr)Parameter' (IntPtr)KindOfInfo)); " is 156.
Long Statement,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,sMakeNfo,The length of the statement  "                msbAlbumInfo.AppendLine(string.Format("Bit Rate:        {0} Kibit/s"' (this.TotalBitrate / (double)lstAudioFiles.Count).ToString("0.00"))); " is 139.
Long Statement,UploadersLib.ImageUploaders,PtpImageUploader,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\PtpImgUploader.cs,Upload,The length of the statement  "            UploadResult result = UploadData(stream' "https://ptpimg.me/?type=uploadv7&key=" + APIKey' fileName' "uploadfile"' arguments); " is 126.
Complex Conditional,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,CreateTorrent,The conditional expression  "Info.TaskSettings.Profile != null && Info.TaskSettings.Profile.Trackers != null && (File.Exists(p) || Directory.Exists(p))"  is complex.
Complex Conditional,Mono.Options,Option,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                       (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                      Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Empty Catch Block,TDMakerLib,TemplateReader,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Templates\TemplateReader.cs,GetSourceInfo,The method has an empty catch block.
Magic Number,TDMakerLib,Crypt,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Crypt.cs,Encrypt,The following statement contains a magic number: byte[] keyBytes = new Rfc2898DeriveBytes(PasswordHash' Encoding.ASCII.GetBytes(SaltKey)).GetBytes(256 / 8);
Magic Number,TDMakerLib,Crypt,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Crypt.cs,Encrypt,The following statement contains a magic number: byte[] keyBytes = new Rfc2898DeriveBytes(PasswordHash' Encoding.ASCII.GetBytes(SaltKey)).GetBytes(256 / 8);
Magic Number,TDMakerLib,Crypt,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Crypt.cs,Decrypt,The following statement contains a magic number: byte[] keyBytes = new Rfc2898DeriveBytes(PasswordHash' Encoding.ASCII.GetBytes(SaltKey)).GetBytes(256 / 8);
Magic Number,TDMakerLib,Crypt,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Crypt.cs,Decrypt,The following statement contains a magic number: byte[] keyBytes = new Rfc2898DeriveBytes(PasswordHash' Encoding.ASCII.GetBytes(SaltKey)).GetBytes(256 / 8);
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDurationString,The following statement contains a magic number: int mins = (int)dura / 1000 / 60;
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDurationString,The following statement contains a magic number: int mins = (int)dura / 1000 / 60;
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDurationString,The following statement contains a magic number: int secsLeft = (int)dura / 1000 - mins * 60;
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDurationString,The following statement contains a magic number: int secsLeft = (int)dura / 1000 - mins * 60;
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDVDString,The following statement contains a magic number: if (MediaIsDisc(p))              {                  string[] files = Directory.GetFiles(p' "*.*"' SearchOption.AllDirectories);                  foreach (string f in files)                  {                      FileInfo fi = new FileInfo(f);                      size += fi.Length;                  }                  if (size > 0.0)                  {                      ss = (size > 4.7 * 1000.0 * 1000.0 * 1000.0 ? "DVD-9" : "DVD-5");                  }              }
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDVDString,The following statement contains a magic number: if (MediaIsDisc(p))              {                  string[] files = Directory.GetFiles(p' "*.*"' SearchOption.AllDirectories);                  foreach (string f in files)                  {                      FileInfo fi = new FileInfo(f);                      size += fi.Length;                  }                  if (size > 0.0)                  {                      ss = (size > 4.7 * 1000.0 * 1000.0 * 1000.0 ? "DVD-9" : "DVD-5");                  }              }
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDVDString,The following statement contains a magic number: if (MediaIsDisc(p))              {                  string[] files = Directory.GetFiles(p' "*.*"' SearchOption.AllDirectories);                  foreach (string f in files)                  {                      FileInfo fi = new FileInfo(f);                      size += fi.Length;                  }                  if (size > 0.0)                  {                      ss = (size > 4.7 * 1000.0 * 1000.0 * 1000.0 ? "DVD-9" : "DVD-5");                  }              }
Magic Number,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,GetDVDString,The following statement contains a magic number: if (MediaIsDisc(p))              {                  string[] files = Directory.GetFiles(p' "*.*"' SearchOption.AllDirectories);                  foreach (string f in files)                  {                      FileInfo fi = new FileInfo(f);                      size += fi.Length;                  }                  if (size > 0.0)                  {                      ss = (size > 4.7 * 1000.0 * 1000.0 * 1000.0 ? "DVD-9" : "DVD-5");                  }              }
Magic Number,TDMakerLib,ColorDialogEditor,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\ColorDialogEditor.cs,EditValue,The following statement contains a magic number: if (cd.ShowDialog() == DialogResult.OK)              {                  hexColor = string.Format("0x{0:X8}"' cd.Color.ToArgb());                  hexColor = hexColor.Substring(hexColor.Length - 6' 6);                  value = hexColor;              }
Magic Number,TDMakerLib,ColorDialogEditor,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\ColorDialogEditor.cs,EditValue,The following statement contains a magic number: if (cd.ShowDialog() == DialogResult.OK)              {                  hexColor = string.Format("0x{0:X8}"' cd.Color.ToArgb());                  hexColor = hexColor.Substring(hexColor.Length - 6' 6);                  value = hexColor;              }
Magic Number,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,GetXMLTorrentUpload,The following statement contains a magic number: if (string.IsNullOrEmpty(res) && !string.IsNullOrEmpty(mi.Overall.Video.Height) && !string.IsNullOrEmpty(mi.Overall.Video.Width))              {                  string height = mi.Overall.Video.Height;                  double dblWidth = 0.0;                  double dblHeight = 0.0;                  double.TryParse(mi.Overall.Video.Width' out dblWidth);                  double.TryParse(height' out dblHeight);                    if (dblWidth > 1900)                  {                      res = "1080p";                  }                  else if (dblWidth > 1200)                  {                      res = "720p";                  }                  else if (dblHeight > 480)                  {                      res = "576p";                  }                  else if (dblWidth > 700)                  {                      res = "480p";                  }                  else                  {                      res = mi.Overall.Video.Resolution;                  }              }
Magic Number,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,GetXMLTorrentUpload,The following statement contains a magic number: if (string.IsNullOrEmpty(res) && !string.IsNullOrEmpty(mi.Overall.Video.Height) && !string.IsNullOrEmpty(mi.Overall.Video.Width))              {                  string height = mi.Overall.Video.Height;                  double dblWidth = 0.0;                  double dblHeight = 0.0;                  double.TryParse(mi.Overall.Video.Width' out dblWidth);                  double.TryParse(height' out dblHeight);                    if (dblWidth > 1900)                  {                      res = "1080p";                  }                  else if (dblWidth > 1200)                  {                      res = "720p";                  }                  else if (dblHeight > 480)                  {                      res = "576p";                  }                  else if (dblWidth > 700)                  {                      res = "480p";                  }                  else                  {                      res = mi.Overall.Video.Resolution;                  }              }
Magic Number,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,GetXMLTorrentUpload,The following statement contains a magic number: if (string.IsNullOrEmpty(res) && !string.IsNullOrEmpty(mi.Overall.Video.Height) && !string.IsNullOrEmpty(mi.Overall.Video.Width))              {                  string height = mi.Overall.Video.Height;                  double dblWidth = 0.0;                  double dblHeight = 0.0;                  double.TryParse(mi.Overall.Video.Width' out dblWidth);                  double.TryParse(height' out dblHeight);                    if (dblWidth > 1900)                  {                      res = "1080p";                  }                  else if (dblWidth > 1200)                  {                      res = "720p";                  }                  else if (dblHeight > 480)                  {                      res = "576p";                  }                  else if (dblWidth > 700)                  {                      res = "480p";                  }                  else                  {                      res = mi.Overall.Video.Resolution;                  }              }
Magic Number,TDMakerLib,FileSystem,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\FileSystem.cs,GetXMLTorrentUpload,The following statement contains a magic number: if (string.IsNullOrEmpty(res) && !string.IsNullOrEmpty(mi.Overall.Video.Height) && !string.IsNullOrEmpty(mi.Overall.Video.Width))              {                  string height = mi.Overall.Video.Height;                  double dblWidth = 0.0;                  double dblHeight = 0.0;                  double.TryParse(mi.Overall.Video.Width' out dblWidth);                  double.TryParse(height' out dblHeight);                    if (dblWidth > 1900)                  {                      res = "1080p";                  }                  else if (dblWidth > 1200)                  {                      res = "720p";                  }                  else if (dblHeight > 480)                  {                      res = "576p";                  }                  else if (dblWidth > 700)                  {                      res = "480p";                  }                  else                  {                      res = mi.Overall.Video.Resolution;                  }              }
Magic Number,TDMakerLib,AppInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\AppInfo.cs,CompareVersion,The following statement contains a magic number: switch (r)              {                  case 1:                      return version1;                  case 2:                      return version2;                  default:                      return version1;              }
Magic Number,TDMakerLib,AppInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\AppInfo.cs,CompareVersion,The following statement contains a magic number: if (ver1[index] < ver2[index])                  return 2;
Magic Number,TDMakerLib,AppInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\AppInfo.cs,CompareVersion,The following statement contains a magic number: if (++index < 4)              {                  return CompareVersion(ver1' ver2' index);              }
Magic Number,TDMakerLib,TaskManager,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\TaskManager.cs,StartTasks,The following statement contains a magic number: if (inQueueTasks.Length > 0)              {                  int len;                    int UploadLimit = 4;                  if (UploadLimit == 0)                  {                      len = inQueueTasks.Length;                  }                  else                  {                      len = (UploadLimit - workingTasksCount).Between(0' inQueueTasks.Length);                  }                    for (int i = 0; i < len; i++)                  {                      inQueueTasks[i].Start();                  }              }
Magic Number,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,UploadData,The following statement contains a magic number: if (uploader != null)              {                  uploader.BufferSize = (int)Math.Pow(2' App.Settings.BufferSizePower) * 1024;                  uploader.ProgressChanged += uploader_ProgressChanged;                    Info.UploadDuration = Stopwatch.StartNew();                    UploadResult result = uploader.Upload(stream' fileName);                    Info.UploadDuration.Stop();                    return result;              }
Magic Number,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,UploadData,The following statement contains a magic number: if (uploader != null)              {                  uploader.BufferSize = (int)Math.Pow(2' App.Settings.BufferSizePower) * 1024;                  uploader.ProgressChanged += uploader_ProgressChanged;                    Info.UploadDuration = Stopwatch.StartNew();                    UploadResult result = uploader.Upload(stream' fileName);                    Info.UploadDuration.Stop();                    return result;              }
Magic Number,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,ReadFile,The following statement contains a magic number: if (File.Exists(FilePath))              {                  MediaInfoLib.MediaInfo MI = null;                  try                  {                      Debug.WriteLine("Loading MediaInfo.dll");                      MI = new MediaInfoLib.MediaInfo();                      Debug.WriteLine("Loaded MediaInfo.dll");                  }                  catch (Exception ex)                  {                      Debug.WriteLine(ex.ToString());                  }                    if (MI != null)                  {                      Debug.WriteLine(string.Format("MediaInfo Opening {0}"' FilePath));                      MI.Open(FilePath);                      Debug.WriteLine(string.Format("MediaInfo Opened {0}"' FilePath));                        MI.Option("Complete");                      this.Summary = MI.Inform();                      MI.Option("Complete"' "1");                      this.SummaryComplete = MI.Inform();                        if (App.IsUNIX)                      {                          Debug.WriteLine(string.Format("MediaInfo Summary Length: {0}"' this.Summary.Length.ToString()));                          Debug.WriteLine(string.Format("MediaInfo Summary: {0}"' this.Summary));                      }                        // Format Info                      if (string.IsNullOrEmpty(this.Format))                          this.Format = MI.Get(StreamKind.General' 0' "Format");                      this.FormatInfo = MI.Get(StreamKind.General' 0' "Format/Info");                        // this.FileName = mMI.Get(0' 0' "FileName");                      if (this.FileSize == 0)                      {                          double sz;                          double.TryParse(MI.Get(0' 0' "FileSize")' out sz);                          this.FileSize = sz;                      }                      if (string.IsNullOrEmpty(this.FileSizeString))                      {                          this.FileSizeString = string.Format("{0} MiB"' (this.FileSize / 1024.0 / 1024.0).ToString("0.00"));                      }                        // Duration                      if (string.IsNullOrEmpty(this.DurationString2))                          this.DurationString2 = MI.Get(0' 0' "Duration/String2");                        if (this.Duration == 0.0)                      {                          double dura = 0.0;                          double.TryParse(MI.Get(0' 0' "Duration")' out dura);                          this.Duration = dura;                          this.SegmentDuration = dura;                      }                        if (string.IsNullOrEmpty(this.DurationString3))                          this.DurationString3 = MI.Get(0' 0' "Duration/String3");                        this.BitrateOverall = MI.Get(StreamKind.General' 0' "OverallBitRate/String");                      this.EncodedApplication = MI.Get(StreamKind.General' 0' "Encoded_Application");                      this.EncodedDate = MI.Get(StreamKind.General' 0' "Encoded_Date");                        if (string.IsNullOrEmpty(this.Subtitles))                      {                          StringBuilder sbSubs = new StringBuilder();                            int subCount = 0;                          int.TryParse(MI.Get(StreamKind.Text' 0' "StreamCount")' out subCount);                            if (subCount > 0)                          {                              StringBuilder sbLang = new StringBuilder();                              for (int i = 0; i < subCount; i++)                              {                                  string lang = MI.Get(StreamKind.Text' i' "Language/String");                                  if (!string.IsNullOrEmpty(lang))                                  {                                      sbLang.Append(lang);                                      if (i < subCount - 1)                                          sbLang.Append("' ");                                  }                              }                              if (!string.IsNullOrEmpty(sbLang.ToString()))                              {                                  sbSubs.Append(sbLang.ToString());                              }                              else                              {                                  sbSubs.Append("N/A");                              }                          }                          else                          {                              sbSubs.Append("None");                          }                            this.Subtitles = sbSubs.ToString();                      }                        //*********************                      //* Video                      //*********************                        int videoCount;                      int.TryParse(MI.Get(StreamKind.General' 0' "VideoCount")' out videoCount);                      this.HasVideo = videoCount > 0;                        this.Video.Format = MI.Get(StreamKind.Video' 0' "Format");                      this.Video.FormatVersion = MI.Get(StreamKind.Video' 0' "Format_Version");                        if (Path.GetExtension(this.FilePath).ToLower().Equals(".mkv"))                      {                          this.Video.Codec = MI.Get(StreamKind.Video' 0' "Encoded_Library");                      }                      this.Video.EncodedLibrarySettings = MI.Get(StreamKind.Video' 0' "Encoded_Library_Settings");                      this.Video.DisplayAspectRatio = MI.Get(StreamKind.Video' 0' "DisplayAspectRatio/String");                        if (string.IsNullOrEmpty(this.Video.Codec))                          this.Video.Codec = MI.Get(StreamKind.Video' 0' "CodecID/Hint");                      if (string.IsNullOrEmpty(this.Video.Codec))                          this.Video.Codec = MI.Get(StreamKind.Video' 0' "CodecID");                        this.Video.Bitrate = MI.Get(StreamKind.Video' 0' "BitRate/String");                      this.Video.Standard = MI.Get(StreamKind.Video' 0' "Standard");                      ;                      this.Video.FrameRate = MI.Get(StreamKind.Video' 0' "FrameRate/String");                      this.Video.ScanType = MI.Get(StreamKind.Video' 0' "ScanType/String");                      this.Video.Height = MI.Get(StreamKind.Video' 0' "Height");                      this.Video.Width = MI.Get(StreamKind.Video' 0' "Width");                      this.Video.Resolution = string.Format("{0}x{1}"' this.Video.Width' this.Video.Height);                      this.Video.BitsPerPixelXFrame = MI.Get(StreamKind.Video' 0' "Bits-(Pixel*Frame)");                        //*********************                      //* Audio                      //*********************                      int audioCount;                      int.TryParse(MI.Get(StreamKind.General' 0' "AudioCount")' out audioCount);                      this.HasAudio = audioCount > 0;                        for (int id = 0; id < audioCount; id++)                      {                          AudioInfo ai = new AudioInfo(id);                          ai.Format = MI.Get(StreamKind.Audio' id' "Format");                          ai.FormatVersion = MI.Get(StreamKind.Audio' 0' "Format_Version");                          ai.FormatProfile = MI.Get(StreamKind.Audio' 0' "Format_Profile");                            ai.Codec = MI.Get(StreamKind.Audio' 0' "CodecID/Hint");                          if (string.IsNullOrEmpty(ai.Codec))                              ai.Codec = MI.Get(StreamKind.Audio' 0' "CodecID/Info");                          if (string.IsNullOrEmpty(ai.Codec))                              ai.Codec = MI.Get(StreamKind.Audio' 0' "CodecID");                            ai.Bitrate = MI.Get(StreamKind.Audio' id' "BitRate/String");                          ai.BitrateMode = MI.Get(StreamKind.Audio' id' "BitRate_Mode/String");                            ai.Channels = MI.Get(StreamKind.Audio' id' "Channel(s)/String");                          ai.SamplingRate = MI.Get(StreamKind.Audio' id' "SamplingRate/String");                          ai.Resolution = MI.Get(StreamKind.Audio' id' "Resolution/String");                            this.Audio.Add(ai);                      }                        MI.Close();                        //// Analyse Audio only files using TagLib                        //if (this.HasAudio && !this.HasVideo)                      //{                      //    TagLib.File f = TagLib.File.Create(this.FilePath);                      //    this.TagLibFile = f;                      //}                  }              }
Magic Number,TDMakerLib,MediaFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaFile.cs,ReadFile,The following statement contains a magic number: if (File.Exists(FilePath))              {                  MediaInfoLib.MediaInfo MI = null;                  try                  {                      Debug.WriteLine("Loading MediaInfo.dll");                      MI = new MediaInfoLib.MediaInfo();                      Debug.WriteLine("Loaded MediaInfo.dll");                  }                  catch (Exception ex)                  {                      Debug.WriteLine(ex.ToString());                  }                    if (MI != null)                  {                      Debug.WriteLine(string.Format("MediaInfo Opening {0}"' FilePath));                      MI.Open(FilePath);                      Debug.WriteLine(string.Format("MediaInfo Opened {0}"' FilePath));                        MI.Option("Complete");                      this.Summary = MI.Inform();                      MI.Option("Complete"' "1");                      this.SummaryComplete = MI.Inform();                        if (App.IsUNIX)                      {                          Debug.WriteLine(string.Format("MediaInfo Summary Length: {0}"' this.Summary.Length.ToString()));                          Debug.WriteLine(string.Format("MediaInfo Summary: {0}"' this.Summary));                      }                        // Format Info                      if (string.IsNullOrEmpty(this.Format))                          this.Format = MI.Get(StreamKind.General' 0' "Format");                      this.FormatInfo = MI.Get(StreamKind.General' 0' "Format/Info");                        // this.FileName = mMI.Get(0' 0' "FileName");                      if (this.FileSize == 0)                      {                          double sz;                          double.TryParse(MI.Get(0' 0' "FileSize")' out sz);                          this.FileSize = sz;                      }                      if (string.IsNullOrEmpty(this.FileSizeString))                      {                          this.FileSizeString = string.Format("{0} MiB"' (this.FileSize / 1024.0 / 1024.0).ToString("0.00"));                      }                        // Duration                      if (string.IsNullOrEmpty(this.DurationString2))                          this.DurationString2 = MI.Get(0' 0' "Duration/String2");                        if (this.Duration == 0.0)                      {                          double dura = 0.0;                          double.TryParse(MI.Get(0' 0' "Duration")' out dura);                          this.Duration = dura;                          this.SegmentDuration = dura;                      }                        if (string.IsNullOrEmpty(this.DurationString3))                          this.DurationString3 = MI.Get(0' 0' "Duration/String3");                        this.BitrateOverall = MI.Get(StreamKind.General' 0' "OverallBitRate/String");                      this.EncodedApplication = MI.Get(StreamKind.General' 0' "Encoded_Application");                      this.EncodedDate = MI.Get(StreamKind.General' 0' "Encoded_Date");                        if (string.IsNullOrEmpty(this.Subtitles))                      {                          StringBuilder sbSubs = new StringBuilder();                            int subCount = 0;                          int.TryParse(MI.Get(StreamKind.Text' 0' "StreamCount")' out subCount);                            if (subCount > 0)                          {                              StringBuilder sbLang = new StringBuilder();                              for (int i = 0; i < subCount; i++)                              {                                  string lang = MI.Get(StreamKind.Text' i' "Language/String");                                  if (!string.IsNullOrEmpty(lang))                                  {                                      sbLang.Append(lang);                                      if (i < subCount - 1)                                          sbLang.Append("' ");                                  }                              }                              if (!string.IsNullOrEmpty(sbLang.ToString()))                              {                                  sbSubs.Append(sbLang.ToString());                              }                              else                              {                                  sbSubs.Append("N/A");                              }                          }                          else                          {                              sbSubs.Append("None");                          }                            this.Subtitles = sbSubs.ToString();                      }                        //*********************                      //* Video                      //*********************                        int videoCount;                      int.TryParse(MI.Get(StreamKind.General' 0' "VideoCount")' out videoCount);                      this.HasVideo = videoCount > 0;                        this.Video.Format = MI.Get(StreamKind.Video' 0' "Format");                      this.Video.FormatVersion = MI.Get(StreamKind.Video' 0' "Format_Version");                        if (Path.GetExtension(this.FilePath).ToLower().Equals(".mkv"))                      {                          this.Video.Codec = MI.Get(StreamKind.Video' 0' "Encoded_Library");                      }                      this.Video.EncodedLibrarySettings = MI.Get(StreamKind.Video' 0' "Encoded_Library_Settings");                      this.Video.DisplayAspectRatio = MI.Get(StreamKind.Video' 0' "DisplayAspectRatio/String");                        if (string.IsNullOrEmpty(this.Video.Codec))                          this.Video.Codec = MI.Get(StreamKind.Video' 0' "CodecID/Hint");                      if (string.IsNullOrEmpty(this.Video.Codec))                          this.Video.Codec = MI.Get(StreamKind.Video' 0' "CodecID");                        this.Video.Bitrate = MI.Get(StreamKind.Video' 0' "BitRate/String");                      this.Video.Standard = MI.Get(StreamKind.Video' 0' "Standard");                      ;                      this.Video.FrameRate = MI.Get(StreamKind.Video' 0' "FrameRate/String");                      this.Video.ScanType = MI.Get(StreamKind.Video' 0' "ScanType/String");                      this.Video.Height = MI.Get(StreamKind.Video' 0' "Height");                      this.Video.Width = MI.Get(StreamKind.Video' 0' "Width");                      this.Video.Resolution = string.Format("{0}x{1}"' this.Video.Width' this.Video.Height);                      this.Video.BitsPerPixelXFrame = MI.Get(StreamKind.Video' 0' "Bits-(Pixel*Frame)");                        //*********************                      //* Audio                      //*********************                      int audioCount;                      int.TryParse(MI.Get(StreamKind.General' 0' "AudioCount")' out audioCount);                      this.HasAudio = audioCount > 0;                        for (int id = 0; id < audioCount; id++)                      {                          AudioInfo ai = new AudioInfo(id);                          ai.Format = MI.Get(StreamKind.Audio' id' "Format");                          ai.FormatVersion = MI.Get(StreamKind.Audio' 0' "Format_Version");                          ai.FormatProfile = MI.Get(StreamKind.Audio' 0' "Format_Profile");                            ai.Codec = MI.Get(StreamKind.Audio' 0' "CodecID/Hint");                          if (string.IsNullOrEmpty(ai.Codec))                              ai.Codec = MI.Get(StreamKind.Audio' 0' "CodecID/Info");                          if (string.IsNullOrEmpty(ai.Codec))                              ai.Codec = MI.Get(StreamKind.Audio' 0' "CodecID");                            ai.Bitrate = MI.Get(StreamKind.Audio' id' "BitRate/String");                          ai.BitrateMode = MI.Get(StreamKind.Audio' id' "BitRate_Mode/String");                            ai.Channels = MI.Get(StreamKind.Audio' id' "Channel(s)/String");                          ai.SamplingRate = MI.Get(StreamKind.Audio' id' "SamplingRate/String");                          ai.Resolution = MI.Get(StreamKind.Audio' id' "Resolution/String");                            this.Audio.Add(ai);                      }                        MI.Close();                        //// Analyse Audio only files using TagLib                        //if (this.HasAudio && !this.HasVideo)                      //{                      //    TagLib.File f = TagLib.File.Create(this.FilePath);                      //    this.TagLibFile = f;                      //}                  }              }
Magic Number,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,ReadDirectory,The following statement contains a magic number: if (Directory.Exists(Location))              {                  // get largest file                  FileCollection = GetFilesToProcess(Location);                  List<FileInfo> listFileInfo = new List<FileInfo>();                  foreach (string fp in FileCollection)                  {                      listFileInfo.Add(new FileInfo(fp));                  }                    // Subtitles' Format: DVD Video using VTS_01_0.IFO                  string[] ifo = Directory.GetFiles(Location' "VTS_01_0.IFO"' SearchOption.AllDirectories);                  if (ifo.Length == 1) // CHECK IF A DVD                  {                      this.Options.MediaTypeChoice = MediaType.MediaDisc;                      MediaInfoLib.MediaInfo mi = new MediaInfoLib.MediaInfo();                      this.DiscType = TDMakerLib.SourceType.DVD;                        mi.Open(ifo[0]);                        // most prolly this will be: DVD Video                      this.Overall.Format = mi.Get(StreamKind.General' 0' "Format");                        int subCount = 0;                      int.TryParse(mi.Get(StreamKind.Text' 0' "StreamCount")' out subCount);                        if (subCount > 0)                      {                          List<string> langs = new List<string>();                          for (int i = 0; i < subCount; i++)                          {                              string lang = mi.Get(StreamKind.Text' i' "Language/String");                              if (!string.IsNullOrEmpty(lang))                              {                                  // System.Windows.Forms.MessageBox.Show(lang);                                  if (!langs.Contains(lang))                                      langs.Add(lang);                              }                          }                          StringBuilder sbLangs = new StringBuilder();                          for (int i = 0; i < langs.Count; i++)                          {                              sbLangs.Append(langs[i]);                              if (i < langs.Count - 1)                                  sbLangs.Append("' ");                          }                            this.Overall.Subtitles = sbLangs.ToString();                      }                        // close ifo file                      mi.Close();                        // AFTER IDENTIFIED THE MEDIA TYPE IS A DVD                      listFileInfo.RemoveAll(x => x.Length < 1000000000);                  }                    // Set Media Type                  bool allAudio = Adapter.MediaIsAudio(FileCollection);                  if (allAudio)                  {                      this.Options.MediaTypeChoice = MediaType.MusicAudioAlbum;                  }                    if (FileCollection.Count > 0)                  {                      foreach (FileInfo fi in listFileInfo)                      {                          this.AddMedia(new MediaFile(fi.FullName' this.Source));                      }                        this.Overall = new MediaFile(FileSystemHelper.GetLargestFilePathFromDir(Location)' this.Source);                        // Set Overall File Name                      this.Overall.FileName = Path.GetFileName(Location);                      if (Overall.FileName.ToUpper().Equals("VIDEO_TS"))                          Overall.FileName = Path.GetFileName(Path.GetDirectoryName(Location));                      if (string.IsNullOrEmpty(Title))                          this.Title = this.Overall.FileName;                  }                    // DVD Video                  // Combined Duration and File Size                  if (Options.MediaTypeChoice == MediaType.MediaDisc)                  {                      if (listFileInfo.Count > 0)                      {                          long dura = 0;                          double size = 0;                          foreach (FileInfo fiVob in listFileInfo)                          {                              MediaInfoLib.MediaInfo mi = new MediaInfoLib.MediaInfo();                              mi.Open(fiVob.FullName);                              string temp = mi.Get(0' 0' "Duration");                              if (!string.IsNullOrEmpty(temp))                              {                                  long d = 0;                                  long.TryParse(temp' out d);                                  dura += d;                              }                                // we are interested in combined file size only for VOB files                              // thats why we dont calculate FileSize in FileInfo while determining largest file                              double sz = 0;                              double.TryParse(mi.Get(0' 0' "FileSize")' out sz);                              size += sz;                                // close vob file                              mi.Close();                          }                            this.Overall.FileSize = size; // override any previous file size                          this.Overall.FileSizeString = string.Format("{0} MiB"' (this.Overall.FileSize / 1024.0 / 1024.0).ToString("0.00"));                            this.Overall.Duration = dura;                          this.Overall.DurationString2 = App.GetDurationString(dura);                      }                  }              }
Magic Number,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,ReadDirectory,The following statement contains a magic number: if (Directory.Exists(Location))              {                  // get largest file                  FileCollection = GetFilesToProcess(Location);                  List<FileInfo> listFileInfo = new List<FileInfo>();                  foreach (string fp in FileCollection)                  {                      listFileInfo.Add(new FileInfo(fp));                  }                    // Subtitles' Format: DVD Video using VTS_01_0.IFO                  string[] ifo = Directory.GetFiles(Location' "VTS_01_0.IFO"' SearchOption.AllDirectories);                  if (ifo.Length == 1) // CHECK IF A DVD                  {                      this.Options.MediaTypeChoice = MediaType.MediaDisc;                      MediaInfoLib.MediaInfo mi = new MediaInfoLib.MediaInfo();                      this.DiscType = TDMakerLib.SourceType.DVD;                        mi.Open(ifo[0]);                        // most prolly this will be: DVD Video                      this.Overall.Format = mi.Get(StreamKind.General' 0' "Format");                        int subCount = 0;                      int.TryParse(mi.Get(StreamKind.Text' 0' "StreamCount")' out subCount);                        if (subCount > 0)                      {                          List<string> langs = new List<string>();                          for (int i = 0; i < subCount; i++)                          {                              string lang = mi.Get(StreamKind.Text' i' "Language/String");                              if (!string.IsNullOrEmpty(lang))                              {                                  // System.Windows.Forms.MessageBox.Show(lang);                                  if (!langs.Contains(lang))                                      langs.Add(lang);                              }                          }                          StringBuilder sbLangs = new StringBuilder();                          for (int i = 0; i < langs.Count; i++)                          {                              sbLangs.Append(langs[i]);                              if (i < langs.Count - 1)                                  sbLangs.Append("' ");                          }                            this.Overall.Subtitles = sbLangs.ToString();                      }                        // close ifo file                      mi.Close();                        // AFTER IDENTIFIED THE MEDIA TYPE IS A DVD                      listFileInfo.RemoveAll(x => x.Length < 1000000000);                  }                    // Set Media Type                  bool allAudio = Adapter.MediaIsAudio(FileCollection);                  if (allAudio)                  {                      this.Options.MediaTypeChoice = MediaType.MusicAudioAlbum;                  }                    if (FileCollection.Count > 0)                  {                      foreach (FileInfo fi in listFileInfo)                      {                          this.AddMedia(new MediaFile(fi.FullName' this.Source));                      }                        this.Overall = new MediaFile(FileSystemHelper.GetLargestFilePathFromDir(Location)' this.Source);                        // Set Overall File Name                      this.Overall.FileName = Path.GetFileName(Location);                      if (Overall.FileName.ToUpper().Equals("VIDEO_TS"))                          Overall.FileName = Path.GetFileName(Path.GetDirectoryName(Location));                      if (string.IsNullOrEmpty(Title))                          this.Title = this.Overall.FileName;                  }                    // DVD Video                  // Combined Duration and File Size                  if (Options.MediaTypeChoice == MediaType.MediaDisc)                  {                      if (listFileInfo.Count > 0)                      {                          long dura = 0;                          double size = 0;                          foreach (FileInfo fiVob in listFileInfo)                          {                              MediaInfoLib.MediaInfo mi = new MediaInfoLib.MediaInfo();                              mi.Open(fiVob.FullName);                              string temp = mi.Get(0' 0' "Duration");                              if (!string.IsNullOrEmpty(temp))                              {                                  long d = 0;                                  long.TryParse(temp' out d);                                  dura += d;                              }                                // we are interested in combined file size only for VOB files                              // thats why we dont calculate FileSize in FileInfo while determining largest file                              double sz = 0;                              double.TryParse(mi.Get(0' 0' "FileSize")' out sz);                              size += sz;                                // close vob file                              mi.Close();                          }                            this.Overall.FileSize = size; // override any previous file size                          this.Overall.FileSizeString = string.Format("{0} MiB"' (this.Overall.FileSize / 1024.0 / 1024.0).ToString("0.00"));                            this.Overall.Duration = dura;                          this.Overall.DurationString2 = App.GetDurationString(dura);                      }                  }              }
Magic Number,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,ReadDirectory,The following statement contains a magic number: if (Directory.Exists(Location))              {                  // get largest file                  FileCollection = GetFilesToProcess(Location);                  List<FileInfo> listFileInfo = new List<FileInfo>();                  foreach (string fp in FileCollection)                  {                      listFileInfo.Add(new FileInfo(fp));                  }                    // Subtitles' Format: DVD Video using VTS_01_0.IFO                  string[] ifo = Directory.GetFiles(Location' "VTS_01_0.IFO"' SearchOption.AllDirectories);                  if (ifo.Length == 1) // CHECK IF A DVD                  {                      this.Options.MediaTypeChoice = MediaType.MediaDisc;                      MediaInfoLib.MediaInfo mi = new MediaInfoLib.MediaInfo();                      this.DiscType = TDMakerLib.SourceType.DVD;                        mi.Open(ifo[0]);                        // most prolly this will be: DVD Video                      this.Overall.Format = mi.Get(StreamKind.General' 0' "Format");                        int subCount = 0;                      int.TryParse(mi.Get(StreamKind.Text' 0' "StreamCount")' out subCount);                        if (subCount > 0)                      {                          List<string> langs = new List<string>();                          for (int i = 0; i < subCount; i++)                          {                              string lang = mi.Get(StreamKind.Text' i' "Language/String");                              if (!string.IsNullOrEmpty(lang))                              {                                  // System.Windows.Forms.MessageBox.Show(lang);                                  if (!langs.Contains(lang))                                      langs.Add(lang);                              }                          }                          StringBuilder sbLangs = new StringBuilder();                          for (int i = 0; i < langs.Count; i++)                          {                              sbLangs.Append(langs[i]);                              if (i < langs.Count - 1)                                  sbLangs.Append("' ");                          }                            this.Overall.Subtitles = sbLangs.ToString();                      }                        // close ifo file                      mi.Close();                        // AFTER IDENTIFIED THE MEDIA TYPE IS A DVD                      listFileInfo.RemoveAll(x => x.Length < 1000000000);                  }                    // Set Media Type                  bool allAudio = Adapter.MediaIsAudio(FileCollection);                  if (allAudio)                  {                      this.Options.MediaTypeChoice = MediaType.MusicAudioAlbum;                  }                    if (FileCollection.Count > 0)                  {                      foreach (FileInfo fi in listFileInfo)                      {                          this.AddMedia(new MediaFile(fi.FullName' this.Source));                      }                        this.Overall = new MediaFile(FileSystemHelper.GetLargestFilePathFromDir(Location)' this.Source);                        // Set Overall File Name                      this.Overall.FileName = Path.GetFileName(Location);                      if (Overall.FileName.ToUpper().Equals("VIDEO_TS"))                          Overall.FileName = Path.GetFileName(Path.GetDirectoryName(Location));                      if (string.IsNullOrEmpty(Title))                          this.Title = this.Overall.FileName;                  }                    // DVD Video                  // Combined Duration and File Size                  if (Options.MediaTypeChoice == MediaType.MediaDisc)                  {                      if (listFileInfo.Count > 0)                      {                          long dura = 0;                          double size = 0;                          foreach (FileInfo fiVob in listFileInfo)                          {                              MediaInfoLib.MediaInfo mi = new MediaInfoLib.MediaInfo();                              mi.Open(fiVob.FullName);                              string temp = mi.Get(0' 0' "Duration");                              if (!string.IsNullOrEmpty(temp))                              {                                  long d = 0;                                  long.TryParse(temp' out d);                                  dura += d;                              }                                // we are interested in combined file size only for VOB files                              // thats why we dont calculate FileSize in FileInfo while determining largest file                              double sz = 0;                              double.TryParse(mi.Get(0' 0' "FileSize")' out sz);                              size += sz;                                // close vob file                              mi.Close();                          }                            this.Overall.FileSize = size; // override any previous file size                          this.Overall.FileSizeString = string.Format("{0} MiB"' (this.Overall.FileSize / 1024.0 / 1024.0).ToString("0.00"));                            this.Overall.Duration = dura;                          this.Overall.DurationString2 = App.GetDurationString(dura);                      }                  }              }
Magic Number,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,GetTotalSize,The following statement contains a magic number: return MediaFiles.Sum(x => x.FileSize) / 1024 / 1024;
Magic Number,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,GetTotalSize,The following statement contains a magic number: return MediaFiles.Sum(x => x.FileSize) / 1024 / 1024;
Magic Number,TDMakerLib,App,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Program.cs,GetDurationString,The following statement contains a magic number: double duraSec = dura / 1000.0;
Magic Number,TDMakerLib,App,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Program.cs,GetDurationString,The following statement contains a magic number: long hours = (long)duraSec / 3600;
Magic Number,TDMakerLib,App,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Program.cs,GetDurationString,The following statement contains a magic number: long secLeft = (long)duraSec - hours * 3600;
Magic Number,TDMakerLib,App,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Program.cs,GetDurationString,The following statement contains a magic number: long mins = secLeft / 60;
Magic Number,TDMakerLib,App,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Program.cs,GetDurationString,The following statement contains a magic number: long sec = secLeft - mins * 60;
Magic Number,TDMakerLib,FFmpegThumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\FFmpegThumbnailer.cs,TakeScreenshots,The following statement contains a magic number: p.WaitForExit(1000 * 30);
Magic Number,TDMakerLib,FFmpegThumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\FFmpegThumbnailer.cs,TakeScreenshots,The following statement contains a magic number: p.WaitForExit(1000 * 30);
Magic Number,TDMakerLib,MappingHelper,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Templates\MappingHelper.cs,MappingHelper,The following statement contains a magic number: if (!string.IsNullOrEmpty(summary))              {                  int idAudio = 1;                  string prefix = string.Empty;                  string[] lines = summary.Split(new[] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries);                    foreach (string line in lines)                  {                      string[] temp = line.Split(new[] { " : " }' StringSplitOptions.None);                        if (temp.Length == 2 && !string.IsNullOrEmpty(prefix))                      {                          MIFieldValue mifv = new MIFieldValue(temp[0]' temp[1]' prefix);                          if (prefix == "General")                          {                              if (!this.MappingsGeneral.Keys.Contains(mifv.Field))                                  this.MappingsGeneral.Add(mifv.Field' mifv.Value);                          }                          else if (prefix == "Video")                          {                              if (!this.MappingsVideo.Keys.Contains(mifv.Field))                                  this.MappingsVideo.Add(mifv.Field' mifv.Value);                          }                          else if (prefix == "Audio")                          {                              if (!this.MappingsAudio[idAudio - 1].Keys.Contains(mifv.Field))                                  this.MappingsAudio[idAudio - 1].Add(mifv.Field' mifv.Value);                          }                      }                      else if (temp.Length == 1)                      {                          // attempt to get audio id                          string[] spTemp = Regex.Split(temp[0]' " #");                          if (spTemp.Length > 1)                          {                              // we have Audio #1' Text #1 etc.                              prefix = spTemp[0].Trim();                              if (prefix == "Audio")                              {                                  int audioNum = 0; // compared with idAudio                                  int.TryParse(spTemp[1]' out audioNum);                                  this.MappingsAudio.Add(new Dictionary<string' string>());                                  idAudio = audioNum;                              }                          }                          else                          {                              prefix = temp[0].Trim(); // general' video or audio                              if (prefix == "Audio" && this.MappingsAudio.Count == 0)                              {                                  this.MappingsAudio.Add(new Dictionary<string' string>());                              }                          }                      }                      else                      {                          Debug.WriteLine(string.Format("Error TemplateReader.cs: {0}' {1}"' line' prefix));                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,Thumbnailer,The following statement contains a magic number: for (int i = 1; i < Options.ScreenshotCount + 2; i++)              {                  MediaSeekTimes.Add(GetTimeSlice(Options.ScreenshotCount' 2) * i);              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,Thumbnailer,The following statement contains a magic number: for (int i = 1; i < Options.ScreenshotCount + 2; i++)              {                  MediaSeekTimes.Add(GetTimeSlice(Options.ScreenshotCount' 2) * i);              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The following statement contains a magic number: for (int i = 0; i < Options.ScreenshotCount; i++)              {                  string mediaFileName = Path.GetFileNameWithoutExtension(MediaFile.FilePath);                  // worker.ReportProgress((int)ProgressType.UPDATE_STATUSBAR_DEBUG' string.Format("Taking screenshot {0} of {1} for {2}"' i + 1' Options.ScreenshotCount' mediaFileName));                    int timeSliceElapsed = Options.RandomFrame ? GetRandomTimeSlice(i) : TimeSlice * (i + 1);                  string tempScreenshotPath = Path.Combine(ScreenshotDir' string.Format("{0}-{1}."' mediaFileName' timeSliceElapsed.ToString("00000")));                    ProcessStartInfo psi = new ProcessStartInfo(ThumbnailerPath);                  psi.WindowStyle = ProcessWindowStyle.Hidden;                    switch (App.Settings.ThumbnailerType)                  {                      case ThumbnailerType.MPlayer:                          tempScreenshotPath += "png"; // MPlayer only supports png reliably                          psi.Arguments = string.Format("-nosound -ss {0} -zoom -vf screenshot -frames 1 -vo png:z=9:outdir=\\\"{1}\\\" \"{2}\""'                              timeSliceElapsed' ScreenshotDir' MediaFile.FilePath);                          break;                      case ThumbnailerType.FFmpeg:                          tempScreenshotPath += Options.FFmpegThumbnailExtension;                          psi.Arguments = string.Format("-ss {0} -i \"{1}\" -f image2 -vframes 1 -y \"{2}\""' timeSliceElapsed' MediaFile.FilePath' tempScreenshotPath);                          break;                  }                    Process p = new Process();                  p.StartInfo = psi;                  p.Start();                  p.WaitForExit(1000 * 30);                  p.Close();                    switch (App.Settings.ThumbnailerType)                  {                      case ThumbnailerType.MPlayer:                          if (File.Exists(MPlayerTempFp))                          {                              if (File.Exists(tempScreenshotPath)) File.Delete(tempScreenshotPath);                              File.Move(MPlayerTempFp' tempScreenshotPath);                          }                          break;                  }                    if (File.Exists(tempScreenshotPath))                  {                      ScreenshotInfo screenshotInfo = new ScreenshotInfo(tempScreenshotPath)                      {                          Args = psi.Arguments'                          Timestamp = TimeSpan.FromSeconds(timeSliceElapsed)                      };                        MediaFile.TempScreenshots.Add(screenshotInfo);                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The following statement contains a magic number: for (int i = 0; i < Options.ScreenshotCount; i++)              {                  string mediaFileName = Path.GetFileNameWithoutExtension(MediaFile.FilePath);                  // worker.ReportProgress((int)ProgressType.UPDATE_STATUSBAR_DEBUG' string.Format("Taking screenshot {0} of {1} for {2}"' i + 1' Options.ScreenshotCount' mediaFileName));                    int timeSliceElapsed = Options.RandomFrame ? GetRandomTimeSlice(i) : TimeSlice * (i + 1);                  string tempScreenshotPath = Path.Combine(ScreenshotDir' string.Format("{0}-{1}."' mediaFileName' timeSliceElapsed.ToString("00000")));                    ProcessStartInfo psi = new ProcessStartInfo(ThumbnailerPath);                  psi.WindowStyle = ProcessWindowStyle.Hidden;                    switch (App.Settings.ThumbnailerType)                  {                      case ThumbnailerType.MPlayer:                          tempScreenshotPath += "png"; // MPlayer only supports png reliably                          psi.Arguments = string.Format("-nosound -ss {0} -zoom -vf screenshot -frames 1 -vo png:z=9:outdir=\\\"{1}\\\" \"{2}\""'                              timeSliceElapsed' ScreenshotDir' MediaFile.FilePath);                          break;                      case ThumbnailerType.FFmpeg:                          tempScreenshotPath += Options.FFmpegThumbnailExtension;                          psi.Arguments = string.Format("-ss {0} -i \"{1}\" -f image2 -vframes 1 -y \"{2}\""' timeSliceElapsed' MediaFile.FilePath' tempScreenshotPath);                          break;                  }                    Process p = new Process();                  p.StartInfo = psi;                  p.Start();                  p.WaitForExit(1000 * 30);                  p.Close();                    switch (App.Settings.ThumbnailerType)                  {                      case ThumbnailerType.MPlayer:                          if (File.Exists(MPlayerTempFp))                          {                              if (File.Exists(tempScreenshotPath)) File.Delete(tempScreenshotPath);                              File.Move(MPlayerTempFp' tempScreenshotPath);                          }                          break;                  }                    if (File.Exists(tempScreenshotPath))                  {                      ScreenshotInfo screenshotInfo = new ScreenshotInfo(tempScreenshotPath)                      {                          Args = psi.Arguments'                          Timestamp = TimeSpan.FromSeconds(timeSliceElapsed)                      };                        MediaFile.TempScreenshots.Add(screenshotInfo);                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,GetTimeSlice,The following statement contains a magic number: return (int)(MediaFile.SegmentDuration / ((numScreenshots + extraSlices) * 1000));
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,CombineScreenshots,The following statement contains a magic number: try              {                  string infoString = "";                  int infoStringHeight = 0;                    if (Options.AddMovieInfo)                  {                      infoString = MediaFile.GetMTNString();                      using (Font font = new Font("Arial"' 14))                      {                          infoStringHeight = Helpers.MeasureText(infoString' font).Height;                      }                  }                    foreach (ScreenshotInfo screenshot in screenshots)                  {                      Image img = Image.FromFile(screenshot.LocalPath);                        if (Options.MaxThumbnailWidth > 0 && img.Width > Options.MaxThumbnailWidth)                      {                          int maxThumbnailHeight = (int)((float)Options.MaxThumbnailWidth / img.Width * img.Height);                          img = ImageHelpers.ResizeImage(img' Options.MaxThumbnailWidth' maxThumbnailHeight);                      }                        images.Add(img);                  }                    int columnCount = Options.ColumnCount;                    int thumbWidth = images[0].Width;                    int width = Options.Padding * 2 +                              thumbWidth * columnCount +                              (columnCount - 1) * Options.Spacing;                    int rowCount = (int)Math.Ceiling(images.Count / (float)columnCount);                    int thumbHeight = images[0].Height;                    int height = Options.Padding * 3 +                               infoStringHeight +                               thumbHeight * rowCount +                               (rowCount - 1) * Options.Spacing;                    finalImage = new Bitmap(width' height);                    using (Graphics g = Graphics.FromImage(finalImage))                  {                      g.Clear(Color.WhiteSmoke);                        if (!string.IsNullOrEmpty(infoString))                      {                          using (Font font = new Font("Arial"' 14))                          {                              g.DrawString(infoString' font' Brushes.Black' Options.Padding' Options.Padding);                          }                      }                        int i = 0;                      int offsetY = Options.Padding * 2 + infoStringHeight;                        for (int y = 0; y < rowCount; y++)                      {                          int offsetX = Options.Padding;                            for (int x = 0; x < columnCount; x++)                          {                              if (Options.DrawShadow)                              {                                  int shadowOffset = 3;                                    using (Brush shadowBrush = new SolidBrush(Color.FromArgb(50' Color.Black)))                                  {                                      g.FillRectangle(shadowBrush' offsetX + shadowOffset' offsetY + shadowOffset' thumbWidth' thumbHeight);                                  }                              }                                g.DrawImage(images[i]' offsetX' offsetY' thumbWidth' thumbHeight);                                if (Options.AddTimestamp)                              {                                  int timestampOffset = 10;                                    using (Font font = new Font("Arial"' 12))                                  {                                      g.DrawTextWithShadow(screenshots[i].Timestamp.ToString()'                                          new Point(offsetX + timestampOffset' offsetY + timestampOffset)' font' Brushes.White' Brushes.Black);                                  }                              }                                i++;                                if (i >= images.Count)                              {                                  return finalImage;                              }                                offsetX += thumbWidth + Options.Spacing;                          }                            offsetY += thumbHeight + Options.Spacing;                      }                  }                    return finalImage;              }              catch              {                  if (finalImage != null)                  {                      finalImage.Dispose();                  }                    throw;              }              finally              {                  foreach (Image image in images)                  {                      if (image != null)                      {                          image.Dispose();                      }                  }              }
Magic Number,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' description' 2'                      delegate(OptionValueCollection v) { action(v[0]' v[1]); });
Magic Number,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this)              {                  int written = 0;                  if (!WriteOptionPrototype(o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write(new string(' '' OptionWidth - written));                  else                  {                      o.WriteLine();                      o.Write(new string(' '' OptionWidth));                  }                    List<string> lines = GetLines(localizer(GetDescription(p.Description)));                  o.WriteLine(lines[0]);                  string prefix = new string(' '' OptionWidth + 2);                  for (int i = 1; i < lines.Count; ++i)                  {                      o.Write(prefix);                      o.WriteLine(lines[i]);                  }              }
Magic Number,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,UploadersLib.HelperClasses,ImageFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\ImageFile.cs,ImageFile,The following statement contains a magic number: this.Size = fi.Length / (decimal)(1024 * 1024);
Magic Number,UploadersLib.HelperClasses,ImageFile,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\ImageFile.cs,ImageFile,The following statement contains a magic number: this.Size = fi.Length / (decimal)(1024 * 1024);
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,TrackList,The following statement contains a magic number: foreach (string af in lstAudioFiles)              {                  TagLib.File xt = TagLib.File.Create(af);                  FileInfo fi = new FileInfo(af);                  double bitRate = fGetBitrate(fi.Length' xt.Properties.Duration);                    string track = string.Format("{0} - {1}"' xt.Tag.Title' xt.Tag.FirstPerformer);                  msbAudio.AppendLine(string.Format("{0}. {1} {2} {3} MiB [{4} Kibit/s] [{5}]"' xt.Tag.Track.ToString("00")'                                                                                                   track'                                                                                                   fGetPadding(longestName' track)'                                                                                                   (fi.Length / 1024.0 / 1024.0).ToString("00.00")'                                                                                                   bitRate.ToString("0.00")'                                                                                                   fGetHMS(xt.Properties.Duration.TotalSeconds)));                  totalBitrate += bitRate;                    if (mBwApp != null)                      mBwApp.ReportProgress(1);              }
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,TrackList,The following statement contains a magic number: foreach (string af in lstAudioFiles)              {                  TagLib.File xt = TagLib.File.Create(af);                  FileInfo fi = new FileInfo(af);                  double bitRate = fGetBitrate(fi.Length' xt.Properties.Duration);                    string track = string.Format("{0} - {1}"' xt.Tag.Title' xt.Tag.FirstPerformer);                  msbAudio.AppendLine(string.Format("{0}. {1} {2} {3} MiB [{4} Kibit/s] [{5}]"' xt.Tag.Track.ToString("00")'                                                                                                   track'                                                                                                   fGetPadding(longestName' track)'                                                                                                   (fi.Length / 1024.0 / 1024.0).ToString("00.00")'                                                                                                   bitRate.ToString("0.00")'                                                                                                   fGetHMS(xt.Properties.Duration.TotalSeconds)));                  totalBitrate += bitRate;                    if (mBwApp != null)                      mBwApp.ReportProgress(1);              }
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,ExtraFilesList,The following statement contains a magic number: foreach (string ef in lstExtraFiles)              {                  FileInfo fi = new FileInfo(ef);                  sbExtraFiles.AppendLine(string.Format("{0} {1} {2} KiB"' Path.GetFileName(ef)'                                                                              fGetPadding(longestName' Path.GetFileName(ef))'                                                                              (fi.Length / 1024.0).ToString("00.00")));              }
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetFolderSize,The following statement contains a magic number: return ttl / 1024.0 / 1024.0;
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetFolderSize,The following statement contains a magic number: return ttl / 1024.0 / 1024.0;
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetBitrate,The following statement contains a magic number: return (sz / 1024 * 8 / dur.TotalSeconds);
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetBitrate,The following statement contains a magic number: return (sz / 1024 * 8 / dur.TotalSeconds);
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetHMS,The following statement contains a magic number: return string.Format("{0}:{1}:{2}"' hms[0].ToString("00")' hms[1].ToString("00")' hms[2].ToString("00"));
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetDurationInHoursMS,The following statement contains a magic number: double[] arrayHoursMinutesSeconds = new double[4];
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetDurationInHoursMS,The following statement contains a magic number: while (SecondsLeft >= 3600)              {                  SecondsLeft -= 3600;                  hours += 1;              }
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetDurationInHoursMS,The following statement contains a magic number: while (SecondsLeft >= 3600)              {                  SecondsLeft -= 3600;                  hours += 1;              }
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetDurationInHoursMS,The following statement contains a magic number: while (SecondsLeft >= 60)              {                  SecondsLeft -= 60;                  minutes += 1;              }
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetDurationInHoursMS,The following statement contains a magic number: while (SecondsLeft >= 60)              {                  SecondsLeft -= 60;                  minutes += 1;              }
Magic Number,TDMakerLib.MediaInfo,NfoReport,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\NfoReport.cs,fGetDurationInHoursMS,The following statement contains a magic number: arrayHoursMinutesSeconds[2] = SecondsLeft;
Missing Default,TDMakerLib,Adapter,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Global\Adapter.cs,ToPublishString,The following switch statement is missing a default case: switch (pop.PublishInfoTypeChoice)              {                  case PublishInfoType.ExternalTemplate:                      if (Directory.Exists(pop.TemplateLocation))                      {                          pt = TorrentInfo.ToStringPublishExternal(pop' new TemplateReader(pop.TemplateLocation' ts));                      }                      else if (Directory.Exists(ts.Media.TemplateLocation))                      {                          pt = TorrentInfo.ToStringPublishExternal(pop' new TemplateReader(ts.Media.TemplateLocation' ts));                      }                      else                      {                          pt = TorrentInfo.ToStringPublishInternal(ts);                      }                      break;                    case PublishInfoType.InternalTemplate:                      pt = TorrentInfo.ToStringPublishInternal(ts);                      break;                    case PublishInfoType.MediaInfo:                      pt = TorrentInfo.ToStringPublishMediaInfo(ts);                      break;              }
Missing Default,TDMakerLib,AppInfo,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\AppInfo.cs,GetApplicationTitle,The following switch statement is missing a default case: switch (mSoftwareState)              {                  case SoftwareCycle.Alpha:                      betaTag = " ALPHA";                      break;                  case SoftwareCycle.Beta:                      betaTag = " BETA";                      break;              }
Missing Default,TDMakerLib,WorkerTask,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\WorkerTask.cs,TakeScreenshots,The following switch statement is missing a default case: switch (Info.TaskSettings.MediaOptions.MediaTypeChoice)              {                  case MediaType.MediaCollection:                  case MediaType.MediaIndiv:                      Parallel.ForEach<MediaFile>(Info.TaskSettings.Media.MediaFiles' mf => { TakeScreenshots(mf' ssDir); });                      break;                    case MediaType.MediaDisc:                      TakeScreenshots(Info.TaskSettings.Media.Overall' ssDir);                      break;              }
Missing Default,TDMakerLib,MediaInfo2,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\MediaInfo\MediaInfo2.cs,ReadMedia,The following switch statement is missing a default case: switch (Options.MediaTypeChoice)              {                  case MediaType.MediaIndiv:                      if (File.Exists(Location))                      {                          ReadMediaFile();                      }                      else                      {                          ReadDirectory();                      }                      break;                    case MediaType.MediaCollection:                      ReadMediaFileCollection();                      break;                    case MediaType.MediaDisc:                  case MediaType.MusicAudioAlbum:                      ReadDirectory();                      break;              }
Missing Default,TDMakerLib,TemplateReader,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Templates\TemplateReader.cs,TemplateReader,The following switch statement is missing a default case: switch (Path.GetFileNameWithoutExtension(f))                      {                          case "Disc":                              mDiscInfo = sw.ReadToEnd().Trim();                              break;                          case "DiscAudioInfo":                              mDiscAudioInfo = sw.ReadToEnd().Trim();                              break;                          case "File":                              mFileInfo = sw.ReadToEnd().Trim();                              break;                          case "FileAudioInfo":                              mFileAudioInfo = sw.ReadToEnd().Trim();                              break;                          case "GeneralInfo":                              mGeneralInfo = sw.ReadToEnd().Trim();                              break;                          case "FileVideoInfo":                              mFileVideoInfo = sw.ReadToEnd().Trim();                              break;                          case "DiscVideoInfo":                              mDiscVideoInfo = sw.ReadToEnd().Trim();                              break;                      }
Missing Default,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The following switch statement is missing a default case: switch (App.Settings.ThumbnailerType)              {                  case ThumbnailerType.MPlayer:                      ThumbnailerPath = App.Settings.MPlayerPath;                      if (File.Exists(MPlayerTempFp)) File.Delete(MPlayerTempFp);                      break;                  case ThumbnailerType.FFmpeg:                      ThumbnailerPath = App.Settings.FFmpegPath;                      break;              }
Missing Default,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The following switch statement is missing a default case: switch (App.Settings.ThumbnailerType)                  {                      case ThumbnailerType.MPlayer:                          tempScreenshotPath += "png"; // MPlayer only supports png reliably                          psi.Arguments = string.Format("-nosound -ss {0} -zoom -vf screenshot -frames 1 -vo png:z=9:outdir=\\\"{1}\\\" \"{2}\""'                              timeSliceElapsed' ScreenshotDir' MediaFile.FilePath);                          break;                      case ThumbnailerType.FFmpeg:                          tempScreenshotPath += Options.FFmpegThumbnailExtension;                          psi.Arguments = string.Format("-ss {0} -i \"{1}\" -f image2 -vframes 1 -y \"{2}\""' timeSliceElapsed' MediaFile.FilePath' tempScreenshotPath);                          break;                  }
Missing Default,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,TakeScreenshots,The following switch statement is missing a default case: switch (App.Settings.ThumbnailerType)                  {                      case ThumbnailerType.MPlayer:                          if (File.Exists(MPlayerTempFp))                          {                              if (File.Exists(tempScreenshotPath)) File.Delete(tempScreenshotPath);                              File.Move(MPlayerTempFp' tempScreenshotPath);                          }                          break;                  }
Missing Default,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,Finish,The following switch statement is missing a default case: switch (App.Settings.ThumbnailerType)                          {                              case ThumbnailerType.FFmpeg:                                  temp_fp = Path.Combine(ScreenshotDir' Path.GetFileNameWithoutExtension(MediaFile.FilePath) + "_s." + Options.FFmpegThumbnailExtension);                                  switch (Options.FFmpegThumbnailExtension)                                  {                                      case ThumbnailExtension.png:                                          img.Save(temp_fp' ImageFormat.Png);                                          break;                                      case ThumbnailExtension.jpg:                                          img.Save(temp_fp' ImageFormat.Jpeg);                                          break;                                  }                                    break;                              case ThumbnailerType.MPlayer:                                  temp_fp = Path.Combine(ScreenshotDir' Path.GetFileNameWithoutExtension(MediaFile.FilePath) + "_s.png");                                  img.Save(temp_fp' ImageFormat.Png);                                  break;                          }
Missing Default,TDMakerLib,Thumbnailer,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Thumbnailers\Thumbnailer.cs,Finish,The following switch statement is missing a default case: switch (Options.FFmpegThumbnailExtension)                                  {                                      case ThumbnailExtension.png:                                          img.Save(temp_fp' ImageFormat.Png);                                          break;                                      case ThumbnailExtension.jpg:                                          img.Save(temp_fp' ImageFormat.Jpeg);                                          break;                                  }
Missing Default,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
Missing Default,Mono.Options,OptionSet,C:\repos\McoreD_TDMaker\TDMaker\TDMakerLib\Helpers\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description[i])                  {                      case ' ':                      case '\t':                      case '\v':                      case '-':                      case ''':                      case '.':                      case ';':                          sep = i;                          break;                      case '\n':                          return i;                  }
