Implementation smell,Namespace,Class,File,Method,Description
Long Method,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,LoadConfig,The method has 245 lines of code.
Long Method,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The method has 207 lines of code.
Complex Method,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,LoadConfig,Cyclomatic complexity of the method is 52
Complex Method,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,Cyclomatic complexity of the method is 9
Complex Method,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,Cyclomatic complexity of the method is 25
Long Parameter List,PapercutSFASBilling,EmailServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\EmailServer.cs,EmailServer,The method has 7 parameters.
Long Parameter List,PapercutSFASBilling,SFASSFTP,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SFASSFTP.cs,SFASSFTP,The method has 9 parameters.
Long Parameter List,PapercutSFASBilling,SFASSFTP,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SFASSFTP.cs,SFASSFTP,The method has 7 parameters.
Long Parameter List,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,SQLBillingServer,The method has 10 parameters.
Long Parameter List,PapercutSFASBilling,BillingTransaction,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,BillingTransaction,The method has 6 parameters.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,LoadConfig,The length of the statement  "	this.billingServer = new SQLBillingServer (sqlUser' sqlPass' sqlPath' sqlDatabase' sqlPrefix' sqlType' batchDetailCode' batchUserID' WorkingPath' batchFilePrefix); " is 163.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,LoadConfig,The length of the statement  "		this.FTPServer = new SFASSFTP (SFTPUser' SFTPPassword' SFTPServerPath' SFTPPortNumber' WinSCPPath' SFTPRemoteDirectory' FileProtocol); " is 134.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,LoadConfig,The length of the statement  "		this.FTPServer = new SFASSFTP (SFTPUser' SFTPPassword' SFTPKeyPath' SFTPServerPath' SFTPPortNumber' WinSCPPath' SSHHostKeyFingerprint' SFTPRemoteDirectory' FileProtocol); " is 170.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The length of the statement  "		emailServer.sendMessage (string.Concat ("Billing Failed! Could not pull Papercut Users! "' DateTime.Now.ToString ("MM/dd/yyyy"))); " is 130.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The length of the statement  "		emailServer.sendMessage (string.Concat ("Billing Failed! Could not pull Active Directory Users! "' DateTime.Now.ToString ("MM/dd/yyyy"))); " is 138.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The length of the statement  "		emailServer.sendMessage (string.Concat ("Billing Not Run' there are no billable users! "' LastBilling.ToString ("MM/dd/yyyy"))); " is 128.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The length of the statement  "	//There are billable users' submit the batch of users for billing! Runs a billing until the billing has been run across all other users. " is 136.
Long Statement,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The length of the statement  "		emailServer.sendMessage (string.Concat ("Billing Run' but File not submitted. Error with Upload."' DateTime.Now.ToString ("MM/dd/yyyy"))); " is 138.
Long Statement,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The length of the statement  "			string sqlQuery = string.Concat ("SELECT syvyids_pidm' syvyids_spriden_id' stvests_code' stvests_desc FROM syvyids' sfbetrm' stvests WHERE (syvyids_pidm = sfbetrm_pidm) AND (sfbetrm_term_code = '"' TermCode' "') AND (sfbetrm_ests_code = stvests_code) AND (syvyids_netid = '"' NetID' "')"); " is 289.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBillableUserList,The length of the statement  "	if (activeDirectoryServer.GetWhiteListLength () > 0)//If there is a white list' add white listed users that exist on PaperCut server to main list. " is 146.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "	//Normally a Billing can be completed in 1 go' however this will be set to true if an additional billing needs to be run. " is 121.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "	using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) { " is 157.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "		/**************************************************************************************************************************************************" is 147.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "                **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left: " is 240.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "						//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely. " is 211.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "							throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")")); " is 134.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "						if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed. " is 157.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "							transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID)); " is 124.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "					errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3]))); " is 160.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "		/**************************************************************************************************************************************************" is 147.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "                **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction. " is 307.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "				string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)"); " is 375.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "				using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) { " is 195.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "						if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) { " is 151.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "				/**************************************************************************************************************************************************" is 147.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "                        **************************************************************************************************************************************************///Create Billing File " is 168.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "				using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) { " is 182.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "					using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) { " is 195.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "				System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt")); " is 151.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "		/**************************************************************************************************************************************************" is 147.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "                **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?) " is 275.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The length of the statement  "		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) { " is 164.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateNewBillingID,The length of the statement  "	string billingGen = string.Concat ("Insert into "' this.sqlPrefix' "Billings (BatchStatus' BatchTotal' BatchTotalBalance' BatchProcessingDate) output inserted.BatchID values(@BatchStatus' @BatchTotal' @BatchTotalBalance' @BatchProcessingDate)"); " is 245.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateNewBillingID,The length of the statement  "	using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) { " is 157.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,UpdateBillingID,The length of the statement  "		string UpdateBilling = string.Concat ("UPDATE "' this.sqlPrefix' "Billings SET BatchTotal = @BatchTotal' BatchTotalBalance = @BatchTotalBalance WHERE BatchID = @BatchID"); " is 171.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,UpdateBillingID,The length of the statement  "		using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) { " is 157.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,UpdateBillingStatus,The length of the statement  "		string UpdateBilling = string.Concat ("UPDATE "' this.sqlPrefix' "Billings SET BatchStatus = @BatchStatus WHERE BatchID = @BatchID"); " is 133.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,UpdateBillingStatus,The length of the statement  "		using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) { " is 157.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GetBillingTotal,The length of the statement  "		string GetBillingTotal = string.Concat ("SELECT SUM(Balance) "' "FROM "' this.sqlPrefix' "BillingTransactions WHERE BatchIDC = @BatchID"); " is 138.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GetBillingTotal,The length of the statement  "		using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) { " is 157.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GetBillingTotalB,The length of the statement  "		string GetBillingTotal = string.Concat ("SELECT BatchTotalBalance "' "FROM "' this.sqlPrefix' "Billings WHERE BatchID = @BatchID"); " is 131.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GetBillingTotalB,The length of the statement  "		using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) { " is 157.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GetLastBilling,The length of the statement  "		string GetBillingTotal = string.Concat ("SELECT BatchProcessingDate FROM "' this.sqlPrefix' "Billings order by BatchProcessingDate desc"); " is 138.
Long Statement,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GetLastBilling,The length of the statement  "		using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) { " is 157.
Magic Number,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,BillingManager,The following statement contains a magic number: tm = new System.Timers.Timer (6000);  
Magic Number,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The following statement contains a magic number: if (this.FTPServer.UploadBillings (billingServer.GetCompletedBillings ())) {  	//update Billing Status  	foreach (char[] bill in billingServer.GetCompletedBillingIDs ()) {  		billingServer.UpdateBillingStatus (int.Parse (new string (bill))' 6);  	}  }  else {  	emailServer.sendMessage (string.Concat ("Billing Run' but File not submitted. Error with Upload."' DateTime.Now.ToString ("MM/dd/yyyy")));  }  
Magic Number,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The following statement contains a magic number: foreach (char[] bill in billingServer.GetCompletedBillingIDs ()) {  	billingServer.UpdateBillingStatus (int.Parse (new string (bill))' 6);  }  
Magic Number,PapercutSFASBilling,BillingManager,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\BillingManager.cs,ProcessBilling,The following statement contains a magic number: billingServer.UpdateBillingStatus (int.Parse (new string (bill))' 6);  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: using (DbConnection conn = factory.CreateConnection ()) {  	try {  		conn.ConnectionString = constr;  		conn.Open ();  		OracleCommand cmd = (OracleCommand)factory.CreateCommand ();  		cmd.Connection = (OracleConnection)conn;  		//Build Query to get student information  		string sqlQuery = string.Concat ("SELECT syvyids_pidm' syvyids_spriden_id' stvests_code' stvests_desc FROM syvyids' sfbetrm' stvests WHERE (syvyids_pidm = sfbetrm_pidm) AND (sfbetrm_term_code = '"' TermCode' "') AND (sfbetrm_ests_code = stvests_code) AND (syvyids_netid = '"' NetID' "')");  		//Console.WriteLine("Query: " + sqlQuery);  		cmd.CommandText = sqlQuery;  		OracleDataReader reader = cmd.ExecuteReader ();  		if (reader.HasRows) {  			string[] userinfo = new string[4] {  				reader.GetInt32 (0).ToString ()'  				reader.GetString (1)'  				reader.GetString (2)'  				reader.GetString (3)  			};  			return userinfo;  		}  		else {  			Console.WriteLine ("Error! No rows returned for the User in Oracle!");  			return new string[] {  				"No Rows in Oracle"  			};  		}  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  		Console.WriteLine (ex.StackTrace);  		return new string[] {  			"ERROR"  		};  	}  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: using (DbConnection conn = factory.CreateConnection ()) {  	try {  		conn.ConnectionString = constr;  		conn.Open ();  		OracleCommand cmd = (OracleCommand)factory.CreateCommand ();  		cmd.Connection = (OracleConnection)conn;  		//Build Query to get student information  		string sqlQuery = string.Concat ("SELECT syvyids_pidm' syvyids_spriden_id' stvests_code' stvests_desc FROM syvyids' sfbetrm' stvests WHERE (syvyids_pidm = sfbetrm_pidm) AND (sfbetrm_term_code = '"' TermCode' "') AND (sfbetrm_ests_code = stvests_code) AND (syvyids_netid = '"' NetID' "')");  		//Console.WriteLine("Query: " + sqlQuery);  		cmd.CommandText = sqlQuery;  		OracleDataReader reader = cmd.ExecuteReader ();  		if (reader.HasRows) {  			string[] userinfo = new string[4] {  				reader.GetInt32 (0).ToString ()'  				reader.GetString (1)'  				reader.GetString (2)'  				reader.GetString (3)  			};  			return userinfo;  		}  		else {  			Console.WriteLine ("Error! No rows returned for the User in Oracle!");  			return new string[] {  				"No Rows in Oracle"  			};  		}  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  		Console.WriteLine (ex.StackTrace);  		return new string[] {  			"ERROR"  		};  	}  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: using (DbConnection conn = factory.CreateConnection ()) {  	try {  		conn.ConnectionString = constr;  		conn.Open ();  		OracleCommand cmd = (OracleCommand)factory.CreateCommand ();  		cmd.Connection = (OracleConnection)conn;  		//Build Query to get student information  		string sqlQuery = string.Concat ("SELECT syvyids_pidm' syvyids_spriden_id' stvests_code' stvests_desc FROM syvyids' sfbetrm' stvests WHERE (syvyids_pidm = sfbetrm_pidm) AND (sfbetrm_term_code = '"' TermCode' "') AND (sfbetrm_ests_code = stvests_code) AND (syvyids_netid = '"' NetID' "')");  		//Console.WriteLine("Query: " + sqlQuery);  		cmd.CommandText = sqlQuery;  		OracleDataReader reader = cmd.ExecuteReader ();  		if (reader.HasRows) {  			string[] userinfo = new string[4] {  				reader.GetInt32 (0).ToString ()'  				reader.GetString (1)'  				reader.GetString (2)'  				reader.GetString (3)  			};  			return userinfo;  		}  		else {  			Console.WriteLine ("Error! No rows returned for the User in Oracle!");  			return new string[] {  				"No Rows in Oracle"  			};  		}  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  		Console.WriteLine (ex.StackTrace);  		return new string[] {  			"ERROR"  		};  	}  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: try {  	conn.ConnectionString = constr;  	conn.Open ();  	OracleCommand cmd = (OracleCommand)factory.CreateCommand ();  	cmd.Connection = (OracleConnection)conn;  	//Build Query to get student information  	string sqlQuery = string.Concat ("SELECT syvyids_pidm' syvyids_spriden_id' stvests_code' stvests_desc FROM syvyids' sfbetrm' stvests WHERE (syvyids_pidm = sfbetrm_pidm) AND (sfbetrm_term_code = '"' TermCode' "') AND (sfbetrm_ests_code = stvests_code) AND (syvyids_netid = '"' NetID' "')");  	//Console.WriteLine("Query: " + sqlQuery);  	cmd.CommandText = sqlQuery;  	OracleDataReader reader = cmd.ExecuteReader ();  	if (reader.HasRows) {  		string[] userinfo = new string[4] {  			reader.GetInt32 (0).ToString ()'  			reader.GetString (1)'  			reader.GetString (2)'  			reader.GetString (3)  		};  		return userinfo;  	}  	else {  		Console.WriteLine ("Error! No rows returned for the User in Oracle!");  		return new string[] {  			"No Rows in Oracle"  		};  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	Console.WriteLine (ex.StackTrace);  	return new string[] {  		"ERROR"  	};  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: try {  	conn.ConnectionString = constr;  	conn.Open ();  	OracleCommand cmd = (OracleCommand)factory.CreateCommand ();  	cmd.Connection = (OracleConnection)conn;  	//Build Query to get student information  	string sqlQuery = string.Concat ("SELECT syvyids_pidm' syvyids_spriden_id' stvests_code' stvests_desc FROM syvyids' sfbetrm' stvests WHERE (syvyids_pidm = sfbetrm_pidm) AND (sfbetrm_term_code = '"' TermCode' "') AND (sfbetrm_ests_code = stvests_code) AND (syvyids_netid = '"' NetID' "')");  	//Console.WriteLine("Query: " + sqlQuery);  	cmd.CommandText = sqlQuery;  	OracleDataReader reader = cmd.ExecuteReader ();  	if (reader.HasRows) {  		string[] userinfo = new string[4] {  			reader.GetInt32 (0).ToString ()'  			reader.GetString (1)'  			reader.GetString (2)'  			reader.GetString (3)  		};  		return userinfo;  	}  	else {  		Console.WriteLine ("Error! No rows returned for the User in Oracle!");  		return new string[] {  			"No Rows in Oracle"  		};  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	Console.WriteLine (ex.StackTrace);  	return new string[] {  		"ERROR"  	};  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: try {  	conn.ConnectionString = constr;  	conn.Open ();  	OracleCommand cmd = (OracleCommand)factory.CreateCommand ();  	cmd.Connection = (OracleConnection)conn;  	//Build Query to get student information  	string sqlQuery = string.Concat ("SELECT syvyids_pidm' syvyids_spriden_id' stvests_code' stvests_desc FROM syvyids' sfbetrm' stvests WHERE (syvyids_pidm = sfbetrm_pidm) AND (sfbetrm_term_code = '"' TermCode' "') AND (sfbetrm_ests_code = stvests_code) AND (syvyids_netid = '"' NetID' "')");  	//Console.WriteLine("Query: " + sqlQuery);  	cmd.CommandText = sqlQuery;  	OracleDataReader reader = cmd.ExecuteReader ();  	if (reader.HasRows) {  		string[] userinfo = new string[4] {  			reader.GetInt32 (0).ToString ()'  			reader.GetString (1)'  			reader.GetString (2)'  			reader.GetString (3)  		};  		return userinfo;  	}  	else {  		Console.WriteLine ("Error! No rows returned for the User in Oracle!");  		return new string[] {  			"No Rows in Oracle"  		};  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	Console.WriteLine (ex.StackTrace);  	return new string[] {  		"ERROR"  	};  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: if (reader.HasRows) {  	string[] userinfo = new string[4] {  		reader.GetInt32 (0).ToString ()'  		reader.GetString (1)'  		reader.GetString (2)'  		reader.GetString (3)  	};  	return userinfo;  }  else {  	Console.WriteLine ("Error! No rows returned for the User in Oracle!");  	return new string[] {  		"No Rows in Oracle"  	};  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: if (reader.HasRows) {  	string[] userinfo = new string[4] {  		reader.GetInt32 (0).ToString ()'  		reader.GetString (1)'  		reader.GetString (2)'  		reader.GetString (3)  	};  	return userinfo;  }  else {  	Console.WriteLine ("Error! No rows returned for the User in Oracle!");  	return new string[] {  		"No Rows in Oracle"  	};  }  
Magic Number,PapercutSFASBilling,OracleServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\OracleServer.cs,GetUserInfo,The following statement contains a magic number: if (reader.HasRows) {  	string[] userinfo = new string[4] {  		reader.GetInt32 (0).ToString ()'  		reader.GetString (1)'  		reader.GetString (2)'  		reader.GetString (3)  	};  	return userinfo;  }  else {  	Console.WriteLine ("Error! No rows returned for the User in Oracle!");  	return new string[] {  		"No Rows in Oracle"  	};  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection ("Server=" + sqlPath + "; Database=" + sqlDatabase + "; User ID=" + sqlUser + "; Password=" + sqlPass + ";")) {  	conn.Open ();  	string termCode = Oracle.GetCurrentTermCode ();  	//Formatted Term Code for File  	char[] cTermCode = termCode.ToCharArray ();  	//Formatted Activity Date for File  	char[] cActivityDate = DateTime.Now.ToString ("MMddyyyy").ToCharArray ();  	Console.WriteLine (cActivityDate);  	//Formatted Detail Code for File  	char[] cBatchDetailCode = BillingUtility.ValidDetailCode (batchDetailCode);  	//Formatted User ID for File  	char[] cBatchUserID = BillingUtility.ValidBatchUserID (batchUserID);  	//Total Cost of Billing  	double totalBilling = 0.00;  	//Absolute Value  	double batchTotalBalance = 0.00;  	//Overall Value  	/**************************************************************************************************************************************************                  * This Section of the Method Generates the Transaction information and Validates Billable Users.                  **************************************************************************************************************************************************/while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:  	 {  		PapercutUser user = billableUsers [0];  		string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  		if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  		 {  			if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  			 {  				try {  					//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  					if (Math.Abs (user.balance) > 9999999.99) {  						throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  					}  					if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  						// total billing would exceed with this user' break loop and submit billing.  						BillingIncomplete = true;  						break;  					}  					char[] amount = BillingUtility.FormatAmount (user.balance);  					double billingAmount = double.Parse (new string (amount)) / 100;  					//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  					char[] creditIndicator;  					if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  					 {  						creditIndicator = new char[] {  							'C''  							'R'  						};  						billingAmount = billingAmount * -1;  					}  					else {  						creditIndicator = new char[] {  							' ''  							' '  						};  					}  					char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  					char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  					if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  					 {  						transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  						totalBilling = totalBilling + Math.Abs (billingAmount);  						//Absolute Sum  						batchTotalBalance = batchTotalBalance + billingAmount;  						//Value Sum  					}  				}  				catch (Exception e)//An exception was thrown on the   				 {  					//write error to error list.  					errorLog.Add (new TransactionError (user.NetID' e.Message));  				}  			}  			else {  				//User is not Billable' Status is invalid.  				errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  			}  		}  		else {  			//User does not exist in oracle' can not bill!  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  		}  		billableUsers.Remove (user);  		//Done processing the user' either billed or not billable.  	}  	/**************************************************************************************************************************************************                  * Temporary Transaction File Generation Section of Method                  **************************************************************************************************************************************************/if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.  	 {  		try {  			//Generate New Billing ID  			char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  			int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  			char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  			string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  			SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  			double finTotalBilling = 0.00;  			//Absolute Sum  			double finBatchTotalBalance = 0.00;  			//Value Sum  			//Open file  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				UpdateBillingStatus (billingID' 1);  				//Now Write all detail records  				foreach (BillingTransaction transaction in transactionLedger) {  					//If statement to credit PaperCut server' else don't bill' throw error.  					if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  						billingTransactionQuery.Parameters.Clear ();  						//Clear query for next transaction  						billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  						//Just used to Track Billing in DB  						billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  						//Just used to Track Billing in DB  						file.Write (cBatchUserID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  						file.Write (BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  						billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  						file.Write ('1');  						//File only' denotes that this is a transaction entry instead of a header entry  						file.Write (transaction.PIDM);  						billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  						file.Write (transaction.SPRIDEN_ID);  						billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  						file.Write (cBatchDetailCode);  						billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  						file.Write (cActivityDate);  						billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  						file.Write (transaction.Amount);  						billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  						file.Write (transaction.CreditIndicator);  						billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  						file.Write (termCode);  						billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  						//File Specific Formatting  						file.WriteLine ("                                       ");  						billingTransactionQuery.ExecuteNonQuery ();  						//Submit Written Transaction to Database  						finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  						//Absolute Sum  						finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  						//Value Sum  					}  					else {  						//An error occurred trying to bill their PaperCut Account!   						errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  					}  				}  				file.Flush ();  			}  			//Complete writing out transactions  			UpdateBillingStatus (billingID' 2);  			char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  			this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  			//Update Billing Entry with corrected information  			/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  			using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  				file.Write (cBatchUserID);  				file.Write (BillingID);  				file.Write ('0');  				file.Write (finalAbsBilling);  				file.WriteLine (cActivityDate);  				//Header Record complete  				UpdateBillingStatus (billingID' 3);  				//Now Open Temporary file and append it to the final Billing Submission  				using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  					while (!temp.EndOfStream) {  						file.WriteLine (temp.ReadLine ());  					}  				}  				//Add billing to list of Completed Billings  				string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  				billingsCompleted.Add (fullPath);  				billingsCompletedIDs.Add (BillingID);  			}  			UpdateBillingStatus (billingID' 4);  			//Billing File Created' Delete temporary file  			System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  			UpdateBillingStatus (billingID' 5);  		}  		catch (Exception e) {  			//Something went Wrong with generation of Billing  			errorLog.Add (new TransactionError ("System Error: "' e.Message));  		}  	}  	/**************************************************************************************************************************************************                  * Final Billing File Generation Completed. Generating Error File Before Return                  **************************************************************************************************************************************************///Now Write out Errors: **Test if File exists' if so append' otherwise just write (or set to create if non existent and append?)  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingErrors\"' new string (cActivityDate)' "_Errors.txt")' true)) {  		errorPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		foreach (TransactionError error in errorLog) {  			file.WriteLine (string.Concat (error.Username' " : "' error.Error));  		}  	}  	conn.Close ();  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: while (billableUsers.Count () > 0)// Iterate Through Each User Until there are no users left:   {  	PapercutUser user = billableUsers [0];  	string[] oracleInfo = Oracle.GetUserInfo (user.NetID' termCode);  	if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:  	 {  		if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  		 {  			try {  				//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  				if (Math.Abs (user.balance) > 9999999.99) {  					throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  				}  				if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  					// total billing would exceed with this user' break loop and submit billing.  					BillingIncomplete = true;  					break;  				}  				char[] amount = BillingUtility.FormatAmount (user.balance);  				double billingAmount = double.Parse (new string (amount)) / 100;  				//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  				char[] creditIndicator;  				if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  				 {  					creditIndicator = new char[] {  						'C''  						'R'  					};  					billingAmount = billingAmount * -1;  				}  				else {  					creditIndicator = new char[] {  						' ''  						' '  					};  				}  				char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  				char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  				if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  				 {  					transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  					totalBilling = totalBilling + Math.Abs (billingAmount);  					//Absolute Sum  					batchTotalBalance = batchTotalBalance + billingAmount;  					//Value Sum  				}  			}  			catch (Exception e)//An exception was thrown on the   			 {  				//write error to error list.  				errorLog.Add (new TransactionError (user.NetID' e.Message));  			}  		}  		else {  			//User is not Billable' Status is invalid.  			errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  		}  	}  	else {  		//User does not exist in oracle' can not bill!  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  	}  	billableUsers.Remove (user);  	//Done processing the user' either billed or not billable.  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (oracleInfo.Length == 4)//If it is has 4 values then oracle information was retrieved. Validate User:   {  	if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.  	 {  		try {  			//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  			if (Math.Abs (user.balance) > 9999999.99) {  				throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  			}  			if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  				// total billing would exceed with this user' break loop and submit billing.  				BillingIncomplete = true;  				break;  			}  			char[] amount = BillingUtility.FormatAmount (user.balance);  			double billingAmount = double.Parse (new string (amount)) / 100;  			//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  			char[] creditIndicator;  			if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  			 {  				creditIndicator = new char[] {  					'C''  					'R'  				};  				billingAmount = billingAmount * -1;  			}  			else {  				creditIndicator = new char[] {  					' ''  					' '  				};  			}  			char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  			char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  			if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  			 {  				transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  				totalBilling = totalBilling + Math.Abs (billingAmount);  				//Absolute Sum  				batchTotalBalance = batchTotalBalance + billingAmount;  				//Value Sum  			}  		}  		catch (Exception e)//An exception was thrown on the   		 {  			//write error to error list.  			errorLog.Add (new TransactionError (user.NetID' e.Message));  		}  	}  	else {  		//User is not Billable' Status is invalid.  		errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  	}  }  else {  	//User does not exist in oracle' can not bill!  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User does not exit in Oracle in Term: "' termCode)));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.   {  	try {  		//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  		if (Math.Abs (user.balance) > 9999999.99) {  			throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  		}  		if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  			// total billing would exceed with this user' break loop and submit billing.  			BillingIncomplete = true;  			break;  		}  		char[] amount = BillingUtility.FormatAmount (user.balance);  		double billingAmount = double.Parse (new string (amount)) / 100;  		//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  		char[] creditIndicator;  		if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  		 {  			creditIndicator = new char[] {  				'C''  				'R'  			};  			billingAmount = billingAmount * -1;  		}  		else {  			creditIndicator = new char[] {  				' ''  				' '  			};  		}  		char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  		char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  		if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  		 {  			transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  			totalBilling = totalBilling + Math.Abs (billingAmount);  			//Absolute Sum  			batchTotalBalance = batchTotalBalance + billingAmount;  			//Value Sum  		}  	}  	catch (Exception e)//An exception was thrown on the   	 {  		//write error to error list.  		errorLog.Add (new TransactionError (user.NetID' e.Message));  	}  }  else {  	//User is not Billable' Status is invalid.  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.   {  	try {  		//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  		if (Math.Abs (user.balance) > 9999999.99) {  			throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  		}  		if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  			// total billing would exceed with this user' break loop and submit billing.  			BillingIncomplete = true;  			break;  		}  		char[] amount = BillingUtility.FormatAmount (user.balance);  		double billingAmount = double.Parse (new string (amount)) / 100;  		//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  		char[] creditIndicator;  		if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  		 {  			creditIndicator = new char[] {  				'C''  				'R'  			};  			billingAmount = billingAmount * -1;  		}  		else {  			creditIndicator = new char[] {  				' ''  				' '  			};  		}  		char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  		char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  		if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  		 {  			transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  			totalBilling = totalBilling + Math.Abs (billingAmount);  			//Absolute Sum  			batchTotalBalance = batchTotalBalance + billingAmount;  			//Value Sum  		}  	}  	catch (Exception e)//An exception was thrown on the   	 {  		//write error to error list.  		errorLog.Add (new TransactionError (user.NetID' e.Message));  	}  }  else {  	//User is not Billable' Status is invalid.  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.   {  	try {  		//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  		if (Math.Abs (user.balance) > 9999999.99) {  			throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  		}  		if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  			// total billing would exceed with this user' break loop and submit billing.  			BillingIncomplete = true;  			break;  		}  		char[] amount = BillingUtility.FormatAmount (user.balance);  		double billingAmount = double.Parse (new string (amount)) / 100;  		//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  		char[] creditIndicator;  		if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  		 {  			creditIndicator = new char[] {  				'C''  				'R'  			};  			billingAmount = billingAmount * -1;  		}  		else {  			creditIndicator = new char[] {  				' ''  				' '  			};  		}  		char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  		char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  		if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  		 {  			transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  			totalBilling = totalBilling + Math.Abs (billingAmount);  			//Absolute Sum  			batchTotalBalance = batchTotalBalance + billingAmount;  			//Value Sum  		}  	}  	catch (Exception e)//An exception was thrown on the   	 {  		//write error to error list.  		errorLog.Add (new TransactionError (user.NetID' e.Message));  	}  }  else {  	//User is not Billable' Status is invalid.  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.   {  	try {  		//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  		if (Math.Abs (user.balance) > 9999999.99) {  			throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  		}  		if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  			// total billing would exceed with this user' break loop and submit billing.  			BillingIncomplete = true;  			break;  		}  		char[] amount = BillingUtility.FormatAmount (user.balance);  		double billingAmount = double.Parse (new string (amount)) / 100;  		//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  		char[] creditIndicator;  		if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  		 {  			creditIndicator = new char[] {  				'C''  				'R'  			};  			billingAmount = billingAmount * -1;  		}  		else {  			creditIndicator = new char[] {  				' ''  				' '  			};  		}  		char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  		char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  		if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  		 {  			transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  			totalBilling = totalBilling + Math.Abs (billingAmount);  			//Absolute Sum  			batchTotalBalance = batchTotalBalance + billingAmount;  			//Value Sum  		}  	}  	catch (Exception e)//An exception was thrown on the   	 {  		//write error to error list.  		errorLog.Add (new TransactionError (user.NetID' e.Message));  	}  }  else {  	//User is not Billable' Status is invalid.  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.   {  	try {  		//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  		if (Math.Abs (user.balance) > 9999999.99) {  			throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  		}  		if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  			// total billing would exceed with this user' break loop and submit billing.  			BillingIncomplete = true;  			break;  		}  		char[] amount = BillingUtility.FormatAmount (user.balance);  		double billingAmount = double.Parse (new string (amount)) / 100;  		//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  		char[] creditIndicator;  		if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  		 {  			creditIndicator = new char[] {  				'C''  				'R'  			};  			billingAmount = billingAmount * -1;  		}  		else {  			creditIndicator = new char[] {  				' ''  				' '  			};  		}  		char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  		char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  		if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  		 {  			transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  			totalBilling = totalBilling + Math.Abs (billingAmount);  			//Absolute Sum  			batchTotalBalance = batchTotalBalance + billingAmount;  			//Value Sum  		}  	}  	catch (Exception e)//An exception was thrown on the   	 {  		//write error to error list.  		errorLog.Add (new TransactionError (user.NetID' e.Message));  	}  }  else {  	//User is not Billable' Status is invalid.  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.   {  	try {  		//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  		if (Math.Abs (user.balance) > 9999999.99) {  			throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  		}  		if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  			// total billing would exceed with this user' break loop and submit billing.  			BillingIncomplete = true;  			break;  		}  		char[] amount = BillingUtility.FormatAmount (user.balance);  		double billingAmount = double.Parse (new string (amount)) / 100;  		//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  		char[] creditIndicator;  		if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  		 {  			creditIndicator = new char[] {  				'C''  				'R'  			};  			billingAmount = billingAmount * -1;  		}  		else {  			creditIndicator = new char[] {  				' ''  				' '  			};  		}  		char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  		char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  		if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  		 {  			transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  			totalBilling = totalBilling + Math.Abs (billingAmount);  			//Absolute Sum  			batchTotalBalance = batchTotalBalance + billingAmount;  			//Value Sum  		}  	}  	catch (Exception e)//An exception was thrown on the   	 {  		//write error to error list.  		errorLog.Add (new TransactionError (user.NetID' e.Message));  	}  }  else {  	//User is not Billable' Status is invalid.  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (BillingUtility.ValidStatus (oracleInfo [2]))//If it is true then the user can be billed.   {  	try {  		//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  		if (Math.Abs (user.balance) > 9999999.99) {  			throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  		}  		if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  			// total billing would exceed with this user' break loop and submit billing.  			BillingIncomplete = true;  			break;  		}  		char[] amount = BillingUtility.FormatAmount (user.balance);  		double billingAmount = double.Parse (new string (amount)) / 100;  		//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  		char[] creditIndicator;  		if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  		 {  			creditIndicator = new char[] {  				'C''  				'R'  			};  			billingAmount = billingAmount * -1;  		}  		else {  			creditIndicator = new char[] {  				' ''  				' '  			};  		}  		char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  		char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  		if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  		 {  			transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  			totalBilling = totalBilling + Math.Abs (billingAmount);  			//Absolute Sum  			batchTotalBalance = batchTotalBalance + billingAmount;  			//Value Sum  		}  	}  	catch (Exception e)//An exception was thrown on the   	 {  		//write error to error list.  		errorLog.Add (new TransactionError (user.NetID' e.Message));  	}  }  else {  	//User is not Billable' Status is invalid.  	errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  	if (Math.Abs (user.balance) > 9999999.99) {  		throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  	}  	if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  		// total billing would exceed with this user' break loop and submit billing.  		BillingIncomplete = true;  		break;  	}  	char[] amount = BillingUtility.FormatAmount (user.balance);  	double billingAmount = double.Parse (new string (amount)) / 100;  	//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  	char[] creditIndicator;  	if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  	 {  		creditIndicator = new char[] {  			'C''  			'R'  		};  		billingAmount = billingAmount * -1;  	}  	else {  		creditIndicator = new char[] {  			' ''  			' '  		};  	}  	char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  	char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  	if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  	 {  		transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  		totalBilling = totalBilling + Math.Abs (billingAmount);  		//Absolute Sum  		batchTotalBalance = batchTotalBalance + billingAmount;  		//Value Sum  	}  }  catch (Exception e)//An exception was thrown on the    {  	//write error to error list.  	errorLog.Add (new TransactionError (user.NetID' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  	if (Math.Abs (user.balance) > 9999999.99) {  		throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  	}  	if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  		// total billing would exceed with this user' break loop and submit billing.  		BillingIncomplete = true;  		break;  	}  	char[] amount = BillingUtility.FormatAmount (user.balance);  	double billingAmount = double.Parse (new string (amount)) / 100;  	//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  	char[] creditIndicator;  	if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  	 {  		creditIndicator = new char[] {  			'C''  			'R'  		};  		billingAmount = billingAmount * -1;  	}  	else {  		creditIndicator = new char[] {  			' ''  			' '  		};  	}  	char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  	char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  	if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  	 {  		transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  		totalBilling = totalBilling + Math.Abs (billingAmount);  		//Absolute Sum  		batchTotalBalance = batchTotalBalance + billingAmount;  		//Value Sum  	}  }  catch (Exception e)//An exception was thrown on the    {  	//write error to error list.  	errorLog.Add (new TransactionError (user.NetID' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  	if (Math.Abs (user.balance) > 9999999.99) {  		throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  	}  	if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  		// total billing would exceed with this user' break loop and submit billing.  		BillingIncomplete = true;  		break;  	}  	char[] amount = BillingUtility.FormatAmount (user.balance);  	double billingAmount = double.Parse (new string (amount)) / 100;  	//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  	char[] creditIndicator;  	if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  	 {  		creditIndicator = new char[] {  			'C''  			'R'  		};  		billingAmount = billingAmount * -1;  	}  	else {  		creditIndicator = new char[] {  			' ''  			' '  		};  	}  	char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  	char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  	if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  	 {  		transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  		totalBilling = totalBilling + Math.Abs (billingAmount);  		//Absolute Sum  		batchTotalBalance = batchTotalBalance + billingAmount;  		//Value Sum  	}  }  catch (Exception e)//An exception was thrown on the    {  	//write error to error list.  	errorLog.Add (new TransactionError (user.NetID' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Where the system could have been set to use multiple transactions' it seems prudent that if a student has accrued charges in excess of 9'999'999.99 that someone should look into it' as an error is more likely.  	if (Math.Abs (user.balance) > 9999999.99) {  		throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  	}  	if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  		// total billing would exceed with this user' break loop and submit billing.  		BillingIncomplete = true;  		break;  	}  	char[] amount = BillingUtility.FormatAmount (user.balance);  	double billingAmount = double.Parse (new string (amount)) / 100;  	//This ensures that the numerical value and billed value match (Eliminating possibility of fractions of Cents.  	char[] creditIndicator;  	if (user.balance > 0)//If user has positive balance' a credit is sitting on their account. Set Credit indicator  	 {  		creditIndicator = new char[] {  			'C''  			'R'  		};  		billingAmount = billingAmount * -1;  	}  	else {  		creditIndicator = new char[] {  			' ''  			' '  		};  	}  	char[] userPID = BillingUtility.ValidPID (oracleInfo [0]);  	char[] userSPRIDENID = BillingUtility.ValidSPRIDEN_ID (oracleInfo [1]);  	if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.  	 {  		transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  		totalBilling = totalBilling + Math.Abs (billingAmount);  		//Absolute Sum  		batchTotalBalance = batchTotalBalance + billingAmount;  		//Value Sum  	}  }  catch (Exception e)//An exception was thrown on the    {  	//write error to error list.  	errorLog.Add (new TransactionError (user.NetID' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (Math.Abs (user.balance) > 9999999.99) {  	throw new ValidationException (string.Concat ("User: "' user.NetID' " has too large of balance to be billed. ($"' user.balance' ")"));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (totalBilling + Math.Abs (user.balance) > 9999999.99) {  	// total billing would exceed with this user' break loop and submit billing.  	BillingIncomplete = true;  	break;  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (Math.Abs (billingAmount) >= .01)//Due to Fractions of Cents' if the absolute value of the transaction isn't greater than a penny then it can't be billed.   {  	transactionLedger.Add (new BillingTransaction (amount' billingAmount' creditIndicator' user.NetID' userPID' userSPRIDENID));  	totalBilling = totalBilling + Math.Abs (billingAmount);  	//Absolute Sum  	batchTotalBalance = batchTotalBalance + billingAmount;  	//Value Sum  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: errorLog.Add (new TransactionError (user.NetID' string.Concat ("User is not Billable due to invalid status. Status: "' oracleInfo [2]' " : "' oracleInfo [3])));  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.   {  	try {  		//Generate New Billing ID  		char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  		int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  		char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  		string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  		SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  		double finTotalBilling = 0.00;  		//Absolute Sum  		double finBatchTotalBalance = 0.00;  		//Value Sum  		//Open file  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			UpdateBillingStatus (billingID' 1);  			//Now Write all detail records  			foreach (BillingTransaction transaction in transactionLedger) {  				//If statement to credit PaperCut server' else don't bill' throw error.  				if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  					billingTransactionQuery.Parameters.Clear ();  					//Clear query for next transaction  					billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  					//Just used to Track Billing in DB  					billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  					//Just used to Track Billing in DB  					file.Write (cBatchUserID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  					file.Write (BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  					file.Write ('1');  					//File only' denotes that this is a transaction entry instead of a header entry  					file.Write (transaction.PIDM);  					billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  					file.Write (transaction.SPRIDEN_ID);  					billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  					file.Write (cBatchDetailCode);  					billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  					file.Write (cActivityDate);  					billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  					file.Write (transaction.Amount);  					billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  					file.Write (transaction.CreditIndicator);  					billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  					file.Write (termCode);  					billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  					//File Specific Formatting  					file.WriteLine ("                                       ");  					billingTransactionQuery.ExecuteNonQuery ();  					//Submit Written Transaction to Database  					finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  					//Absolute Sum  					finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  					//Value Sum  				}  				else {  					//An error occurred trying to bill their PaperCut Account!   					errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  				}  			}  			file.Flush ();  		}  		//Complete writing out transactions  		UpdateBillingStatus (billingID' 2);  		char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  		this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  		//Update Billing Entry with corrected information  		/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  			file.Write (cBatchUserID);  			file.Write (BillingID);  			file.Write ('0');  			file.Write (finalAbsBilling);  			file.WriteLine (cActivityDate);  			//Header Record complete  			UpdateBillingStatus (billingID' 3);  			//Now Open Temporary file and append it to the final Billing Submission  			using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				while (!temp.EndOfStream) {  					file.WriteLine (temp.ReadLine ());  				}  			}  			//Add billing to list of Completed Billings  			string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  			billingsCompleted.Add (fullPath);  			billingsCompletedIDs.Add (BillingID);  		}  		UpdateBillingStatus (billingID' 4);  		//Billing File Created' Delete temporary file  		System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  		UpdateBillingStatus (billingID' 5);  	}  	catch (Exception e) {  		//Something went Wrong with generation of Billing  		errorLog.Add (new TransactionError ("System Error: "' e.Message));  	}  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.   {  	try {  		//Generate New Billing ID  		char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  		int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  		char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  		string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  		SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  		double finTotalBilling = 0.00;  		//Absolute Sum  		double finBatchTotalBalance = 0.00;  		//Value Sum  		//Open file  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			UpdateBillingStatus (billingID' 1);  			//Now Write all detail records  			foreach (BillingTransaction transaction in transactionLedger) {  				//If statement to credit PaperCut server' else don't bill' throw error.  				if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  					billingTransactionQuery.Parameters.Clear ();  					//Clear query for next transaction  					billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  					//Just used to Track Billing in DB  					billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  					//Just used to Track Billing in DB  					file.Write (cBatchUserID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  					file.Write (BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  					file.Write ('1');  					//File only' denotes that this is a transaction entry instead of a header entry  					file.Write (transaction.PIDM);  					billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  					file.Write (transaction.SPRIDEN_ID);  					billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  					file.Write (cBatchDetailCode);  					billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  					file.Write (cActivityDate);  					billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  					file.Write (transaction.Amount);  					billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  					file.Write (transaction.CreditIndicator);  					billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  					file.Write (termCode);  					billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  					//File Specific Formatting  					file.WriteLine ("                                       ");  					billingTransactionQuery.ExecuteNonQuery ();  					//Submit Written Transaction to Database  					finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  					//Absolute Sum  					finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  					//Value Sum  				}  				else {  					//An error occurred trying to bill their PaperCut Account!   					errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  				}  			}  			file.Flush ();  		}  		//Complete writing out transactions  		UpdateBillingStatus (billingID' 2);  		char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  		this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  		//Update Billing Entry with corrected information  		/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  			file.Write (cBatchUserID);  			file.Write (BillingID);  			file.Write ('0');  			file.Write (finalAbsBilling);  			file.WriteLine (cActivityDate);  			//Header Record complete  			UpdateBillingStatus (billingID' 3);  			//Now Open Temporary file and append it to the final Billing Submission  			using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				while (!temp.EndOfStream) {  					file.WriteLine (temp.ReadLine ());  				}  			}  			//Add billing to list of Completed Billings  			string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  			billingsCompleted.Add (fullPath);  			billingsCompletedIDs.Add (BillingID);  		}  		UpdateBillingStatus (billingID' 4);  		//Billing File Created' Delete temporary file  		System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  		UpdateBillingStatus (billingID' 5);  	}  	catch (Exception e) {  		//Something went Wrong with generation of Billing  		errorLog.Add (new TransactionError ("System Error: "' e.Message));  	}  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.   {  	try {  		//Generate New Billing ID  		char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  		int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  		char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  		string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  		SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  		double finTotalBilling = 0.00;  		//Absolute Sum  		double finBatchTotalBalance = 0.00;  		//Value Sum  		//Open file  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			UpdateBillingStatus (billingID' 1);  			//Now Write all detail records  			foreach (BillingTransaction transaction in transactionLedger) {  				//If statement to credit PaperCut server' else don't bill' throw error.  				if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  					billingTransactionQuery.Parameters.Clear ();  					//Clear query for next transaction  					billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  					//Just used to Track Billing in DB  					billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  					//Just used to Track Billing in DB  					file.Write (cBatchUserID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  					file.Write (BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  					file.Write ('1');  					//File only' denotes that this is a transaction entry instead of a header entry  					file.Write (transaction.PIDM);  					billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  					file.Write (transaction.SPRIDEN_ID);  					billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  					file.Write (cBatchDetailCode);  					billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  					file.Write (cActivityDate);  					billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  					file.Write (transaction.Amount);  					billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  					file.Write (transaction.CreditIndicator);  					billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  					file.Write (termCode);  					billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  					//File Specific Formatting  					file.WriteLine ("                                       ");  					billingTransactionQuery.ExecuteNonQuery ();  					//Submit Written Transaction to Database  					finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  					//Absolute Sum  					finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  					//Value Sum  				}  				else {  					//An error occurred trying to bill their PaperCut Account!   					errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  				}  			}  			file.Flush ();  		}  		//Complete writing out transactions  		UpdateBillingStatus (billingID' 2);  		char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  		this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  		//Update Billing Entry with corrected information  		/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  			file.Write (cBatchUserID);  			file.Write (BillingID);  			file.Write ('0');  			file.Write (finalAbsBilling);  			file.WriteLine (cActivityDate);  			//Header Record complete  			UpdateBillingStatus (billingID' 3);  			//Now Open Temporary file and append it to the final Billing Submission  			using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				while (!temp.EndOfStream) {  					file.WriteLine (temp.ReadLine ());  				}  			}  			//Add billing to list of Completed Billings  			string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  			billingsCompleted.Add (fullPath);  			billingsCompletedIDs.Add (BillingID);  		}  		UpdateBillingStatus (billingID' 4);  		//Billing File Created' Delete temporary file  		System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  		UpdateBillingStatus (billingID' 5);  	}  	catch (Exception e) {  		//Something went Wrong with generation of Billing  		errorLog.Add (new TransactionError ("System Error: "' e.Message));  	}  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: if (transactionLedger.Count () > 0)//Determines if there are any billable users. If so Generate billing' bill their PaperCut Accounts and Write the Transaction.   {  	try {  		//Generate New Billing ID  		char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  		int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  		char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  		string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  		SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  		double finTotalBilling = 0.00;  		//Absolute Sum  		double finBatchTotalBalance = 0.00;  		//Value Sum  		//Open file  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			UpdateBillingStatus (billingID' 1);  			//Now Write all detail records  			foreach (BillingTransaction transaction in transactionLedger) {  				//If statement to credit PaperCut server' else don't bill' throw error.  				if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  					billingTransactionQuery.Parameters.Clear ();  					//Clear query for next transaction  					billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  					//Just used to Track Billing in DB  					billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  					//Just used to Track Billing in DB  					file.Write (cBatchUserID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  					file.Write (BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  					billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  					file.Write ('1');  					//File only' denotes that this is a transaction entry instead of a header entry  					file.Write (transaction.PIDM);  					billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  					file.Write (transaction.SPRIDEN_ID);  					billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  					file.Write (cBatchDetailCode);  					billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  					file.Write (cActivityDate);  					billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  					file.Write (transaction.Amount);  					billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  					file.Write (transaction.CreditIndicator);  					billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  					file.Write (termCode);  					billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  					//File Specific Formatting  					file.WriteLine ("                                       ");  					billingTransactionQuery.ExecuteNonQuery ();  					//Submit Written Transaction to Database  					finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  					//Absolute Sum  					finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  					//Value Sum  				}  				else {  					//An error occurred trying to bill their PaperCut Account!   					errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  				}  			}  			file.Flush ();  		}  		//Complete writing out transactions  		UpdateBillingStatus (billingID' 2);  		char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  		this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  		//Update Billing Entry with corrected information  		/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  		using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  			file.Write (cBatchUserID);  			file.Write (BillingID);  			file.Write ('0');  			file.Write (finalAbsBilling);  			file.WriteLine (cActivityDate);  			//Header Record complete  			UpdateBillingStatus (billingID' 3);  			//Now Open Temporary file and append it to the final Billing Submission  			using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  				while (!temp.EndOfStream) {  					file.WriteLine (temp.ReadLine ());  				}  			}  			//Add billing to list of Completed Billings  			string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  			billingsCompleted.Add (fullPath);  			billingsCompletedIDs.Add (BillingID);  		}  		UpdateBillingStatus (billingID' 4);  		//Billing File Created' Delete temporary file  		System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  		UpdateBillingStatus (billingID' 5);  	}  	catch (Exception e) {  		//Something went Wrong with generation of Billing  		errorLog.Add (new TransactionError ("System Error: "' e.Message));  	}  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Generate New Billing ID  	char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  	int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  	char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  	string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  	SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  	double finTotalBilling = 0.00;  	//Absolute Sum  	double finBatchTotalBalance = 0.00;  	//Value Sum  	//Open file  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  		UpdateBillingStatus (billingID' 1);  		//Now Write all detail records  		foreach (BillingTransaction transaction in transactionLedger) {  			//If statement to credit PaperCut server' else don't bill' throw error.  			if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  				billingTransactionQuery.Parameters.Clear ();  				//Clear query for next transaction  				billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  				//Just used to Track Billing in DB  				billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  				//Just used to Track Billing in DB  				file.Write (cBatchUserID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  				file.Write (BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  				file.Write ('1');  				//File only' denotes that this is a transaction entry instead of a header entry  				file.Write (transaction.PIDM);  				billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  				file.Write (transaction.SPRIDEN_ID);  				billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  				file.Write (cBatchDetailCode);  				billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  				file.Write (cActivityDate);  				billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  				file.Write (transaction.Amount);  				billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  				file.Write (transaction.CreditIndicator);  				billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  				file.Write (termCode);  				billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  				//File Specific Formatting  				file.WriteLine ("                                       ");  				billingTransactionQuery.ExecuteNonQuery ();  				//Submit Written Transaction to Database  				finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  				//Absolute Sum  				finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  				//Value Sum  			}  			else {  				//An error occurred trying to bill their PaperCut Account!   				errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  			}  		}  		file.Flush ();  	}  	//Complete writing out transactions  	UpdateBillingStatus (billingID' 2);  	char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  	this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  	//Update Billing Entry with corrected information  	/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  		file.Write (cBatchUserID);  		file.Write (BillingID);  		file.Write ('0');  		file.Write (finalAbsBilling);  		file.WriteLine (cActivityDate);  		//Header Record complete  		UpdateBillingStatus (billingID' 3);  		//Now Open Temporary file and append it to the final Billing Submission  		using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			while (!temp.EndOfStream) {  				file.WriteLine (temp.ReadLine ());  			}  		}  		//Add billing to list of Completed Billings  		string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		billingsCompleted.Add (fullPath);  		billingsCompletedIDs.Add (BillingID);  	}  	UpdateBillingStatus (billingID' 4);  	//Billing File Created' Delete temporary file  	System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  	UpdateBillingStatus (billingID' 5);  }  catch (Exception e) {  	//Something went Wrong with generation of Billing  	errorLog.Add (new TransactionError ("System Error: "' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Generate New Billing ID  	char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  	int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  	char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  	string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  	SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  	double finTotalBilling = 0.00;  	//Absolute Sum  	double finBatchTotalBalance = 0.00;  	//Value Sum  	//Open file  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  		UpdateBillingStatus (billingID' 1);  		//Now Write all detail records  		foreach (BillingTransaction transaction in transactionLedger) {  			//If statement to credit PaperCut server' else don't bill' throw error.  			if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  				billingTransactionQuery.Parameters.Clear ();  				//Clear query for next transaction  				billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  				//Just used to Track Billing in DB  				billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  				//Just used to Track Billing in DB  				file.Write (cBatchUserID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  				file.Write (BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  				file.Write ('1');  				//File only' denotes that this is a transaction entry instead of a header entry  				file.Write (transaction.PIDM);  				billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  				file.Write (transaction.SPRIDEN_ID);  				billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  				file.Write (cBatchDetailCode);  				billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  				file.Write (cActivityDate);  				billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  				file.Write (transaction.Amount);  				billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  				file.Write (transaction.CreditIndicator);  				billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  				file.Write (termCode);  				billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  				//File Specific Formatting  				file.WriteLine ("                                       ");  				billingTransactionQuery.ExecuteNonQuery ();  				//Submit Written Transaction to Database  				finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  				//Absolute Sum  				finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  				//Value Sum  			}  			else {  				//An error occurred trying to bill their PaperCut Account!   				errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  			}  		}  		file.Flush ();  	}  	//Complete writing out transactions  	UpdateBillingStatus (billingID' 2);  	char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  	this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  	//Update Billing Entry with corrected information  	/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  		file.Write (cBatchUserID);  		file.Write (BillingID);  		file.Write ('0');  		file.Write (finalAbsBilling);  		file.WriteLine (cActivityDate);  		//Header Record complete  		UpdateBillingStatus (billingID' 3);  		//Now Open Temporary file and append it to the final Billing Submission  		using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			while (!temp.EndOfStream) {  				file.WriteLine (temp.ReadLine ());  			}  		}  		//Add billing to list of Completed Billings  		string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		billingsCompleted.Add (fullPath);  		billingsCompletedIDs.Add (BillingID);  	}  	UpdateBillingStatus (billingID' 4);  	//Billing File Created' Delete temporary file  	System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  	UpdateBillingStatus (billingID' 5);  }  catch (Exception e) {  	//Something went Wrong with generation of Billing  	errorLog.Add (new TransactionError ("System Error: "' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Generate New Billing ID  	char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  	int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  	char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  	string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  	SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  	double finTotalBilling = 0.00;  	//Absolute Sum  	double finBatchTotalBalance = 0.00;  	//Value Sum  	//Open file  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  		UpdateBillingStatus (billingID' 1);  		//Now Write all detail records  		foreach (BillingTransaction transaction in transactionLedger) {  			//If statement to credit PaperCut server' else don't bill' throw error.  			if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  				billingTransactionQuery.Parameters.Clear ();  				//Clear query for next transaction  				billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  				//Just used to Track Billing in DB  				billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  				//Just used to Track Billing in DB  				file.Write (cBatchUserID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  				file.Write (BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  				file.Write ('1');  				//File only' denotes that this is a transaction entry instead of a header entry  				file.Write (transaction.PIDM);  				billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  				file.Write (transaction.SPRIDEN_ID);  				billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  				file.Write (cBatchDetailCode);  				billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  				file.Write (cActivityDate);  				billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  				file.Write (transaction.Amount);  				billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  				file.Write (transaction.CreditIndicator);  				billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  				file.Write (termCode);  				billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  				//File Specific Formatting  				file.WriteLine ("                                       ");  				billingTransactionQuery.ExecuteNonQuery ();  				//Submit Written Transaction to Database  				finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  				//Absolute Sum  				finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  				//Value Sum  			}  			else {  				//An error occurred trying to bill their PaperCut Account!   				errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  			}  		}  		file.Flush ();  	}  	//Complete writing out transactions  	UpdateBillingStatus (billingID' 2);  	char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  	this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  	//Update Billing Entry with corrected information  	/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  		file.Write (cBatchUserID);  		file.Write (BillingID);  		file.Write ('0');  		file.Write (finalAbsBilling);  		file.WriteLine (cActivityDate);  		//Header Record complete  		UpdateBillingStatus (billingID' 3);  		//Now Open Temporary file and append it to the final Billing Submission  		using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			while (!temp.EndOfStream) {  				file.WriteLine (temp.ReadLine ());  			}  		}  		//Add billing to list of Completed Billings  		string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		billingsCompleted.Add (fullPath);  		billingsCompletedIDs.Add (BillingID);  	}  	UpdateBillingStatus (billingID' 4);  	//Billing File Created' Delete temporary file  	System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  	UpdateBillingStatus (billingID' 5);  }  catch (Exception e) {  	//Something went Wrong with generation of Billing  	errorLog.Add (new TransactionError ("System Error: "' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: try {  	//Generate New Billing ID  	char[] cTotalBilling = BillingUtility.FormatAmount (totalBilling);  	int billingID = this.GenerateNewBillingID (cTotalBilling' batchTotalBalance);  	char[] BillingID = BillingUtility.FormatBatchNumber (billingID);  	string billingTransactionSQL = string.Concat ("Insert into "' this.sqlPrefix' "BillingTransactions (ActivityDate' Balance' BatchIDC' DetailCode' NetID' PIDM' SPRIDEN_ID' Amount' CreditIndicator' TermCode' BatchUserID' BatchID) values(@ActivityDate' @Balance' @BatchIDC' @DetailCode' @NetID' @PIDM' @SPRIDEN_ID' @Amount' @CreditIndicator' @TermCode' @BatchUserID' @BatchID)");  	SqlCommand billingTransactionQuery = new SqlCommand (billingTransactionSQL' conn);  	double finTotalBilling = 0.00;  	//Absolute Sum  	double finBatchTotalBalance = 0.00;  	//Value Sum  	//Open file  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  		UpdateBillingStatus (billingID' 1);  		//Now Write all detail records  		foreach (BillingTransaction transaction in transactionLedger) {  			//If statement to credit PaperCut server' else don't bill' throw error.  			if (Papercut.AdjustUserBalance (transaction.NetID' transaction.balance' string.Concat ("Billing ID: "' new string (BillingID)' ". "' cActivityDate))) {  				billingTransactionQuery.Parameters.Clear ();  				//Clear query for next transaction  				billingTransactionQuery.Parameters.AddWithValue ("@Balance"' transaction.balance);  				//Just used to Track Billing in DB  				billingTransactionQuery.Parameters.AddWithValue ("@NetID"' transaction.NetID);  				//Just used to Track Billing in DB  				file.Write (cBatchUserID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchUserID"' cBatchUserID);  				file.Write (BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchIDC"' BillingID);  				billingTransactionQuery.Parameters.AddWithValue ("@BatchID"' billingID);  				file.Write ('1');  				//File only' denotes that this is a transaction entry instead of a header entry  				file.Write (transaction.PIDM);  				billingTransactionQuery.Parameters.AddWithValue ("@PIDM"' transaction.PIDM);  				file.Write (transaction.SPRIDEN_ID);  				billingTransactionQuery.Parameters.AddWithValue ("@SPRIDEN_ID"' transaction.SPRIDEN_ID);  				file.Write (cBatchDetailCode);  				billingTransactionQuery.Parameters.AddWithValue ("@DetailCode"' cBatchDetailCode);  				file.Write (cActivityDate);  				billingTransactionQuery.Parameters.AddWithValue ("@ActivityDate"' cActivityDate);  				file.Write (transaction.Amount);  				billingTransactionQuery.Parameters.AddWithValue ("@Amount"' transaction.Amount);  				file.Write (transaction.CreditIndicator);  				billingTransactionQuery.Parameters.AddWithValue ("@CreditIndicator"' transaction.CreditIndicator);  				file.Write (termCode);  				billingTransactionQuery.Parameters.AddWithValue ("@TermCode"' termCode);  				//File Specific Formatting  				file.WriteLine ("                                       ");  				billingTransactionQuery.ExecuteNonQuery ();  				//Submit Written Transaction to Database  				finTotalBilling = finTotalBilling + Math.Abs (transaction.balance);  				//Absolute Sum  				finBatchTotalBalance = finBatchTotalBalance + transaction.balance;  				//Value Sum  			}  			else {  				//An error occurred trying to bill their PaperCut Account!   				errorLog.Add (new TransactionError (transaction.NetID' "Error attempting to adjust User's PapercutAccount"));  			}  		}  		file.Flush ();  	}  	//Complete writing out transactions  	UpdateBillingStatus (billingID' 2);  	char[] finalAbsBilling = BillingUtility.FormatAmount (finTotalBilling);  	this.UpdateBillingID (billingID' finalAbsBilling' finBatchTotalBalance);  	//Update Billing Entry with corrected information  	/**************************************************************************************************************************************************                          * Final Billing File Generation Section of Method                          **************************************************************************************************************************************************///Create Billing File  	using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  		file.Write (cBatchUserID);  		file.Write (BillingID);  		file.Write ('0');  		file.Write (finalAbsBilling);  		file.WriteLine (cActivityDate);  		//Header Record complete  		UpdateBillingStatus (billingID' 3);  		//Now Open Temporary file and append it to the final Billing Submission  		using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  			while (!temp.EndOfStream) {  				file.WriteLine (temp.ReadLine ());  			}  		}  		//Add billing to list of Completed Billings  		string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  		billingsCompleted.Add (fullPath);  		billingsCompletedIDs.Add (BillingID);  	}  	UpdateBillingStatus (billingID' 4);  	//Billing File Created' Delete temporary file  	System.IO.File.Delete (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"));  	UpdateBillingStatus (billingID' 5);  }  catch (Exception e) {  	//Something went Wrong with generation of Billing  	errorLog.Add (new TransactionError ("System Error: "' e.Message));  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: UpdateBillingStatus (billingID' 2);  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: using (System.IO.StreamWriter file = new System.IO.StreamWriter (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' ".dat"))) {  	file.Write (cBatchUserID);  	file.Write (BillingID);  	file.Write ('0');  	file.Write (finalAbsBilling);  	file.WriteLine (cActivityDate);  	//Header Record complete  	UpdateBillingStatus (billingID' 3);  	//Now Open Temporary file and append it to the final Billing Submission  	using (System.IO.StreamReader temp = new System.IO.StreamReader (string.Concat (WorkingPath' @"BillingSubmissions\arbatch."' batchFilePrefix' "."' new string (BillingID)' "_transactions.txt"))) {  		while (!temp.EndOfStream) {  			file.WriteLine (temp.ReadLine ());  		}  	}  	//Add billing to list of Completed Billings  	string fullPath = ((System.IO.FileStream)(file.BaseStream)).Name;  	billingsCompleted.Add (fullPath);  	billingsCompletedIDs.Add (BillingID);  }  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: UpdateBillingStatus (billingID' 3);  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: UpdateBillingStatus (billingID' 4);  
Magic Number,PapercutSFASBilling,SQLBillingServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\SQLBillingServer.cs,GenerateBilling,The following statement contains a magic number: UpdateBillingStatus (billingID' 5);  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: while (noUsers2 > 0) {  	if ((i + 1) * 1000 < noUsers) {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  	}  	else {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  	}  	i++;  	noUsers2 = noUsers2 - 1000;  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: while (noUsers2 > 0) {  	if ((i + 1) * 1000 < noUsers) {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  	}  	else {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  	}  	i++;  	noUsers2 = noUsers2 - 1000;  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: while (noUsers2 > 0) {  	if ((i + 1) * 1000 < noUsers) {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  	}  	else {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  	}  	i++;  	noUsers2 = noUsers2 - 1000;  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: while (noUsers2 > 0) {  	if ((i + 1) * 1000 < noUsers) {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  	}  	else {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  	}  	i++;  	noUsers2 = noUsers2 - 1000;  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: while (noUsers2 > 0) {  	if ((i + 1) * 1000 < noUsers) {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  	}  	else {  		this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  	}  	i++;  	noUsers2 = noUsers2 - 1000;  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: if ((i + 1) * 1000 < noUsers) {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  }  else {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: if ((i + 1) * 1000 < noUsers) {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  }  else {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: if ((i + 1) * 1000 < noUsers) {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  }  else {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: if ((i + 1) * 1000 < noUsers) {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  }  else {  	this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  }  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' (i + 1) * 1000).ToList ());  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: this.papercutUsers.AddRange (this.serverProxy.ListUserAccounts (i * 1000' noUsers).ToList ());  
Magic Number,PapercutSFASBilling,PaperCutServer,C:\repos\wildbillcat_YalePapercutSFASBillingService\PapercutSFASBilling\PapercutServer.cs,RetrievePapercutUsers,The following statement contains a magic number: noUsers2 = noUsers2 - 1000;  
