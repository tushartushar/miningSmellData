Implementation smell,Namespace,Class,File,Method,Description
Long Method,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_ICMS,The method has 215 lines of code.
Long Method,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,The method has 63 lines of code.
Complex Method,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDEST,Cyclomatic complexity of the method is 9
Complex Method,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_ICMS,Cyclomatic complexity of the method is 190
Complex Method,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_IPI,Cyclomatic complexity of the method is 14
Complex Method,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_PIS,Cyclomatic complexity of the method is 29
Complex Method,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_COFINS,Cyclomatic complexity of the method is 29
Complex Method,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaTRANSP,Cyclomatic complexity of the method is 14
Complex Method,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,Cyclomatic complexity of the method is 8
Long Parameter List,NFeEletronica.Assinatura,AssinaturaDeXml,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Assinatura\AssinaturaDeXml.cs,AssinarNota,The method has 4 parameters.
Long Parameter List,NFeEletronica.Assinatura,AssinaturaDeXml,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Assinatura\AssinaturaDeXml.cs,Assinar,The method has 4 parameters.
Long Parameter List,NFeEletronica.Consulta,Cancelamento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Consulta\Cancelamento.cs,Cancelamento,The method has 5 parameters.
Long Parameter List,NFeEletronica.Consulta,CartaCorrecao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Consulta\CartaCorrecao.cs,CartaCorrecao,The method has 5 parameters.
Long Parameter List,NFeEletronica.Operacao,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RecepcaoEvento.cs,EnviarEvento,The method has 4 parameters.
Long Parameter List,NFeEletronica.Retorno,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Retorno\RetRecepcao.cs,RetRecepcao,The method has 4 parameters.
Long Parameter List,NFeEletronica.NfeInutilizacao,nfeInutilizacaoNF2CompletedEventArgs,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeInutilizacao\Reference.cs,nfeInutilizacaoNF2CompletedEventArgs,The method has 4 parameters.
Long Parameter List,NFeEletronica.NfeRecepcao2,nfeRecepcaoLote2CompletedEventArgs,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRecepcao2\Reference.cs,nfeRecepcaoLote2CompletedEventArgs,The method has 4 parameters.
Long Parameter List,NFeEletronica.NfeRetRecepcao2,nfeRetRecepcao2CompletedEventArgs,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRetRecepcao2\Reference.cs,nfeRetRecepcao2CompletedEventArgs,The method has 4 parameters.
Long Parameter List,NFeEletronica.RecepcaoEvento2,nfeRecepcaoEventoCompletedEventArgs,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\RecepcaoEvento2\Reference.cs,nfeRecepcaoEventoCompletedEventArgs,The method has 4 parameters.
Long Statement,NFeEletronica.Assinatura,Xml,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Assinatura\Xml.cs,Reader_ValidationEventHandler,The length of the statement  "	validarResultado = validarResultado + String.Format ("\rLinha:{1}" + Environment.NewLine + "\rColuna:{0}" + Environment.NewLine + "\rErro:{2}" + Environment.NewLine' e.Exception.LinePosition' e.Exception.LineNumber' e.Exception.Message); " is 237.
Long Statement,NFeEletronica.Certificado,GerenciadorDeCertificado,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Certificado\GerenciadorDeCertificado.cs,SelecionarPorWindows,The length of the statement  "	var scollection = X509Certificate2UI.SelectFromCollection (ListaCertificados ()' "Certificado(s) Digital(is) disponível(is)"' "Selecione o certificado digital para uso no aplicativo"' X509SelectionFlag.SingleSelection); " is 219.
Long Statement,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,GerarCodigoDaNota,The length of the statement  "	var result = ide.cUF + ide.dEmi.Replace ("-"' "").Substring (2' 4) + emit.CNPJ + Int32.Parse (ide.mod).ToString ("D2") + Int32.Parse (ide.serie).ToString ("D3") + Int32.Parse (ide.nNF).ToString ("D9") + Int32.Parse (ide.tpEmis).ToString ("D1") + codigoNumerico; " is 261.
Long Statement,NFeEletronica.Operacao,Inutilizacao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\Inutilizacao.cs,NfeInutilizacaoNF2,The length of the statement  "	var id = "ID" + inutilizacao.UF + inutilizacao.Ano + inutilizacao.CNPJ + Int32.Parse (inutilizacao.Mod).ToString ("D2") + Int32.Parse (inutilizacao.Serie).ToString ("D3") + Int32.Parse (inutilizacao.NumeroNfeInicial).ToString ("D9") + Int32.Parse (inutilizacao.NumeroNfeFinal).ToString ("D9"); " is 293.
Long Statement,NFeEletronica.Operacao,Inutilizacao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\Inutilizacao.cs,Assinar,The length of the statement  "		bllXml.ValidaSchema (arquivoTemporario' Util.ContentFolderSchemaValidacao + "\\" + NFeContexto.Versao.PastaXml + "\\" + ArquivoSchema); " is 135.
Long Statement,NFeEletronica.Operacao,Recepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\Recepcao.cs,AdicionarNota,The length of the statement  "		bllXml.ValidaSchema (nota.CaminhoFisico' Util.ContentFolderSchemaValidacao + "\\" + NFeContexto.Versao.PastaXml + "\\" + arquivoSchema); " is 136.
Long Statement,NFeEletronica.Operacao,Recepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\Recepcao.cs,MontarXml,The length of the statement  "	xmlString += "<enviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\" versao=\"" + NFeContexto.Versao.VersaoString + "\">"; " is 121.
Long Statement,NFeEletronica.Operacao,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RecepcaoEvento.cs,EnviarEvento,The length of the statement  "		bllXml.ValidaSchema (arquivoEvento' Util.ContentFolderSchemaValidacao + "\\" + NFeContexto.Versao.PastaXml + "\\" + schema); " is 124.
Long Statement,NFeEletronica.Operacao,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RecepcaoEvento.cs,CartaCorrecao,The length of the statement  "	xmlString.Append ("         <xCondUso>A Carta de Correcao e disciplinada pelo paragrafo 1o-A do art. 7o do Convenio S/N' de 15 de dezembro de 1970 e pode ser utilizada para regularizacao de erro ocorrido na emissao de documento fiscal' desde que o erro nao esteja relacionado com: I - as variaveis que determinam o valor do imposto tais como: base de calculo' aliquota' diferenca de preco' quantidade' valor da operacao ou da prestacao; II - a correcao de dados cadastrais que implique mudanca do remetente ou do destinatario; III - a data de emissao ou de saida.</xCondUso>"); " is 577.
Long Statement,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,The length of the statement  "	xmlString.Append ("<consReciNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\" versao=\"" + NFeContexto.Versao.VersaoString + "\">"); " is 131.
Long Statement,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,The length of the statement  "		//Isso aqui é o resultado de CADA NFe' mas como por enquanto pra cada lote só manda 1 nota' entao segue assim por enquanto #todo " is 128.
Long Statement,NFeEletronica.NfeInutilizacao,NfeInutilizacao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeInutilizacao\Reference.cs,nfeInutilizacaoNF2Async,The length of the statement  "		this.nfeInutilizacaoNF2OperationCompleted = new System.Threading.SendOrPostCallback (this.OnnfeInutilizacaoNF2OperationCompleted); " is 130.
Long Statement,NFeEletronica.NfeInutilizacao,NfeInutilizacao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeInutilizacao\Reference.cs,OnnfeInutilizacaoNF2OperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,NFeEletronica.NfeInutilizacao,NfeInutilizacao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeInutilizacao\Reference.cs,OnnfeInutilizacaoNF2OperationCompleted,The length of the statement  "		this.nfeInutilizacaoNF2Completed (this' new nfeInutilizacaoNF2CompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 165.
Long Statement,NFeEletronica.NfeInutilizacao,NfeInutilizacao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeInutilizacao\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Long Statement,NFeEletronica.NfeRecepcao2,NfeRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRecepcao2\Reference.cs,nfeRecepcaoLote2Async,The length of the statement  "		this.nfeRecepcaoLote2OperationCompleted = new System.Threading.SendOrPostCallback (this.OnnfeRecepcaoLote2OperationCompleted); " is 126.
Long Statement,NFeEletronica.NfeRecepcao2,NfeRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRecepcao2\Reference.cs,OnnfeRecepcaoLote2OperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,NFeEletronica.NfeRecepcao2,NfeRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRecepcao2\Reference.cs,OnnfeRecepcaoLote2OperationCompleted,The length of the statement  "		this.nfeRecepcaoLote2Completed (this' new nfeRecepcaoLote2CompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 161.
Long Statement,NFeEletronica.NfeRecepcao2,NfeRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRecepcao2\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Long Statement,NFeEletronica.NfeRetRecepcao2,NfeRetRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRetRecepcao2\Reference.cs,nfeRetRecepcao2Async,The length of the statement  "		this.nfeRetRecepcao2OperationCompleted = new System.Threading.SendOrPostCallback (this.OnnfeRetRecepcao2OperationCompleted); " is 124.
Long Statement,NFeEletronica.NfeRetRecepcao2,NfeRetRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRetRecepcao2\Reference.cs,OnnfeRetRecepcao2OperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,NFeEletronica.NfeRetRecepcao2,NfeRetRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRetRecepcao2\Reference.cs,OnnfeRetRecepcao2OperationCompleted,The length of the statement  "		this.nfeRetRecepcao2Completed (this' new nfeRetRecepcao2CompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 159.
Long Statement,NFeEletronica.NfeRetRecepcao2,NfeRetRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRetRecepcao2\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Long Statement,NFeEletronica.RecepcaoEvento2,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\RecepcaoEvento2\Reference.cs,nfeRecepcaoEventoAsync,The length of the statement  "		this.nfeRecepcaoEventoOperationCompleted = new System.Threading.SendOrPostCallback (this.OnnfeRecepcaoEventoOperationCompleted); " is 128.
Long Statement,NFeEletronica.RecepcaoEvento2,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\RecepcaoEvento2\Reference.cs,OnnfeRecepcaoEventoOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,NFeEletronica.RecepcaoEvento2,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\RecepcaoEvento2\Reference.cs,OnnfeRecepcaoEventoOperationCompleted,The length of the statement  "		this.nfeRecepcaoEventoCompleted (this' new nfeRecepcaoEventoCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 163.
Long Statement,NFeEletronica.RecepcaoEvento2,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\RecepcaoEvento2\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Empty Catch Block,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,The method has an empty catch block.
Magic Number,NFeEletronica.Operacao,Recepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\Recepcao.cs,AdicionarNota,The following statement contains a magic number: if (notaLista.Count >= 50) {  	throw new Exception ("Limite máximo por lote é de 50 arquivos");  }  
Magic Number,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,The following statement contains a magic number: do {  	respostaXml = nfeRetRecepcao2.nfeRetRecepcao2 (consultaXml);  	//Esse e o resultado só do lote (cabeçalho)  	var status = respostaXml ["cStat"].InnerText;  	var motivo = respostaXml ["xMotivo"].InnerText;  	retorno = new Retorno.RetRecepcao (""' ""' status' motivo);  	if (retorno.Status != "105") {  		isEmProcessamento = false;  	} else {  		Thread.Sleep (5000);  	}  } while (isEmProcessamento);  
Magic Number,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,The following statement contains a magic number: if (retorno.Status != "105") {  	isEmProcessamento = false;  } else {  	Thread.Sleep (5000);  }  
Magic Number,NFeEletronica.Operacao,RetRecepcao,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Operacao\RetRecepcao.cs,Enviar,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,NFeEletronica.Utils,Util,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Utils\Util.cs,GerarModulo11,The following statement contains a magic number: for (var i = chaveAcesso.Length - 1; i >= 0; i--) {  	if (9 < multiplier) {  		multiplier = 2;  	}  	var digit = Int32.Parse (chaveAcesso.Substring (i' 1));  	total += digit * multiplier++;  }  
Magic Number,NFeEletronica.Utils,Util,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Utils\Util.cs,GerarModulo11,The following statement contains a magic number: for (var i = chaveAcesso.Length - 1; i >= 0; i--) {  	if (9 < multiplier) {  		multiplier = 2;  	}  	var digit = Int32.Parse (chaveAcesso.Substring (i' 1));  	total += digit * multiplier++;  }  
Magic Number,NFeEletronica.Utils,Util,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Utils\Util.cs,GerarModulo11,The following statement contains a magic number: if (9 < multiplier) {  	multiplier = 2;  }  
Magic Number,NFeEletronica.Utils,Util,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Utils\Util.cs,GerarModulo11,The following statement contains a magic number: if (9 < multiplier) {  	multiplier = 2;  }  
Magic Number,NFeEletronica.Utils,Util,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Utils\Util.cs,GerarModulo11,The following statement contains a magic number: multiplier = 2;  
Magic Number,NFeEletronica.Utils,Util,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Utils\Util.cs,GerarModulo11,The following statement contains a magic number: return (11 - remainder).ToString ();  
Magic Number,NFeEletronica.NfeInutilizacao,NfeInutilizacao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeInutilizacao\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
Magic Number,NFeEletronica.NfeRecepcao2,NfeRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRecepcao2\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
Magic Number,NFeEletronica.NfeRetRecepcao2,NfeRetRecepcao2,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\NFeRetRecepcao2\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
Magic Number,NFeEletronica.RecepcaoEvento2,RecepcaoEvento,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\Web References\RecepcaoEvento2\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
Missing Default,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_ICMS,The following switch statement is missing a default case: switch (det.icms) {  case ICMS.ICMS00:  	xmlString.Append ("<ICMS00>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("    <modBC>" + det.icms_modBC + "</modBC>");  	xmlString.Append ("    <vBC>" + det.icms_vBC + "</vBC>");  	xmlString.Append ("    <pICMS>" + det.icms_pICMS + "</pICMS>");  	xmlString.Append ("    <vICMS>" + det.icms_vICMS + "</vICMS>");  	xmlString.Append ("</ICMS00>");  	break;  case ICMS.ICMS10:  	xmlString.Append ("<ICMS10>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("    <modBC>" + det.icms_modBC + "</modBC>");  	xmlString.Append ("    <vBC>" + det.icms_vBC + "</vBC>");  	xmlString.Append ("    <pICMS>" + det.icms_pICMS + "</pICMS>");  	xmlString.Append ("    <vICMS>" + det.icms_vICMS + "</vICMS>");  	xmlString.Append ("    <modBCST>" + det.icms_modBCST + "</modBCST>");  	if (!String.IsNullOrEmpty (det.icms_pMVAST)) {  		xmlString.Append ("    <pMVAST>" + det.icms_pMVAST + "</pMVAST>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pRedBCST>" + det.icms_pRedBCST + "</pRedBCST>");  	}  	xmlString.Append ("    <vBCST>" + det.icms_vBCST + "</vBCST>");  	xmlString.Append ("    <pICMSST>" + det.icms_pICMSST + "</pICMSST>");  	xmlString.Append ("    <vICMSST>" + det.icms_vICMSST + "</vICMSST>");  	xmlString.Append ("</ICMS10>");  	break;  case ICMS.ICMS20:  	xmlString.Append ("<ICMS20>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("    <modBC>" + det.icms_modBC + "</modBC>");  	xmlString.Append ("    <pRedBC>" + det.icms_pRedBC + "</pRedBC>");  	xmlString.Append ("    <vBC>" + det.icms_vBC + "</vBC>");  	xmlString.Append ("    <pICMS>" + det.icms_pICMS + "</pICMS>");  	xmlString.Append ("    <vICMS>" + det.icms_vICMS + "</vICMS>");  	xmlString.Append ("</ICMS20>");  	break;  case ICMS.ICMS30:  	xmlString.Append ("<ICMS30>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("    <modBCST>" + det.icms_modBCST + "</modBCST>");  	xmlString.Append ("    <pMVAST>" + det.icms_pMVAST + "</pMVAST>");  	xmlString.Append ("    <pRedBCST>" + det.icms_pRedBCST + "</pRedBCST>");  	xmlString.Append ("    <vBCST>" + det.icms_vBCST + "</vBCST>");  	xmlString.Append ("    <pICMSST>" + det.icms_pICMSST + "</pICMSST>");  	xmlString.Append ("    <vICMSST>" + det.icms_vICMSST + "</vICMSST>");  	xmlString.Append ("</ICMS30>");  	break;  case ICMS.ICMS40_50:  	xmlString.Append ("<ICMS40>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("</ICMS40>");  	break;  case ICMS.ICMS51:  	xmlString.Append ("<ICMS51>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("</ICMS51>");  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <modBC>" + det.icms_modBC + "</modBC>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pRedBC>" + det.icms_pRedBC + "</pRedBC>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <vBC>" + det.icms_vBC + "</vBC>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pICMS>" + det.icms_pICMS + "</pICMS>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <vICMS>" + det.icms_vICMS + "</vICMS>");  	}  	break;  case ICMS.ICMS60:  	xmlString.Append ("<ICMS60>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("</ICMS60>");  	break;  case ICMS.ICMS70:  	xmlString.Append ("<ICMS70>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("    <modBC>" + det.icms_modBC + "</modBC>");  	xmlString.Append ("    <pRedBC>" + det.icms_pRedBC + "</pRedBC>");  	xmlString.Append ("    <vBC>" + det.icms_vBC + "</vBC>");  	xmlString.Append ("    <pICMS>" + det.icms_pICMS + "</pICMS>");  	xmlString.Append ("    <vICMS>" + det.icms_vICMS + "</vICMS>");  	xmlString.Append ("    <modBCST>" + det.icms_modBCST + "</modBCST>");  	if (!String.IsNullOrEmpty (det.icms_pMVAST)) {  		xmlString.Append ("    <pMVAST>" + det.icms_pMVAST + "</pMVAST>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pRedBCST>" + det.icms_pRedBCST + "</pRedBCST>");  	}  	xmlString.Append ("    <vBCST>" + det.icms_vBCST + "</vBCST>");  	xmlString.Append ("    <pICMSST>" + det.icms_pICMSST + "</pICMSST>");  	xmlString.Append ("    <vICMSST>" + det.icms_vICMSST + "</vICMSST>");  	xmlString.Append ("</ICMS70>");  	break;  case ICMS.ICMS90:  	xmlString.Append ("<ICMS90>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CST>" + det.icms_CST + "</CST>");  	xmlString.Append ("    <modBC>" + det.icms_modBC + "</modBC>");  	xmlString.Append ("    <vBC>" + det.icms_vBC + "</vBC>");  	if (!String.IsNullOrEmpty (det.icms_pRedBC)) {  		xmlString.Append ("    <pRedBC>" + det.icms_pRedBC + "</pRedBC>");  	}  	xmlString.Append ("    <pICMS>" + det.icms_pICMS + "</pICMS>");  	xmlString.Append ("    <vICMS>" + det.icms_vICMS + "</vICMS>");  	xmlString.Append ("    <modBCST>" + det.icms_modBCST + "</modBCST>");  	if (!String.IsNullOrEmpty (det.icms_pMVAST)) {  		xmlString.Append ("    <pMVAST>" + det.icms_pMVAST + "</pMVAST>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pRedBCST>" + det.icms_pRedBCST + "</pRedBCST>");  	}  	xmlString.Append ("    <vBCST>" + det.icms_vBCST + "</vBCST>");  	xmlString.Append ("    <pICMSST>" + det.icms_pICMSST + "</pICMSST>");  	xmlString.Append ("    <vICMSST>" + det.icms_vICMSST + "</vICMSST>");  	xmlString.Append ("</ICMS90>");  	break;  case ICMS.ICMS101:  	xmlString.Append ("<ICMSSN101>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CSOSN>" + det.icms_CSOSN + "</CSOSN>");  	xmlString.Append ("    <pCredSN>" + det.icms_pCredSN + "</pCredSN>");  	xmlString.Append ("    <vCredICMSSN>" + det.icms_vCredICMSSN + "</vCredICMSSN>");  	xmlString.Append ("</ICMSSN101>");  	break;  case ICMS.ICMS102_400:  	xmlString.Append ("<ICMSSN102>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CSOSN>" + det.icms_CSOSN + "</CSOSN>");  	xmlString.Append ("</ICMSSN102>");  	break;  case ICMS.ICMS201:  	xmlString.Append ("<ICMSSN201>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CSOSN>" + det.icms_CSOSN + "</CSOSN>");  	xmlString.Append ("    <modBCST>" + det.icms_modBCST + "</modBCST>");  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pMVAST>" + det.icms_pMVAST + "</pMVAST>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pRedBCST>" + det.icms_pRedBCST + "</pRedBCST>");  	}  	xmlString.Append ("    <vBCST>" + det.icms_vBCST + "</vBCST>");  	xmlString.Append ("    <pICMSST>" + det.icms_pICMSST + "</pICMSST>");  	xmlString.Append ("    <vICMSST>" + det.icms_vICMSST + "</vICMSST>");  	xmlString.Append ("</ICMSSN201>");  	break;  case ICMS.ICMS202:  	xmlString.Append ("<ICMSSN202>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CSOSN>" + det.icms_CSOSN + "</CSOSN>");  	xmlString.Append ("    <modBCST>" + det.icms_modBCST + "</modBCST>");  	if (!String.IsNullOrEmpty (det.icms_pMVAST)) {  		xmlString.Append ("    <pMVAST>" + det.icms_pMVAST + "</pMVAST>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pRedBCST>" + det.icms_pRedBCST + "</pRedBCST>");  	}  	xmlString.Append ("    <vBCST>" + det.icms_vBCST + "</vBCST>");  	xmlString.Append ("    <pICMSST>" + det.icms_pICMSST + "</pICMSST>");  	xmlString.Append ("    <vICMSST>" + det.icms_vICMSST + "</vICMSST>");  	xmlString.Append ("</ICMSSN202>");  	break;  case ICMS.ICMS500:  	xmlString.Append ("<ICMSSN500>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CSOSN>" + det.icms_CSOSN + "</CSOSN>");  	xmlString.Append ("    <vBCSTRet>" + det.icms_vBCSTRet + "</vBCSTRet>");  	xmlString.Append ("    <vICMSSTRet>" + det.icms_vICMSSTRet + "</vICMSSTRet>");  	xmlString.Append ("</ICMSSN500>");  	break;  case ICMS.ICMS900:  	xmlString.Append ("<ICMSSN900>");  	xmlString.Append ("    <orig>" + det.icms_orig + "</orig>");  	xmlString.Append ("    <CSOSN>" + det.icms_CSOSN + "</CSOSN>");  	xmlString.Append ("    <modBC>" + det.icms_modBC + "</modBC>");  	xmlString.Append ("    <vBC>" + det.icms_vBC + "</vBC>");  	if (!String.IsNullOrEmpty (det.icms_pRedBC)) {  		xmlString.Append ("    <pRedBC>" + det.icms_pRedBC + "</pRedBC>");  	}  	xmlString.Append ("    <pICMS>" + det.icms_pICMS + "</pICMS>");  	xmlString.Append ("    <vICMS>" + det.icms_vICMS + "</vICMS>");  	xmlString.Append ("    <modBCST>" + det.icms_modBCST + "</modBCST>");  	if (!String.IsNullOrEmpty (det.icms_pMVAST)) {  		xmlString.Append ("    <pMVAST>" + det.icms_pMVAST + "</pMVAST>");  	}  	if (!String.IsNullOrEmpty (det.icms_pRedBCST)) {  		xmlString.Append ("    <pRedBCST>" + det.icms_pRedBCST + "</pRedBCST>");  	}  	xmlString.Append ("    <vBCST>" + det.icms_vBCST + "</vBCST>");  	xmlString.Append ("    <pICMSST>" + det.icms_pICMSST + "</pICMSST>");  	xmlString.Append ("    <vICMSST>" + det.icms_vICMSST + "</vICMSST>");  	xmlString.Append ("    <pCredSN>" + det.icms_pCredSN + "</pCredSN>");  	xmlString.Append ("    <vCredICMSSN>" + det.icms_vCredICMSSN + "</vCredICMSSN>");  	xmlString.Append ("</ICMSSN900>");  	break;  }  
Missing Default,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_IPI,The following switch statement is missing a default case: switch (det.ipi) {  case IPI.IPI00_49_50_99:  	xmlString.Append ("<IPITrib>");  	xmlString.Append ("    <CST>" + det.ipi_CST + "</CST>");  	if (!String.IsNullOrEmpty (det.ipi_vBC)) {  		xmlString.Append ("    <vBC>" + det.ipi_vBC + "</vBC>");  		xmlString.Append ("    <pIPI>" + det.ipi_pIPI + "</pIPI>");  	} else {  		xmlString.Append ("    <qUnid>" + det.ipi_qUnid + "</qUnid>");  		xmlString.Append ("    <vUnid>" + det.ipi_vUnid + "</vUnid>");  	}  	xmlString.Append ("    <vIPI>" + det.ipi_vIPI + "</vIPI>");  	xmlString.Append ("</IPITrib>");  	break;  case IPI.IPI01_55:  	xmlString.Append ("<IPINT>");  	xmlString.Append ("    <CST>" + det.ipi_CST + "</CST>");  	xmlString.Append ("</IPINT>");  	break;  }  
Missing Default,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_PIS,The following switch statement is missing a default case: switch (det.pis) {  case PIS.PIS01_02:  	xmlString.Append ("<PISAliq>");  	xmlString.Append ("    <CST>" + det.pis_CST + "</CST>");  	xmlString.Append ("    <vBC>" + det.pis_vBC + "</vBC>");  	xmlString.Append ("    <pPIS>" + det.pis_pPIS + "</pPIS>");  	xmlString.Append ("    <vPIS>" + det.pis_vPIS + "</vPIS>");  	xmlString.Append ("</PISAliq>");  	break;  case PIS.PIS03:  	xmlString.Append ("<PISQtde>");  	xmlString.Append ("    <CST>" + det.pis_CST + "</CST>");  	xmlString.Append ("    <qBCProd>" + det.pis_qBCProd + "</qBCProd>");  	xmlString.Append ("    <vAliqProd>" + det.pis_vAliqProd + "</vAliqProd>");  	xmlString.Append ("    <vPIS>" + det.pis_vPIS + "</vPIS>");  	xmlString.Append ("</PISQtde>");  	break;  case PIS.PIS04_09:  	xmlString.Append ("<PISNT>");  	xmlString.Append ("    <CST>" + det.pis_CST + "</CST>");  	xmlString.Append ("</PISNT>");  	break;  case PIS.PIS99:  	xmlString.Append ("<PISOutr>");  	xmlString.Append ("    <CST>" + det.pis_CST + "</CST>");  	if (!String.IsNullOrEmpty (det.pis_vBC) && !String.IsNullOrEmpty (det.pis_pPIS)) {  		xmlString.Append ("    <vBC>" + det.pis_vBC + "</vBC>");  		xmlString.Append ("    <pPIS>" + det.pis_pPIS + "</pPIS>");  	} else {  		xmlString.Append ("    <qBCProd>" + det.pis_qBCProd + "</qBCProd>");  		xmlString.Append ("    <vAliqProd>" + det.pis_vAliqProd + "</vAliqProd>");  	}  	xmlString.Append ("    <vPIS>" + det.pis_vPIS + "</vPIS>");  	xmlString.Append ("</PISOutr>");  	break;  }  
Missing Default,NFeEletronica.NotaFiscal,Nota,D:\newReposJune17\leonardiwagner_WallegNFe\NFeEletronica\NotaFiscal\NotaFiscal.cs,MontaDET_COFINS,The following switch statement is missing a default case: switch (det.cofins) {  case COFINS.CST01_02:  	xmlString.Append ("<COFINSAliq>");  	xmlString.Append ("    <CST>" + det.cofins_CST + "</CST>");  	xmlString.Append ("    <vBC>" + det.cofins_vBC + "</vBC>");  	xmlString.Append ("    <pCOFINS>" + det.cofins_pCOFINS + "</pCOFINS>");  	xmlString.Append ("    <vCOFINS>" + det.cofins_vCOFINS + "</vCOFINS>");  	xmlString.Append ("</COFINSAliq>");  	break;  case COFINS.CST03:  	xmlString.Append ("<COFINSQtde>");  	xmlString.Append ("    <CST>" + det.cofins_CST + "</CST>");  	xmlString.Append ("    <qBCProd>" + det.cofins_qBCProd + "</qBCProd>");  	xmlString.Append ("    <vAliqProd>" + det.cofins_vAliqProd + "</vAliqProd>");  	xmlString.Append ("    <vCOFINS>" + det.cofins_vCOFINS + "</vCOFINS>");  	xmlString.Append ("</COFINSQtde>");  	break;  case COFINS.CST04_09:  	xmlString.Append ("<COFINSNT>");  	xmlString.Append ("    <CST>" + det.cofins_CST + "</CST>");  	xmlString.Append ("</COFINSNT>");  	break;  case COFINS.CST99:  	xmlString.Append ("<COFINSOutr>");  	xmlString.Append ("    <CST>" + det.cofins_CST + "</CST>");  	if (!String.IsNullOrEmpty (det.cofins_vBC) && !String.IsNullOrEmpty (det.cofins_pCOFINS)) {  		xmlString.Append ("    <vBC>" + det.cofins_vBC + "</vBC>");  		xmlString.Append ("    <pCOFINS>" + det.cofins_pCOFINS + "</pCOFINS>");  	} else {  		xmlString.Append ("    <qBCProd>" + det.cofins_qBCProd + "</qBCProd>");  		xmlString.Append ("    <vAliqProd>" + det.cofins_vAliqProd + "</vAliqProd>");  	}  	xmlString.Append ("    <vCOFINS>" + det.cofins_vCOFINS + "</vCOFINS>");  	xmlString.Append ("</COFINSOutr>");  	break;  }  
