Implementation smell,Namespace,Class,File,Method,Description
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: int ct = FInput.SliceCount/3;
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: FOutput.SliceCount = ct*4;
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: int [] table = new int[]{0'1'0'2'1'2};
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: int [] table = new int[]{0'1'0'2'1'2};
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
Magic Number,VVVV.Nodes,ValueSortPoint2Node,C:\repos\yhyjp_vvvv_tutorial\plugins\ValueSortPoint2\ValueSortPoint2Node.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < ct; i++)  			{  				int [] idx = new int[]{ 0' 1' 2 };  				if (FDist1[i] > FDist2[i]) swap(ref idx[0]' ref idx[1]);  				if (FDist1[i] > FDist3[i]) swap(ref idx[0]' ref idx[2]);  				if (FDist2[i] > FDist3[i]) swap(ref idx[1]' ref idx[2]);  				  				FOutput[p++] = FInput[i*3+table[idx[0]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[0]*2+1]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+0]];  				FOutput[p++] = FInput[i*3+table[idx[1]*2+1]];  			}
