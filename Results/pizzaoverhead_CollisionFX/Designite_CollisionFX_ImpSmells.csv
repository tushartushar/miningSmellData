Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,SetupAudio,Cyclomatic complexity of the method is 10
Complex Method,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,Scrape,Cyclomatic complexity of the method is 9
Complex Method,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,Cyclomatic complexity of the method is 8
Complex Method,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,Cyclomatic complexity of the method is 13
Complex Method,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,GetBiomeColour,Cyclomatic complexity of the method is 10
Complex Method,CollisionFX,EvaWatcher,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\EvaWatcher.cs,Start,Cyclomatic complexity of the method is 8
Long Statement,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,CanSpark,The length of the statement  "	return scrapeSparks && TargetScrapeSparks (collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen && !ColourManager.IsPQS (c); " is 188.
Long Statement,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The length of the statement  "			if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) { " is 138.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The length of the statement  "				Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer."); " is 126.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The length of the statement  "				Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer."); " is 126.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The length of the statement  "				Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer."); " is 126.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The length of the statement  "					Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer."); " is 126.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,GetCurrentBiomeName,The length of the statement  "	CBAttributeMapSO.MapAttribute mapAttribute = biomeMap.GetAtt (vessel.latitude * Mathf.Deg2Rad' vessel.longitude * Mathf.Deg2Rad); " is 129.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,GetBiomeColour,The length of the statement  "	if (_previousDustBody != null && _previousDustBody.Name.Equals (currentBody' StringComparison.InvariantCultureIgnoreCase)) " is 122.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,GetBiomeColour,The length of the statement  "	if (_previousDustBiome != null && _previousDustBiome.Name.Equals (currentBiome' StringComparison.InvariantCultureIgnoreCase)) " is 125.
Long Statement,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,GetBiomeColour,The length of the statement  "		Debug.LogWarning ("CollisionFX: Unable to find dust definition for biome \"" + currentBiome + "\" on body \"" + currentBody + "\"; using default."); " is 148.
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,OnCollisionEnter,The following statement contains a magic number: if (c.relativeVelocity.magnitude > 3) {  	if (c.contacts.Length == 0)  		return;  	var cInfo = GetClosestChild (part' c.contacts [0].point + (part.rigidbody.velocity * Time.deltaTime));  	if (cInfo.CollisionFX != null) {  		cInfo.CollisionFX.Impact (cInfo.IsWheel);  	}  	else {  		Impact (IsCollidingWheel (c.contacts [0].point));  	}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: dustFx.particleEmitter.maxEnergy = 10;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: dustFx.particleEmitter.maxEmission = 75;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: if (dustAnimator != null) {  	Color[] colors = dustAnimator.colorAnimation;  	colors [0] = c;  	colors [1] = c;  	colors [2] = c;  	colors [3] = c;  	colors [4] = c;  	dustAnimator.colorAnimation = colors;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: if (dustAnimator != null) {  	Color[] colors = dustAnimator.colorAnimation;  	colors [0] = c;  	colors [1] = c;  	colors [2] = c;  	colors [3] = c;  	colors [4] = c;  	dustAnimator.colorAnimation = colors;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: if (dustAnimator != null) {  	Color[] colors = dustAnimator.colorAnimation;  	colors [0] = c;  	colors [1] = c;  	colors [2] = c;  	colors [3] = c;  	colors [4] = c;  	dustAnimator.colorAnimation = colors;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: colors [2] = c;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: colors [3] = c;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,DebugParticles,The following statement contains a magic number: colors [4] = c;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,Scrape,The following statement contains a magic number: spheres [2].transform.position = c.contacts [0].point + (part.rigidbody.velocity * Time.deltaTime);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  		if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  			sparkFx.transform.position = contactPoint;  			sparkFx.particleEmitter.maxEnergy = speed / 10;  			// Values determined  			sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  			// via experimentation.  			sparkFx.particleEmitter.Emit ();  			sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  			scrapeLight.enabled = true;  			scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  			float intensityMultiplier = 1;  			if (speed < minScrapeSpeed * 10)  				intensityMultiplier = speed / (minScrapeSpeed * 10);  			scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  		}  		else {  			/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  	}  	if (!wheelCollider) {  		Color c = ColourManager.GetBiomeColour (col);  		dustFx.transform.position = contactPoint;  		dustFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		dustFx.particleEmitter.Emit ();  		//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		// Set dust biome colour.  		if (dustAnimator != null) {  			Color[] colors = dustAnimator.colorAnimation;  			colors [0] = c;  			colors [1] = c;  			colors [2] = c;  			colors [3] = c;  			colors [4] = c;  			dustAnimator.colorAnimation = colors;  		}  	}  }  else {  	if (scrapeLight != null)  		scrapeLight.enabled = false;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  	if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  		sparkFx.transform.position = contactPoint;  		sparkFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		sparkFx.particleEmitter.Emit ();  		sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		scrapeLight.enabled = true;  		scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  		float intensityMultiplier = 1;  		if (speed < minScrapeSpeed * 10)  			intensityMultiplier = speed / (minScrapeSpeed * 10);  		scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  	}  	else {  		/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  	if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  		sparkFx.transform.position = contactPoint;  		sparkFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		sparkFx.particleEmitter.Emit ();  		sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		scrapeLight.enabled = true;  		scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  		float intensityMultiplier = 1;  		if (speed < minScrapeSpeed * 10)  			intensityMultiplier = speed / (minScrapeSpeed * 10);  		scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  	}  	else {  		/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  	if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  		sparkFx.transform.position = contactPoint;  		sparkFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		sparkFx.particleEmitter.Emit ();  		sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		scrapeLight.enabled = true;  		scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  		float intensityMultiplier = 1;  		if (speed < minScrapeSpeed * 10)  			intensityMultiplier = speed / (minScrapeSpeed * 10);  		scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  	}  	else {  		/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  	if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  		sparkFx.transform.position = contactPoint;  		sparkFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		sparkFx.particleEmitter.Emit ();  		sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		scrapeLight.enabled = true;  		scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  		float intensityMultiplier = 1;  		if (speed < minScrapeSpeed * 10)  			intensityMultiplier = speed / (minScrapeSpeed * 10);  		scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  	}  	else {  		/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!ColourManager.IsPQS (col) && TargetScrapeSparks (collidedWith) && !IsRagdoll (collidedWith)) {  	if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  		sparkFx.transform.position = contactPoint;  		sparkFx.particleEmitter.maxEnergy = speed / 10;  		// Values determined  		sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  		// via experimentation.  		sparkFx.particleEmitter.Emit ();  		sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  		scrapeLight.enabled = true;  		scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  		float intensityMultiplier = 1;  		if (speed < minScrapeSpeed * 10)  			intensityMultiplier = speed / (minScrapeSpeed * 10);  		scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  	}  	else {  		/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  	sparkFx.transform.position = contactPoint;  	sparkFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	sparkFx.particleEmitter.Emit ();  	sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	scrapeLight.enabled = true;  	scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  	float intensityMultiplier = 1;  	if (speed < minScrapeSpeed * 10)  		intensityMultiplier = speed / (minScrapeSpeed * 10);  	scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  }  else {  	/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  	sparkFx.transform.position = contactPoint;  	sparkFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	sparkFx.particleEmitter.Emit ();  	sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	scrapeLight.enabled = true;  	scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  	float intensityMultiplier = 1;  	if (speed < minScrapeSpeed * 10)  		intensityMultiplier = speed / (minScrapeSpeed * 10);  	scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  }  else {  	/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  	sparkFx.transform.position = contactPoint;  	sparkFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	sparkFx.particleEmitter.Emit ();  	sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	scrapeLight.enabled = true;  	scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  	float intensityMultiplier = 1;  	if (speed < minScrapeSpeed * 10)  		intensityMultiplier = speed / (minScrapeSpeed * 10);  	scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  }  else {  	/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  	sparkFx.transform.position = contactPoint;  	sparkFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	sparkFx.particleEmitter.Emit ();  	sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	scrapeLight.enabled = true;  	scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  	float intensityMultiplier = 1;  	if (speed < minScrapeSpeed * 10)  		intensityMultiplier = speed / (minScrapeSpeed * 10);  	scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  }  else {  	/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (CanSpark (col' collidedWith) && FlightGlobals.ActiveVessel.atmDensity > 0 && FlightGlobals.currentMainBody.atmosphereContainsOxygen) {  	sparkFx.transform.position = contactPoint;  	sparkFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	sparkFx.particleEmitter.Emit ();  	sparkFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	scrapeLight.enabled = true;  	scrapeLight.color = Color.Lerp (lightColor1' lightColor2' UnityEngine.Random.Range (0f' 1f));  	float intensityMultiplier = 1;  	if (speed < minScrapeSpeed * 10)  		intensityMultiplier = speed / (minScrapeSpeed * 10);  	scrapeLight.intensity = UnityEngine.Random.Range (0f' sparkLightIntensity * intensityMultiplier);  }  else {  	/*fragmentFx.transform.position = contactPoint;                         fragmentFx.particleEmitter.maxEnergy = speed / 10;                          // Values determined                         fragmentFx.particleEmitter.maxEmission = Mathf.Clamp((speed * 2)' 0' 75);   // via experimentation.                         fragmentFx.particleEmitter.Emit();                         fragmentFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;                         if (fragmentAnimator != null)                         {                             Color[] colors = dustAnimator.colorAnimation;                             Color light = new Color(0.95f' 0.95f' 0.95f);                             Color dark = new Color(0.05f' 0.05f' 0.05f);                              colors[0] = Color.gray;                             colors[1] = light;                             colors[2] = dark;                             colors[3] = light;                             colors[4] = dark;                             fragmentAnimator.colorAnimation = colors;                         }*/}  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: sparkFx.particleEmitter.maxEnergy = speed / 10;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: sparkFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed < minScrapeSpeed * 10)  	intensityMultiplier = speed / (minScrapeSpeed * 10);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (speed < minScrapeSpeed * 10)  	intensityMultiplier = speed / (minScrapeSpeed * 10);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: intensityMultiplier = speed / (minScrapeSpeed * 10);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!wheelCollider) {  	Color c = ColourManager.GetBiomeColour (col);  	dustFx.transform.position = contactPoint;  	dustFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	dustFx.particleEmitter.Emit ();  	//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	// Set dust biome colour.  	if (dustAnimator != null) {  		Color[] colors = dustAnimator.colorAnimation;  		colors [0] = c;  		colors [1] = c;  		colors [2] = c;  		colors [3] = c;  		colors [4] = c;  		dustAnimator.colorAnimation = colors;  	}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!wheelCollider) {  	Color c = ColourManager.GetBiomeColour (col);  	dustFx.transform.position = contactPoint;  	dustFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	dustFx.particleEmitter.Emit ();  	//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	// Set dust biome colour.  	if (dustAnimator != null) {  		Color[] colors = dustAnimator.colorAnimation;  		colors [0] = c;  		colors [1] = c;  		colors [2] = c;  		colors [3] = c;  		colors [4] = c;  		dustAnimator.colorAnimation = colors;  	}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!wheelCollider) {  	Color c = ColourManager.GetBiomeColour (col);  	dustFx.transform.position = contactPoint;  	dustFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	dustFx.particleEmitter.Emit ();  	//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	// Set dust biome colour.  	if (dustAnimator != null) {  		Color[] colors = dustAnimator.colorAnimation;  		colors [0] = c;  		colors [1] = c;  		colors [2] = c;  		colors [3] = c;  		colors [4] = c;  		dustAnimator.colorAnimation = colors;  	}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!wheelCollider) {  	Color c = ColourManager.GetBiomeColour (col);  	dustFx.transform.position = contactPoint;  	dustFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	dustFx.particleEmitter.Emit ();  	//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	// Set dust biome colour.  	if (dustAnimator != null) {  		Color[] colors = dustAnimator.colorAnimation;  		colors [0] = c;  		colors [1] = c;  		colors [2] = c;  		colors [3] = c;  		colors [4] = c;  		dustAnimator.colorAnimation = colors;  	}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!wheelCollider) {  	Color c = ColourManager.GetBiomeColour (col);  	dustFx.transform.position = contactPoint;  	dustFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	dustFx.particleEmitter.Emit ();  	//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	// Set dust biome colour.  	if (dustAnimator != null) {  		Color[] colors = dustAnimator.colorAnimation;  		colors [0] = c;  		colors [1] = c;  		colors [2] = c;  		colors [3] = c;  		colors [4] = c;  		dustAnimator.colorAnimation = colors;  	}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (!wheelCollider) {  	Color c = ColourManager.GetBiomeColour (col);  	dustFx.transform.position = contactPoint;  	dustFx.particleEmitter.maxEnergy = speed / 10;  	// Values determined  	dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  	// via experimentation.  	dustFx.particleEmitter.Emit ();  	//dustFx.particleEmitter.worldVelocity = -part.rigidbody.velocity;  	// Set dust biome colour.  	if (dustAnimator != null) {  		Color[] colors = dustAnimator.colorAnimation;  		colors [0] = c;  		colors [1] = c;  		colors [2] = c;  		colors [3] = c;  		colors [4] = c;  		dustAnimator.colorAnimation = colors;  	}  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: dustFx.particleEmitter.maxEnergy = speed / 10;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: dustFx.particleEmitter.maxEmission = Mathf.Clamp ((speed * 2)' 0' 75);  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (dustAnimator != null) {  	Color[] colors = dustAnimator.colorAnimation;  	colors [0] = c;  	colors [1] = c;  	colors [2] = c;  	colors [3] = c;  	colors [4] = c;  	dustAnimator.colorAnimation = colors;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (dustAnimator != null) {  	Color[] colors = dustAnimator.colorAnimation;  	colors [0] = c;  	colors [1] = c;  	colors [2] = c;  	colors [3] = c;  	colors [4] = c;  	dustAnimator.colorAnimation = colors;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: if (dustAnimator != null) {  	Color[] colors = dustAnimator.colorAnimation;  	colors [0] = c;  	colors [1] = c;  	colors [2] = c;  	colors [3] = c;  	colors [4] = c;  	dustAnimator.colorAnimation = colors;  }  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: colors [2] = c;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: colors [3] = c;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeParticles,The following statement contains a magic number: colors [4] = c;  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeSound,The following statement contains a magic number: if (speed > minScrapeSpeed) {  	if (!sound.audio.isPlaying)  		sound.audio.Play ();  	sound.audio.pitch = 1 + Mathf.Log (speed) / 5;  	if (speed < scrapeFadeSpeed) {  		// Fade out at low speeds.  		sound.audio.volume = speed / scrapeFadeSpeed * volume * GameSettings.SHIP_VOLUME;  	}  	else  		sound.audio.volume = volume * GameSettings.SHIP_VOLUME;  }  else  	sound.audio.Stop ();  
Magic Number,CollisionFX,CollisionFX,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\CollisionFX.cs,ScrapeSound,The following statement contains a magic number: sound.audio.pitch = 1 + Mathf.Log (speed) / 5;  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode node in config.nodes) {  	if (!node.name.Equals ("DustBody"))  		continue;  	DustBody body;  	if (node.HasValue ("name")) {  		body = new DustBody {  			Name = node.GetValue ("name")'  			Biomes = new List<DustBiome> ()  		};  		Debug.Log ("#Body " + body.Name);  	}  	else {  		Debug.LogWarning ("CollisionFX: Invalid DustBody definition: \"name\" field is missing.");  		continue;  	}  	if (!node.HasNode ("Biomes"))  		continue;  	ConfigNode biomeNode = node.GetNode ("Biomes");  	foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  		string colourString = biomeDefinition.value;  		string[] colourValues = colourString.Split (' ');  		if (colourValues.Length > 4) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  			continue;  		}  		float r' g' b' a;  		NumberStyles flags = NumberStyles.AllowDecimalPoint;  		if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		Color c;  		if (colourValues.Length == 4) {  			if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  				Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  				continue;  			}  			c = new Color (r' g' b' a);  		}  		else  			c = new Color (r' g' b);  		DustBiome biome = new DustBiome {  			Name = biomeDefinition.name'  			DustColour = c  		};  		body.Biomes.Add (biome);  	}  	_dustBodies.Add (body);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode node in config.nodes) {  	if (!node.name.Equals ("DustBody"))  		continue;  	DustBody body;  	if (node.HasValue ("name")) {  		body = new DustBody {  			Name = node.GetValue ("name")'  			Biomes = new List<DustBiome> ()  		};  		Debug.Log ("#Body " + body.Name);  	}  	else {  		Debug.LogWarning ("CollisionFX: Invalid DustBody definition: \"name\" field is missing.");  		continue;  	}  	if (!node.HasNode ("Biomes"))  		continue;  	ConfigNode biomeNode = node.GetNode ("Biomes");  	foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  		string colourString = biomeDefinition.value;  		string[] colourValues = colourString.Split (' ');  		if (colourValues.Length > 4) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  			continue;  		}  		float r' g' b' a;  		NumberStyles flags = NumberStyles.AllowDecimalPoint;  		if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		Color c;  		if (colourValues.Length == 4) {  			if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  				Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  				continue;  			}  			c = new Color (r' g' b' a);  		}  		else  			c = new Color (r' g' b);  		DustBiome biome = new DustBiome {  			Name = biomeDefinition.name'  			DustColour = c  		};  		body.Biomes.Add (biome);  	}  	_dustBodies.Add (body);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode node in config.nodes) {  	if (!node.name.Equals ("DustBody"))  		continue;  	DustBody body;  	if (node.HasValue ("name")) {  		body = new DustBody {  			Name = node.GetValue ("name")'  			Biomes = new List<DustBiome> ()  		};  		Debug.Log ("#Body " + body.Name);  	}  	else {  		Debug.LogWarning ("CollisionFX: Invalid DustBody definition: \"name\" field is missing.");  		continue;  	}  	if (!node.HasNode ("Biomes"))  		continue;  	ConfigNode biomeNode = node.GetNode ("Biomes");  	foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  		string colourString = biomeDefinition.value;  		string[] colourValues = colourString.Split (' ');  		if (colourValues.Length > 4) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  			continue;  		}  		float r' g' b' a;  		NumberStyles flags = NumberStyles.AllowDecimalPoint;  		if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		Color c;  		if (colourValues.Length == 4) {  			if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  				Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  				continue;  			}  			c = new Color (r' g' b' a);  		}  		else  			c = new Color (r' g' b);  		DustBiome biome = new DustBiome {  			Name = biomeDefinition.name'  			DustColour = c  		};  		body.Biomes.Add (biome);  	}  	_dustBodies.Add (body);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode node in config.nodes) {  	if (!node.name.Equals ("DustBody"))  		continue;  	DustBody body;  	if (node.HasValue ("name")) {  		body = new DustBody {  			Name = node.GetValue ("name")'  			Biomes = new List<DustBiome> ()  		};  		Debug.Log ("#Body " + body.Name);  	}  	else {  		Debug.LogWarning ("CollisionFX: Invalid DustBody definition: \"name\" field is missing.");  		continue;  	}  	if (!node.HasNode ("Biomes"))  		continue;  	ConfigNode biomeNode = node.GetNode ("Biomes");  	foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  		string colourString = biomeDefinition.value;  		string[] colourValues = colourString.Split (' ');  		if (colourValues.Length > 4) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  			continue;  		}  		float r' g' b' a;  		NumberStyles flags = NumberStyles.AllowDecimalPoint;  		if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		Color c;  		if (colourValues.Length == 4) {  			if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  				Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  				continue;  			}  			c = new Color (r' g' b' a);  		}  		else  			c = new Color (r' g' b);  		DustBiome biome = new DustBiome {  			Name = biomeDefinition.name'  			DustColour = c  		};  		body.Biomes.Add (biome);  	}  	_dustBodies.Add (body);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  	string colourString = biomeDefinition.value;  	string[] colourValues = colourString.Split (' ');  	if (colourValues.Length > 4) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  		continue;  	}  	float r' g' b' a;  	NumberStyles flags = NumberStyles.AllowDecimalPoint;  	if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	Color c;  	if (colourValues.Length == 4) {  		if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		c = new Color (r' g' b' a);  	}  	else  		c = new Color (r' g' b);  	DustBiome biome = new DustBiome {  		Name = biomeDefinition.name'  		DustColour = c  	};  	body.Biomes.Add (biome);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  	string colourString = biomeDefinition.value;  	string[] colourValues = colourString.Split (' ');  	if (colourValues.Length > 4) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  		continue;  	}  	float r' g' b' a;  	NumberStyles flags = NumberStyles.AllowDecimalPoint;  	if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	Color c;  	if (colourValues.Length == 4) {  		if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		c = new Color (r' g' b' a);  	}  	else  		c = new Color (r' g' b);  	DustBiome biome = new DustBiome {  		Name = biomeDefinition.name'  		DustColour = c  	};  	body.Biomes.Add (biome);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  	string colourString = biomeDefinition.value;  	string[] colourValues = colourString.Split (' ');  	if (colourValues.Length > 4) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  		continue;  	}  	float r' g' b' a;  	NumberStyles flags = NumberStyles.AllowDecimalPoint;  	if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	Color c;  	if (colourValues.Length == 4) {  		if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		c = new Color (r' g' b' a);  	}  	else  		c = new Color (r' g' b);  	DustBiome biome = new DustBiome {  		Name = biomeDefinition.name'  		DustColour = c  	};  	body.Biomes.Add (biome);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: foreach (ConfigNode.Value biomeDefinition in biomeNode.values) {  	string colourString = biomeDefinition.value;  	string[] colourValues = colourString.Split (' ');  	if (colourValues.Length > 4) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  		continue;  	}  	float r' g' b' a;  	NumberStyles flags = NumberStyles.AllowDecimalPoint;  	if (!float.TryParse (colourValues [0]' flags' CultureInfo.InvariantCulture' out r)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [1]' flags' CultureInfo.InvariantCulture' out g)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	Color c;  	if (colourValues.Length == 4) {  		if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  			Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  			continue;  		}  		c = new Color (r' g' b' a);  	}  	else  		c = new Color (r' g' b);  	DustBiome biome = new DustBiome {  		Name = biomeDefinition.name'  		DustColour = c  	};  	body.Biomes.Add (biome);  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: if (colourValues.Length > 4) {  	Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": Too many parameters.");  	continue;  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: if (!float.TryParse (colourValues [2]' flags' CultureInfo.InvariantCulture' out b)) {  	Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  	continue;  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: if (colourValues.Length == 4) {  	if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	c = new Color (r' g' b' a);  }  else  	c = new Color (r' g' b);  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: if (colourValues.Length == 4) {  	if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  		Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  		continue;  	}  	c = new Color (r' g' b' a);  }  else  	c = new Color (r' g' b);  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,LoadDustColours,The following statement contains a magic number: if (!float.TryParse (colourValues [3]' flags' CultureInfo.InvariantCulture' out a)) {  	Debug.LogWarning ("CollisionFX: Invalid Biome colour definition in body \"" + body.Name + "\": \"\" is not a valid integer.");  	continue;  }  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,IsPQS,The following statement contains a magic number: return c.name.Length == 12 && Int64.TryParse (c.name.Substring (2' 10)' out n);  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,IsPQS,The following statement contains a magic number: return c.name.Length == 12 && Int64.TryParse (c.name.Substring (2' 10)' out n);  
Magic Number,CollisionFX,ColourManager,C:\repos\pizzaoverhead_CollisionFX\CollisionFX\ColourManager.cs,IsPQS,The following statement contains a magic number: return c.name.Length == 12 && Int64.TryParse (c.name.Substring (2' 10)' out n);  
