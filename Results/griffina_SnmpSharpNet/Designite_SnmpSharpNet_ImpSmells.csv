Implementation smell,Namespace,Class,File,Method,Description
Long Method,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,Request,The method has 100 lines of code.
Complex Method,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Get,Cyclomatic complexity of the method is 16
Complex Method,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,GetNext,Cyclomatic complexity of the method is 15
Complex Method,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,GetBulk,Cyclomatic complexity of the method is 13
Complex Method,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Set,Cyclomatic complexity of the method is 14
Complex Method,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Walk,Cyclomatic complexity of the method is 15
Complex Method,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Walk,Cyclomatic complexity of the method is 16
Complex Method,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,ValidateIncomingPacket,Cyclomatic complexity of the method is 11
Complex Method,SnmpSharpNet,SnmpConstants,C:\repos\griffina_SnmpSharpNet\SnmpConstants.cs,GetSyntaxObject,Cyclomatic complexity of the method is 15
Complex Method,SnmpSharpNet,SnmpConstants,C:\repos\griffina_SnmpSharpNet\SnmpConstants.cs,GetSyntaxObject,Cyclomatic complexity of the method is 10
Complex Method,SnmpSharpNet,Pdu,C:\repos\griffina_SnmpSharpNet\Pdu.cs,encode,Cyclomatic complexity of the method is 8
Complex Method,SnmpSharpNet,Pdu,C:\repos\griffina_SnmpSharpNet\Pdu.cs,ToString,Cyclomatic complexity of the method is 25
Complex Method,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,decode,Cyclomatic complexity of the method is 12
Complex Method,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,encode,Cyclomatic complexity of the method is 10
Complex Method,SnmpSharpNet,SNMPV3ReportError,C:\repos\griffina_SnmpSharpNet\security\SNMPV3ReportError.cs,TranslateError,Cyclomatic complexity of the method is 11
Complex Method,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,encode,Cyclomatic complexity of the method is 12
Complex Method,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,Cyclomatic complexity of the method is 8
Complex Method,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,CompareTo,Cyclomatic complexity of the method is 9
Complex Method,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,Cyclomatic complexity of the method is 11
Complex Method,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,Request,Cyclomatic complexity of the method is 20
Complex Method,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,RequestAsync,Cyclomatic complexity of the method is 12
Complex Method,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,AsyncResponse,Cyclomatic complexity of the method is 11
Complex Method,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,Cyclomatic complexity of the method is 11
Complex Method,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,Cyclomatic complexity of the method is 9
Long Parameter List,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The method has 8 parameters.
Long Parameter List,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The method has 7 parameters.
Long Parameter List,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,SimpleSnmp,The method has 5 parameters.
Long Parameter List,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,authPriv,The method has 5 parameters.
Long Parameter List,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,authPriv,The method has 5 parameters.
Long Parameter List,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,DiscoveryResponse,The method has 6 parameters.
Long Parameter List,SnmpSharpNet,IPrivacyProtocol,C:\repos\griffina_SnmpSharpNet\security\IPrivacyProtocol.cs,Encrypt,The method has 8 parameters.
Long Parameter List,SnmpSharpNet,IPrivacyProtocol,C:\repos\griffina_SnmpSharpNet\security\IPrivacyProtocol.cs,Decrypt,The method has 7 parameters.
Long Parameter List,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The method has 8 parameters.
Long Parameter List,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The method has 7 parameters.
Long Parameter List,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Encrypt,The method has 8 parameters.
Long Parameter List,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Decrypt,The method has 7 parameters.
Long Parameter List,SnmpSharpNet,TrapAgent,C:\repos\griffina_SnmpSharpNet\TrapAgent.cs,SendV1Trap,The method has 9 parameters.
Long Parameter List,SnmpSharpNet,TrapAgent,C:\repos\griffina_SnmpSharpNet\TrapAgent.cs,SendV2Trap,The method has 6 parameters.
Long Parameter List,SnmpSharpNet,TrapAgent,C:\repos\griffina_SnmpSharpNet\TrapAgent.cs,SendV3Trap,The method has 9 parameters.
Long Parameter List,SnmpSharpNet,TrapAgent,C:\repos\griffina_SnmpSharpNet\TrapAgent.cs,SendV3Trap,The method has 11 parameters.
Long Parameter List,SnmpSharpNet,TrapAgent,C:\repos\griffina_SnmpSharpNet\TrapAgent.cs,SendV3Trap,The method has 13 parameters.
Long Parameter List,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The method has 6 parameters.
Long Parameter List,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,RequestAsync,The method has 7 parameters.
Long Statement,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The length of the statement  "		throw new SnmpPrivacyException (ex' "Exception was thrown while TripleDES privacy protocol was encrypting data\r\n" + ex.ToString ()); " is 134.
Long Statement,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The length of the statement  "		throw new ArgumentOutOfRangeException ("encryptedData"' "Encrypted data buffer is null or smaller then 8 bytes in length."); " is 124.
Long Statement,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The length of the statement  "		throw new ArgumentOutOfRangeException ("offset"' "Offset and length arguments point beyond the bounds of the encryptedData array."); " is 132.
Long Statement,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The length of the statement  "		throw new ArgumentOutOfRangeException ("decryptionKey"' "Minimum acceptable length of the decryption key is 32 bytes."); " is 120.
Long Statement,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Get,The length of the statement  "					if (version == SnmpVersion.Ver2 && (v.Value.Type == SnmpConstants.SMI_NOSUCHINSTANCE || v.Value.Type == SnmpConstants.SMI_NOSUCHOBJECT)) { " is 138.
Long Statement,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Get,The length of the statement  "								throw new SnmpException (SnmpException.OidValueTypeChanged' String.Format ("Value type changed from {0} to {1}"' res [v.Oid].Type' v.Value.Type)); " is 146.
Long Statement,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,GetNext,The length of the statement  "					if (version == SnmpVersion.Ver2 && (v.Value.Type == SnmpConstants.SMI_ENDOFMIBVIEW) || (v.Value.Type == SnmpConstants.SMI_NOSUCHINSTANCE) || (v.Value.Type == SnmpConstants.SMI_NOSUCHOBJECT)) { " is 192.
Long Statement,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,GetBulk,The length of the statement  "					if ((v.Value.Type == SnmpConstants.SMI_ENDOFMIBVIEW) || (v.Value.Type == SnmpConstants.SMI_NOSUCHINSTANCE) || (v.Value.Type == SnmpConstants.SMI_NOSUCHOBJECT)) { " is 161.
Long Statement,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Walk,The length of the statement  "						throw new SnmpException (SnmpException.OidValueTypeChanged' "OID value type changed for OID: " + entry.Key.ToString ()); " is 120.
Long Statement,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Walk,The length of the statement  "						throw new SnmpException (SnmpException.OidValueTypeChanged' "OID value type changed for OID: " + entry.Key.ToString ()); " is 120.
Long Statement,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,Valid,The length of the statement  "	if (SecurityName.Length <= 0 && (_authenticationProtocol != AuthenticationDigests.None || _privacyProtocol != PrivacyProtocols.None)) { " is 135.
Long Statement,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,Valid,The length of the statement  "		// in theory you can use blank security name during discovery process so this is not exactly prohibited by it is discouraged " is 124.
Long Statement,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,ValidateIncomingPacket,The length of the statement  "			throw new SnmpException (SnmpException.UnsupportedNoAuthPriv' "Authentication and privacy combination is not supported."); " is 122.
Long Statement,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,ValidateIncomingPacket,The length of the statement  "				throw new SnmpAuthenticationException ("Authentication secret in the packet class does not match the IAgentParameter secret."); " is 127.
Long Statement,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,Get,The length of the statement  "		throw new OverflowException ("Buffer is too small to extract sub-array.\r\n" + string.Format ("buffer length: {0} offset: {1} length: {2}"' _buffer.Length' position' length)); " is 175.
Long Statement,SnmpSharpNet,SnmpV1Packet,C:\repos\griffina_SnmpSharpNet\SnmpV1Packet.cs,decode,The length of the statement  "	if (asnType != (byte)PduType.Get && asnType != (byte)PduType.GetNext && asnType != (byte)PduType.Set && asnType != (byte)PduType.Response) " is 138.
Long Statement,SnmpSharpNet,SnmpV1Packet,C:\repos\griffina_SnmpSharpNet\SnmpV1Packet.cs,encode,The length of the statement  "	if (this.Pdu.Type != PduType.Get && this.Pdu.Type != PduType.GetNext && this.Pdu.Type != PduType.Set && this.Pdu.Type != PduType.Response) " is 138.
Long Statement,SnmpSharpNet,SnmpV1Packet,C:\repos\griffina_SnmpSharpNet\SnmpV1Packet.cs,encode,The length of the statement  "		throw new SnmpInvalidVersionException ("Invalid SNMP PDU type while attempting to encode PDU: " + string.Format ("0x{0:x2}"' this.Pdu.Type)); " is 141.
Long Statement,SnmpSharpNet,SnmpV2Packet,C:\repos\griffina_SnmpSharpNet\SnmpV2Packet.cs,decode,The length of the statement  "	if (asnType != (byte)PduType.Get && asnType != (byte)PduType.GetNext && asnType != (byte)PduType.Set && asnType != (byte)PduType.GetBulk && asnType != (byte)PduType.Response && asnType != (byte)PduType.V2Trap && asnType != (byte)PduType.Inform) " is 244.
Long Statement,SnmpSharpNet,SnmpV2Packet,C:\repos\griffina_SnmpSharpNet\SnmpV2Packet.cs,encode,The length of the statement  "	if (this.Pdu.Type != PduType.Get && this.Pdu.Type != PduType.GetNext && this.Pdu.Type != PduType.Set && this.Pdu.Type != PduType.V2Trap && this.Pdu.Type != PduType.Response && this.Pdu.Type != PduType.GetBulk && this.Pdu.Type != PduType.Inform) " is 244.
Long Statement,SnmpSharpNet,SnmpV2Packet,C:\repos\griffina_SnmpSharpNet\SnmpV2Packet.cs,encode,The length of the statement  "		throw new SnmpInvalidPduTypeException ("Invalid SNMP PDU type while attempting to encode PDU: " + string.Format ("0x{0:x2}"' this.Pdu.Type)); " is 141.
Long Statement,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,GetUSM,The length of the statement  "		throw new SnmpException (SnmpException.UnsupportedNoAuthPriv' "SNMP version 3 noAuthPriv security combination is not supported."); " is 130.
Long Statement,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,GetUSM,The length of the statement  "		throw new SnmpException (SnmpException.UnsupportedSecurityModel' "Class only support SNMP Version 3 User Security Model."); " is 123.
Long Statement,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,decode,The length of the statement  "		throw new SnmpException (SnmpException.UnsupportedNoAuthPriv' "SNMP version 3 noAuthPriv security combination is not supported."); " is 130.
Long Statement,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,decode,The length of the statement  "		throw new SnmpException (SnmpException.UnsupportedSecurityModel' "Class only support SNMP Version 3 User Security Model."); " is 123.
Long Statement,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,decode,The length of the statement  "		byte[] decryptedScopedPdu = privacyProtocol.Decrypt (encryptedScopedPdu' 0' encryptedScopedPdu.Length' privKey' _userSecurityModel.EngineBoots' _userSecurityModel.EngineTime' _userSecurityModel.PrivacyParameters); " is 213.
Long Statement,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,encode,The length of the statement  "			throw new SnmpException (SnmpException.UnsupportedNoAuthPriv' "Invalid authentication protocol. noAuthPriv mode not supported."); " is 129.
Long Statement,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,encode,The length of the statement  "		byte[] encryptedBuffer = privacyProtocol.Encrypt (unencryptedPdu' 0' unencryptedPdu.Length' privKey' _userSecurityModel.EngineBoots' _userSecurityModel.EngineTime' out privacyParameters' auth); " is 193.
Long Statement,SnmpSharpNet,MsgFlags,C:\repos\griffina_SnmpSharpNet\security\MsgFlags.cs,ToString,The length of the statement  "	return string.Format ("Reportable {0} Authenticated {1} Privacy {2}"' _reportableFlag.ToString ()' _authenticationFlag.ToString ()' _privacyFlag.ToString ()); " is 158.
Long Statement,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,Set,The length of the statement  "		if (!Char.IsNumber (workString [cnt]) && Char.ToUpper (workString [cnt]) != 'A' && Char.ToUpper (workString [cnt]) != 'B' && Char.ToUpper (workString [cnt]) != 'C' && Char.ToUpper (workString [cnt]) != 'D' && Char.ToUpper (workString [cnt]) != 'E' && Char.ToUpper (workString [cnt]) != 'F') { " is 292.
Long Statement,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,ToString,The length of the statement  "	return String.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]); " is 158.
Long Statement,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,The length of the statement  "	if (buffer [offset] == 0x80 && headerLength > 2 && (buffer [offset + 1] == 0xff && (buffer [offset + 2] & 0x80) != 0)) { " is 120.
Long Statement,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,GetHashCode,The length of the statement  "	int hash = Convert.ToInt32 (_data [0]) + Convert.ToInt32 (_data [1]) + Convert.ToInt32 (_data [2]) + Convert.ToInt32 (_data [3]); " is 129.
Long Statement,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The length of the statement  "		return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]); " is 158.
Long Statement,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,Request,The length of the statement  "		if (packet.Pdu.Type == PduType.Report && packet.Pdu.VbCount > 0 && packet.Pdu.VbList [0].Oid.Equals (SnmpConstants.usmStatsUnknownEngineIDs)) { " is 143.
Long Statement,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,RequestAsync,The length of the statement  "	if (!base.RequestAsync (_address' _port' outPacket' outPacket.Length' _timeout' _retry' new SnmpAsyncCallback (AsyncResponse))) { " is 129.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,initSocket,The length of the statement  "	IPEndPoint ipEndPoint = new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0); " is 132.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The length of the statement  "	EndPoint remote = (EndPoint)new IPEndPoint (peer.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0); " is 133.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,SendToBegin,The length of the statement  "		_socket.BeginSendTo (_requestState.Packet' 0' _requestState.PacketLength' SocketFlags.None' _requestState.EndPoint' new AsyncCallback (SendToCallback)' null); " is 158.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,SendToBegin,The length of the statement  "		_asyncCallback (AsyncRequestResult.SocketSendError' new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0)' null' 0); " is 170.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,SendToCallback,The length of the statement  "		_asyncCallback (AsyncRequestResult.Terminated' new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0)' null' 0); " is 165.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,SendToCallback,The length of the statement  "		_asyncCallback (AsyncRequestResult.SocketSendError' new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0)' null' 0); " is 170.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveBegin,The length of the statement  "			_asyncCallback (AsyncRequestResult.Terminated' new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0)' null' 0); " is 165.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveBegin,The length of the statement  "	_receivePeer = new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0); " is 123.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveBegin,The length of the statement  "		_socket.BeginReceiveFrom (_inBuffer' 0' _inBuffer.Length' SocketFlags.None' ref ep' new AsyncCallback (ReceiveFromCallback)' null); " is 131.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveBegin,The length of the statement  "	_requestState.Timer = new Timer (new TimerCallback (AsyncRequestTimerCallback)' null' _requestState.Timeout' System.Threading.Timeout.Infinite); " is 144.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,RetryAsyncRequest,The length of the statement  "			_asyncCallback (AsyncRequestResult.Terminated' new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0)' null' 0); " is 165.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,RetryAsyncRequest,The length of the statement  "		_asyncCallback (AsyncRequestResult.Timeout' new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0)' null' 0); " is 162.
Long Statement,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The length of the statement  "			_asyncCallback (AsyncRequestResult.Terminated' new IPEndPoint (_socket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any' 0)' null' 0); " is 165.
Long Statement,SnmpSharpNet,Vb,C:\repos\griffina_SnmpSharpNet\Vb.cs,decode,The length of the statement  "		throw new SnmpDecodingException (String.Format ("Invalid ASN.1 type encountered 0x{0:x2}. Unable to continue decoding."' asnType)); " is 131.
Complex Conditional,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,GetNext,The conditional expression  "version == SnmpVersion.Ver2 && (v.Value.Type == SnmpConstants.SMI_ENDOFMIBVIEW) || (v.Value.Type == SnmpConstants.SMI_NOSUCHINSTANCE) || (v.Value.Type == SnmpConstants.SMI_NOSUCHOBJECT)"  is complex.
Complex Conditional,SnmpSharpNet,SnmpV1Packet,C:\repos\griffina_SnmpSharpNet\SnmpV1Packet.cs,decode,The conditional expression  "asnType != (byte)PduType.Get && asnType != (byte)PduType.GetNext && asnType != (byte)PduType.Set && asnType != (byte)PduType.Response"  is complex.
Complex Conditional,SnmpSharpNet,SnmpV1Packet,C:\repos\griffina_SnmpSharpNet\SnmpV1Packet.cs,encode,The conditional expression  "this.Pdu.Type != PduType.Get && this.Pdu.Type != PduType.GetNext && this.Pdu.Type != PduType.Set && this.Pdu.Type != PduType.Response"  is complex.
Complex Conditional,SnmpSharpNet,SnmpV2Packet,C:\repos\griffina_SnmpSharpNet\SnmpV2Packet.cs,decode,The conditional expression  "asnType != (byte)PduType.Get && asnType != (byte)PduType.GetNext && asnType != (byte)PduType.Set && asnType != (byte)PduType.GetBulk && asnType != (byte)PduType.Response && asnType != (byte)PduType.V2Trap && asnType != (byte)PduType.Inform"  is complex.
Complex Conditional,SnmpSharpNet,SnmpV2Packet,C:\repos\griffina_SnmpSharpNet\SnmpV2Packet.cs,encode,The conditional expression  "this.Pdu.Type != PduType.Get && this.Pdu.Type != PduType.GetNext && this.Pdu.Type != PduType.Set && this.Pdu.Type != PduType.V2Trap && this.Pdu.Type != PduType.Response && this.Pdu.Type != PduType.GetBulk && this.Pdu.Type != PduType.Inform"  is complex.
Complex Conditional,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,Set,The conditional expression  "!Char.IsNumber (workString [cnt]) && Char.ToUpper (workString [cnt]) != 'A' && Char.ToUpper (workString [cnt]) != 'B' && Char.ToUpper (workString [cnt]) != 'C' && Char.ToUpper (workString [cnt]) != 'D' && Char.ToUpper (workString [cnt]) != 'E' && Char.ToUpper (workString [cnt]) != 'F'"  is complex.
Complex Conditional,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,The conditional expression  "buffer [offset] == 0x80 && headerLength > 2 && (buffer [offset + 1] == 0xff && (buffer [offset + 2] & 0x80) != 0)"  is complex.
Complex Conditional,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,GetClass,The conditional expression  "(octet & 0x80) != 0 && (octet & 0x40) != 0 && (octet & 0x20) != 0 && (octet & 0x10) == 0"  is complex.
Complex Conditional,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,GetClass,The conditional expression  "(octet & 0x80) != 0 && (octet & 0x40) != 0 && (octet & 0x20) != 0 && (octet & 0x10) != 0"  is complex.
Virtual Method Call from Constructor,SnmpSharpNet,AgentParameters,C:\repos\griffina_SnmpSharpNet\AgentParameters.cs,AgentParameters,The constructor "AgentParameters" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,AgentParameters,C:\repos\griffina_SnmpSharpNet\AgentParameters.cs,AgentParameters,The constructor "AgentParameters" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,AgentParameters,C:\repos\griffina_SnmpSharpNet\AgentParameters.cs,AgentParameters,The constructor "AgentParameters" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,SnmpV1Packet,C:\repos\griffina_SnmpSharpNet\SnmpV1Packet.cs,SnmpV1Packet,The constructor "SnmpV1Packet" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,SnmpV1TrapPacket,C:\repos\griffina_SnmpSharpNet\SnmpV1TrapPacket.cs,SnmpV1TrapPacket,The constructor "SnmpV1TrapPacket" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,SnmpV2Packet,C:\repos\griffina_SnmpSharpNet\SnmpV2Packet.cs,SnmpV2Packet,The constructor "SnmpV2Packet" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,UserSecurityModel,C:\repos\griffina_SnmpSharpNet\security\UserSecurityModel.cs,UserSecurityModel,The constructor "UserSecurityModel" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,UserSecurityModel,C:\repos\griffina_SnmpSharpNet\security\UserSecurityModel.cs,UserSecurityModel,The constructor "UserSecurityModel" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,TrapPdu,C:\repos\griffina_SnmpSharpNet\TrapPdu.cs,TrapPdu,The constructor "TrapPdu" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,OctetString,The constructor "OctetString" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,OctetString,The constructor "OctetString" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,OctetString,The constructor "OctetString" calls a virtual method "SetRef".
Virtual Method Call from Constructor,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,OctetString,The constructor "OctetString" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,OctetString,The constructor "OctetString" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,OctetString,The constructor "OctetString" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,Oid,The constructor "Oid" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,Oid,The constructor "Oid" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,Oid,The constructor "Oid" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,Oid,The constructor "Oid" calls a virtual method "Set".
Virtual Method Call from Constructor,SnmpSharpNet,Vb,C:\repos\griffina_SnmpSharpNet\Vb.cs,Vb,The constructor "Vb" calls a virtual method "Clone".
Empty Catch Block,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Close,The method has an empty catch block.
Magic Number,SnmpSharpNet,AsnType,C:\repos\griffina_SnmpSharpNet\AsnType.cs,BuildLength,The following statement contains a magic number: for (int i = 3; i >= 0; i--) {  	if (len [i] != 0 || buf.Length > 0)  		buf.Append (len [i]);  }  
Magic Number,SnmpSharpNet,AsnType,C:\repos\griffina_SnmpSharpNet\AsnType.cs,ParseLength,The following statement contains a magic number: if ((mb [offset] & HIGH_BIT) == 0) {  	// short form encoding  	dataLen = mb [offset++];  	return dataLen;  	// we are done  }  else {  	dataLen = mb [offset++] & ~HIGH_BIT;  	// store byte length of the encoded length value  	int value = 0;  	for (int i = 0; i < dataLen; i++) {  		value <<= 8;  		value |= mb [offset++];  		if (offset > mb.Length || (i < (dataLen - 1) && offset == mb.Length))  			throw new OverflowException ("Buffer is too short.");  	}  	return value;  }  
Magic Number,SnmpSharpNet,AsnType,C:\repos\griffina_SnmpSharpNet\AsnType.cs,ParseLength,The following statement contains a magic number: for (int i = 0; i < dataLen; i++) {  	value <<= 8;  	value |= mb [offset++];  	if (offset > mb.Length || (i < (dataLen - 1) && offset == mb.Length))  		throw new OverflowException ("Buffer is too short.");  }  
Magic Number,SnmpSharpNet,AsnType,C:\repos\griffina_SnmpSharpNet\AsnType.cs,ParseLength,The following statement contains a magic number: value <<= 8;  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: privacyParameters = new byte[8];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: Buffer.BlockCopy (privParamHash' 0' privacyParameters' 0' 8);  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: try {  	TripleDES tdes = new TripleDESCryptoServiceProvider ();  	tdes.Mode = CipherMode.CBC;  	tdes.Padding = PaddingMode.None;  	// normalize key - generated key is 32 bytes long' we need 24 bytes to encrypt  	byte[] normKey = new byte[24];  	Buffer.BlockCopy (key' 0' normKey' 0' normKey.Length);  	ICryptoTransform transform = tdes.CreateEncryptor (normKey' iv);  	if ((length % 8) == 0) {  		encryptedData = transform.TransformFinalBlock (unencryptedData' offset' length);  	}  	else {  		byte[] tmpbuffer = new byte[8 * ((length / 8) + 1)];  		Buffer.BlockCopy (unencryptedData' offset' tmpbuffer' 0' length);  		encryptedData = transform.TransformFinalBlock (tmpbuffer' 0' tmpbuffer.Length);  	}  }  catch (Exception ex) {  	throw new SnmpPrivacyException (ex' "Exception was thrown while TripleDES privacy protocol was encrypting data\r\n" + ex.ToString ());  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: try {  	TripleDES tdes = new TripleDESCryptoServiceProvider ();  	tdes.Mode = CipherMode.CBC;  	tdes.Padding = PaddingMode.None;  	// normalize key - generated key is 32 bytes long' we need 24 bytes to encrypt  	byte[] normKey = new byte[24];  	Buffer.BlockCopy (key' 0' normKey' 0' normKey.Length);  	ICryptoTransform transform = tdes.CreateEncryptor (normKey' iv);  	if ((length % 8) == 0) {  		encryptedData = transform.TransformFinalBlock (unencryptedData' offset' length);  	}  	else {  		byte[] tmpbuffer = new byte[8 * ((length / 8) + 1)];  		Buffer.BlockCopy (unencryptedData' offset' tmpbuffer' 0' length);  		encryptedData = transform.TransformFinalBlock (tmpbuffer' 0' tmpbuffer.Length);  	}  }  catch (Exception ex) {  	throw new SnmpPrivacyException (ex' "Exception was thrown while TripleDES privacy protocol was encrypting data\r\n" + ex.ToString ());  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: try {  	TripleDES tdes = new TripleDESCryptoServiceProvider ();  	tdes.Mode = CipherMode.CBC;  	tdes.Padding = PaddingMode.None;  	// normalize key - generated key is 32 bytes long' we need 24 bytes to encrypt  	byte[] normKey = new byte[24];  	Buffer.BlockCopy (key' 0' normKey' 0' normKey.Length);  	ICryptoTransform transform = tdes.CreateEncryptor (normKey' iv);  	if ((length % 8) == 0) {  		encryptedData = transform.TransformFinalBlock (unencryptedData' offset' length);  	}  	else {  		byte[] tmpbuffer = new byte[8 * ((length / 8) + 1)];  		Buffer.BlockCopy (unencryptedData' offset' tmpbuffer' 0' length);  		encryptedData = transform.TransformFinalBlock (tmpbuffer' 0' tmpbuffer.Length);  	}  }  catch (Exception ex) {  	throw new SnmpPrivacyException (ex' "Exception was thrown while TripleDES privacy protocol was encrypting data\r\n" + ex.ToString ());  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: try {  	TripleDES tdes = new TripleDESCryptoServiceProvider ();  	tdes.Mode = CipherMode.CBC;  	tdes.Padding = PaddingMode.None;  	// normalize key - generated key is 32 bytes long' we need 24 bytes to encrypt  	byte[] normKey = new byte[24];  	Buffer.BlockCopy (key' 0' normKey' 0' normKey.Length);  	ICryptoTransform transform = tdes.CreateEncryptor (normKey' iv);  	if ((length % 8) == 0) {  		encryptedData = transform.TransformFinalBlock (unencryptedData' offset' length);  	}  	else {  		byte[] tmpbuffer = new byte[8 * ((length / 8) + 1)];  		Buffer.BlockCopy (unencryptedData' offset' tmpbuffer' 0' length);  		encryptedData = transform.TransformFinalBlock (tmpbuffer' 0' tmpbuffer.Length);  	}  }  catch (Exception ex) {  	throw new SnmpPrivacyException (ex' "Exception was thrown while TripleDES privacy protocol was encrypting data\r\n" + ex.ToString ());  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: if ((length % 8) == 0) {  	encryptedData = transform.TransformFinalBlock (unencryptedData' offset' length);  }  else {  	byte[] tmpbuffer = new byte[8 * ((length / 8) + 1)];  	Buffer.BlockCopy (unencryptedData' offset' tmpbuffer' 0' length);  	encryptedData = transform.TransformFinalBlock (tmpbuffer' 0' tmpbuffer.Length);  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: if ((length % 8) == 0) {  	encryptedData = transform.TransformFinalBlock (unencryptedData' offset' length);  }  else {  	byte[] tmpbuffer = new byte[8 * ((length / 8) + 1)];  	Buffer.BlockCopy (unencryptedData' offset' tmpbuffer' 0' length);  	encryptedData = transform.TransformFinalBlock (tmpbuffer' 0' tmpbuffer.Length);  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Encrypt,The following statement contains a magic number: if ((length % 8) == 0) {  	encryptedData = transform.TransformFinalBlock (unencryptedData' offset' length);  }  else {  	byte[] tmpbuffer = new byte[8 * ((length / 8) + 1)];  	Buffer.BlockCopy (unencryptedData' offset' tmpbuffer' 0' length);  	encryptedData = transform.TransformFinalBlock (tmpbuffer' 0' tmpbuffer.Length);  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The following statement contains a magic number: if ((length % 8) != 0)  	throw new ArgumentOutOfRangeException ("encryptedData"' "Encrypted data buffer has to be divisable by 8.");  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The following statement contains a magic number: if (encryptedData == null || encryptedData.Length < 8)  	throw new ArgumentOutOfRangeException ("encryptedData"' "Encrypted data buffer is null or smaller then 8 bytes in length.");  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The following statement contains a magic number: if (key == null || key.Length < 32)  	throw new ArgumentOutOfRangeException ("decryptionKey"' "Minimum acceptable length of the decryption key is 32 bytes.");  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The following statement contains a magic number: if (privacyParameters == null || privacyParameters.Length != 8)  	throw new ArgumentOutOfRangeException ("privacyParameters"' "Privacy parameters field is not 8 bytes long.");  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,Decrypt,The following statement contains a magic number: try {  	TripleDES tdes = new TripleDESCryptoServiceProvider ();  	tdes.Mode = CipherMode.CBC;  	tdes.Padding = PaddingMode.None;  	// normalize key - generated key is 32 bytes long' we need 24 bytes to encrypt  	byte[] normKey = new byte[24];  	Buffer.BlockCopy (key' 0' normKey' 0' normKey.Length);  	ICryptoTransform transform = tdes.CreateDecryptor (normKey' iv);  	decryptedData = transform.TransformFinalBlock (encryptedData' offset' length);  }  catch (Exception ex) {  	throw new SnmpPrivacyException (ex' "Exception was thrown while TripleDES privacy protocol was decrypting data.");  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetEncryptedLength,The following statement contains a magic number: if (scopedPduLength % 8 == 0) {  	return scopedPduLength;  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetEncryptedLength,The following statement contains a magic number: return 8 * ((scopedPduLength / 8) + 1);  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetEncryptedLength,The following statement contains a magic number: return 8 * ((scopedPduLength / 8) + 1);  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [3] = eb [0];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [2] = eb [1];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [1] = eb [2];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [0] = eb [3];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [7] = sl [0];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [6] = sl [1];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [5] = sl [2];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [5] = sl [2];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [4] = sl [3];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetSalt,The following statement contains a magic number: salt [4] = sl [3];  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetIV,The following statement contains a magic number: if (privacyKey.Length < 32)  	throw new SnmpPrivacyException ("Invalid privacy key length");  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetIV,The following statement contains a magic number: for (int i = 0; i < iv.Length; i++) {  	iv [i] = (byte)(salt [i] ^ privacyKey [24 + i]);  }  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,GetIV,The following statement contains a magic number: iv [i] = (byte)(salt [i] ^ privacyKey [24 + i]);  
Magic Number,SnmpSharpNet,Privacy3DES,C:\repos\griffina_SnmpSharpNet\security\Privacy3DES.cs,PasswordToKey,The following statement contains a magic number: if (secret == null || secret.Length < 8)  	throw new SnmpPrivacyException ("Invalid privacy secret length.");  
Magic Number,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,SimpleSnmp,The following statement contains a magic number: _peerPort = 161;  
Magic Number,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,SimpleSnmp,The following statement contains a magic number: _timeout = 2000;  
Magic Number,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,SimpleSnmp,The following statement contains a magic number: _retry = 2;  
Magic Number,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Walk,The following statement contains a magic number: if (rootOid.Length < 2) {  	if (!_suppressExceptions) {  		throw new SnmpException (SnmpException.InvalidOid' "RootOid is not a valid Oid");  	}  	return null;  }  
Magic Number,SnmpSharpNet,SimpleSnmp,C:\repos\griffina_SnmpSharpNet\SimpleSnmp.cs,Walk,The following statement contains a magic number: if (rootOid.Length < 2) {  	if (!_suppressExceptions) {  		throw new SnmpException (SnmpException.InvalidOid' "RootOid is not a valid Oid");  	}  	return null;  }  
Magic Number,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,ValidateEngineTime,The following statement contains a magic number: if (diff.TotalSeconds >= (150 * 10))  	return false;  
Magic Number,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,ValidateEngineTime,The following statement contains a magic number: if (diff.TotalSeconds >= (150 * 10))  	return false;  
Magic Number,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,Reset,The following statement contains a magic number: _maxMessageSize = new Integer32 (64 * 1024);  
Magic Number,SnmpSharpNet,SecureAgentParameters,C:\repos\griffina_SnmpSharpNet\SecureAgentParameters.cs,Reset,The following statement contains a magic number: _maxMessageSize = new Integer32 (64 * 1024);  
Magic Number,SnmpSharpNet,SnmpConstants,C:\repos\griffina_SnmpSharpNet\SnmpConstants.cs,DumpHex,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	if (val == 0) {  		Console.Write ("{0:d04} "' i);  	}  	Console.Write ("{0:x2}"' data [i]);  	val += 1;  	if (val == 16) {  		val = 0;  		Console.Write ("\n");  	}  	else {  		Console.Write (" ");  	}  }  
Magic Number,SnmpSharpNet,SnmpConstants,C:\repos\griffina_SnmpSharpNet\SnmpConstants.cs,DumpHex,The following statement contains a magic number: if (val == 16) {  	val = 0;  	Console.Write ("\n");  }  else {  	Console.Write (" ");  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,Insert,The following statement contains a magic number: Buffer.BlockCopy (_buffer' position' tmp' position + 2' _buffer.Length - position);  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: for (int i = 0; i < _buffer.Length; i++) {  	str.Append (string.Format ("{0:x02} "' _buffer [i]));  	if (i > 0 && i < (_buffer.Length - 1) && (i % 16) == 0) {  		str.Append ("\n");  	}  	else if (i < (_buffer.Length - 1)) {  		str.Append (" ");  	}  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: if (i > 0 && i < (_buffer.Length - 1) && (i % 16) == 0) {  	str.Append ("\n");  }  else if (i < (_buffer.Length - 1)) {  	str.Append (" ");  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: for (int i = start; i < (start + length); i++) {  	output.AppendFormat ("{0:x2}"' _buffer [i]);  	if (_buffer [i] > 31 && _buffer [i] < 128) {  		dec.Append (Convert.ToChar (_buffer [i]));  	}  	++pcnt;  	if (pcnt == 16) {  		output.Append ("    ");  		output.Append (dec.ToString ());  		output.Append ("\n");  		output.AppendFormat ("{0:d03}  "' (i + 1));  		dec.Remove (0' dec.Length);  		pcnt = 0;  	}  	else {  		output.Append (" ");  	}  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: for (int i = start; i < (start + length); i++) {  	output.AppendFormat ("{0:x2}"' _buffer [i]);  	if (_buffer [i] > 31 && _buffer [i] < 128) {  		dec.Append (Convert.ToChar (_buffer [i]));  	}  	++pcnt;  	if (pcnt == 16) {  		output.Append ("    ");  		output.Append (dec.ToString ());  		output.Append ("\n");  		output.AppendFormat ("{0:d03}  "' (i + 1));  		dec.Remove (0' dec.Length);  		pcnt = 0;  	}  	else {  		output.Append (" ");  	}  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: for (int i = start; i < (start + length); i++) {  	output.AppendFormat ("{0:x2}"' _buffer [i]);  	if (_buffer [i] > 31 && _buffer [i] < 128) {  		dec.Append (Convert.ToChar (_buffer [i]));  	}  	++pcnt;  	if (pcnt == 16) {  		output.Append ("    ");  		output.Append (dec.ToString ());  		output.Append ("\n");  		output.AppendFormat ("{0:d03}  "' (i + 1));  		dec.Remove (0' dec.Length);  		pcnt = 0;  	}  	else {  		output.Append (" ");  	}  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: if (_buffer [i] > 31 && _buffer [i] < 128) {  	dec.Append (Convert.ToChar (_buffer [i]));  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: if (_buffer [i] > 31 && _buffer [i] < 128) {  	dec.Append (Convert.ToChar (_buffer [i]));  }  
Magic Number,SnmpSharpNet,MutableByte,C:\repos\griffina_SnmpSharpNet\MutableByte.cs,ToString,The following statement contains a magic number: if (pcnt == 16) {  	output.Append ("    ");  	output.Append (dec.ToString ());  	output.Append ("\n");  	output.AppendFormat ("{0:d03}  "' (i + 1));  	dec.Remove (0' dec.Length);  	pcnt = 0;  }  else {  	output.Append (" ");  }  
Magic Number,SnmpSharpNet,Pdu,C:\repos\griffina_SnmpSharpNet\Pdu.cs,Pdu,The following statement contains a magic number: if (_asnType == (byte)PduType.GetBulk) {  	_errorStatus.Value = 0;  	_errorIndex.Value = 100;  }  
Magic Number,SnmpSharpNet,Pdu,C:\repos\griffina_SnmpSharpNet\Pdu.cs,Pdu,The following statement contains a magic number: _errorIndex.Value = 100;  
Magic Number,SnmpSharpNet,Pdu,C:\repos\griffina_SnmpSharpNet\Pdu.cs,GetBulkPdu,The following statement contains a magic number: p.MaxRepetitions = 100;  
Magic Number,SnmpSharpNet,SnmpPacket,C:\repos\griffina_SnmpSharpNet\SnmpPacket.cs,decode,The following statement contains a magic number: if (length < 2) {  	// we need at least 2 bytes  	throw new OverflowException ("Packet too small.");  }  
Magic Number,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,SnmpV3Packet,The following statement contains a magic number: _maxMessageSize = new Integer32 (64 * 1024);  
Magic Number,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,SnmpV3Packet,The following statement contains a magic number: _maxMessageSize = new Integer32 (64 * 1024);  
Magic Number,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,decode,The following statement contains a magic number: if (_msgFlags.Authentication && _userSecurityModel.EngineId.Length > 0) {  	// Authenticate packet  	if (_userSecurityModel.AuthenticationParameters.Length != 12)  		throw new SnmpAuthenticationException ("Invalid authentication parameter field length.");  	if (!_userSecurityModel.IsAuthentic (authKey' buffer))  		throw new SnmpAuthenticationException ("Authentication of the incoming packet failed.");  }  
Magic Number,SnmpSharpNet,SnmpV3Packet,C:\repos\griffina_SnmpSharpNet\SnmpV3Packet.cs,decode,The following statement contains a magic number: if (_userSecurityModel.AuthenticationParameters.Length != 12)  	throw new SnmpAuthenticationException ("Invalid authentication parameter field length.");  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,authenticate,The following statement contains a magic number: Buffer.BlockCopy (hash' 0' result' 0' 12);  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,authenticate,The following statement contains a magic number: Buffer.BlockCopy (hash' 0' result' 0' 12);  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,PasswordToKey,The following statement contains a magic number: if (userPassword == null || userPassword.Length < 8)  	throw new SnmpAuthenticationException ("Secret key is too short.");  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,PasswordToKey,The following statement contains a magic number: while (count < 1048576) {  	for (int i = 0; i < 64; ++i) {  		buf [i] = userPassword [password_index++ % userPassword.Length];  	}  	Buffer.BlockCopy (buf' 0' sourceBuffer' count' buf.Length);  	count += 64;  }  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,PasswordToKey,The following statement contains a magic number: while (count < 1048576) {  	for (int i = 0; i < 64; ++i) {  		buf [i] = userPassword [password_index++ % userPassword.Length];  	}  	Buffer.BlockCopy (buf' 0' sourceBuffer' count' buf.Length);  	count += 64;  }  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,PasswordToKey,The following statement contains a magic number: while (count < 1048576) {  	for (int i = 0; i < 64; ++i) {  		buf [i] = userPassword [password_index++ % userPassword.Length];  	}  	Buffer.BlockCopy (buf' 0' sourceBuffer' count' buf.Length);  	count += 64;  }  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,PasswordToKey,The following statement contains a magic number: for (int i = 0; i < 64; ++i) {  	buf [i] = userPassword [password_index++ % userPassword.Length];  }  
Magic Number,SnmpSharpNet,AuthenticationMD5,C:\repos\griffina_SnmpSharpNet\security\AuthenticationMD5.cs,PasswordToKey,The following statement contains a magic number: count += 64;  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,authenticate,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	result [i] = hash [i];  }  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,authenticate,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	result [i] = hash [i];  }  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,PasswordToKey,The following statement contains a magic number: if (userPassword == null || userPassword.Length < 8)  	throw new SnmpAuthenticationException ("Secret key is too short.");  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,PasswordToKey,The following statement contains a magic number: while (count < 1048576) {  	for (int i = 0; i < 64; ++i) {  		// Take the next octet of the password' wrapping  		// to the beginning of the password as necessary.  		buf [i] = userPassword [password_index++ % userPassword.Length];  	}  	Buffer.BlockCopy (buf' 0' sourceBuffer' count' buf.Length);  	count += 64;  }  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,PasswordToKey,The following statement contains a magic number: while (count < 1048576) {  	for (int i = 0; i < 64; ++i) {  		// Take the next octet of the password' wrapping  		// to the beginning of the password as necessary.  		buf [i] = userPassword [password_index++ % userPassword.Length];  	}  	Buffer.BlockCopy (buf' 0' sourceBuffer' count' buf.Length);  	count += 64;  }  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,PasswordToKey,The following statement contains a magic number: while (count < 1048576) {  	for (int i = 0; i < 64; ++i) {  		// Take the next octet of the password' wrapping  		// to the beginning of the password as necessary.  		buf [i] = userPassword [password_index++ % userPassword.Length];  	}  	Buffer.BlockCopy (buf' 0' sourceBuffer' count' buf.Length);  	count += 64;  }  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,PasswordToKey,The following statement contains a magic number: for (int i = 0; i < 64; ++i) {  	// Take the next octet of the password' wrapping  	// to the beginning of the password as necessary.  	buf [i] = userPassword [password_index++ % userPassword.Length];  }  
Magic Number,SnmpSharpNet,AuthenticationSHA1,C:\repos\griffina_SnmpSharpNet\security\AuthenticationSHA1.cs,PasswordToKey,The following statement contains a magic number: count += 64;  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,PrivacyAES,The following statement contains a magic number: if (keyBytes != 16 && keyBytes != 24 && keyBytes != 32)  	throw new ArgumentOutOfRangeException ("keyBytes"' "Valid key sizes are 16' 24 and 32 bytes.");  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,PrivacyAES,The following statement contains a magic number: if (keyBytes != 16 && keyBytes != 24 && keyBytes != 32)  	throw new ArgumentOutOfRangeException ("keyBytes"' "Valid key sizes are 16' 24 and 32 bytes.");  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,PrivacyAES,The following statement contains a magic number: if (keyBytes != 16 && keyBytes != 24 && keyBytes != 32)  	throw new ArgumentOutOfRangeException ("keyBytes"' "Valid key sizes are 16' 24 and 32 bytes.");  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [0] = bootsBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [1] = bootsBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [2] = bootsBytes [1];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [3] = bootsBytes [0];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [4] = timeBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [4] = timeBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [5] = timeBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [5] = timeBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [6] = timeBytes [1];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: iv [7] = timeBytes [0];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [0] = saltBytes [7];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [1] = saltBytes [6];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [2] = saltBytes [5];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [2] = saltBytes [5];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [3] = saltBytes [4];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [3] = saltBytes [4];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [4] = saltBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [4] = saltBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [5] = saltBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [5] = saltBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [6] = saltBytes [1];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: privacyParameters [7] = saltBytes [0];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: Buffer.BlockCopy (privacyParameters' 0' iv' 8' 8);  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: Buffer.BlockCopy (privacyParameters' 0' iv' 8' 8);  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: rm.KeySize = _keyBytes * 8;  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: rm.FeedbackSize = 128;  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Encrypt,The following statement contains a magic number: rm.BlockSize = 128;  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [0] = bootsBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [1] = bootsBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [2] = bootsBytes [1];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [3] = bootsBytes [0];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [4] = timeBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [4] = timeBytes [3];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [5] = timeBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [5] = timeBytes [2];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [6] = timeBytes [1];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: iv [7] = timeBytes [0];  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: Buffer.BlockCopy (privacyParameters' 0' iv' 8' 8);  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: Buffer.BlockCopy (privacyParameters' 0' iv' 8' 8);  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: rm.KeySize = _keyBytes * 8;  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: rm.FeedbackSize = 128;  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: rm.BlockSize = 128;  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: if ((cryptedData.Length % _keyBytes) != 0) {  	byte[] buffer = new byte[length];  	Buffer.BlockCopy (cryptedData' offset' buffer' 0' length);  	int div = (int)Math.Floor (buffer.Length / (double)16);  	int newLength = (div + 1) * 16;  	byte[] decryptBuffer = new byte[newLength];  	Buffer.BlockCopy (buffer' 0' decryptBuffer' 0' buffer.Length);  	decryptedData = cryptor.TransformFinalBlock (decryptBuffer' 0' decryptBuffer.Length);  	// now remove padding  	Buffer.BlockCopy (decryptedData' 0' buffer' 0' length);  	return buffer;  }  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,Decrypt,The following statement contains a magic number: if ((cryptedData.Length % _keyBytes) != 0) {  	byte[] buffer = new byte[length];  	Buffer.BlockCopy (cryptedData' offset' buffer' 0' length);  	int div = (int)Math.Floor (buffer.Length / (double)16);  	int newLength = (div + 1) * 16;  	byte[] decryptBuffer = new byte[newLength];  	Buffer.BlockCopy (buffer' 0' decryptBuffer' 0' buffer.Length);  	decryptedData = cryptor.TransformFinalBlock (decryptBuffer' 0' decryptBuffer.Length);  	// now remove padding  	Buffer.BlockCopy (decryptedData' 0' buffer' 0' length);  	return buffer;  }  
Magic Number,SnmpSharpNet,PrivacyAES,C:\repos\griffina_SnmpSharpNet\security\PrivacyAES.cs,PasswordToKey,The following statement contains a magic number: if (secret == null || secret.Length < 8)  	throw new SnmpPrivacyException ("Invalid privacy secret length.");  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Encrypt,The following statement contains a magic number: if ((length % 8) != 0)  	div += 1;  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Encrypt,The following statement contains a magic number: for (int b = 0; b < div; b++) {  	for (int i = 0; i < 8; i++) {  		inbuffer [i] = (byte)(buffer [posIn] ^ cipherText [i]);  		posIn++;  	}  	transform.TransformBlock (inbuffer' 0' inbuffer.Length' cipherText' 0);  	Buffer.BlockCopy (cipherText' 0' result' posResult' cipherText.Length);  	posResult += cipherText.Length;  }  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	inbuffer [i] = (byte)(buffer [posIn] ^ cipherText [i]);  	posIn++;  }  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Decrypt,The following statement contains a magic number: if ((length % 8) != 0)  	throw new ArgumentOutOfRangeException ("encryptedData"' "Encrypted data buffer has to be divisible by 8.");  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	iv [i] = (byte)(key [8 + i] ^ privacyParameters [i]);  }  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	iv [i] = (byte)(key [8 + i] ^ privacyParameters [i]);  }  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Decrypt,The following statement contains a magic number: iv [i] = (byte)(key [8 + i] ^ privacyParameters [i]);  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,Decrypt,The following statement contains a magic number: Buffer.BlockCopy (key' 0' outKey' 0' 8);  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetEncryptedLength,The following statement contains a magic number: if (scopedPduLength % 8 == 0) {  	return scopedPduLength;  }  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetEncryptedLength,The following statement contains a magic number: return 8 * ((scopedPduLength / 8) + 1);  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetEncryptedLength,The following statement contains a magic number: return 8 * ((scopedPduLength / 8) + 1);  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [3] = eb [0];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [2] = eb [1];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [1] = eb [2];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [0] = eb [3];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [7] = sl [0];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [6] = sl [1];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [5] = sl [2];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [5] = sl [2];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [4] = sl [3];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetSalt,The following statement contains a magic number: salt [4] = sl [3];  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetKey,The following statement contains a magic number: if (privacyPassword == null || privacyPassword.Length < 16)  	throw new SnmpPrivacyException ("Invalid privacy key length.");  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetKey,The following statement contains a magic number: Buffer.BlockCopy (privacyPassword' 0' key' 0' 8);  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetIV,The following statement contains a magic number: if (privacyKey.Length < 16)  	throw new SnmpPrivacyException ("Invalid privacy key length");  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetIV,The following statement contains a magic number: for (int i = 0; i < iv.Length; i++) {  	iv [i] = (byte)(salt [i] ^ privacyKey [8 + i]);  }  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,GetIV,The following statement contains a magic number: iv [i] = (byte)(salt [i] ^ privacyKey [8 + i]);  
Magic Number,SnmpSharpNet,PrivacyDES,C:\repos\griffina_SnmpSharpNet\security\PrivacyDES.cs,PasswordToKey,The following statement contains a magic number: if (secret == null || secret.Length < 8)  	throw new SnmpPrivacyException ("Invalid privacy secret length.");  
Magic Number,SnmpSharpNet,UserSecurityModel,C:\repos\griffina_SnmpSharpNet\security\UserSecurityModel.cs,UserSecurityModel,The following statement contains a magic number: _asnType = 3;  
Magic Number,SnmpSharpNet,UserSecurityModel,C:\repos\griffina_SnmpSharpNet\security\UserSecurityModel.cs,decode,The following statement contains a magic number: if (_authenticationParameters.Length > 0) {  	// walk through and set the authentication parameters to 0x00 in the packet  	saveOffset += 2;  	// Skip BER encoded variable type and length  	for (int i = 0; i < _authenticationParameters.Length; i++) {  		buffer [saveOffset + i] = 0x00;  	}  }  
Magic Number,SnmpSharpNet,UserSecurityModel,C:\repos\griffina_SnmpSharpNet\security\UserSecurityModel.cs,decode,The following statement contains a magic number: saveOffset += 2;  
Magic Number,SnmpSharpNet,UserSecurityModel,C:\repos\griffina_SnmpSharpNet\security\UserSecurityModel.cs,Reset,The following statement contains a magic number: _asnType = 3;  
Magic Number,SnmpSharpNet,Counter64,C:\repos\griffina_SnmpSharpNet\Types\Counter64.cs,decode,The following statement contains a magic number: if (headerLength > 9)  	throw new OverflowException ("Integer too large: cannot decode");  
Magic Number,SnmpSharpNet,Counter64,C:\repos\griffina_SnmpSharpNet\Types\Counter64.cs,decode,The following statement contains a magic number: if (headerLength == 9) {  	// if length is 9 we have a padding byte added. Skip it  	offset += 1;  	headerLength -= 1;  }  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,EthernetAddress,The following statement contains a magic number: if (data.Length < 6)  	throw new System.ArgumentException ("Buffer underflow error converting IP address");  else if (data.Length > 6)  	throw new System.ArgumentException ("Buffer overflow error converting IP address");  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,EthernetAddress,The following statement contains a magic number: if (data.Length < 6)  	throw new System.ArgumentException ("Buffer underflow error converting IP address");  else if (data.Length > 6)  	throw new System.ArgumentException ("Buffer overflow error converting IP address");  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,EthernetAddress,The following statement contains a magic number: if (data.Length > 6)  	throw new System.ArgumentException ("Buffer overflow error converting IP address");  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,EthernetAddress,The following statement contains a magic number: if (second.Length < 6)  	throw new System.ArgumentException ("Buffer underflow error converting IP address");  else if (Length > 6)  	throw new System.ArgumentException ("Buffer overflow error converting IP address");  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,EthernetAddress,The following statement contains a magic number: if (second.Length < 6)  	throw new System.ArgumentException ("Buffer underflow error converting IP address");  else if (Length > 6)  	throw new System.ArgumentException ("Buffer overflow error converting IP address");  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,EthernetAddress,The following statement contains a magic number: if (Length > 6)  	throw new System.ArgumentException ("Buffer overflow error converting IP address");  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,Set,The following statement contains a magic number: if (workString.Length != 12) {  	throw new ArgumentException ("Invalid Ethernet address format.");  }  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,Set,The following statement contains a magic number: while (pos + 2 < workString.Length) {  	string val = workString.Substring (pos' 2);  	byte v = Byte.Parse (val' NumberStyles.HexNumber);  	_data [bufpos++] = v;  	pos += 2;  }  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,Set,The following statement contains a magic number: while (pos + 2 < workString.Length) {  	string val = workString.Substring (pos' 2);  	byte v = Byte.Parse (val' NumberStyles.HexNumber);  	_data [bufpos++] = v;  	pos += 2;  }  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,Set,The following statement contains a magic number: while (pos + 2 < workString.Length) {  	string val = workString.Substring (pos' 2);  	byte v = Byte.Parse (val' NumberStyles.HexNumber);  	_data [bufpos++] = v;  	pos += 2;  }  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,Set,The following statement contains a magic number: pos += 2;  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,ToString,The following statement contains a magic number: return String.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,ToString,The following statement contains a magic number: return String.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,ToString,The following statement contains a magic number: return String.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,EthernetAddress,C:\repos\griffina_SnmpSharpNet\Types\EthernetAddress.cs,ToString,The following statement contains a magic number: return String.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,encode,The following statement contains a magic number: if (val < 0) {  	for (int i = 3; i >= 0; i--) {  		if (tmp.Length > 0 || b [i] != 0xff) {  			tmp.Append (b [i]);  		}  	}  	if (tmp.Length == 0) {  		// if the value is -1 then all bytes in an integer are 0xff and will be skipped above  		tmp.Append (0xff);  	}  	// make sure value is negative  	if ((tmp [0] & 0x80) == 0)  		tmp.Prepend (0xff);  }  else if (val == 0) {  	// this is just a shortcut to save processing time  	tmp.Append (0);  }  else {  	// byte[] b = BitConverter.GetBytes(val);  	for (int i = 3; i >= 0; i--) {  		if (b [i] != 0 || tmp.Length > 0)  			tmp.Append (b [i]);  	}  	// if buffer length is 0 then value is 0 and we have to add it to the buffer  	if (tmp.Length == 0)  		tmp.Append (0);  	else {  		if ((tmp [0] & 0x80) != 0) {  			// first bit of the first byte has to be 0 otherwise value is negative.  			tmp.Prepend (0);  		}  	}  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,encode,The following statement contains a magic number: if (val < 0) {  	for (int i = 3; i >= 0; i--) {  		if (tmp.Length > 0 || b [i] != 0xff) {  			tmp.Append (b [i]);  		}  	}  	if (tmp.Length == 0) {  		// if the value is -1 then all bytes in an integer are 0xff and will be skipped above  		tmp.Append (0xff);  	}  	// make sure value is negative  	if ((tmp [0] & 0x80) == 0)  		tmp.Prepend (0xff);  }  else if (val == 0) {  	// this is just a shortcut to save processing time  	tmp.Append (0);  }  else {  	// byte[] b = BitConverter.GetBytes(val);  	for (int i = 3; i >= 0; i--) {  		if (b [i] != 0 || tmp.Length > 0)  			tmp.Append (b [i]);  	}  	// if buffer length is 0 then value is 0 and we have to add it to the buffer  	if (tmp.Length == 0)  		tmp.Append (0);  	else {  		if ((tmp [0] & 0x80) != 0) {  			// first bit of the first byte has to be 0 otherwise value is negative.  			tmp.Prepend (0);  		}  	}  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,encode,The following statement contains a magic number: for (int i = 3; i >= 0; i--) {  	if (tmp.Length > 0 || b [i] != 0xff) {  		tmp.Append (b [i]);  	}  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,encode,The following statement contains a magic number: if (val == 0) {  	// this is just a shortcut to save processing time  	tmp.Append (0);  }  else {  	// byte[] b = BitConverter.GetBytes(val);  	for (int i = 3; i >= 0; i--) {  		if (b [i] != 0 || tmp.Length > 0)  			tmp.Append (b [i]);  	}  	// if buffer length is 0 then value is 0 and we have to add it to the buffer  	if (tmp.Length == 0)  		tmp.Append (0);  	else {  		if ((tmp [0] & 0x80) != 0) {  			// first bit of the first byte has to be 0 otherwise value is negative.  			tmp.Prepend (0);  		}  	}  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,encode,The following statement contains a magic number: for (int i = 3; i >= 0; i--) {  	if (b [i] != 0 || tmp.Length > 0)  		tmp.Append (b [i]);  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,The following statement contains a magic number: if (headerLength > 5)  	throw new OverflowException ("Integer size is invalid. Unable to decode.");  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,The following statement contains a magic number: if (buffer [offset] == 0x80 && headerLength > 2 && (buffer [offset + 1] == 0xff && (buffer [offset + 2] & 0x80) != 0)) {  	// this is a filler byte to comply with no 9 x consecutive 1s  	offset += 1;  	headerLength -= 1;  	// we've used one byte of the encoded length  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,The following statement contains a magic number: if (buffer [offset] == 0x80 && headerLength > 2 && (buffer [offset + 1] == 0xff && (buffer [offset + 2] & 0x80) != 0)) {  	// this is a filler byte to comply with no 9 x consecutive 1s  	offset += 1;  	headerLength -= 1;  	// we've used one byte of the encoded length  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,The following statement contains a magic number: for (int i = 0; i < headerLength; i++) {  	_value <<= 8;  	_value = _value | buffer [offset++];  }  
Magic Number,SnmpSharpNet,Integer32,C:\repos\griffina_SnmpSharpNet\Types\Integer32.cs,decode,The following statement contains a magic number: _value <<= 8;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IpAddress,The following statement contains a magic number: if (data.Length != 4)  	throw new OverflowException ("Too much data passed to constructor: " + data.Length.ToString ());  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,Set,The following statement contains a magic number: _data = new byte[4];  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,Set,The following statement contains a magic number: _data [1] = (byte)(ipvalue >> 8);  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,Set,The following statement contains a magic number: _data [2] = (byte)(ipvalue >> 16);  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,Set,The following statement contains a magic number: _data [2] = (byte)(ipvalue >> 16);  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,Set,The following statement contains a magic number: _data [3] = (byte)(ipvalue >> 24);  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,Set,The following statement contains a magic number: _data [3] = (byte)(ipvalue >> 24);  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [0] < 0 ? 256 + data [0] : data [0])).Append ('.');  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [1] < 0 ? 256 + data [1] : data [1])).Append ('.');  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [2] < 0 ? 256 + data [2] : data [2])).Append ('.');  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [2] < 0 ? 256 + data [2] : data [2])).Append ('.');  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [2] < 0 ? 256 + data [2] : data [2])).Append ('.');  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [2] < 0 ? 256 + data [2] : data [2])).Append ('.');  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [3] < 0 ? 256 + data [3] : data [3]));  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [3] < 0 ? 256 + data [3] : data [3]));  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [3] < 0 ? 256 + data [3] : data [3]));  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToString,The following statement contains a magic number: buf.Append ((int)(data [3] < 0 ? 256 + data [3] : data [3]));  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,GetHashCode,The following statement contains a magic number: if (_data == null || _data.Length != 4)  	return 0;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,decode,The following statement contains a magic number: if (_data.Length != 4) {  	_data = null;  	throw new OverflowException ("ASN.1 decoding error. Invalid data length.");  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToUInt32,The following statement contains a magic number: ip += (uint)_data [2] << 16;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToUInt32,The following statement contains a magic number: ip += (uint)_data [2] << 16;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ToUInt32,The following statement contains a magic number: ip += (uint)_data [1] << 8;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,GetSubnetAddress,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	res [i] = (byte)(ip [i] & m [i]);  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,Invert,The following statement contains a magic number: for (int b = 0; b < 4; b++) {  	// Check each bit  	for (int i = 0; i < bitmask.Length; i++) {  		if ((ip [b] & bitmask [i]) == 0) {  			iip [b] |= bitmask [i];  		}  	}  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,GetBroadcastAddress,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	res [i] = (byte)(ip [i] | m [i]);  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: switch (cl) {  case 1:  	return new IpAddress (new byte[] {  		255'  		0'  		0'  		0  	});  case 2:  	return new IpAddress (new byte[] {  		255'  		255'  		0'  		0  	});  case 3:  	return new IpAddress (new byte[] {  		255'  		255'  		255'  		0  	});  default:  	return null;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: return new IpAddress (new byte[] {  	255'  	0'  	0'  	0  });  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: return new IpAddress (new byte[] {  	255'  	255'  	0'  	0  });  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: return new IpAddress (new byte[] {  	255'  	255'  	0'  	0  });  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: return new IpAddress (new byte[] {  	255'  	255'  	255'  	0  });  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: return new IpAddress (new byte[] {  	255'  	255'  	255'  	0  });  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,NetworkMask,The following statement contains a magic number: return new IpAddress (new byte[] {  	255'  	255'  	255'  	0  });  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsValidMask,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	for (int b = 0; b < bitmask.Length; b++) {  		if ((ip [i] & bitmask [b]) == 0) {  			if (!endMask) {  				endMask = true;  			}  		}  		if ((ip [i] & bitmask [b]) != 0 && endMask) {  			return false;  			// Invalid mask. bit set to 1 after 0s were found  		}  	}  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,GetMaskBits,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	for (int b = 0; b < bitmask.Length; b++) {  		if ((ip [i] & bitmask [b]) != 0) {  			bitcount += 1;  		}  	}  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,BuildMaskFromBits,The following statement contains a magic number: for (int i = 0; i <= 3; i++) {  	for (int b = 0; b < bitmask.Length; b++) {  		if (bcount < bits) {  			res [i] |= bitmask [b];  			++bcount;  		}  	}  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ReverseByteOrder,The following statement contains a magic number: r [0] = v [3];  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ReverseByteOrder,The following statement contains a magic number: r [1] = v [2];  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ReverseByteOrder,The following statement contains a magic number: r [2] = v [1];  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,ReverseByteOrder,The following statement contains a magic number: r [3] = v [0];  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsIP,The following statement contains a magic number: if (val.Length == 0 || val.Length < 7 || val.Length > 15)  	return false;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsIP,The following statement contains a magic number: if (val.Length == 0 || val.Length < 7 || val.Length > 15)  	return false;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsIP,The following statement contains a magic number: if (dotCount != 3)  	return false;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsIP,The following statement contains a magic number: if (ar.Length != 4)  	return false;  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsIP,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int v = Convert.ToInt32 (ar [i]);  	if (v < 0 || v > 255)  		return false;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsIP,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int v = Convert.ToInt32 (ar [i]);  	if (v < 0 || v > 255)  		return false;  }  
Magic Number,SnmpSharpNet,IpAddress,C:\repos\griffina_SnmpSharpNet\Types\IpAddress.cs,IsIP,The following statement contains a magic number: if (v < 0 || v > 255)  	return false;  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: if (Length == 6) {  	return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  }  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: if (Length == 6) {  	return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  }  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: if (Length == 6) {  	return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  }  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: if (Length == 6) {  	return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  }  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: if (Length == 6) {  	return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  }  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToMACAddressString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture' "{0:x2}{1:x2}.{2:x2}{3:x2}.{4:x2}{5:x2}"' _data [0]' _data [1]' _data [2]' _data [3]' _data [4]' _data [5]);  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < _data.Length; ++i) {  	int x = (int)_data [i] & 0xff;  	if (x < 16)  		b.Append ('0');  	b.Append (System.Convert.ToString (x' 16).ToUpper ());  	if (i < _data.Length - 1)  		b.Append (' ');  }  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < _data.Length; ++i) {  	int x = (int)_data [i] & 0xff;  	if (x < 16)  		b.Append ('0');  	b.Append (System.Convert.ToString (x' 16).ToUpper ());  	if (i < _data.Length - 1)  		b.Append (' ');  }  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToHexString,The following statement contains a magic number: if (x < 16)  	b.Append ('0');  
Magic Number,SnmpSharpNet,OctetString,C:\repos\griffina_SnmpSharpNet\Types\OctetString.cs,ToHexString,The following statement contains a magic number: b.Append (System.Convert.ToString (x' 16).ToUpper ());  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: if (values == null || values.Length < 2) {  	values = new UInt32[2];  	values [0] = values [1] = 0;  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: if (values == null || values.Length < 2) {  	values = new UInt32[2];  	values [0] = values [1] = 0;  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: values = new UInt32[2];  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: if (_data.Length < 2) {  	values = new UInt32[2];  	values [0] = 0;  	values [1] = 0;  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: if (_data.Length < 2) {  	values = new UInt32[2];  	values [0] = 0;  	values [1] = 0;  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: values = new UInt32[2];  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: if (values [0] < 0 || values [0] > 2)  	throw new SnmpException ("Invalid Object Identifier");  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: if (values [1] < 0 || values [1] > 40)  	throw new SnmpException ("Invalid Object Identifier");  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: tmpBuffer.Append ((byte)(values [0] * 40 + values [1]));  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encode,The following statement contains a magic number: for (int i = 2; i < values.Length; i++) {  	tmpBuffer.Append (encodeInstance (values [i]));  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encodeInstance,The following statement contains a magic number: if (number <= 127) {  	result.Set ((byte)(number));  }  else {  	UInt32 val = number;  	MutableByte tmp = new MutableByte ();  	while (val != 0) {  		byte[] b = BitConverter.GetBytes (val);  		byte bval = b [0];  		if ((bval & 0x80) != 0) {  			bval = (byte)(bval & ~HIGH_BIT);  			// clear high bit  		}  		val >>= 7;  		// shift original value by 7 bits  		tmp.Append (bval);  	}  	// now we need to reverse the bytes for the final encoding  	for (int i = tmp.Length - 1; i >= 0; i--) {  		if (i > 0)  			result.Append ((byte)(tmp [i] | HIGH_BIT));  		else  			result.Append (tmp [i]);  	}  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encodeInstance,The following statement contains a magic number: if (number <= 127) {  	result.Set ((byte)(number));  }  else {  	UInt32 val = number;  	MutableByte tmp = new MutableByte ();  	while (val != 0) {  		byte[] b = BitConverter.GetBytes (val);  		byte bval = b [0];  		if ((bval & 0x80) != 0) {  			bval = (byte)(bval & ~HIGH_BIT);  			// clear high bit  		}  		val >>= 7;  		// shift original value by 7 bits  		tmp.Append (bval);  	}  	// now we need to reverse the bytes for the final encoding  	for (int i = tmp.Length - 1; i >= 0; i--) {  		if (i > 0)  			result.Append ((byte)(tmp [i] | HIGH_BIT));  		else  			result.Append (tmp [i]);  	}  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encodeInstance,The following statement contains a magic number: while (val != 0) {  	byte[] b = BitConverter.GetBytes (val);  	byte bval = b [0];  	if ((bval & 0x80) != 0) {  		bval = (byte)(bval & ~HIGH_BIT);  		// clear high bit  	}  	val >>= 7;  	// shift original value by 7 bits  	tmp.Append (bval);  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,encodeInstance,The following statement contains a magic number: val >>= 7;  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,The following statement contains a magic number: list.Add (oid / 40);  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,The following statement contains a magic number: list.Add (oid % 40);  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,The following statement contains a magic number: while (headerLength > 0) {  	UInt32 result = 0;  	// this is where we decode individual values  	{  		if ((buffer [offset] & HIGH_BIT) == 0) {  			// short encoding  			result = (UInt32)buffer [offset];  			offset += 1;  			--headerLength;  		}  		else {  			// long encoding  			MutableByte tmp = new MutableByte ();  			bool completed = false;  			do {  				tmp.Append ((byte)(buffer [offset] & ~HIGH_BIT));  				if ((buffer [offset] & HIGH_BIT) == 0)  					completed = true;  				offset += 1;  				// advance offset  				--headerLength;  				// take out the processed byte from the header length  			}  			while (!completed);  			// convert byte array to integer  			for (int i = 0; i < tmp.Length; i++) {  				result <<= 7;  				result |= tmp [i];  			}  		}  	}  	list.Add (result);  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,The following statement contains a magic number: if ((buffer [offset] & HIGH_BIT) == 0) {  	// short encoding  	result = (UInt32)buffer [offset];  	offset += 1;  	--headerLength;  }  else {  	// long encoding  	MutableByte tmp = new MutableByte ();  	bool completed = false;  	do {  		tmp.Append ((byte)(buffer [offset] & ~HIGH_BIT));  		if ((buffer [offset] & HIGH_BIT) == 0)  			completed = true;  		offset += 1;  		// advance offset  		--headerLength;  		// take out the processed byte from the header length  	}  	while (!completed);  	// convert byte array to integer  	for (int i = 0; i < tmp.Length; i++) {  		result <<= 7;  		result |= tmp [i];  	}  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,The following statement contains a magic number: for (int i = 0; i < tmp.Length; i++) {  	result <<= 7;  	result |= tmp [i];  }  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,The following statement contains a magic number: result <<= 7;  
Magic Number,SnmpSharpNet,Oid,C:\repos\griffina_SnmpSharpNet\Types\Oid.cs,decode,The following statement contains a magic number: if (_data.Length == 2 && _data [0] == 0 && _data [1] == 0)  	_data = null;  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: time = time % (24 * 3600 * 100);  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: time = time % (24 * 3600 * 100);  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: time = time % (24 * 3600 * 100);  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: time = time % (3600 * 100);  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: time = time % (3600 * 100);  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / 6000) > 0) {  	buf.Append (tmp).Append ("m ");  	time = time % 6000;  }  else  	buf.Append ("0m ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / 6000) > 0) {  	buf.Append (tmp).Append ("m ");  	time = time % 6000;  }  else  	buf.Append ("0m ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: time = time % 6000;  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / 100) > 0) {  	buf.Append (tmp).Append ("s ");  	time = time % 100;  }  else  	buf.Append ("0s ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: if ((tmp = time / 100) > 0) {  	buf.Append (tmp).Append ("s ");  	time = time % 100;  }  else  	buf.Append ("0s ");  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: time = time % 100;  
Magic Number,SnmpSharpNet,TimeTicks,C:\repos\griffina_SnmpSharpNet\Types\TimeTicks.cs,ToString,The following statement contains a magic number: buf.Append (time * 10).Append ("ms");  
Magic Number,SnmpSharpNet,UInteger32,C:\repos\griffina_SnmpSharpNet\Types\UInteger32.cs,encode,The following statement contains a magic number: for (int i = 3; i >= 0; i--) {  	if (b [i] != 0 || tmp.Length > 0)  		tmp.Append (b [i]);  }  
Magic Number,SnmpSharpNet,UInteger32,C:\repos\griffina_SnmpSharpNet\Types\UInteger32.cs,decode,The following statement contains a magic number: if (headerLength > 5)  	throw new OverflowException ("Integer too large: cannot decode");  
Magic Number,SnmpSharpNet,UInteger32,C:\repos\griffina_SnmpSharpNet\Types\UInteger32.cs,decode,The following statement contains a magic number: for (int i = 0; i < headerLength; i++) {  	_value <<= 8;  	_value = _value | buffer [offset++];  }  
Magic Number,SnmpSharpNet,UInteger32,C:\repos\griffina_SnmpSharpNet\Types\UInteger32.cs,decode,The following statement contains a magic number: _value <<= 8;  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = (time / (24 * 3600 * 100))) > 0) {  	buf.Append (tmp).Append ("d ");  	time = time % (24 * 3600 * 100);  }  else  	buf.Append ("0d ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: time = time % (24 * 3600 * 100);  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: time = time % (24 * 3600 * 100);  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: time = time % (24 * 3600 * 100);  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / (3600 * 100)) > 0) {  	buf.Append (tmp).Append ("h ");  	time = time % (3600 * 100);  }  else  	buf.Append ("0h ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: time = time % (3600 * 100);  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: time = time % (3600 * 100);  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / 6000) > 0) {  	buf.Append (tmp).Append ("m ");  	time = time % 6000;  }  else  	buf.Append ("0m ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / 6000) > 0) {  	buf.Append (tmp).Append ("m ");  	time = time % 6000;  }  else  	buf.Append ("0m ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: time = time % 6000;  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / 100) > 0) {  	buf.Append (tmp).Append ("s ");  	time = time % 100;  }  else  	buf.Append ("0s ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: if ((tmp = time / 100) > 0) {  	buf.Append (tmp).Append ("s ");  	time = time % 100;  }  else  	buf.Append ("0s ");  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: time = time % 100;  
Magic Number,SnmpSharpNet,V2PartyClock,C:\repos\griffina_SnmpSharpNet\Types\V2PartyClock.cs,ToString,The following statement contains a magic number: buf.Append (tmp * 10).Append ("ms");  
Magic Number,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,UdpTarget,The following statement contains a magic number: _port = 161;  
Magic Number,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,UdpTarget,The following statement contains a magic number: _timeout = 2000;  
Magic Number,SnmpSharpNet,UdpTarget,C:\repos\griffina_SnmpSharpNet\UdpTarget.cs,UdpTarget,The following statement contains a magic number: _retry = 2;  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: while (true) {  	try {  		_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  		recv = _socket.ReceiveFrom (inbuffer' ref remote);  	}  	catch (SocketException ex) {  		if (ex.ErrorCode == 10040) {  			recv = 0;  			// Packet too large  		}  		else if (ex.ErrorCode == 10050) {  			throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  		}  		else if (ex.ErrorCode == 10051) {  			throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  		}  		else if (ex.ErrorCode == 10054) {  			throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  		}  		else if (ex.ErrorCode == 10064) {  			throw new SnmpNetworkException (ex' "Network error: remote host is down.");  		}  		else if (ex.ErrorCode == 10065) {  			throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  		}  		else if (ex.ErrorCode == 10061) {  			throw new SnmpNetworkException (ex' "Network error: connection refused.");  		}  		else if (ex.ErrorCode == 10060) {  			recv = 0;  			// Connection attempt timed out. Fall through to retry  		}  		else {  			// Assume it is a timeout  		}  	}  	if (recv > 0) {  		IPEndPoint remEP = remote as IPEndPoint;  		if (!_noSourceCheck && !remEP.Equals (netPeer)) {  			if (remEP.Address != netPeer.Address) {  				Console.WriteLine ("Address miss-match {0} != {1}"' remEP.Address' netPeer.Address);  			}  			if (remEP.Port != netPeer.Port) {  				Console.WriteLine ("Port # miss-match {0} != {1}"' remEP.Port' netPeer.Port);  			}  			/* Not good' we got a response from somebody other then who we requested a response from */retry++;  			if (retry > retries) {  				throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  				// return null;  			}  		}  		else {  			MutableByte buf = new MutableByte (inbuffer' recv);  			return buf;  		}  	}  	else {  		retry++;  		if (retry > retries) {  			throw new SnmpException (SnmpException.RequestTimedOut' "Request has reached maximum retries.");  		}  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: try {  	_socket.SendTo (buffer' bufferLength' SocketFlags.None' (EndPoint)netPeer);  	recv = _socket.ReceiveFrom (inbuffer' ref remote);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		recv = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  	}  	else if (ex.ErrorCode == 10051) {  		throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  	}  	else if (ex.ErrorCode == 10054) {  		throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  	}  	else if (ex.ErrorCode == 10064) {  		throw new SnmpNetworkException (ex' "Network error: remote host is down.");  	}  	else if (ex.ErrorCode == 10065) {  		throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  	}  	else if (ex.ErrorCode == 10061) {  		throw new SnmpNetworkException (ex' "Network error: connection refused.");  	}  	else if (ex.ErrorCode == 10060) {  		recv = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	recv = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	throw new SnmpNetworkException (ex' "Network error: Destination network is down.");  }  else if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	throw new SnmpNetworkException (ex' "Network error: destination network is unreachable.");  }  else if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	throw new SnmpNetworkException (ex' "Network error: connection reset by peer.");  }  else if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	throw new SnmpNetworkException (ex' "Network error: remote host is down.");  }  else if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10065) {  	throw new SnmpNetworkException (ex' "Network error: remote host is unreachable.");  }  else if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10061) {  	throw new SnmpNetworkException (ex' "Network error: connection refused.");  }  else if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,Request,The following statement contains a magic number: if (ex.ErrorCode == 10060) {  	recv = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,RequestAsync,The following statement contains a magic number: _inBuffer = new byte[64 * 1024];  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,RequestAsync,The following statement contains a magic number: _inBuffer = new byte[64 * 1024];  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: try {  	inlen = _socket.EndReceiveFrom (ar' ref ep);  }  catch (SocketException ex) {  	if (ex.ErrorCode == 10040) {  		inlen = 0;  		// Packet too large  	}  	else if (ex.ErrorCode == 10050) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10051) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10054) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10064) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10065) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10061) {  		_busy = false;  		_requestState = null;  		_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  		return;  	}  	else if (ex.ErrorCode == 10060) {  		inlen = 0;  		// Connection attempt timed out. Fall through to retry  	}  	else {  		// Assume it is a timeout  	}  }  catch (ObjectDisposedException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (NullReferenceException ex) {  	ex.GetType ();  	// this is to avoid the compilation warning  	_asyncCallback (AsyncRequestResult.Terminated' null' null' -1);  	return;  }  catch (Exception ex) {  	ex.GetType ();  	// we don't care what exception happened. We only want to know if we should retry the request  	inlen = 0;  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10040) {  	inlen = 0;  	// Packet too large  }  else if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10050) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10051) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10054) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10064) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10065) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10061) {  	_busy = false;  	_requestState = null;  	_asyncCallback (AsyncRequestResult.SocketReceiveError' null' null' -1);  	return;  }  else if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
Magic Number,SnmpSharpNet,UdpTransport,C:\repos\griffina_SnmpSharpNet\UdpTransport.cs,ReceiveFromCallback,The following statement contains a magic number: if (ex.ErrorCode == 10060) {  	inlen = 0;  	// Connection attempt timed out. Fall through to retry  }  else {  	// Assume it is a timeout  }  
