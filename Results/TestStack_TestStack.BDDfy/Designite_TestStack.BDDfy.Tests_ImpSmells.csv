Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenStepsReturnTheirText,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenStepsReturnTheirText.cs,AssertStep,The method has 5 parameters. Parameters: step' stepTitle' order' asserts' shouldReport
Long Parameter List,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenTestClassFollowsGivenWhenThenNamingConvention,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenTestClassFollowsGivenWhenThenNamingConvention.cs,AssertStep,The method has 5 parameters. Parameters: step' stepTitle' order' asserts' shouldReport
Long Identifier,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcome,The length of the parameter testThatReportWorksWithNoStory is 30.
Long Identifier,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the parameter testThatReportWorksWithNoStory is 30.
Long Identifier,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,TypeWithAttribute,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenTestClassUsesExecutableAttributes.cs,,The length of the parameter MethodTextForWhenSomethingHappens is 33.
Long Statement,TestStack.BDDfy.Tests,UnusedExampleValueScenario,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\UnusedExampleValueScenario.cs,WhenExampleIsNotUsedItThrows,The length of the statement  "            ex.Message.ShouldBe("Example Column 'Example 1' is unused' all examples should be consumed by the test (have you misspelt a field or property?)\r\n\r\nIf this is not the case' raise an issue at https://github.com/TestStack/TestStack.BDDfy/issues."); " is 249.
Long Statement,TestStack.BDDfy.Tests.Processors,TestRunnerTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Processors\TestRunnerTests.cs,InitializesScenarioWithExampleBeforeRunning,The length of the statement  "            var steps = new List<Step> { new Step(action' new StepTitle("A Step")' true' ExecutionOrder.Initialize' true' new List<StepArgument>()) }; " is 138.
Long Statement,TestStack.BDDfy.Tests.Reporters.Diagnostics,DiagnosticsReportBuilderTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\DiagnosticsReportBuilderTests.cs,ShouldSerializeDiagnosticDataToSpecifiedFormat,The length of the statement  "            var testData = new ReportTestData().CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds(); " is 134.
Long Statement,TestStack.BDDfy.Tests.Reporters.Diagnostics,WhenBuildingReportDiagnostics,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\WhenBuildingReportDiagnostics.cs,AndGivenTwoStoriesEachWithTwoScenariosWithThreeStepsOfFiveMilliseconds,The length of the statement  "            _stories = new ReportTestData().CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds(); " is 130.
Long Statement,TestStack.BDDfy.Tests.Reporters.Html,HtmlReporterTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Html\HtmlReporterTests.cs,ShouldPrintErrorInReportIfProcessingFails,The length of the statement  "            _sut.Process(new ReportTestData().CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds()); " is 133.
Long Statement,TestStack.BDDfy.Tests.Reporters.Html,HtmlReporterTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Html\HtmlReporterTests.cs,ShouldLoadCustomStyleSheetIfOneExists,The length of the statement  "            _sut.Process(new ReportTestData().CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds()); " is 133.
Long Statement,TestStack.BDDfy.Tests.Reporters.Html,HtmlReporterTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Html\HtmlReporterTests.cs,ShouldNotLoadCustomStyleSheetIfNoneExist,The length of the statement  "            _sut.Process(new ReportTestData().CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds()); " is 133.
Long Statement,TestStack.BDDfy.Tests.Reporters.Html,HtmlReporterTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Html\HtmlReporterTests.cs,ShouldLoadCustomJavascriptIfOneExists,The length of the statement  "            _sut.Process(new ReportTestData().CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds()); " is 133.
Long Statement,TestStack.BDDfy.Tests.Reporters.Html,HtmlReporterTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Html\HtmlReporterTests.cs,ShouldNotLoadCustomJavascriptIfNoneExist,The length of the statement  "            _sut.Process(new ReportTestData().CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds()); " is 133.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds,The length of the statement  "            var storyMetadata1 = new StoryMetadata(typeof(RegularAccountHolderStory)' "As a person"' "I want ice cream"' "So that I can be happy"' "Happiness"); " is 148.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMilliseconds,The length of the statement  "            var storyMetadata2 = new StoryMetadata(typeof(GoldAccountHolderStory)' "As an account holder"' "I want to withdraw cash"' "So that I can get money when the bank is closed"' "Account holder withdraws cash"); " is 206.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcome,The length of the statement  "            var storyMetadata1 = new StoryMetadata(typeof(RegularAccountHolderStory)' "As a person"' "I want ice cream"' "So that I can be happy"' "Happiness"); " is 148.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcome,The length of the statement  "            var storyMetadata2 = new StoryMetadata(typeof(GoldAccountHolderStory)' "As an account holder"' "I want to withdraw cash"' "So that I can get money when the bank is closed"' "Account holder withdraws cash"); " is 206.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "            var storyMetadata1 = new StoryMetadata(typeof(RegularAccountHolderStory)' "As a person"' "I want ice cream"' "So that I can be happy"' "Happiness"); " is 148.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "            var storyMetadata2 = new StoryMetadata(typeof(GoldAccountHolderStory)' "As an unhappy examples story"' "I want to see failed steps"' "So that I can diagnose what's wrong"' "Unhappy examples"); " is 192.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "            var storyMetadata3 = new StoryMetadata(typeof(PlatinumAccountHolderStory)' "As a happy examples story"' "I want a clean report with examples"' "So that the report is clean and readable"' "Happy Examples"); " is 205.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(storyMetadata1' new Scenario(typeof(HappyPathScenario)' GetHappyExecutionSteps()' "Happy Path Scenario [for Happiness]"' new List<string>()))' " is 152.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(storyMetadata1' new Scenario(typeof(SadPathScenario)' GetFailingExecutionSteps()' "Sad Path Scenario [for Happiness]"' new List<string>()))' " is 150.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(storyMetadata1' new Scenario(typeof(SadPathScenario)' GetInconclusiveExecutionSteps()' "Inconclusive Scenario [for Happiness]"' new List<string>()))' " is 159.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(storyMetadata1' new Scenario(typeof(SadPathScenario)' GetNotImplementedExecutionSteps()' "Not Implemented Scenario [for Happiness]"' new List<string>()))' " is 164.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(testThatReportWorksWithNoStory' new Scenario(typeof(HappyPathScenario)' GetHappyExecutionSteps()' "Happy Path Scenario [with no story]"' new List<string>()))' " is 168.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(testThatReportWorksWithNoStory' new Scenario(typeof(SadPathScenario)' GetFailingExecutionSteps()' "Sad Path Scenario [with no story]"' new List<string>()))' " is 166.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(testThatReportWorksWithNoStory' new Scenario(typeof(SadPathScenario)' GetInconclusiveExecutionSteps()' "Inconclusive Scenario [with no story]"' new List<string>()))' " is 175.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateMixContainingEachTypeOfOutcomeWithOneScenarioPerStory,The length of the statement  "                new Story(testThatReportWorksWithNoStory' new Scenario(typeof(SadPathScenario)' GetNotImplementedExecutionSteps()' "Not Implemented Scenario [with no story]"' new List<string>()))' " is 180.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMillisecondsAndEachHasTwoExamples,The length of the statement  "            var storyMetadata1 = new StoryMetadata(typeof(RegularAccountHolderStory)' "As a person"' "I want ice cream"' "So that I can be happy"' "Happiness"); " is 148.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,CreateTwoStoriesEachWithOneFailingScenarioAndOnePassingScenarioWithThreeStepsOfFiveMillisecondsAndEachHasTwoExamples,The length of the statement  "            var storyMetadata2 = new StoryMetadata(typeof(GoldAccountHolderStory)' "As an account holder"' "I want to withdraw cash"' "So that I can get money when the bank is closed"' "Account holder withdraws cash"); " is 206.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetScenarios,The length of the statement  "                    new Scenario(exampleId' typeof(ExampleScenario)' GetExampleExecutionSteps()' "Example Scenario"' exampleTable.ElementAt(0)' new List<string>())' " is 144.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetScenarios,The length of the statement  "                    new Scenario(exampleId' typeof(ExampleScenario)' exampleExecutionSteps' "Example Scenario"' exampleTable.ElementAt(1)' new List<string>()) " is 138.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetOneOfEachScenarioResult,The length of the statement  "                new Scenario(typeof(SadPathScenario)' GetNotImplementedExecutionSteps()' "Not Implemented Scenario"' new List<string>()) " is 120.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetHappyExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Given a positive account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 195.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetHappyExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 201.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetHappyExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Then money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 186.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetExampleExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Given a <sign> account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 193.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetExampleExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 201.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetExampleExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Then money <action> dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 192.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetSadExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 195.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetSadExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 201.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetSadExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}' " is 189.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetFailingExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>())' " is 130.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetFailingExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>())' " is 136.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetFailingExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>())' " is 124.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetInconclusiveExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}' " is 171.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetInconclusiveExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}' " is 177.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetInconclusiveExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}' " is 165.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetNotImplementedExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}' " is 171.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetNotImplementedExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}' " is 177.
Long Statement,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetNotImplementedExecutionSteps,The length of the statement  "                new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}' " is 165.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPublicStaticPrimitivePropertyAsArguments,The length of the statement  "            this.Given(x => x.GivenPrimitiveInputs(SomeClassWithStaticMembers.StringProp' SomeClassWithStaticMembers.IntProp)' "Given inline input arguments {0} and {1}") " is 158.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPublicStaticPrimitivePropertyAsArguments,The length of the statement  "                .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(SomeClassWithStaticMembers.StringProp' SomeClassWithStaticMembers.IntProp)) " is 156.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsUsingVariables,The length of the statement  "            this.Given(x => x.GivenPrimitiveInputs(input1' input2)' "Given input arguments {0} and {1} are passed in using varialbles") " is 123.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullAsPrimitiveArgumentsUsingVariables,The length of the statement  "            this.Given(x => x.GivenPrimitiveInputs(input1' input2)' "Given input arguments {0} and {1} are passed in using varialbles") " is 123.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsUsingFields,The length of the statement  "            this.Given(x => x.GivenPrimitiveInputs(_primitiveInput1Field' _primitiveInput2Field)' "Given input arguments {0} and {1} are passed in using fields") " is 149.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsUsingProperties,The length of the statement  "            this.Given(x => x.GivenPrimitiveInputs(PrimitiveInput1Property' PrimitiveInput2Property)' "Given input arguments {0} and {1} are passed in using properties") " is 157.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullArrayArgumentInline,The length of the statement  "                    .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' null' "2" }' new[] { 1' 2 })) " is 123.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingVariables,The length of the statement  "            this.Given(x => x.GivenArrayInputs(input1' input2)' "Given array input arguments {0} and {1} are passed in using variables") " is 124.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullAsOneOfArrayArgumentUsingVariables,The length of the statement  "            this.Given(x => x.GivenArrayInputs(input1' input2)' "Given array input arguments {0} and {1} are passed in using variables") " is 124.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingFields,The length of the statement  "            this.Given(x => x.GivenArrayInputs(_arrayInput1Field' _arrayInput2Field)' "Given array input arguments {0} and {1} are passed in using fields") " is 143.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingProperties,The length of the statement  "            this.Given(x => x.GivenArrayInputs(ArrayInput1Property' ArrayInput2Property)' "Given array input arguments {0} and {1} are passed in using properties") " is 151.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,InputArgumentsProvidedUsingMethodCallDoesNotThrow,The length of the statement  "            Should.NotThrow(() => GetArgumentValues(x => x.MethodWithInputs(GetInput1(10)' GetInput2("Test"))' new ClassUnderTest())); " is 122.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,ArrayInputsArgumentsProvidedInline,The length of the statement  "            var arguments = GetArgumentValues(x => x.MethodWithArrayInputs(new[] { 1' 2 }' new[] { "3"' "4" })' new ClassUnderTest()); " is 122.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,ComplexArgument,The length of the statement  "            var arguments = GetArgumentValues(x => x.MethodWithInputs(container.Target' container.SubContainer.Target2)' new ClassUnderTest()); " is 131.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,ComplexArgumentMethodCall,The length of the statement  "            var arguments = GetArgumentValues(x => x.MethodWithInputs(container.Target' container.SubContainer.ToString())' new ClassUnderTest()); " is 134.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,ArrayInputArgumentsProvidedUsingInheritedProperty,The length of the statement  "            var arguments = GetArgumentValues(x => x.MethodWithArrayInputs(InheritedArrayInput1' InheritedArrayInput2)' new ClassUnderTest()); " is 130.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,StaticField,The length of the statement  "            Should.NotThrow(() => GetArgumentValues(x => x.MethodWithInputs(GetInput1(10)' GetInput2(string.Empty))' new ClassUnderTest())); " is 128.
Long Statement,TestStack.BDDfy.Tests.Scanner.FluentScanner,WhenStepsAreScannedUsingFluentScanner,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\WhenStepsAreScannedUsingFluentScanner.cs,WhenSomethingHappensTransitionStepIgnoringInputInStepTitle_IsAConsecutiveTransitionStep,The length of the statement  "            WhenSomethingHappensTransitionStepIgnoringInputInStepTitle.ExecutionOrder.ShouldBe(ExecutionOrder.ConsecutiveTransition); " is 121.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeScannerTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeScannerTests.cs,RunStepWithArgsTemplateOverrideAllOtherTemplates,The length of the statement  "            VerifyMethod("Running step with arg 1' 2 and 3 when template is provided by exec attribute and RunStepWithArgs attribute"); " is 123.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeScannerTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeScannerTests.cs,RunStepWithArgsTemplateOverrideAllOtherTemplatesThatUseTheConstructor,The length of the statement  "            VerifyMethod("Running step with arg 1' 2 and 3 when template is provided by exec attribute(string stepTitle) and RunStepWithArgs attribute"); " is 141.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenCombinationOfExecutableAttributeAndMethodNamingConventionIsUsed,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenCombinationOfExecutableAttributeAndMethodNamingConventionIsUsed.cs,ExecutableAttributesHaveHigherPriorityThanNamingConventions,The length of the statement  "            VerifyStepAndItsProperties(() => _sut.ThenThisMethodIsFoundAsAGivenStepNotThenStep()' ExecutionOrder.ConsecutiveSetupState); " is 124.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenCombinationOfExecutableAttributeAndMethodNamingConventionIsUsed,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenCombinationOfExecutableAttributeAndMethodNamingConventionIsUsed.cs,VerifyStepAndItsProperties,The length of the statement  "            var matchingSteps = _scenario.Steps.Where(s => s.Title.Trim() == Configurator.Scanners.Humanize(Helpers.GetMethodInfo(stepMethodAction).Name)); " is 143.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenCombinationOfExecutableAttributeAndMethodNamingConventionIsUsed,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenCombinationOfExecutableAttributeAndMethodNamingConventionIsUsed.cs,IgnoredMethodShouldNotBeAddedToSteps,The length of the statement  "            var matchingSteps = _scenario.Steps.Where(s => s.Title == Configurator.Scanners.Humanize(Helpers.GetMethodInfo(() => _sut.ThenIAmNotAStep()).Name)); " is 148.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenMethodNamesFollowNamingConventionsOtherThanGivenWhenThen,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenMethodNamesFollowNamingConventionsOtherThanGivenWhenThen.cs,AssertSpecificationStepIsScannedProperly,The length of the statement  "            var specMethods = _steps.Where(s => s.Title.Trim() == Configurator.Scanners.Humanize(Helpers.GetMethodInfo(getSpecMethod).Name)); " is 129.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenStepScannerFactoryAsyncMethods,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenStepScannerFactoryAsyncMethods.cs,InvokingAsyncTaskWhichThrowsIsObservedAndRethrown,The length of the statement  "            var methodInfo = typeof(WhenStepScannerFactoryAsyncMethods).GetMethod("AsyncVoidMethod"' BindingFlags.Instance | BindingFlags.NonPublic); " is 137.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenStepScannerFactoryAsyncMethods,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenStepScannerFactoryAsyncMethods.cs,InvokingAsyncVoidWhichThrowsIsObservedAndRethrown,The length of the statement  "            var methodInfo = typeof(WhenStepScannerFactoryAsyncMethods).GetMethod("AsyncTaskMethod"' BindingFlags.Instance | BindingFlags.NonPublic); " is 137.
Long Statement,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenTestClassFollowsGivenWhenThenNamingConvention,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenTestClassFollowsGivenWhenThenNamingConvention.cs,VerifyScannedSteps,The length of the statement  "            AssertStep(_steps[stepIndex++]' "But some other condition is not true either"' ExecutionOrder.ConsecutiveAssertion' true); " is 122.
Long Statement,TestStack.BDDfy.Tests.Stories,StoryClassAndScenarioClassAreTheSame,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Stories\StoryClassAndScenarioClassAreTheSame.cs,andTheNarrativeIsReturnedAsExpected,The length of the statement  "            var expectedNarrative = (StoryAttribute)typeof(StoryAsScenario).GetCustomAttributes(typeof(StoryAttribute)' false).First(); " is 123.
Long Statement,TestStack.BDDfy.Tests.Stories,StoryDouble,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Stories\StoryDouble.cs,ScanningAScenarioWithoutArgsFromAStoryClass,The length of the statement  "            var scanner = new DefaultScanner(TestContext.GetContext(testObject)' new ReflectiveScenarioScanner(new DefaultMethodNameStepScanner())' typeof(StoryDouble)); " is 157.
Empty Catch Block,TestStack.BDDfy.Tests.Disposer,DisposingScenarios,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Disposer\DisposingScenarios.cs,Execute,The method has an empty catch block.
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenOneSetOfArgumentsArePassedInProperly,The following statement contains a magic number: _givenInput2.ShouldBe(2);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenOneSetOfArgumentsArePassedInProperly,The following statement contains a magic number: _givenInput3.ShouldBe(3);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput1.Count.ShouldBe(2);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput1.ShouldContain(4);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput1.ShouldContain(7);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput2.Count.ShouldBe(2);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput2.ShouldContain(5);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput2.ShouldContain(8);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput3.Count.ShouldBe(2);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput3.ShouldContain(6);
Magic Number,TestStack.BDDfy.Tests.Arguments,ArgumentsProvidedForGiven,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\ArgumentsProvidedForGiven.cs,ThenSeveralSetsOfArgumentsArePassedInProperly,The following statement contains a magic number: _andGivenInput3.ShouldContain(9);
Magic Number,TestStack.BDDfy.Tests.Arguments,MultipleArgumentsProvidedForTheSameStep,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\MultipleArgumentsProvidedForTheSameStep.cs,ThenTheMethodIsCalledOncePerArgument,The following statement contains a magic number: _inputs.Count.ShouldBe(3);
Magic Number,TestStack.BDDfy.Tests.Arguments,MultipleArgumentsProvidedForTheSameStep,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\MultipleArgumentsProvidedForTheSameStep.cs,ThenTheMethodIsCalledOncePerArgument,The following statement contains a magic number: _inputs.ShouldContain(2);
Magic Number,TestStack.BDDfy.Tests.Arguments,MultipleArgumentsProvidedForTheSameStep,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Arguments\MultipleArgumentsProvidedForTheSameStep.cs,ThenTheMethodIsCalledOncePerArgument,The following statement contains a magic number: _inputs.ShouldContain(3);
Magic Number,TestStack.BDDfy.Tests.Concurrency,ParallelRunnerScenario,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Concurrency\ParallelRunnerScenario.cs,CanHandleMultipleThreadsExecutingBddfyConcurrently,The following statement contains a magic number: await Task.WhenAll(                  Enumerable.Range(0' 100)                      .Select(_ => Task.Run(() => new DummyScenario().BDDfy<ParallelRunnerScenario>())));
Magic Number,TestStack.BDDfy.Tests.Configuration,SequentialKeyGeneratorTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\SequentialKeyGeneratorTests.cs,ShouldIncrementScenarioIdForEachRequestForScenariId,The following statement contains a magic number: i <= 12
Magic Number,TestStack.BDDfy.Tests.Configuration,SequentialKeyGeneratorTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\SequentialKeyGeneratorTests.cs,ShouldIncrementStepIdForEachRequestForStepId,The following statement contains a magic number: i <= 12
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsSetToTrue,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps.Count.ShouldBe(4);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsSetToTrue,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[2].Result.ShouldBe(Result.Failed);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsSetToTrue,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[2].ExecutionOrder.ShouldBe(ExecutionOrder.Assertion);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsSetToTrue,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[3].Result.ShouldBe(Result.NotExecuted);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsSetToTrue,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[3].ExecutionOrder.ShouldBe(ExecutionOrder.ConsecutiveAssertion);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsLeftAsDefault,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps.Count.ShouldBe(4);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsLeftAsDefault,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[2].Result.ShouldBe(Result.Failed);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsLeftAsDefault,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[2].ExecutionOrder.ShouldBe(ExecutionOrder.Assertion);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsLeftAsDefault,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[3].Result.ShouldBe(Result.Passed);
Magic Number,TestStack.BDDfy.Tests.Configuration,When_StopExecutionOnFailingThen_IsLeftAsDefault,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Configuration\TestRunnerTests.cs,Verify,The following statement contains a magic number: steps[3].ExecutionOrder.ShouldBe(ExecutionOrder.ConsecutiveAssertion);
Magic Number,TestStack.BDDfy.Tests.Reporters.Diagnostics,WhenBuildingReportDiagnostics,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\WhenBuildingReportDiagnostics.cs,ThenTwoStoriesShouldBeReturned,The following statement contains a magic number: _result.Count.ShouldBe(2);
Magic Number,TestStack.BDDfy.Tests.Reporters.Diagnostics,WhenBuildingReportDiagnostics,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\WhenBuildingReportDiagnostics.cs,AndThenEachStoryShouldHaveDurationOf30Milliseconds,The following statement contains a magic number: _result.ToList().ForEach(story => story.Duration.ShouldBe(30));
Magic Number,TestStack.BDDfy.Tests.Reporters.Diagnostics,WhenBuildingReportDiagnostics,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\WhenBuildingReportDiagnostics.cs,AndThenEachScenarioShouldHaveDurationOf10Milliseconds,The following statement contains a magic number: _result[0].Scenarios.ForEach(scenario => scenario.Duration.ShouldBe(15));
Magic Number,TestStack.BDDfy.Tests.Reporters.Diagnostics,WhenBuildingReportDiagnostics,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\WhenBuildingReportDiagnostics.cs,AndThenEachScenarioShouldHaveDurationOf10Milliseconds,The following statement contains a magic number: _result[1].Scenarios.ForEach(scenario => scenario.Duration.ShouldBe(15));
Magic Number,TestStack.BDDfy.Tests.Reporters.Diagnostics,WhenBuildingReportDiagnostics,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\WhenBuildingReportDiagnostics.cs,AndThenEachStepShouldHaveDurationOf5Milliseconds,The following statement contains a magic number: _result[0].Scenarios.ForEach(scenario => scenario.Steps.ForEach(step => step.Duration.ShouldBe(5)));
Magic Number,TestStack.BDDfy.Tests.Reporters.Diagnostics,WhenBuildingReportDiagnostics,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\Diagnostics\WhenBuildingReportDiagnostics.cs,AndThenEachStepShouldHaveDurationOf5Milliseconds,The following statement contains a magic number: _result[1].Scenarios.ForEach(scenario => scenario.Steps.ForEach(step => step.Duration.ShouldBe(5)));
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportModelMapperTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportModelMapperTests.cs,story_should_map_to_report_story,The following statement contains a magic number: mapped.Count.ShouldBe(2);
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportModelMapperTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportModelMapperTests.cs,story_should_map_to_report_story,The following statement contains a magic number: i < 2
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportModelMapperTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportModelMapperTests.cs,story_metadata_should_map_to_report_story_metadata,The following statement contains a magic number: i < 2
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportModelMapperTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportModelMapperTests.cs,scenario_should_map_to_report_scenario,The following statement contains a magic number: i < 2
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportModelMapperTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportModelMapperTests.cs,step_should_map_to_report_step,The following statement contains a magic number: i < 2
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportModelMapperTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportModelMapperTests.cs,example_should_map_to_report_example,The following statement contains a magic number: i < 2
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetHappyExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a positive account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetHappyExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a positive account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetHappyExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a positive account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetExampleExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a <sign> account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then money <action> dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetExampleExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a <sign> account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then money <action> dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetExampleExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a <sign> account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then money <action> dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetSadExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetSadExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetSadExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)' Result = Result.Passed}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetInconclusiveExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetInconclusiveExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetInconclusiveExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetNotImplementedExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetNotImplementedExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'              };
Magic Number,TestStack.BDDfy.Tests.Reporters,ReportTestData,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Reporters\ReportTestData.cs,GetNotImplementedExecutionSteps,The following statement contains a magic number: var steps = new List<Step>              {                  new Step(null' new StepTitle("Given a negative account balance")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("When the account holder requests money")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'                  new Step(null' new StepTitle("Then no money is dispensed")' true' ExecutionOrder.Assertion' true' new List<StepArgument>()) {Duration = new TimeSpan(0' 0' 0' 0' 5)}'              };
Magic Number,TestStack.BDDfy.Tests.Scanner.Examples,ExampleValueTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\Examples\ExampleValueTests.cs,CanFormatAsStringTests,The following statement contains a magic number: new ExampleValue("Header"' new[] {1' 2}' () => 0).GetValueAsString().ShouldBe("1' 2");
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsInline,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs("1"' 2)' "Given inline input arguments {0} and {1}")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsInline,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs("1"' 2)' "Given inline input arguments {0} and {1}")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPublicStaticPrimitiveArguments,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs(string.Empty' 2)' "Given inline input arguments {0} and {1}")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(string.Empty' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPublicStaticPrimitiveArguments,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs(string.Empty' 2)' "Given inline input arguments {0} and {1}")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(string.Empty' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullPrimitiveArgumentInline,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs(null' 2)' "Given inline input arguments {0} and {1}")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(null' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullPrimitiveArgumentInline,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs(null' 2)' "Given inline input arguments {0} and {1}")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(null' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsUsingVariables,The following statement contains a magic number: var input2 = 2;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullAsPrimitiveArgumentsUsingVariables,The following statement contains a magic number: var input2 = 2;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsUsingFields,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs(_primitiveInput1Field' _primitiveInput2Field)' "Given input arguments {0} and {1} are passed in using fields")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingPrimitiveArgumentsUsingProperties,The following statement contains a magic number: this.Given(x => x.GivenPrimitiveInputs(PrimitiveInput1Property' PrimitiveInput2Property)' "Given input arguments {0} and {1} are passed in using properties")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(new[] { "1"' "2" }' new[] { 3' 4 })' "Given inline array input arguments")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(new[] { "1"' "2" }' new[] { 3' 4 })' "Given inline array input arguments")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(new[] { "1"' "2" }' new[] { 3' 4 })' "Given inline array input arguments")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(new[] { "1"' "2" }' new[] { 3' 4 })' "Given inline array input arguments")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullArrayArgumentInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(new[] {"1"' null' "2"}' new[] {1' 2})' "Given inline input arguments {0} and {1}")                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' null' "2" }' new[] { 1' 2 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullArrayArgumentInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(new[] {"1"' null' "2"}' new[] {1' 2})' "Given inline input arguments {0} and {1}")                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' null' "2" }' new[] { 1' 2 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullAsArrayArgumentInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(null' new[] {1' 2})' "Given inline input arguments {0} and {1}")                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(null' new[] { 1' 2 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullAsArrayArgumentInline,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(null' new[] {1' 2})' "Given inline input arguments {0} and {1}")                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(null' new[] { 1' 2 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingVariables,The following statement contains a magic number: var input2 = new[] {3' 4};
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingVariables,The following statement contains a magic number: var input2 = new[] {3' 4};
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullAsOneOfArrayArgumentUsingVariables,The following statement contains a magic number: var input2 = new[] {3' 4};
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingNullAsOneOfArrayArgumentUsingVariables,The following statement contains a magic number: var input2 = new[] {3' 4};
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingFields,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(_arrayInput1Field' _arrayInput2Field)' "Given array input arguments {0} and {1} are passed in using fields")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingFields,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(_arrayInput1Field' _arrayInput2Field)' "Given array input arguments {0} and {1} are passed in using fields")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingProperties,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(ArrayInput1Property' ArrayInput2Property)' "Given array input arguments {0} and {1} are passed in using properties")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,PassingArrayArgumentsUsingProperties,The following statement contains a magic number: this.Given(x => x.GivenArrayInputs(ArrayInput1Property' ArrayInput2Property)' "Given array input arguments {0} and {1} are passed in using properties")                  .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance(new[] { "1"' "2" }' new[] { 3' 4 }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,WhenTitleIsNotProvidedItIsFetchedFromMethodName,The following statement contains a magic number: var story =                   this.Given(x => x.GivenPrimitiveInputs("1"' 2))                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                      .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,WhenTitleIsNotProvidedItIsFetchedFromMethodName,The following statement contains a magic number: var story =                   this.Given(x => x.GivenPrimitiveInputs("1"' 2))                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                      .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,WhenTitleIsProvidedItIsUsedAsIs,The following statement contains a magic number: var story =                   this.Given(x => x.GivenPrimitiveInputs("1"' 2))                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                      .BDDfy(dummyTitle);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,BDDfyUsingFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\BDDfyUsingFluentApi.cs,WhenTitleIsProvidedItIsUsedAsIs,The following statement contains a magic number: var story =                   this.Given(x => x.GivenPrimitiveInputs("1"' 2))                      .Then(x => x.ThenTheArgumentsArePassedInProperlyAndStoredOnTheSameObjectInstance("1"' 2))                      .BDDfy(dummyTitle);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldBeAbleToChainComplexTestWithFluentApi,The following statement contains a magic number: this.Given(_ => count.ShouldBe(0))                  .When(() => count++.ShouldBe(0)' "When I do something")                  .Given(() => count++.ShouldBe(1)' "Given I am doing things in different order")                  .Then(() => count++.ShouldBe(2)' "Then they should run in defined order")                  .When(() => count++.ShouldBe(3)' "When I have whens after thens things still work")                  .And(() => count++.ShouldBe(4)' "And we should still be able to use ands")                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldBeAbleToChainComplexTestWithFluentApi,The following statement contains a magic number: this.Given(_ => count.ShouldBe(0))                  .When(() => count++.ShouldBe(0)' "When I do something")                  .Given(() => count++.ShouldBe(1)' "Given I am doing things in different order")                  .Then(() => count++.ShouldBe(2)' "Then they should run in defined order")                  .When(() => count++.ShouldBe(3)' "When I have whens after thens things still work")                  .And(() => count++.ShouldBe(4)' "And we should still be able to use ands")                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldBeAbleToChainComplexTestWithFluentApi,The following statement contains a magic number: this.Given(_ => count.ShouldBe(0))                  .When(() => count++.ShouldBe(0)' "When I do something")                  .Given(() => count++.ShouldBe(1)' "Given I am doing things in different order")                  .Then(() => count++.ShouldBe(2)' "Then they should run in defined order")                  .When(() => count++.ShouldBe(3)' "When I have whens after thens things still work")                  .And(() => count++.ShouldBe(4)' "And we should still be able to use ands")                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps.Count.ShouldBe(6);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[2].Result.ShouldBe(Result.Failed);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[2].ExecutionOrder.ShouldBe(ExecutionOrder.Assertion);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[3].Result.ShouldBe(Result.Passed);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[3].ExecutionOrder.ShouldBe(ExecutionOrder.ConsecutiveAssertion);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[4].Result.ShouldBe(Result.NotExecuted);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[4].ExecutionOrder.ShouldBe(ExecutionOrder.Transition);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[5].Result.ShouldBe(Result.NotExecuted);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ComplexStepsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ComplexStepsTests.cs,ShouldContinueExecutingThensButStopWhenNextNotAssertStepIsHit,The following statement contains a magic number: steps[5].ExecutionOrder.ShouldBe(ExecutionOrder.Assertion);
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,GetInput1,The following statement contains a magic number: return someInput + 10;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,InputArgumentsProvidedUsingMethodCallDoesNotThrow,The following statement contains a magic number: Should.NotThrow(() => GetArgumentValues(x => x.MethodWithInputs(GetInput1(10)' GetInput2("Test"))' new ClassUnderTest()));
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,ArrayInputsArgumentsProvidedInline,The following statement contains a magic number: var arguments = GetArgumentValues(x => x.MethodWithArrayInputs(new[] { 1' 2 }' new[] { "3"' "4" })' new ClassUnderTest());
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,ArrayInputsArgumentsProvidedInline,The following statement contains a magic number: AssertReturnedArguments(arguments' new[] { 1' 2 }' new[] { "3"' "4" });
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,ArrayInputArgumentsProvidedUsingVariables,The following statement contains a magic number: var input1 = new[] { 1' 2 };
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,MethodCallValue,The following statement contains a magic number: AssertReturnedArguments(arguments' new object[] { 3' "Foo" });
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,GetNumberThree,The following statement contains a magic number: return 3;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ExpressionExtensionsTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ExpressionExtensionsTests.cs,StaticField,The following statement contains a magic number: Should.NotThrow(() => GetArgumentValues(x => x.MethodWithInputs(GetInput1(10)' GetInput2(string.Empty))' new ClassUnderTest()));
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,InlineAssertions,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\InlineAssertions.cs,CanUseInlineAssertions,The following statement contains a magic number: this.Given(() => { _x = 0; _y = 2; }' "Given x equals 0")                  .When(() => { _z = _x*_y; }' "When x and y are multiplied")                  .Then(() => _z.ShouldBe(0)' "Then the result is 0")                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,InlineAssertions,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\InlineAssertions.cs,CanMixThemAllIn,The following statement contains a magic number: this.Given(() => { _x = 0; _y = 2; }' "Given x equals 0")                      .And("and y equals 0")                  .When(_ => WhenXAndYAreMultiplied())                      .And("and set to z")                  .Then(() => _z.ShouldBe(0)' "Then the result is 0")                      .And("and we're all cool")                  .BDDfy();
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ScenarioToBeScannedUsingFluentScanner,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ScenarioToBeScannedUsingFluentScanner.cs,GetSteps,The following statement contains a magic number: var fluentScanner = TestContext.GetContext(testObject                  .Given(s => s.GivenSomeState(1' 2))                      .And(s => s.WhenSomeStepUsesIncompatibleNamingConvention())                      .And(s => s.AndAMethodTakesArrayInputs(new[] {"1"' "2"}' new[] {3' 4}' 5))                      .And(s => s.AndSomeStateWithIncorrectAttribute())                  .When(s => s.WhenSomethingHappens("some input here"))                      .And(s => s.AndThenSomethingElseHappens()' "Overriding step name without arguments")                      .And(s => s.WhenSomethingHappens("other input")' "step used with {0} for the second time")                      .And(s => s.WhenSomethingHappens("other input")' false)                  .Then(s => s.ThenTheFollowingAssertionsShouldBeCorrect())                      .And(s => s.AndIncorrectAttributeWouldNotMatter())                      .And(s => s.ThenTitleFormatingWorksToo(InputDate)' InputDateStepTitleTemplate)                  .TearDownWith(s => s.Dispose())).FluentScanner;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ScenarioToBeScannedUsingFluentScanner,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ScenarioToBeScannedUsingFluentScanner.cs,GetSteps,The following statement contains a magic number: var fluentScanner = TestContext.GetContext(testObject                  .Given(s => s.GivenSomeState(1' 2))                      .And(s => s.WhenSomeStepUsesIncompatibleNamingConvention())                      .And(s => s.AndAMethodTakesArrayInputs(new[] {"1"' "2"}' new[] {3' 4}' 5))                      .And(s => s.AndSomeStateWithIncorrectAttribute())                  .When(s => s.WhenSomethingHappens("some input here"))                      .And(s => s.AndThenSomethingElseHappens()' "Overriding step name without arguments")                      .And(s => s.WhenSomethingHappens("other input")' "step used with {0} for the second time")                      .And(s => s.WhenSomethingHappens("other input")' false)                  .Then(s => s.ThenTheFollowingAssertionsShouldBeCorrect())                      .And(s => s.AndIncorrectAttributeWouldNotMatter())                      .And(s => s.ThenTitleFormatingWorksToo(InputDate)' InputDateStepTitleTemplate)                  .TearDownWith(s => s.Dispose())).FluentScanner;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ScenarioToBeScannedUsingFluentScanner,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ScenarioToBeScannedUsingFluentScanner.cs,GetSteps,The following statement contains a magic number: var fluentScanner = TestContext.GetContext(testObject                  .Given(s => s.GivenSomeState(1' 2))                      .And(s => s.WhenSomeStepUsesIncompatibleNamingConvention())                      .And(s => s.AndAMethodTakesArrayInputs(new[] {"1"' "2"}' new[] {3' 4}' 5))                      .And(s => s.AndSomeStateWithIncorrectAttribute())                  .When(s => s.WhenSomethingHappens("some input here"))                      .And(s => s.AndThenSomethingElseHappens()' "Overriding step name without arguments")                      .And(s => s.WhenSomethingHappens("other input")' "step used with {0} for the second time")                      .And(s => s.WhenSomethingHappens("other input")' false)                  .Then(s => s.ThenTheFollowingAssertionsShouldBeCorrect())                      .And(s => s.AndIncorrectAttributeWouldNotMatter())                      .And(s => s.ThenTitleFormatingWorksToo(InputDate)' InputDateStepTitleTemplate)                  .TearDownWith(s => s.Dispose())).FluentScanner;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,ScenarioToBeScannedUsingFluentScanner,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\ScenarioToBeScannedUsingFluentScanner.cs,GetSteps,The following statement contains a magic number: var fluentScanner = TestContext.GetContext(testObject                  .Given(s => s.GivenSomeState(1' 2))                      .And(s => s.WhenSomeStepUsesIncompatibleNamingConvention())                      .And(s => s.AndAMethodTakesArrayInputs(new[] {"1"' "2"}' new[] {3' 4}' 5))                      .And(s => s.AndSomeStateWithIncorrectAttribute())                  .When(s => s.WhenSomethingHappens("some input here"))                      .And(s => s.AndThenSomethingElseHappens()' "Overriding step name without arguments")                      .And(s => s.WhenSomethingHappens("other input")' "step used with {0} for the second time")                      .And(s => s.WhenSomethingHappens("other input")' false)                  .Then(s => s.ThenTheFollowingAssertionsShouldBeCorrect())                      .And(s => s.AndIncorrectAttributeWouldNotMatter())                      .And(s => s.ThenTitleFormatingWorksToo(InputDate)' InputDateStepTitleTemplate)                  .TearDownWith(s => s.Dispose())).FluentScanner;
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,StepTitleTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\StepTitleTests.cs,MethodCallInStepTitle,The following statement contains a magic number: story.Scenarios.Single().Steps.ElementAt(2).Title.ShouldBe("And different title");
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,StepTitleTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\StepTitleTests.cs,MethodCallInStepTitle,The following statement contains a magic number: story.Scenarios.Single().Steps.ElementAt(3).Title.ShouldBe("Then title has Mutated state");
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,StepTitleTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\StepTitleTests.cs,MethodCallInStepTitle,The following statement contains a magic number: story.Scenarios.Single().Steps.ElementAt(4).Title.ShouldBe("And with arg foo");
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,StepTitleTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\StepTitleTests.cs,MethodCallInStepTitle,The following statement contains a magic number: story.Scenarios.Single().Steps.ElementAt(5).Title.ShouldBe("And with arg");
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,StepTitleTests,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\StepTitleTests.cs,MethodCallInStepTitle,The following statement contains a magic number: story.Scenarios.Single().Steps.ElementAt(6).Title.ShouldBe("And with foo arg");
Magic Number,TestStack.BDDfy.Tests.Scanner.FluentScanner,WhenStepsAreScannedUsingFluentScanner,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\FluentScanner\WhenStepsAreScannedUsingFluentScanner.cs,IndicatedStepsAreReturned,The following statement contains a magic number: _steps.Count().ShouldBe(12);
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step2IsAndGivenNeg3,The following statement contains a magic number: _steps[2].Title.ShouldBe("And given neg 3");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step3IsAndGiven0,The following statement contains a magic number: _steps[3].Title.ShouldBe("And given 0");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step4AndGiven2,The following statement contains a magic number: _steps[4].Title.ShouldBe("And given 2");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step5AndGiven2Again,The following statement contains a magic number: _steps[5].Title.ShouldBe("And given 2 again");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step6IsWhen1,The following statement contains a magic number: _steps[6].Title.ShouldBe("When 1");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step7IsWhen3,The following statement contains a magic number: _steps[7].Title.ShouldBe("When 3");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step8IsAndWhenNeg3,The following statement contains a magic number: _steps[8].Title.ShouldBe("And when neg 3");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step9IsAndWhen0,The following statement contains a magic number: _steps[9].Title.ShouldBe("And when 0");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step10AndWhen2,The following statement contains a magic number: _steps[10].Title.ShouldBe("And when 2");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step11AndWhen2Again,The following statement contains a magic number: _steps[11].Title.ShouldBe("And when 2 again");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step12IsThen1,The following statement contains a magic number: _steps[12].Title.ShouldBe("Then 1");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step13IsThen3,The following statement contains a magic number: _steps[13].Title.ShouldBe("Then 3");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step14IsAndThenNeg3,The following statement contains a magic number: _steps[14].Title.ShouldBe("And then neg 3");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step15IsAndThen0,The following statement contains a magic number: _steps[15].Title.ShouldBe("And then 0");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step16AndThen2,The following statement contains a magic number: _steps[16].Title.ShouldBe("And then 2");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,ExecutableAttributeOrderOrdersTheStepsCorrectly,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\ExecutableAttributeOrderOrdersTheStepsCorrectly.cs,Step17AndThen2Again,The following statement contains a magic number: _steps[17].Title.ShouldBe("And then 2 again");
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenMethodNamesFollowNamingConventionsOtherThanGivenWhenThen,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenMethodNamesFollowNamingConventionsOtherThanGivenWhenThen.cs,TheStepsAreFoundUsingConventionInjection,The following statement contains a magic number: _steps.Count.ShouldBe(5);
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenStepsReturnTheirText,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenStepsReturnTheirText.cs,Test,The following statement contains a magic number: AssertStep(steps[2]' "Then some assertions"' ExecutionOrder.Assertion' true);
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenTestClassFollowsGivenWhenThenNamingConvention,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenTestClassFollowsGivenWhenThenNamingConvention.cs,VerifyScannedSteps,The following statement contains a magic number: _steps.Count.ShouldBe(24);
Magic Number,TestStack.BDDfy.Tests.Scanner.ReflectiveScanner,WhenTestClassUsesExecutableAttributes,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Scanner\ReflectiveScanner\WhenTestClassUsesExecutableAttributes.cs,DecoratedMethodsAreReturned,The following statement contains a magic number: _steps.Count.ShouldBe(11);
Missing Default,TestStack.BDDfy.Tests.Exceptions,ExceptionThrowingTest<T>,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\TestStack.BDDfy.Tests\Exceptions\ExceptionThrowingTest.cs,SetThrowingStep,The following switch statement is missing a default case: switch (methodToThrow)              {                  case ThrowingMethods.Given:                      _givenShouldThrow = true;                      break;                    case ThrowingMethods.When:                      _whenShouldThrow = true;                      break;                    case ThrowingMethods.Then:                      _thenShouldThrow = true;                      break;              }
