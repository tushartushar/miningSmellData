Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,TestStack.BDDfy.Samples,XunitTestAssemblyRunnerWithAssemblyFixture,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\AssemblySetupFixture.cs,XunitTestAssemblyRunnerWithAssemblyFixture,The method has 5 parameters. Parameters: testAssembly' testCases' diagnosticMessageSink' executionMessageSink' executionOptions
Long Parameter List,TestStack.BDDfy.Samples,XunitTestCollectionRunnerWithAssemblyFixture,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\AssemblySetupFixture.cs,XunitTestCollectionRunnerWithAssemblyFixture,The method has 8 parameters. Parameters: assemblyFixtureMappings' testCollection' testCases' diagnosticMessageSink' messageBus' testCaseOrderer' aggregator' cancellationTokenSource
Long Parameter List,TestStack.BDDfy.Samples.TicTacToe,TicTacToe,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\TicTacToe.cs,WinnerGame,The method has 5 parameters. Parameters: title' firstRow' secondRow' thirdRow' expectedWinner
Long Identifier,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,,The length of the parameter GivenTheAccountBalanceIsTitleTemplate is 37.
Long Identifier,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,,The length of the parameter AndTheMachineContainsEnoughMoneyTitleTemplate is 45.
Long Identifier,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,,The length of the parameter WhenTheAccountHolderRequestsTitleTemplate is 41.
Long Identifier,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,,The length of the parameter AndTheCardShouldBeReturnedTitleTemplate is 39.
Long Statement,TestStack.BDDfy.Samples,XunitTestCollectionRunnerWithAssemblyFixture,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\AssemblySetupFixture.cs,RunTestClassAsync,The length of the statement  "            return new XunitTestClassRunner(testClass' @class' testCases' diagnosticMessageSink' MessageBus' TestCaseOrderer' new ExceptionAggregator(Aggregator)' CancellationTokenSource' combinedFixtures).RunAsync(); " is 205.
Long Statement,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,CardHasBeenDisabled,The length of the statement  "                .Then(s => s.Then_Card_is_retained(true)' false) // in here I am telling the fluent API that I do not want it to include the input arguments in the step title " is 158.
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,BuyingTrainFareWithExamples,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\BuyingTrainFareWithExamples.cs,SuccessfulRailCardPurchases,The following statement contains a magic number: this.Given(_ => TheBuyerIsA(_buyerCategory))                  .And(_ => TheBuyerSelectsA(fare))                  .When(_ => TheBuyerPays())                  .Then(_ => ASaleOccursWithAnAmountOf(Price))                  .WithExamples(new ExampleTable(                      "Buyer Category"' "Fare"' "Price")                  {                      {BuyerCategory.Student' new MonthlyPass()' new Money(76)}'                      {BuyerCategory.Senior' new MonthlyPass()' new Money(98)}'                      {BuyerCategory.Standard' new MonthlyPass()' new Money(146)}'                      {BuyerCategory.Student' new WeeklyPass()' new Money(23)}'                      {BuyerCategory.Senior' new WeeklyPass()' new Money(30)}'                      {BuyerCategory.Standard' new WeeklyPass()' new Money(44)}'                      {BuyerCategory.Student' new DayPass()' new Money(4)}'                      {BuyerCategory.Senior' new DayPass()' new Money(5)}'                      {BuyerCategory.Standard' new DayPass()' new Money(7)}'                      {BuyerCategory.Student' new SingleTicket()' new Money(1.5m)}'                      {BuyerCategory.Senior' new SingleTicket()' new Money(2m)}'                      {BuyerCategory.Standard' new SingleTicket()' new Money(3m)}                  })                  .BDDfy("Successful rail card purchases");
Magic Number,TestStack.BDDfy.Samples,CanRunAsyncSteps,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\CanRunAsyncSteps.cs,CreateSut,The following statement contains a magic number: await Task.Delay(500);
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithFluentApi.cs,RunExamplesWithFluentApi,The following statement contains a magic number: this.Given("Given there are <start> cucumbers")                      .And(_ => _.AndIStealTwoMore())                  .When(_ => _.WhenIEat__eat__Cucumbers())                  .Then(_ => _.ThenIShouldHave__left__Cucumbers())                  .WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 9}'                      {20' 5' 17}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithFluentApi.cs,RunExamplesWithFluentApi,The following statement contains a magic number: this.Given("Given there are <start> cucumbers")                      .And(_ => _.AndIStealTwoMore())                  .When(_ => _.WhenIEat__eat__Cucumbers())                  .Then(_ => _.ThenIShouldHave__left__Cucumbers())                  .WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 9}'                      {20' 5' 17}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithFluentApi.cs,RunExamplesWithFluentApi,The following statement contains a magic number: this.Given("Given there are <start> cucumbers")                      .And(_ => _.AndIStealTwoMore())                  .When(_ => _.WhenIEat__eat__Cucumbers())                  .Then(_ => _.ThenIShouldHave__left__Cucumbers())                  .WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 9}'                      {20' 5' 17}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithFluentApi.cs,RunExamplesWithFluentApi,The following statement contains a magic number: this.Given("Given there are <start> cucumbers")                      .And(_ => _.AndIStealTwoMore())                  .When(_ => _.WhenIEat__eat__Cucumbers())                  .Then(_ => _.ThenIShouldHave__left__Cucumbers())                  .WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 9}'                      {20' 5' 17}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithFluentApi.cs,RunExamplesWithFluentApi,The following statement contains a magic number: this.Given("Given there are <start> cucumbers")                      .And(_ => _.AndIStealTwoMore())                  .When(_ => _.WhenIEat__eat__Cucumbers())                  .Then(_ => _.ThenIShouldHave__left__Cucumbers())                  .WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 9}'                      {20' 5' 17}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithFluentApi.cs,RunExamplesWithFluentApi,The following statement contains a magic number: this.Given("Given there are <start> cucumbers")                      .And(_ => _.AndIStealTwoMore())                  .When(_ => _.WhenIEat__eat__Cucumbers())                  .Then(_ => _.ThenIShouldHave__left__Cucumbers())                  .WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 9}'                      {20' 5' 17}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithFluentApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithFluentApi.cs,AndIStealTwoMore,The following statement contains a magic number: Start += 2;
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithReflectiveApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithReflectiveApi.cs,CanRunExamplesWithReflectiveApi,The following statement contains a magic number: this.WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 7}'                      {20' 5' 15}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithReflectiveApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithReflectiveApi.cs,CanRunExamplesWithReflectiveApi,The following statement contains a magic number: this.WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 7}'                      {20' 5' 15}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithReflectiveApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithReflectiveApi.cs,CanRunExamplesWithReflectiveApi,The following statement contains a magic number: this.WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 7}'                      {20' 5' 15}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithReflectiveApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithReflectiveApi.cs,CanRunExamplesWithReflectiveApi,The following statement contains a magic number: this.WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 7}'                      {20' 5' 15}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithReflectiveApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithReflectiveApi.cs,CanRunExamplesWithReflectiveApi,The following statement contains a magic number: this.WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 7}'                      {20' 5' 15}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples,UseExamplesWithReflectiveApi,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\UseExamplesWithReflectiveApi.cs,CanRunExamplesWithReflectiveApi,The following statement contains a magic number: this.WithExamples(new ExampleTable("Start"' "Eat"' "Left")                  {                      {12' 5' 7}'                      {20' 5' 15}                  })                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHasInsufficientFund,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHasInsufficientFund.cs,GivenTheAccountBalanceIs10,The following statement contains a magic number: _card = new Card(true' 10);
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHasInsufficientFund,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHasInsufficientFund.cs,AndGivenTheMachineContainsEnoughMoney,The following statement contains a magic number: _atm = new Atm(100);
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHasInsufficientFund,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHasInsufficientFund.cs,WhenTheAccountHolderRequests20,The following statement contains a magic number: _atm.RequestMoney(_card' 20);
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHasInsufficientFund,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHasInsufficientFund.cs,AndTheAccountBalanceShouldBe20,The following statement contains a magic number: _card.AccountBalance.ShouldBe(10);
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,Given_the_Card_is_disabled,The following statement contains a magic number: _card = new Card(false' 100);
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,Given_the_Card_is_disabled,The following statement contains a magic number: _atm = new Atm(100);
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,AccountHasSufficientFund,The following statement contains a magic number: this.Given(s => s.Given_the_Account_Balance_is(100)' GivenTheAccountBalanceIsTitleTemplate)                      .And(s => s.And_the_Card_is_valid())                      .And(s => s.And_the_machine_contains(100)' AndTheMachineContainsEnoughMoneyTitleTemplate)                  .When(s => s.When_the_Account_Holder_requests(20)' WhenTheAccountHolderRequestsTitleTemplate)                  .Then(s => s.The_ATM_should_dispense(20)' "Then the ATM should dispense $20")                      .And(s => s.And_the_Account_Balance_should_be(80)' "And the account balance should be $80")                      .And(s => s.Then_Card_is_retained(false)' AndTheCardShouldBeReturnedTitleTemplate)                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,AccountHasSufficientFund,The following statement contains a magic number: this.Given(s => s.Given_the_Account_Balance_is(100)' GivenTheAccountBalanceIsTitleTemplate)                      .And(s => s.And_the_Card_is_valid())                      .And(s => s.And_the_machine_contains(100)' AndTheMachineContainsEnoughMoneyTitleTemplate)                  .When(s => s.When_the_Account_Holder_requests(20)' WhenTheAccountHolderRequestsTitleTemplate)                  .Then(s => s.The_ATM_should_dispense(20)' "Then the ATM should dispense $20")                      .And(s => s.And_the_Account_Balance_should_be(80)' "And the account balance should be $80")                      .And(s => s.Then_Card_is_retained(false)' AndTheCardShouldBeReturnedTitleTemplate)                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,AccountHasSufficientFund,The following statement contains a magic number: this.Given(s => s.Given_the_Account_Balance_is(100)' GivenTheAccountBalanceIsTitleTemplate)                      .And(s => s.And_the_Card_is_valid())                      .And(s => s.And_the_machine_contains(100)' AndTheMachineContainsEnoughMoneyTitleTemplate)                  .When(s => s.When_the_Account_Holder_requests(20)' WhenTheAccountHolderRequestsTitleTemplate)                  .Then(s => s.The_ATM_should_dispense(20)' "Then the ATM should dispense $20")                      .And(s => s.And_the_Account_Balance_should_be(80)' "And the account balance should be $80")                      .And(s => s.Then_Card_is_retained(false)' AndTheCardShouldBeReturnedTitleTemplate)                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,AccountHasSufficientFund,The following statement contains a magic number: this.Given(s => s.Given_the_Account_Balance_is(100)' GivenTheAccountBalanceIsTitleTemplate)                      .And(s => s.And_the_Card_is_valid())                      .And(s => s.And_the_machine_contains(100)' AndTheMachineContainsEnoughMoneyTitleTemplate)                  .When(s => s.When_the_Account_Holder_requests(20)' WhenTheAccountHolderRequestsTitleTemplate)                  .Then(s => s.The_ATM_should_dispense(20)' "Then the ATM should dispense $20")                      .And(s => s.And_the_Account_Balance_should_be(80)' "And the account balance should be $80")                      .And(s => s.Then_Card_is_retained(false)' AndTheCardShouldBeReturnedTitleTemplate)                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,AccountHasSufficientFund,The following statement contains a magic number: this.Given(s => s.Given_the_Account_Balance_is(100)' GivenTheAccountBalanceIsTitleTemplate)                      .And(s => s.And_the_Card_is_valid())                      .And(s => s.And_the_machine_contains(100)' AndTheMachineContainsEnoughMoneyTitleTemplate)                  .When(s => s.When_the_Account_Holder_requests(20)' WhenTheAccountHolderRequestsTitleTemplate)                  .Then(s => s.The_ATM_should_dispense(20)' "Then the ATM should dispense $20")                      .And(s => s.And_the_Account_Balance_should_be(80)' "And the account balance should be $80")                      .And(s => s.Then_Card_is_retained(false)' AndTheCardShouldBeReturnedTitleTemplate)                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.Atm,AccountHolderWithdrawsCash,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\Atm\AccountHolderWithdrawsCash.cs,CardHasBeenDisabled,The following statement contains a magic number: this.Given(s => s.Given_the_Card_is_disabled())                  .When(s => s.When_the_Account_Holder_requests(20))                  .Then(s => s.Then_Card_is_retained(true)' false) // in here I am telling the fluent API that I do not want it to include the input arguments in the step title                      .And(s => s.And_the_ATM_should_say_the_Card_has_been_retained())                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.TicTacToe,Game,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\Game.cs,Game,The following statement contains a magic number: _board = new string[3][];
Magic Number,TestStack.BDDfy.Samples.TicTacToe,Game,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\Game.cs,Game,The following statement contains a magic number: _board[2] = (string[])thirdRow.Clone();
Magic Number,TestStack.BDDfy.Samples.TicTacToe,Game,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\Game.cs,PlayAt,The following statement contains a magic number: emptyCellsCount % 2 == 0
Magic Number,TestStack.BDDfy.Samples.TicTacToe,Game,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\Game.cs,Equals,The following statement contains a magic number: i < 3
Magic Number,TestStack.BDDfy.Samples.TicTacToe,TicTacToe,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\TicTacToe.cs,WhenXAndOPlayTheirFirstMoves,The following statement contains a magic number: this.Given(s => s.GivenANewGame())                  .When(s => s.WhenTheGameIsPlayedAt(new Cell(0' 0)' new Cell(2' 2))' "When X and O play on {0}")                  .Then(s => s.ThenTheBoardStateShouldBe(new[] { X' N' N }' new[] { N' N' N }' new[] { N' N' O }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.TicTacToe,TicTacToe,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\TicTacToe.cs,WhenXAndOPlayTheirFirstMoves,The following statement contains a magic number: this.Given(s => s.GivenANewGame())                  .When(s => s.WhenTheGameIsPlayedAt(new Cell(0' 0)' new Cell(2' 2))' "When X and O play on {0}")                  .Then(s => s.ThenTheBoardStateShouldBe(new[] { X' N' N }' new[] { N' N' N }' new[] { N' N' O }))                  .BDDfy();
Magic Number,TestStack.BDDfy.Samples.TicTacToe,TicTacToe,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\TicTacToe.cs,OWins,The following statement contains a magic number: var cell = new Cell(2' 0);
Magic Number,TestStack.BDDfy.Samples.TicTacToe,XWins,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\XWins.cs,WhenXPlaysInTheBottomRight,The following statement contains a magic number: Game.PlayAt(2' 2);
Magic Number,TestStack.BDDfy.Samples.TicTacToe,XWins,D:\research\architectureSmells\repos1\TestStack_TestStack.BDDfy\src\Samples\TestStack.BDDfy.Samples\TicTacToe\XWins.cs,WhenXPlaysInTheBottomRight,The following statement contains a magic number: Game.PlayAt(2' 2);
