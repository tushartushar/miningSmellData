Implementation smell,Namespace,Class,File,Method,Description
Long Method,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,ConfluenceConverter,The method has 108 lines of code.
Complex Method,Croc.Tools.ConfluenceConverter,ConfluenceParser,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,Croc.Tools.ConfluenceConverter,ConfluenceReader,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,Read,Cyclomatic complexity of the method is 33
Complex Method,Croc.Tools.ConfluenceConverter,ConfluenceReader,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,initPage,Cyclomatic complexity of the method is 17
Complex Method,Croc.Tools.ConfluenceConverter,Program,C:\repos\CrocInc_wiki2markdown\Program.cs,Main,Cyclomatic complexity of the method is 14
Long Parameter List,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,ConfluenceConverter,The method has 14 parameters.
Long Parameter List,Croc.Tools.ConfluenceConverter,ConfluenceReader,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,initHierrachy,The method has 6 parameters.
Long Parameter List,Croc.Tools.ConfluenceConverter,ConfluenceReader,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,ExtractAttachments,The method has 5 parameters.
Long Statement,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,ToMarkdown,The length of the statement  "	if (String.IsNullOrWhiteSpace (markdown.Trim ()) || markdown.IndexOf ("{children}"' StringComparison.InvariantCultureIgnoreCase) > -1) { " is 136.
Long Statement,Croc.Tools.ConfluenceConverter,LinkResolver,C:\repos\CrocInc_wiki2markdown\Converter\LinkResolver.cs,Resolve,The length of the statement  "	//	wiki-global+anchor: [Core#Section 1] or [see also|Core#Section 1] -> page "Core" + heading "Section 1" in the same space " is 123.
Long Statement,Croc.Tools.ConfluenceConverter,LinkResolver,C:\repos\CrocInc_wiki2markdown\Converter\LinkResolver.cs,Resolve,The length of the statement  "		// TODO: if link referes to a page with not-English title: http://wiki.rnd.croc.ru/pages/viewpage.action?pageId=31424726 " is 120.
Magic Number,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,ConfluenceConverter,The following statement contains a magic number: m_steps = new List<Transform> {  	// Paragraphs  	new Transform ("Paragraph"' new Regex (@"\s\\\\\s"' RegexOptions.Multiline)' Environment.NewLine + Environment.NewLine)'  	// Horizontal Rules  	new Transform ("Horizontal Rule"' new Regex ("^----+$")' "---")'  	// Lists  	new Transform ("OrderedList"' new Regex (@"^[#]+[ \t]"' RegexOptions.Multiline)' "1. ")'  	// TODO: 2nd level and so on  	// if we add "-" as item symbol then it'll catch horizontal rule "---" :(  	new Transform ("UnorderedList"' new Regex (@"^([*+-]+)[ \t]"' RegexOptions.Multiline)' match =>  {  		string term = match.Groups [1].Value;  		var builder = new StringBuilder ();  		for (int i = 0; i < term.Length - 1; i++) {  			builder.Append ("  ");  		}  		builder.Append ("* ");  		return builder.ToString ();  	})'  	// Headings  	// TODO: streamline cases with missed headings like "h3. sec1 // h6. sec6"  	new Transform ("Headings"' new Regex (@"h([\d]+).\s")' match =>  {  		string level = match.Groups [1].Value;  		int nLevel;  		if (Int32.TryParse (level' out nLevel)) {  			var builder = new StringBuilder ();  			for (int i = 0; i < nLevel; i++) {  				builder.Append ("#");  			}  			if (builder.Length > 0) {  				builder.Append (" ");  				return builder.ToString ();  			}  		}  		return match.Value;  	})'  	// Character styles  	new Transform ("Character styles"' new Regex (@"\s\*([^*\s]+?)\*\s")' match =>  {  		string term = match.Groups [1].Value;  		return " **" + term + "** ";  	})'  	// TODO: italic (_text_)' strikethrough (-text-)' underlined (+text+)' superscript (^text^)' subscript (~text~)  	// TODO: проблемы с обработкой имен файлов' e.g. "!ajax_screenshot_1.png!"  	//markup = s_reItalic.Replace(markup' match =>  	//{  	//	string term = match.Groups[1].Value;  	//	return "*" + term + "*";  	//});  	// inline code  	new Transform ("Inline code"' new Regex (@"\{\{([^}]+)\}\}")' match =>  {  		string term = match.Groups [1].Value;  		return "`" + term + "`";  	})'  	// links  	new Transform ("Link"' new Regex (@"\[(([^|\]]+?)\|)?([^\]]+?)\]")' match =>  {  		string link = match.Groups [3].Value;  		string alias = match.Groups [2].Value;  		if (string.IsNullOrEmpty (alias) && link.StartsWith ("http")) {  			// it's just a link  			return link;  		}  		string href = link;  		if (!link.StartsWith ("http")) {  			href = linkResolver.Resolve (link);  		}  		if (string.IsNullOrEmpty (alias)) {  			alias = link;  		}  		return "[" + alias + "](" + href + ")";  	})'  	// TODO: blocks inside table!  	// note/warning/info/tip blocks  	new Transform ("note"' new Regex (@"\{note\}\s*([.\s\S]*?)\s*\{note\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("warning"' new Regex (@"\{warning\}\s*([.\s\S]*?)\s*\{warning\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("info"' new Regex (@"\{info\}\s*([.\s\S]*?)\s*\{info\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("tip"' new Regex (@"\{tip\}\s*([.\s\S]*?)\s*\{tip\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("quote"' new Regex (@"\{quote\}\s*([.\s\S]*?)\s*\{quote\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	// {anchor:anchorname}  	new Transform ("{anchor}"' new Regex (@"\{anchor:([^\}]+?)\}")' match =>  {  		string name = match.Groups [1].Value;  		return "<a id='" + name + "'></a>";  	})'  	new Transform ("{color}"' new Regex (@"\{color:([^\}]+?)\}(.+?)\{color\}")' match =>  {  		string color = match.Groups [1].Value;  		string text = wiki2Markdown (match.Groups [2].Value);  		return string.Format ("<span style='color: {0}'>{1}</span>"' color' text);  	})  };  
Magic Number,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,ConfluenceConverter,The following statement contains a magic number: m_steps = new List<Transform> {  	// Paragraphs  	new Transform ("Paragraph"' new Regex (@"\s\\\\\s"' RegexOptions.Multiline)' Environment.NewLine + Environment.NewLine)'  	// Horizontal Rules  	new Transform ("Horizontal Rule"' new Regex ("^----+$")' "---")'  	// Lists  	new Transform ("OrderedList"' new Regex (@"^[#]+[ \t]"' RegexOptions.Multiline)' "1. ")'  	// TODO: 2nd level and so on  	// if we add "-" as item symbol then it'll catch horizontal rule "---" :(  	new Transform ("UnorderedList"' new Regex (@"^([*+-]+)[ \t]"' RegexOptions.Multiline)' match =>  {  		string term = match.Groups [1].Value;  		var builder = new StringBuilder ();  		for (int i = 0; i < term.Length - 1; i++) {  			builder.Append ("  ");  		}  		builder.Append ("* ");  		return builder.ToString ();  	})'  	// Headings  	// TODO: streamline cases with missed headings like "h3. sec1 // h6. sec6"  	new Transform ("Headings"' new Regex (@"h([\d]+).\s")' match =>  {  		string level = match.Groups [1].Value;  		int nLevel;  		if (Int32.TryParse (level' out nLevel)) {  			var builder = new StringBuilder ();  			for (int i = 0; i < nLevel; i++) {  				builder.Append ("#");  			}  			if (builder.Length > 0) {  				builder.Append (" ");  				return builder.ToString ();  			}  		}  		return match.Value;  	})'  	// Character styles  	new Transform ("Character styles"' new Regex (@"\s\*([^*\s]+?)\*\s")' match =>  {  		string term = match.Groups [1].Value;  		return " **" + term + "** ";  	})'  	// TODO: italic (_text_)' strikethrough (-text-)' underlined (+text+)' superscript (^text^)' subscript (~text~)  	// TODO: проблемы с обработкой имен файлов' e.g. "!ajax_screenshot_1.png!"  	//markup = s_reItalic.Replace(markup' match =>  	//{  	//	string term = match.Groups[1].Value;  	//	return "*" + term + "*";  	//});  	// inline code  	new Transform ("Inline code"' new Regex (@"\{\{([^}]+)\}\}")' match =>  {  		string term = match.Groups [1].Value;  		return "`" + term + "`";  	})'  	// links  	new Transform ("Link"' new Regex (@"\[(([^|\]]+?)\|)?([^\]]+?)\]")' match =>  {  		string link = match.Groups [3].Value;  		string alias = match.Groups [2].Value;  		if (string.IsNullOrEmpty (alias) && link.StartsWith ("http")) {  			// it's just a link  			return link;  		}  		string href = link;  		if (!link.StartsWith ("http")) {  			href = linkResolver.Resolve (link);  		}  		if (string.IsNullOrEmpty (alias)) {  			alias = link;  		}  		return "[" + alias + "](" + href + ")";  	})'  	// TODO: blocks inside table!  	// note/warning/info/tip blocks  	new Transform ("note"' new Regex (@"\{note\}\s*([.\s\S]*?)\s*\{note\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("warning"' new Regex (@"\{warning\}\s*([.\s\S]*?)\s*\{warning\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("info"' new Regex (@"\{info\}\s*([.\s\S]*?)\s*\{info\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("tip"' new Regex (@"\{tip\}\s*([.\s\S]*?)\s*\{tip\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("quote"' new Regex (@"\{quote\}\s*([.\s\S]*?)\s*\{quote\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	// {anchor:anchorname}  	new Transform ("{anchor}"' new Regex (@"\{anchor:([^\}]+?)\}")' match =>  {  		string name = match.Groups [1].Value;  		return "<a id='" + name + "'></a>";  	})'  	new Transform ("{color}"' new Regex (@"\{color:([^\}]+?)\}(.+?)\{color\}")' match =>  {  		string color = match.Groups [1].Value;  		string text = wiki2Markdown (match.Groups [2].Value);  		return string.Format ("<span style='color: {0}'>{1}</span>"' color' text);  	})  };  
Magic Number,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,ConfluenceConverter,The following statement contains a magic number: m_steps = new List<Transform> {  	// Paragraphs  	new Transform ("Paragraph"' new Regex (@"\s\\\\\s"' RegexOptions.Multiline)' Environment.NewLine + Environment.NewLine)'  	// Horizontal Rules  	new Transform ("Horizontal Rule"' new Regex ("^----+$")' "---")'  	// Lists  	new Transform ("OrderedList"' new Regex (@"^[#]+[ \t]"' RegexOptions.Multiline)' "1. ")'  	// TODO: 2nd level and so on  	// if we add "-" as item symbol then it'll catch horizontal rule "---" :(  	new Transform ("UnorderedList"' new Regex (@"^([*+-]+)[ \t]"' RegexOptions.Multiline)' match =>  {  		string term = match.Groups [1].Value;  		var builder = new StringBuilder ();  		for (int i = 0; i < term.Length - 1; i++) {  			builder.Append ("  ");  		}  		builder.Append ("* ");  		return builder.ToString ();  	})'  	// Headings  	// TODO: streamline cases with missed headings like "h3. sec1 // h6. sec6"  	new Transform ("Headings"' new Regex (@"h([\d]+).\s")' match =>  {  		string level = match.Groups [1].Value;  		int nLevel;  		if (Int32.TryParse (level' out nLevel)) {  			var builder = new StringBuilder ();  			for (int i = 0; i < nLevel; i++) {  				builder.Append ("#");  			}  			if (builder.Length > 0) {  				builder.Append (" ");  				return builder.ToString ();  			}  		}  		return match.Value;  	})'  	// Character styles  	new Transform ("Character styles"' new Regex (@"\s\*([^*\s]+?)\*\s")' match =>  {  		string term = match.Groups [1].Value;  		return " **" + term + "** ";  	})'  	// TODO: italic (_text_)' strikethrough (-text-)' underlined (+text+)' superscript (^text^)' subscript (~text~)  	// TODO: проблемы с обработкой имен файлов' e.g. "!ajax_screenshot_1.png!"  	//markup = s_reItalic.Replace(markup' match =>  	//{  	//	string term = match.Groups[1].Value;  	//	return "*" + term + "*";  	//});  	// inline code  	new Transform ("Inline code"' new Regex (@"\{\{([^}]+)\}\}")' match =>  {  		string term = match.Groups [1].Value;  		return "`" + term + "`";  	})'  	// links  	new Transform ("Link"' new Regex (@"\[(([^|\]]+?)\|)?([^\]]+?)\]")' match =>  {  		string link = match.Groups [3].Value;  		string alias = match.Groups [2].Value;  		if (string.IsNullOrEmpty (alias) && link.StartsWith ("http")) {  			// it's just a link  			return link;  		}  		string href = link;  		if (!link.StartsWith ("http")) {  			href = linkResolver.Resolve (link);  		}  		if (string.IsNullOrEmpty (alias)) {  			alias = link;  		}  		return "[" + alias + "](" + href + ")";  	})'  	// TODO: blocks inside table!  	// note/warning/info/tip blocks  	new Transform ("note"' new Regex (@"\{note\}\s*([.\s\S]*?)\s*\{note\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("warning"' new Regex (@"\{warning\}\s*([.\s\S]*?)\s*\{warning\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("info"' new Regex (@"\{info\}\s*([.\s\S]*?)\s*\{info\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("tip"' new Regex (@"\{tip\}\s*([.\s\S]*?)\s*\{tip\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	new Transform ("quote"' new Regex (@"\{quote\}\s*([.\s\S]*?)\s*\{quote\}")' match =>  {  		string content = match.Groups [1].Value;  		return Environment.NewLine + "> " + content + Environment.NewLine;  	})'  	// {anchor:anchorname}  	new Transform ("{anchor}"' new Regex (@"\{anchor:([^\}]+?)\}")' match =>  {  		string name = match.Groups [1].Value;  		return "<a id='" + name + "'></a>";  	})'  	new Transform ("{color}"' new Regex (@"\{color:([^\}]+?)\}(.+?)\{color\}")' match =>  {  		string color = match.Groups [1].Value;  		string text = wiki2Markdown (match.Groups [2].Value);  		return string.Format ("<span style='color: {0}'>{1}</span>"' color' text);  	})  };  
Magic Number,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,wiki2Markdown,The following statement contains a magic number: markup = s_reCode.Replace (markup' match =>  {  	string code = match.Groups [3].Value;  	string lang = match.Groups [2].Value;  	var builder = new StringBuilder ();  	builder.AppendLine ();  	builder.Append ("```");  	if (!String.IsNullOrWhiteSpace (lang)) {  		builder.Append (lang);  	}  	builder.AppendLine ();  	builder.Append (code);  	builder.AppendLine ();  	builder.Append ("```");  	var tokenId = "%" + Guid.NewGuid ().ToString ("N") + "%";  	blocks [tokenId] = builder.ToString ();  	return tokenId;  });  
Magic Number,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,wiki2Markdown,The following statement contains a magic number: markup = s_reCode.Replace (markup' match =>  {  	string code = match.Groups [3].Value;  	string lang = match.Groups [2].Value;  	var builder = new StringBuilder ();  	builder.AppendLine ();  	builder.Append ("```");  	if (!String.IsNullOrWhiteSpace (lang)) {  		builder.Append (lang);  	}  	builder.AppendLine ();  	builder.Append (code);  	builder.AppendLine ();  	builder.Append ("```");  	var tokenId = "%" + Guid.NewGuid ().ToString ("N") + "%";  	blocks [tokenId] = builder.ToString ();  	return tokenId;  });  
Magic Number,Croc.Tools.ConfluenceConverter,ConfluenceConverter,C:\repos\CrocInc_wiki2markdown\Converter\ConfluenceConverter.cs,convertTables,The following statement contains a magic number: markup = reTableHeader.Replace (markup' match =>  {  	var columns = match.Groups [2].Captures.Cast<Capture> ().Select (cap => cap.Value).ToList ();  	//string headerRow = String.Join(" | "' columns) + Environment.NewLine;  	var builder = new StringBuilder (Environment.NewLine);  	builder.Append ("| ");  	builder.Append (String.Join (" | "' columns));  	builder.AppendLine (" |");  	for (int i = 0; i < columns.Count; i++) {  		builder.Append ("|");  		builder.AppendFormat ("-");  	}  	builder.Append (" |");  	//return match.Value;  	return builder.ToString ();  });  
Magic Number,Croc.Tools.ConfluenceConverter,Program,C:\repos\CrocInc_wiki2markdown\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	terminate ();  }  
Magic Number,Croc.Tools.ConfluenceConverter,Program,C:\repos\CrocInc_wiki2markdown\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	var arg = args [i];  	if (arg.StartsWith ("-")) {  		// options:  		if (arg.StartsWith ("-ext:")) {  			options.Extension = arg.Substring (5);  		}  		if (arg.StartsWith ("-handlebars")) {  			options.HandlebarsComplience = true;  		}  		if (arg.StartsWith ("-attachments:")) {  			options.AttachmentsDir = "attachments";  		}  		if (arg.StartsWith ("-noprint")) {  			options.Print = false;  		}  		if (arg.StartsWith ("-frontmeta:")) {  			string frontMetaTemplateFile = arg.Substring ("-frontmeta:".Length);  			if (!File.Exists (frontMetaTemplateFile)) {  				terminate ("Front-meta template does not exists: " + frontMetaTemplateFile);  			}  			options.FrontMetaTemplate = File.ReadAllText (frontMetaTemplateFile);  		}  		if (arg.StartsWith ("-slugify")) {  			options.Slugify = true;  		}  		// Sections: Base'Core'Getting Started' Application'UI-UX'AppServices'Server'DevTools  	}  }  
Magic Number,Croc.Tools.ConfluenceConverter,Program,C:\repos\CrocInc_wiki2markdown\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("-")) {  	// options:  	if (arg.StartsWith ("-ext:")) {  		options.Extension = arg.Substring (5);  	}  	if (arg.StartsWith ("-handlebars")) {  		options.HandlebarsComplience = true;  	}  	if (arg.StartsWith ("-attachments:")) {  		options.AttachmentsDir = "attachments";  	}  	if (arg.StartsWith ("-noprint")) {  		options.Print = false;  	}  	if (arg.StartsWith ("-frontmeta:")) {  		string frontMetaTemplateFile = arg.Substring ("-frontmeta:".Length);  		if (!File.Exists (frontMetaTemplateFile)) {  			terminate ("Front-meta template does not exists: " + frontMetaTemplateFile);  		}  		options.FrontMetaTemplate = File.ReadAllText (frontMetaTemplateFile);  	}  	if (arg.StartsWith ("-slugify")) {  		options.Slugify = true;  	}  	// Sections: Base'Core'Getting Started' Application'UI-UX'AppServices'Server'DevTools  }  
Magic Number,Croc.Tools.ConfluenceConverter,Program,C:\repos\CrocInc_wiki2markdown\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("-ext:")) {  	options.Extension = arg.Substring (5);  }  
Magic Number,Croc.Tools.ConfluenceConverter,Program,C:\repos\CrocInc_wiki2markdown\Program.cs,Main,The following statement contains a magic number: options.Extension = arg.Substring (5);  
Missing Default,Croc.Tools.ConfluenceConverter,TemplatePageProcessor,C:\repos\CrocInc_wiki2markdown\Converter\TemplatePageProcessor.cs,Process,The following switch statement is missing a default case: switch (term.ToLowerInvariant ()) {  case "id":  	return page.Id;  case "title":  	return page.Title;  case "name":  	return page.Name;  case "section":  	return page.Section;  case "parent":  case "parent.name":  	return page.Parent != null ? page.Parent.Name : "";  case "parent.title":  	return page.Parent != null ? page.Parent.Title : "";  case "position":  	return page.Position.ToString (CultureInfo.InvariantCulture);  case "children":  	var children = String.Join (Environment.NewLine' page.Children.Select (p => "  - " + p.Name));  	return !string.IsNullOrWhiteSpace (children) ? Environment.NewLine + children : String.Empty;  case "tags":  case "labels":  	string tags = String.Join (Environment.NewLine' page.Labels.Select (l => "  - " + l));  	return !string.IsNullOrWhiteSpace (tags) ? Environment.NewLine + tags : String.Empty;  case "isroot":  	return (page.Parent == null || page.Parent.Parent == null) ? "true" : "false";  }  
Missing Default,Croc.Tools.ConfluenceConverter,ConfluenceReader,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,Read,The following switch statement is missing a default case: switch (wikiObj.Class) {  case WikiObjectClass.Page:  	if (wikiObj.Attributes.ContainsKey ("originalVersion"))  		continue;  	Page page = new Page ();  	page.Id = wikiObj.Id;  	pagesById [page.Id] = page;  	break;  }  
Missing Default,Croc.Tools.ConfluenceConverter,ConfluenceReader,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,Read,The following switch statement is missing a default case: switch (wikiObj.Class) {  case WikiObjectClass.Page:  	if (pagesById.TryGetValue (wikiObj.Id' out page)) {  		initPage (page' wikiObj' space' pagesById);  	}  	break;  case WikiObjectClass.Attachment:  	if (wikiObj.Attributes.TryGetValue ("content"' out pageId)) {  		if (pagesById.TryGetValue (pageId' out page)) {  			if (wikiObj.Attributes.ContainsKey ("originalVersion"))  				continue;  			var attach = new Attachment ();  			page.Attachments.Add (attach);  			attach.Id = wikiObj.Id;  			attach.Page = page;  			attach.FileName = wikiObj.GetAttributeValue ("fileName");  			attach.ContentType = wikiObj.GetAttributeValue ("contentType");  			attach.Version = wikiObj.GetAttributeValue ("attachmentVersion");  		}  	}  	break;  case WikiObjectClass.BodyContent:  	if (wikiObj.Attributes.TryGetValue ("content"' out pageId)) {  		if (pagesById.TryGetValue (pageId' out page)) {  			page.ContentWiki = wikiObj.Attributes ["body"];  		}  	}  	break;  case WikiObjectClass.Space:  	// name:string  	// key:string  	// description:Ref-SpaceDescription  	// homePage:Ref-Page  	// permissions  	break;  case WikiObjectClass.Labelling:  	// label -> Label.Id  	// content -> Page.Id  	if (wikiObj.Attributes.TryGetValue ("content"' out pageId)) {  		if (pagesById.TryGetValue (pageId' out page)) {  			page.AddLabelRef (wikiObj.GetAttributeValue ("label"));  		}  	}  	break;  case WikiObjectClass.Label:  	labels [wikiObj.Id] = wikiObj.GetAttributeValue ("name");  	break;  }  
Missing Default,Croc.Tools.ConfluenceConverter,ConfluenceReader,C:\repos\CrocInc_wiki2markdown\Reader\ConfluenceReader.cs,initPage,The following switch statement is missing a default case: switch (propName) {  case "title":  	page.Title = propValue;  	page.Name = page.Title.Replace (" "' "-");  	page.Name = page.Name.Replace ("."' "_");  	page.Name = page.Name.ToLowerInvariant ();  	break;  case "parent":  	Page page1;  	if (pagesById.TryGetValue (propValue' out page1)) {  		page.Parent = page1;  		page1.Children.Add (page);  	}  	break;  case "position":  	int position;  	if (Int32.TryParse (propValue ?? "0"' out position)) {  		page.Position = position;  	}  	break;  //case "bodyContents":  //case "originalVersion":  // originalVersion  // contentStatus==current  // version  // historicalVersions  // creatorName  // creationDate  }  
