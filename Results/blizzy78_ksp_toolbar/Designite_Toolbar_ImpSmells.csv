Implementation smell,Namespace,Class,File,Method,Description
Long Method,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,toggleDropdownMenu,The method has 102 lines of code.
Complex Method,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,Cyclomatic complexity of the method is 9
Complex Method,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,Cyclomatic complexity of the method is 9
Complex Method,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,drawDrawables,Cyclomatic complexity of the method is 10
Complex Method,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,update,Cyclomatic complexity of the method is 11
Long Parameter List,Toolbar,ConfirmDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\ConfirmDialog.cs,ConfirmDialog,The method has 6 parameters. Parameters: title' text' onOk' onCancel' okText' cancelText
Long Parameter List,Toolbar,ConfirmDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\ConfirmDialog.cs,confirm,The method has 5 parameters. Parameters: title' text' onOk' okText' cancelText
Long Parameter List,Toolbar,Draggable,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\Draggable.cs,Draggable,The method has 6 parameters. Parameters: initialPosition' clampOverscan' handleAreaCheck' cursorTexturePath' cursorHotSpotX' cursorHotSpotY
Long Identifier,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,The length of the parameter buttonPositionCalculatedHandler is 31.
Long Identifier,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,,The length of the parameter autoHideUnimportantButtonAlpha is 30.
Long Statement,Toolbar,Separator,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\Separator.cs,drawMenuOption,The length of the statement  "			GUILayout.Label(string.Empty' Style' GUILayout.Height(1)' GUILayout.MinHeight(1)' GUILayout.MaxHeight(1)' GUILayout.ExpandWidth(true)); " is 135.
Long Statement,Toolbar,AbstractWindow,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\AbstractWindow.cs,draw,The length of the statement  "			Rect = GUILayout.Window(id' AutoClampToScreen ? Rect.clampToScreen() : Rect' windowId => drawContentsInternal()' Title' GUIStyle' GUILayoutOptions); " is 148.
Long Statement,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,drawContents,The length of the statement  "				GUILayout.Label("Note: Plugins may still decide to hide buttons from any game scene even if those buttons are active here."); " is 125.
Long Statement,Toolbar,InstallChecker,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\InstallChecker.cs,Start,The length of the statement  "					.Select(a => Uri.UnescapeDataString(rootUri.MakeRelativeUri(new Uri(a.path)).ToString().Replace('/'' Path.DirectorySeparatorChar))); " is 132.
Long Statement,Toolbar,Command,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Command.cs,checkId,The length of the statement  "			if (id.Contains('.') || id.Contains(' ') || id.Contains('/') || id.Contains(':') || id.Contains(''') || id.Contains(';')) { " is 123.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,The length of the statement  "				if (Enabled && rectLocked && (buttonOrderLocked || (draggedButton == null)) && (dropdownMenu == null) && (displayMode == DisplayMode.VISIBLE)) { " is 144.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,autoPositionFolder,The length of the statement  "			AutoPositionResult result = autoPositionAgainstParent(new Vector2(rect.width' rect.height)' parentToolbar.rect.Rect' parentToolbar.SingleColumn' preferredPosition); " is 164.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,handleAutoHide,The length of the statement  "						slideInOrOutCurve.add(SLIDE_INTERVAL' new Vector2(AtLeftScreenEdge ? -PADDING : (Screen.width - rect.width + PADDING)' rect.y)); " is 128.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,handleAutoHide,The length of the statement  "						slideInOrOutCurve.add(SLIDE_INTERVAL' new Vector2(rect.x' AtTopScreenEdge ? -PADDING : (Screen.height - rect.height + PADDING))); " is 129.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,handleAutoHide,The length of the statement  "						slideInOrOutCurve.add(SLIDE_INTERVAL' new Vector2(AtLeftScreenEdge ? (-rect.width + PADDING) : (Screen.width - PADDING)' rect.y)); " is 130.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,handleAutoHide,The length of the statement  "						slideInOrOutCurve.add(SLIDE_INTERVAL' new Vector2(rect.x' AtTopScreenEdge ? (-rect.height + PADDING) : (Screen.height - PADDING))); " is 131.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,getMinHeightForButtons,The length of the statement  "			if ((mode == Mode.FOLDER) && (buttons.Count((b) => !b.Equals(dropdownMenuButton) && isEffectivelyUserVisible(b)) == 0)) { " is 121.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,The length of the statement  "					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2(x + 2' (lineHeight - dropdownMenuButton.Size.y) / 2 + PADDING)); " is 128.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,The length of the statement  "					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2((widestLineWidth - dropdownMenuButton.Size.x) / 2 + PADDING' y + lineHeight + BUTTON_SPACING + 2)); " is 163.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,drawButtons,The length of the statement  "				Rect buttonRect = button.Equals(draggedButton) ? draggedButtonRect : new Rect(rect.x + pos.x' rect.y + pos.y' button.Size.x' button.Size.y); " is 140.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,handleMouseHover,The length of the statement  "			} else if ((mouseHoverButton != null) && (currentMouseHoverButton != null) && !currentMouseHoverButton.Equals(mouseHoverButton)) { " is 130.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,drawDrawables,The length of the statement  "						RelativePosition preferredPosition = haveLastChildPosition ? lastChildPosition[button.command.FullId] : RelativePosition.DEFAULT; " is 129.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,update,The length of the statement  "				if ((Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2)) && !dropdownMenu.contains(Utils.getMousePosition())) { " is 150.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,add,The length of the statement  "			string folderId = savedFolderSettings.Where(kv => kv.Value.buttons.Contains(buttonId)).Select(kv => kv.Key).SingleOrDefault(); " is 126.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,loadSettings,The length of the statement  "			savedButtonOrder = toolbarNode.get("buttonOrder"' string.Empty).Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries).ToList(); " is 138.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,loadSettings,The length of the statement  "			savedVisibleButtons = new HashSet<string>(toolbarNode.get("visibleButtons"' string.Empty).Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries)); " is 156.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,toggleDropdownMenu,The length of the statement  "				dropdownMenu = new PopupMenu(new Vector2(rect.x + PADDING + getPosition(dropdownMenuButton).x' rect.y + rect.height + BUTTON_SPACING)); " is 135.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,toggleDropdownMenu,The length of the statement  "				Button toggleRectLockButton = Button.createMenuOption(rectLocked ? "Unlock Position and Size" : "Lock Position and Size"); " is 122.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,toggleDropdownMenu,The length of the statement  "				Button toggleButtonOrderLockButton = Button.createMenuOption(buttonOrderLocked ? "Unlock Button Order" : "Lock Button Order"); " is 126.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,toggleDropdownMenu,The length of the statement  "				Button toggleAutoHideButton = Button.createMenuOption(autoHide ? "Deactivate Auto-Hide at Screen Edge" : "Activate Auto-Hide at Screen Edge"); " is 142.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The length of the statement  "					draggedButton = buttons.SingleOrDefault(b => getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Equals(dragRect.Rect)); " is 134.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The length of the statement  "						b => !b.Equals(draggedButton) && !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos)); " is 152.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The length of the statement  "							} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) { " is 124.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The length of the statement  "							bool leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos); " is 141.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The length of the statement  "						} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) { " is 124.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The length of the statement  "						leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos); " is 136.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,createFolder,The length of the statement  "				createFolder("folder_" + new System.Random().Next(int.MaxValue)' folderSettingsDialog.TexturePath' folderSettingsDialog.ToolTip' true); " is 135.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,editFolder,The length of the statement  "			FolderSettingsDialog folderSettingsDialog = new FolderSettingsDialog(folderSettings.texturePath' folderSettings.toolTip); " is 121.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,createFolder,The length of the statement  "			RelativePosition relativePosition = lastChildPosition.ContainsKey(id) ? lastChildPosition[id] : RelativePosition.DEFAULT; " is 121.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,createFolder,The length of the statement  "						openFolderButtonDropdownMenu(newFolder' getPosition(folderButton) + new Vector2(rect.x + PADDING' rect.y + PADDING + folderButton.Size.y + BUTTON_SPACING)); " is 156.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,deleteFolder,The length of the statement  "			ConfirmDialog.confirm("Delete Folder"' "Delete this folder? Buttons inside the folder will be moved to the main toolbar."' " is 122.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,grabCursor,The length of the statement  "					b => !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos)); " is 124.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,grabCursor,The length of the statement  "					Cursor.SetCursor(GameDatabase.Instance.GetTexture("000_Toolbar/move-cursor"' false)' new Vector2(10' 10)' CursorMode.ForceSoftware); " is 132.
Long Statement,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,updateVisibleButtons,The length of the statement  "			foreach (Button button in new List<Button>(buttons.Where(b => !b.Equals(dropdownMenuButton) && !folderButtons.ContainsKey(b)))) { " is 129.
Complex Conditional,Toolbar,Command,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Command.cs,checkId,The conditional expression  "id.Contains('.') || id.Contains(' ') || id.Contains('/') || id.Contains(':') || id.Contains(''') || id.Contains(';')"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,The conditional expression  "Visible &&  				((mode == Mode.FOLDER) || buttons.Any((b) => !b.Equals(dropdownMenuButton) && isEffectivelyUserVisible(b)))"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,The conditional expression  "autoHide && (dropdownMenu == null) && AtScreenEdge && !buttons.Any(b => b.command.Drawable != null)"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,The conditional expression  "Enabled && rectLocked && buttonOrderLocked && (displayMode == DisplayMode.VISIBLE)"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,The conditional expression  "Enabled && rectLocked && (buttonOrderLocked || (draggedButton == null)) && (dropdownMenu == null) && (displayMode == DisplayMode.VISIBLE)"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,autoPositionAgainstParent,The conditional expression  "!canUseLeft && !canUseRight && !canUseAbove && !canUseBelow"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,autoPositionAgainstParent,The conditional expression  "!canUseLeft && !canUseRight && !canUseAbove && !canUseBelow"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,autoPositionAgainstParent,The conditional expression  "((preferredPosition == RelativePosition.ABOVE) && canUseAbove) ||  				((preferredPosition == RelativePosition.BELOW) && canUseBelow) ||  				((preferredPosition == RelativePosition.LEFT) && canUseLeft) ||  				((preferredPosition == RelativePosition.RIGHT) && canUseRight)"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,handleAutoHide,The conditional expression  "rect.contains(Utils.getMousePosition()) ||  				buttons.Any(b => b.command.Important && isEffectivelyUserVisible(b)) ||  				folders.Values.Any(f => f.Visible) ||  				(visibleButtonsSelector != null)"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,drawToolbarBorder,The conditional expression  "showBorder || !rectLocked || !buttonOrderLocked || (displayMode == DisplayMode.HIDDEN) ||  				((mode == Mode.FOLDER) && !buttons.Any(b => isEffectivelyUserVisible(b)))"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,drawButtons,The conditional expression  "shouldHide && (displayMode != DisplayMode.HIDDEN) &&  						!button.command.Important &&  						(button.command.Drawable == null) &&  						(!folderButtons.ContainsKey(button) || !folderButtons[button].Visible) &&  						(dropdownMenu == null)"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,update,The conditional expression  "Enabled && rectLocked && buttonOrderLocked && (displayMode == DisplayMode.VISIBLE)"  is complex.
Complex Conditional,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,update,The conditional expression  "(Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2)) && !dropdownMenu.contains(Utils.getMousePosition())"  is complex.
Magic Number,Toolbar,IconPickerDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\IconPickerDialog.cs,IconPickerDialog,The following statement contains a magic number: Rect = new Rect(400' 400' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * BUTTONS_PER_ROW + 40' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * ROWS);
Magic Number,Toolbar,IconPickerDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\IconPickerDialog.cs,IconPickerDialog,The following statement contains a magic number: Rect = new Rect(400' 400' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * BUTTONS_PER_ROW + 40' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * ROWS);
Magic Number,Toolbar,IconPickerDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\IconPickerDialog.cs,IconPickerDialog,The following statement contains a magic number: Rect = new Rect(400' 400' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * BUTTONS_PER_ROW + 40' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * ROWS);
Magic Number,Toolbar,IconPickerDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\IconPickerDialog.cs,IconPickerDialog,The following statement contains a magic number: Rect = new Rect(400' 400' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * BUTTONS_PER_ROW + 40' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * ROWS);
Magic Number,Toolbar,IconPickerDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\IconPickerDialog.cs,IconPickerDialog,The following statement contains a magic number: Rect = new Rect(400' 400' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * BUTTONS_PER_ROW + 40' (maxSize.x + BUTTON_TRIM * 2 + BUTTON_MARGIN) * ROWS);
Magic Number,Toolbar,IconPickerDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\IconPickerDialog.cs,drawContents,The following statement contains a magic number: GUILayout.Space(15);
Magic Number,Toolbar,Button,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Button.cs,drawToolTip,The following statement contains a magic number: if (!destroyed) {  				if (showTooltip && (command.ToolTip != null) && (command.ToolTip.Trim().Length > 0)) {  					Vector2 mousePos = Utils.getMousePosition();  					Vector2 size = TooltipStyle.CalcSize(new GUIContent(command.ToolTip));  					Rect rect = new Rect(mousePos.x' mousePos.y + 20' size.x' size.y);  					float origY = rect.y;  					rect = rect.clampToScreen();  					// clamping moved the tooltip up -> reposition above mouse cursor  					if (rect.y < origY) {  						rect.y = mousePos.y - size.y - 5;  						rect = rect.clampToScreen();  					}    					int oldDepth = GUI.depth;  					GUI.depth = -1000;  					GUILayout.BeginArea(rect);  					GUILayout.Label(command.ToolTip' TooltipStyle);  					GUILayout.EndArea();  					GUI.depth = oldDepth;  				}  			}
Magic Number,Toolbar,Button,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Button.cs,drawToolTip,The following statement contains a magic number: if (!destroyed) {  				if (showTooltip && (command.ToolTip != null) && (command.ToolTip.Trim().Length > 0)) {  					Vector2 mousePos = Utils.getMousePosition();  					Vector2 size = TooltipStyle.CalcSize(new GUIContent(command.ToolTip));  					Rect rect = new Rect(mousePos.x' mousePos.y + 20' size.x' size.y);  					float origY = rect.y;  					rect = rect.clampToScreen();  					// clamping moved the tooltip up -> reposition above mouse cursor  					if (rect.y < origY) {  						rect.y = mousePos.y - size.y - 5;  						rect = rect.clampToScreen();  					}    					int oldDepth = GUI.depth;  					GUI.depth = -1000;  					GUILayout.BeginArea(rect);  					GUILayout.Label(command.ToolTip' TooltipStyle);  					GUILayout.EndArea();  					GUI.depth = oldDepth;  				}  			}
Magic Number,Toolbar,Button,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Button.cs,drawToolTip,The following statement contains a magic number: if (!destroyed) {  				if (showTooltip && (command.ToolTip != null) && (command.ToolTip.Trim().Length > 0)) {  					Vector2 mousePos = Utils.getMousePosition();  					Vector2 size = TooltipStyle.CalcSize(new GUIContent(command.ToolTip));  					Rect rect = new Rect(mousePos.x' mousePos.y + 20' size.x' size.y);  					float origY = rect.y;  					rect = rect.clampToScreen();  					// clamping moved the tooltip up -> reposition above mouse cursor  					if (rect.y < origY) {  						rect.y = mousePos.y - size.y - 5;  						rect = rect.clampToScreen();  					}    					int oldDepth = GUI.depth;  					GUI.depth = -1000;  					GUILayout.BeginArea(rect);  					GUILayout.Label(command.ToolTip' TooltipStyle);  					GUILayout.EndArea();  					GUI.depth = oldDepth;  				}  			}
Magic Number,Toolbar,CommandCreationCounter,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\CommandCreationCounter.cs,check,The following statement contains a magic number: List<string> badIds = new List<string>(firstCreation.Keys.Where(  				id => (creationCounts[id] >= 100) && ((now - firstCreation[id]) <= 10000)));
Magic Number,Toolbar,CommandCreationCounter,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\CommandCreationCounter.cs,check,The following statement contains a magic number: List<string> badIds = new List<string>(firstCreation.Keys.Where(  				id => (creationCounts[id] >= 100) && ((now - firstCreation[id]) <= 10000)));
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,VisibleButtonsSelector,The following statement contains a magic number: Rect = new Rect(300' 300' 0' 0);
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,VisibleButtonsSelector,The following statement contains a magic number: Rect = new Rect(300' 300' 0' 0);
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,drawContents,The following statement contains a magic number: GUILayout.Space(5);
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,drawContents,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView(scrollPos'  					GUILayout.Width(Mathf.Max(Screen.width / 4' 350))' GUILayout.Height(Mathf.Max(Screen.height / 3' 350)));
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,drawContents,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView(scrollPos'  					GUILayout.Width(Mathf.Max(Screen.width / 4' 350))' GUILayout.Height(Mathf.Max(Screen.height / 3' 350)));
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,drawContents,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView(scrollPos'  					GUILayout.Width(Mathf.Max(Screen.width / 4' 350))' GUILayout.Height(Mathf.Max(Screen.height / 3' 350)));
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,drawContents,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView(scrollPos'  					GUILayout.Width(Mathf.Max(Screen.width / 4' 350))' GUILayout.Height(Mathf.Max(Screen.height / 3' 350)));
Magic Number,Toolbar,VisibleButtonsSelector,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\VisibleButtonsSelector.cs,drawContents,The following statement contains a magic number: GUILayout.Space(15);
Magic Number,Toolbar,ConfirmDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\ConfirmDialog.cs,ConfirmDialog,The following statement contains a magic number: Rect = new Rect(300' 300' Screen.width / 4' 0);
Magic Number,Toolbar,ConfirmDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\ConfirmDialog.cs,ConfirmDialog,The following statement contains a magic number: Rect = new Rect(300' 300' Screen.width / 4' 0);
Magic Number,Toolbar,ConfirmDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\ConfirmDialog.cs,ConfirmDialog,The following statement contains a magic number: Rect = new Rect(300' 300' Screen.width / 4' 0);
Magic Number,Toolbar,ConfirmDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\ConfirmDialog.cs,drawContents,The following statement contains a magic number: GUILayout.Space(15);
Magic Number,Toolbar,Draggable,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\Draggable.cs,getNewRect,The following statement contains a magic number: return new Rect(mousePos.x - rect.width / 2' mousePos.y - rect.height / 2' rect.width' rect.height);
Magic Number,Toolbar,Draggable,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\GUI\Draggable.cs,getNewRect,The following statement contains a magic number: return new Rect(mousePos.x - rect.width / 2' mousePos.y - rect.height / 2' rect.width' rect.height);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,getSeconds,The following statement contains a magic number: return date.Ticks / 10000;
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsAltimeter,The following statement contains a magic number: Rect altimeterRect = new Rect((Screen.width - 245) / 2' 0' 245' 66);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsAltimeter,The following statement contains a magic number: Rect altimeterRect = new Rect((Screen.width - 245) / 2' 0' 245' 66);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsAltimeter,The following statement contains a magic number: Rect altimeterRect = new Rect((Screen.width - 245) / 2' 0' 245' 66);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsAltimeter,The following statement contains a magic number: Rect altimeterRect = new Rect((Screen.width - 245) / 2' 0' 245' 66);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallUpperRect = new Rect((Screen.width - 175) / 2' Screen.height - 151 - 38' 175' 38);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallUpperRect = new Rect((Screen.width - 175) / 2' Screen.height - 151 - 38' 175' 38);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallUpperRect = new Rect((Screen.width - 175) / 2' Screen.height - 151 - 38' 175' 38);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallUpperRect = new Rect((Screen.width - 175) / 2' Screen.height - 151 - 38' 175' 38);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallUpperRect = new Rect((Screen.width - 175) / 2' Screen.height - 151 - 38' 175' 38);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallUpperRect = new Rect((Screen.width - 175) / 2' Screen.height - 151 - 38' 175' 38);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallLowerRect = new Rect((Screen.width - 215) / 2' Screen.height - 151' 215' 151);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallLowerRect = new Rect((Screen.width - 215) / 2' Screen.height - 151' 215' 151);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallLowerRect = new Rect((Screen.width - 215) / 2' Screen.height - 151' 215' 151);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallLowerRect = new Rect((Screen.width - 215) / 2' Screen.height - 151' 215' 151);
Magic Number,Toolbar,Extensions,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Extensions.cs,intersectsNavBall,The following statement contains a magic number: Rect navBallLowerRect = new Rect((Screen.width - 215) / 2' Screen.height - 151' 215' 151);
Magic Number,Toolbar,FolderSettingsDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\FolderSettingsDialog.cs,FolderSettingsDialog,The following statement contains a magic number: Rect = new Rect(300' 300' Mathf.Max(Screen.width / 4' 350)' 0);
Magic Number,Toolbar,FolderSettingsDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\FolderSettingsDialog.cs,FolderSettingsDialog,The following statement contains a magic number: Rect = new Rect(300' 300' Mathf.Max(Screen.width / 4' 350)' 0);
Magic Number,Toolbar,FolderSettingsDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\FolderSettingsDialog.cs,FolderSettingsDialog,The following statement contains a magic number: Rect = new Rect(300' 300' Mathf.Max(Screen.width / 4' 350)' 0);
Magic Number,Toolbar,FolderSettingsDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\FolderSettingsDialog.cs,FolderSettingsDialog,The following statement contains a magic number: Rect = new Rect(300' 300' Mathf.Max(Screen.width / 4' 350)' 0);
Magic Number,Toolbar,FolderSettingsDialog,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\FolderSettingsDialog.cs,drawContents,The following statement contains a magic number: GUILayout.Space(15);
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,toolbarResize,The following statement contains a magic number: if (resizable.Dragging) {  				float maxButtonWidth = buttons.Where(b => isEffectivelyUserVisible(b)).Max(b => b.Size.x);  				if (rect.width < (maxButtonWidth + PADDING * 2)) {  					rect.width = maxButtonWidth + PADDING * 2;  				}  				float minHeight = getMinHeightForButtons();  				if (rect.height < minHeight) {  					rect.height = minHeight;  				}  			} else {  				savedMaxWidth = rect.width;  				rect.width = getMinWidthForButtons();  				rect.height = getMinHeightForButtons();  				fireChange();  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,toolbarResize,The following statement contains a magic number: if (resizable.Dragging) {  				float maxButtonWidth = buttons.Where(b => isEffectivelyUserVisible(b)).Max(b => b.Size.x);  				if (rect.width < (maxButtonWidth + PADDING * 2)) {  					rect.width = maxButtonWidth + PADDING * 2;  				}  				float minHeight = getMinHeightForButtons();  				if (rect.height < minHeight) {  					rect.height = minHeight;  				}  			} else {  				savedMaxWidth = rect.width;  				rect.width = getMinWidthForButtons();  				rect.height = getMinHeightForButtons();  				fireChange();  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,The following statement contains a magic number: if (Visible &&  				((mode == Mode.FOLDER) || buttons.Any((b) => !b.Equals(dropdownMenuButton) && isEffectivelyUserVisible(b)))) {    				forceAutoSizeIfButtonVisibilitiesChanged();  				autoSize();    				if (mode == Mode.FOLDER) {  					relativePosition = autoPositionFolder(relativePosition);  				}    				if (autoHide && (dropdownMenu == null) && AtScreenEdge && !buttons.Any(b => b.command.Drawable != null)) {  					handleAutoHide();  				}    				int oldDepth = GUI.depth;    				GUI.depth = -99;  				drawToolbarBorder();    				GUI.depth = -100;  				if (buttonOrderDropMarker != null) {  					buttonOrderDropMarker.draw();  				}    				GUISkin oldSkin = GUI.skin;  				if (UseKSPSkin) {  					GUI.skin = HighLogic.Skin;  				}  				drawButtons();  				GUI.skin = oldSkin;    				foreach (Toolbar folder in folders.Values) {  					folder.draw();  				}    				if (Enabled && rectLocked && buttonOrderLocked && (displayMode == DisplayMode.VISIBLE)) {  					drawDrawables();  				}    				if (Enabled && rectLocked && (buttonOrderLocked || (draggedButton == null)) && (dropdownMenu == null) && (displayMode == DisplayMode.VISIBLE)) {  					drawButtonToolTips();  				}    				GUI.depth = oldDepth;    				Vector2 mousePos = Utils.getMousePosition();  				editorLockToolbar.draw(rect.contains(mousePos));  				editorLockDrag.draw(!rectLocked);  				editorLockReorder.draw(!buttonOrderLocked);  			} else {  				editorLockToolbar.draw(false);  				editorLockDrag.draw(false);  				editorLockReorder.draw(false);  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,draw,The following statement contains a magic number: if (Visible &&  				((mode == Mode.FOLDER) || buttons.Any((b) => !b.Equals(dropdownMenuButton) && isEffectivelyUserVisible(b)))) {    				forceAutoSizeIfButtonVisibilitiesChanged();  				autoSize();    				if (mode == Mode.FOLDER) {  					relativePosition = autoPositionFolder(relativePosition);  				}    				if (autoHide && (dropdownMenu == null) && AtScreenEdge && !buttons.Any(b => b.command.Drawable != null)) {  					handleAutoHide();  				}    				int oldDepth = GUI.depth;    				GUI.depth = -99;  				drawToolbarBorder();    				GUI.depth = -100;  				if (buttonOrderDropMarker != null) {  					buttonOrderDropMarker.draw();  				}    				GUISkin oldSkin = GUI.skin;  				if (UseKSPSkin) {  					GUI.skin = HighLogic.Skin;  				}  				drawButtons();  				GUI.skin = oldSkin;    				foreach (Toolbar folder in folders.Values) {  					folder.draw();  				}    				if (Enabled && rectLocked && buttonOrderLocked && (displayMode == DisplayMode.VISIBLE)) {  					drawDrawables();  				}    				if (Enabled && rectLocked && (buttonOrderLocked || (draggedButton == null)) && (dropdownMenu == null) && (displayMode == DisplayMode.VISIBLE)) {  					drawButtonToolTips();  				}    				GUI.depth = oldDepth;    				Vector2 mousePos = Utils.getMousePosition();  				editorLockToolbar.draw(rect.contains(mousePos));  				editorLockDrag.draw(!rectLocked);  				editorLockReorder.draw(!buttonOrderLocked);  			} else {  				editorLockToolbar.draw(false);  				editorLockDrag.draw(false);  				editorLockReorder.draw(false);  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,autoPositionAgainstParent,The following statement contains a magic number: Vector2 posLeft = new Vector2(parentRect.x - size.x - BUTTON_SPACING' parentRect.y + (parentRect.height - size.y) / 2);
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,autoPositionAgainstParent,The following statement contains a magic number: Vector2 posAbove = new Vector2(parentRect.x + (parentRect.width - size.x) / 2' parentRect.y - size.y - BUTTON_SPACING);
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,getMinWidthForButtons,The following statement contains a magic number: if (mode == Mode.FOLDER) {  				int count = buttons.Count((b) => !b.Equals(dropdownMenuButton) && isEffectivelyUserVisible(b));  				if (count == 0) {  					return DEFAULT_WIDTH;  				} else {  					// make it roughly a square  					int columns = Mathf.CeilToInt(Mathf.Sqrt(count));  					// they're all the same size' so let's just take the first one  					Button firstVisibleButton = buttons.First((b) => !b.Equals(dropdownMenuButton) && isEffectivelyUserVisible(b));  					float buttonWidth = firstVisibleButton.Size.x;  					return buttonWidth * columns + BUTTON_SPACING * (columns - 1) + PADDING * 2;  				}  			} else {  				float width = 0;  				calculateButtonPositions((button' pos) => {  					float currentWidth = pos.x + button.Size.x;  					if (currentWidth > width) {  						width = currentWidth;  					}  				});  				width += PADDING;  				return width;  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,The following statement contains a magic number: if (dropdownMenuButton != null) {  				if (y == PADDING) {  					// all buttons on a single line  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2(x + 2' (lineHeight - dropdownMenuButton.Size.y) / 2 + PADDING));  				} else {  					// multiple lines  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2((widestLineWidth - dropdownMenuButton.Size.x) / 2 + PADDING' y + lineHeight + BUTTON_SPACING + 2));  				}  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,The following statement contains a magic number: if (dropdownMenuButton != null) {  				if (y == PADDING) {  					// all buttons on a single line  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2(x + 2' (lineHeight - dropdownMenuButton.Size.y) / 2 + PADDING));  				} else {  					// multiple lines  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2((widestLineWidth - dropdownMenuButton.Size.x) / 2 + PADDING' y + lineHeight + BUTTON_SPACING + 2));  				}  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,The following statement contains a magic number: if (dropdownMenuButton != null) {  				if (y == PADDING) {  					// all buttons on a single line  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2(x + 2' (lineHeight - dropdownMenuButton.Size.y) / 2 + PADDING));  				} else {  					// multiple lines  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2((widestLineWidth - dropdownMenuButton.Size.x) / 2 + PADDING' y + lineHeight + BUTTON_SPACING + 2));  				}  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,calculateButtonPositions,The following statement contains a magic number: if (dropdownMenuButton != null) {  				if (y == PADDING) {  					// all buttons on a single line  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2(x + 2' (lineHeight - dropdownMenuButton.Size.y) / 2 + PADDING));  				} else {  					// multiple lines  					buttonPositionCalculatedHandler(dropdownMenuButton' new Vector2((widestLineWidth - dropdownMenuButton.Size.x) / 2 + PADDING' y + lineHeight + BUTTON_SPACING + 2));  				}  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,update,The following statement contains a magic number: if (dropdownMenu != null) {  				// auto-close drop-down menu when clicking outside  				if ((Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2)) && !dropdownMenu.contains(Utils.getMousePosition())) {  					dropdownMenu.destroy();  					dropdownMenu = null;  				}    				// auto-close drop-down menu when pause menu is opened  				if (Utils.isPauseMenuOpen()) {  					dropdownMenu.destroy();  					dropdownMenu = null;  				}  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The following statement contains a magic number: if (e.draggable.Dragging) {  				Rectangle dragRect = buttonOrderDraggables[e.draggable];    				if (draggedButton == null) {  					draggedButton = buttons.SingleOrDefault(b => getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Equals(dragRect.Rect));  				}    				if (draggedButton != null) {  					draggedButtonRect = dragRect.Rect;    					Vector2 mousePos = Utils.getMousePosition();  					buttonOrderHoveredButton = buttons.SingleOrDefault(  						b => !b.Equals(draggedButton) && !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos));  					if (buttonOrderHoveredButton != null) {  						Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  						Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  						if ((folder != null) &&  							// disallow folders in folders  							!folderButtons.ContainsKey(draggedButton)) {    							float widthOneThird = hoveredButtonRect.width / 3;  							float middleX = hoveredButtonRect.x + widthOneThird;  							if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// middle section  								buttonOrderDropMarker.Rect = hoveredButtonRect;  							} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// left section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							} else {  								// right section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x + hoveredButtonRect.width' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							}  						} else {  							bool leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  							// TODO: improve this to show a horizontal drop marker instead of a vertical one for single-column toolbars  							buttonOrderDropMarker.Rect = new Rect(  								leftSide ? (hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH) : (hoveredButtonRect.x + hoveredButtonRect.width)'  								hoveredButtonRect.y'  								DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  						}  					}  					buttonOrderDropMarker.Visible = buttonOrderHoveredButton != null;  				}  			} else {  				if ((draggedButton != null) && (buttonOrderHoveredButton != null)) {  					Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  					Vector2 mousePos = Utils.getMousePosition();  					bool leftSide = false;  					bool intoFolder = false;  					Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  					if (folder != null) {  						float widthOneThird = hoveredButtonRect.width / 3;  						float middleX = hoveredButtonRect.x + widthOneThird;  						if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							intoFolder = true;  						} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							leftSide = true;  						}  					} else {  						leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  					}    					if (intoFolder) {  						moveButtonToFolder(draggedButton' folder);  					} else {  						int draggedButtonIdx = buttons.IndexOf(draggedButton);  						int hoveredButtonIdx = buttons.IndexOf(buttonOrderHoveredButton);  						if (!leftSide) {  							hoveredButtonIdx++;  						}    						buttons.RemoveAt(draggedButtonIdx);  						if (hoveredButtonIdx > draggedButtonIdx) {  							hoveredButtonIdx--;  						}  						buttons.Insert(hoveredButtonIdx' draggedButton);  					}    					savedButtonOrder = buttons.Where(b => !b.Equals(dropdownMenuButton)).Select(b => b.FullId).ToList();    					Dictionary<string' FolderSettings> newSavedFolderSettings = new Dictionary<string' FolderSettings>();  					foreach (KeyValuePair<string' Toolbar> entry in folders) {  						HashSet<string> folderButtonIds = new HashSet<string>(entry.Value.buttons.Select(b => b.FullId));  						newSavedFolderSettings.Add(entry.Key' new FolderSettings() {  							toolTip = savedFolderSettings[entry.Key].toolTip'  							buttons = folderButtonIds  						});  					}  					savedFolderSettings = newSavedFolderSettings;    					fireChange();  				}    				// reset draggables' drop marker' and dragged button  				hookButtonOrderDraggables(false);  				hookButtonOrderDraggables(true);  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The following statement contains a magic number: if (e.draggable.Dragging) {  				Rectangle dragRect = buttonOrderDraggables[e.draggable];    				if (draggedButton == null) {  					draggedButton = buttons.SingleOrDefault(b => getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Equals(dragRect.Rect));  				}    				if (draggedButton != null) {  					draggedButtonRect = dragRect.Rect;    					Vector2 mousePos = Utils.getMousePosition();  					buttonOrderHoveredButton = buttons.SingleOrDefault(  						b => !b.Equals(draggedButton) && !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos));  					if (buttonOrderHoveredButton != null) {  						Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  						Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  						if ((folder != null) &&  							// disallow folders in folders  							!folderButtons.ContainsKey(draggedButton)) {    							float widthOneThird = hoveredButtonRect.width / 3;  							float middleX = hoveredButtonRect.x + widthOneThird;  							if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// middle section  								buttonOrderDropMarker.Rect = hoveredButtonRect;  							} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// left section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							} else {  								// right section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x + hoveredButtonRect.width' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							}  						} else {  							bool leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  							// TODO: improve this to show a horizontal drop marker instead of a vertical one for single-column toolbars  							buttonOrderDropMarker.Rect = new Rect(  								leftSide ? (hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH) : (hoveredButtonRect.x + hoveredButtonRect.width)'  								hoveredButtonRect.y'  								DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  						}  					}  					buttonOrderDropMarker.Visible = buttonOrderHoveredButton != null;  				}  			} else {  				if ((draggedButton != null) && (buttonOrderHoveredButton != null)) {  					Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  					Vector2 mousePos = Utils.getMousePosition();  					bool leftSide = false;  					bool intoFolder = false;  					Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  					if (folder != null) {  						float widthOneThird = hoveredButtonRect.width / 3;  						float middleX = hoveredButtonRect.x + widthOneThird;  						if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							intoFolder = true;  						} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							leftSide = true;  						}  					} else {  						leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  					}    					if (intoFolder) {  						moveButtonToFolder(draggedButton' folder);  					} else {  						int draggedButtonIdx = buttons.IndexOf(draggedButton);  						int hoveredButtonIdx = buttons.IndexOf(buttonOrderHoveredButton);  						if (!leftSide) {  							hoveredButtonIdx++;  						}    						buttons.RemoveAt(draggedButtonIdx);  						if (hoveredButtonIdx > draggedButtonIdx) {  							hoveredButtonIdx--;  						}  						buttons.Insert(hoveredButtonIdx' draggedButton);  					}    					savedButtonOrder = buttons.Where(b => !b.Equals(dropdownMenuButton)).Select(b => b.FullId).ToList();    					Dictionary<string' FolderSettings> newSavedFolderSettings = new Dictionary<string' FolderSettings>();  					foreach (KeyValuePair<string' Toolbar> entry in folders) {  						HashSet<string> folderButtonIds = new HashSet<string>(entry.Value.buttons.Select(b => b.FullId));  						newSavedFolderSettings.Add(entry.Key' new FolderSettings() {  							toolTip = savedFolderSettings[entry.Key].toolTip'  							buttons = folderButtonIds  						});  					}  					savedFolderSettings = newSavedFolderSettings;    					fireChange();  				}    				// reset draggables' drop marker' and dragged button  				hookButtonOrderDraggables(false);  				hookButtonOrderDraggables(true);  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The following statement contains a magic number: if (e.draggable.Dragging) {  				Rectangle dragRect = buttonOrderDraggables[e.draggable];    				if (draggedButton == null) {  					draggedButton = buttons.SingleOrDefault(b => getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Equals(dragRect.Rect));  				}    				if (draggedButton != null) {  					draggedButtonRect = dragRect.Rect;    					Vector2 mousePos = Utils.getMousePosition();  					buttonOrderHoveredButton = buttons.SingleOrDefault(  						b => !b.Equals(draggedButton) && !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos));  					if (buttonOrderHoveredButton != null) {  						Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  						Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  						if ((folder != null) &&  							// disallow folders in folders  							!folderButtons.ContainsKey(draggedButton)) {    							float widthOneThird = hoveredButtonRect.width / 3;  							float middleX = hoveredButtonRect.x + widthOneThird;  							if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// middle section  								buttonOrderDropMarker.Rect = hoveredButtonRect;  							} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// left section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							} else {  								// right section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x + hoveredButtonRect.width' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							}  						} else {  							bool leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  							// TODO: improve this to show a horizontal drop marker instead of a vertical one for single-column toolbars  							buttonOrderDropMarker.Rect = new Rect(  								leftSide ? (hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH) : (hoveredButtonRect.x + hoveredButtonRect.width)'  								hoveredButtonRect.y'  								DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  						}  					}  					buttonOrderDropMarker.Visible = buttonOrderHoveredButton != null;  				}  			} else {  				if ((draggedButton != null) && (buttonOrderHoveredButton != null)) {  					Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  					Vector2 mousePos = Utils.getMousePosition();  					bool leftSide = false;  					bool intoFolder = false;  					Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  					if (folder != null) {  						float widthOneThird = hoveredButtonRect.width / 3;  						float middleX = hoveredButtonRect.x + widthOneThird;  						if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							intoFolder = true;  						} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							leftSide = true;  						}  					} else {  						leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  					}    					if (intoFolder) {  						moveButtonToFolder(draggedButton' folder);  					} else {  						int draggedButtonIdx = buttons.IndexOf(draggedButton);  						int hoveredButtonIdx = buttons.IndexOf(buttonOrderHoveredButton);  						if (!leftSide) {  							hoveredButtonIdx++;  						}    						buttons.RemoveAt(draggedButtonIdx);  						if (hoveredButtonIdx > draggedButtonIdx) {  							hoveredButtonIdx--;  						}  						buttons.Insert(hoveredButtonIdx' draggedButton);  					}    					savedButtonOrder = buttons.Where(b => !b.Equals(dropdownMenuButton)).Select(b => b.FullId).ToList();    					Dictionary<string' FolderSettings> newSavedFolderSettings = new Dictionary<string' FolderSettings>();  					foreach (KeyValuePair<string' Toolbar> entry in folders) {  						HashSet<string> folderButtonIds = new HashSet<string>(entry.Value.buttons.Select(b => b.FullId));  						newSavedFolderSettings.Add(entry.Key' new FolderSettings() {  							toolTip = savedFolderSettings[entry.Key].toolTip'  							buttons = folderButtonIds  						});  					}  					savedFolderSettings = newSavedFolderSettings;    					fireChange();  				}    				// reset draggables' drop marker' and dragged button  				hookButtonOrderDraggables(false);  				hookButtonOrderDraggables(true);  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,buttonDrag,The following statement contains a magic number: if (e.draggable.Dragging) {  				Rectangle dragRect = buttonOrderDraggables[e.draggable];    				if (draggedButton == null) {  					draggedButton = buttons.SingleOrDefault(b => getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Equals(dragRect.Rect));  				}    				if (draggedButton != null) {  					draggedButtonRect = dragRect.Rect;    					Vector2 mousePos = Utils.getMousePosition();  					buttonOrderHoveredButton = buttons.SingleOrDefault(  						b => !b.Equals(draggedButton) && !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos));  					if (buttonOrderHoveredButton != null) {  						Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  						Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  						if ((folder != null) &&  							// disallow folders in folders  							!folderButtons.ContainsKey(draggedButton)) {    							float widthOneThird = hoveredButtonRect.width / 3;  							float middleX = hoveredButtonRect.x + widthOneThird;  							if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// middle section  								buttonOrderDropMarker.Rect = hoveredButtonRect;  							} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  								// left section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							} else {  								// right section  								buttonOrderDropMarker.Rect = new Rect(  									hoveredButtonRect.x + hoveredButtonRect.width' hoveredButtonRect.y'  									DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  							}  						} else {  							bool leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  							// TODO: improve this to show a horizontal drop marker instead of a vertical one for single-column toolbars  							buttonOrderDropMarker.Rect = new Rect(  								leftSide ? (hoveredButtonRect.x - DropMarker.MARKER_LINE_WIDTH) : (hoveredButtonRect.x + hoveredButtonRect.width)'  								hoveredButtonRect.y'  								DropMarker.MARKER_LINE_WIDTH' hoveredButtonRect.height);  						}  					}  					buttonOrderDropMarker.Visible = buttonOrderHoveredButton != null;  				}  			} else {  				if ((draggedButton != null) && (buttonOrderHoveredButton != null)) {  					Rect hoveredButtonRect = getRect(buttonOrderHoveredButton).shift(new Vector2(rect.x + PADDING' rect.y + PADDING));  					Vector2 mousePos = Utils.getMousePosition();  					bool leftSide = false;  					bool intoFolder = false;  					Toolbar folder = folderButtons.ContainsKey(buttonOrderHoveredButton) ? folderButtons[buttonOrderHoveredButton] : null;  					if (folder != null) {  						float widthOneThird = hoveredButtonRect.width / 3;  						float middleX = hoveredButtonRect.x + widthOneThird;  						if (new Rect(middleX' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							intoFolder = true;  						} else if (new Rect(hoveredButtonRect.x' hoveredButtonRect.y' widthOneThird' hoveredButtonRect.height).Contains(mousePos)) {  							leftSide = true;  						}  					} else {  						leftSide = new Rect(hoveredButtonRect.x' hoveredButtonRect.y' hoveredButtonRect.width / 2' hoveredButtonRect.height).Contains(mousePos);  					}    					if (intoFolder) {  						moveButtonToFolder(draggedButton' folder);  					} else {  						int draggedButtonIdx = buttons.IndexOf(draggedButton);  						int hoveredButtonIdx = buttons.IndexOf(buttonOrderHoveredButton);  						if (!leftSide) {  							hoveredButtonIdx++;  						}    						buttons.RemoveAt(draggedButtonIdx);  						if (hoveredButtonIdx > draggedButtonIdx) {  							hoveredButtonIdx--;  						}  						buttons.Insert(hoveredButtonIdx' draggedButton);  					}    					savedButtonOrder = buttons.Where(b => !b.Equals(dropdownMenuButton)).Select(b => b.FullId).ToList();    					Dictionary<string' FolderSettings> newSavedFolderSettings = new Dictionary<string' FolderSettings>();  					foreach (KeyValuePair<string' Toolbar> entry in folders) {  						HashSet<string> folderButtonIds = new HashSet<string>(entry.Value.buttons.Select(b => b.FullId));  						newSavedFolderSettings.Add(entry.Key' new FolderSettings() {  							toolTip = savedFolderSettings[entry.Key].toolTip'  							buttons = folderButtonIds  						});  					}  					savedFolderSettings = newSavedFolderSettings;    					fireChange();  				}    				// reset draggables' drop marker' and dragged button  				hookButtonOrderDraggables(false);  				hookButtonOrderDraggables(true);  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,grabCursor,The following statement contains a magic number: if (Visible && !buttonOrderLocked) {  				Vector2 mousePos = Utils.getMousePosition();  				Button hoveredButton = buttons.SingleOrDefault(  					b => !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos));  				bool setCursor = (hoveredButton != null) || (draggedButton != null);  				if (setCursor) {  					Cursor.SetCursor(GameDatabase.Instance.GetTexture("000_Toolbar/move-cursor"' false)' new Vector2(10' 10)' CursorMode.ForceSoftware);  				}  				return setCursor;  			} else {  				return false;  			}
Magic Number,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,grabCursor,The following statement contains a magic number: if (Visible && !buttonOrderLocked) {  				Vector2 mousePos = Utils.getMousePosition();  				Button hoveredButton = buttons.SingleOrDefault(  					b => !b.Equals(dropdownMenuButton) && getRect(b).shift(new Vector2(rect.x + PADDING' rect.y + PADDING)).Contains(mousePos));  				bool setCursor = (hoveredButton != null) || (draggedButton != null);  				if (setCursor) {  					Cursor.SetCursor(GameDatabase.Instance.GetTexture("000_Toolbar/move-cursor"' false)' new Vector2(10' 10)' CursorMode.ForceSoftware);  				}  				return setCursor;  			} else {  				return false;  			}
Missing Default,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,forceAutoSizeIfButtonVisibilitiesChanged,The following switch statement is missing a default case: switch (displayMode) {  						case DisplayMode.VISIBLE:  							rect.clampToScreen(PADDING);  							break;  						case DisplayMode.HIDDEN:  							rect.clampToScreen(new Vector2(rect.width - PADDING' rect.height - PADDING));  							break;  					}
Missing Default,Toolbar,Toolbar,C:\repos\blizzy78_ksp_toolbar\Toolbar\Internal\Toolbar\Toolbar.cs,createFolder,The following switch statement is missing a default case: switch (e.MouseButton) {  					case 0:  						newFolder.Visible = !newFolder.Visible;  						if (newFolder.Visible) {  							foreach (Toolbar otherFolder in folders.Values.Where(f => !f.Equals(newFolder))) {  								otherFolder.Visible = false;  							}  						}  						break;    					case 1:  						openFolderButtonDropdownMenu(newFolder' getPosition(folderButton) + new Vector2(rect.x + PADDING' rect.y + PADDING + folderButton.Size.y + BUTTON_SPACING));  						break;  				}
