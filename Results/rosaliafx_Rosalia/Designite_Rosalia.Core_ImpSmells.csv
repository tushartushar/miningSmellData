Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Rosalia.Core.Tasks,TaskContext,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\TaskContext.cs,TaskContext,The method has 5 parameters. Parameters: executionStrategy' logRenderer' workDirectory' environment' interceptor
Long Parameter List,Rosalia.Core.Tasks,TaskContext,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\TaskContext.cs,TaskContext,The method has 8 parameters. Parameters: results' executionStrategy' identity' logRenderer' workDirectory' environment' interceptor' identitiesTail
Long Statement,Rosalia.Core.Tasks,SubflowTask<T>,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\SubflowTask.cs,SafeExecute,The length of the statement  "                ITaskResult<IdentityWithResult[]> layerResults = context.ExecutionStrategy.Execute(layer' context.CreateFor' context.Interceptor); " is 130.
Long Statement,Rosalia.Core.Engine.Composing,SimpleLayersComposer,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Engine\Composing\SimpleLayersComposer.cs,GetAllTasks,The length of the statement  "                IEnumerable<ExecutableWithIdentity> iterationDependencies = map.Transform(currentTasks' (id' task) => new ExecutableWithIdentity(task.Task' id)); " is 145.
Magic Number,Rosalia.Core.Logging,LoggingInterceptor,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\LoggingInterceptor.cs,FormatData,The following statement contains a magic number: if (level > 3)              {                  return "...";              }
Magic Number,Rosalia.Core.Logging,LoggingInterceptor,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\LoggingInterceptor.cs,FormatData,The following statement contains a magic number: foreach (PropertyInfo propertyInfo in dataType.GetProperties().Where(prop => prop.CanRead))              {                  result.AppendFormat(                      "{0}{1} = {2}"'                      new string(' '' level * 2)'                      propertyInfo.Name'                      FormatData(propertyInfo.GetValue(data)' level + 1));                  result.AppendLine();              }
Magic Number,Rosalia.Core.Logging,ColoredConsoleLogRenderer,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\ColoredConsoleLogRenderer.cs,Init,The following statement contains a magic number: try              {                  _consoleWidth = Console.WindowWidth;              }              catch (Exception)              {                  // we are in the redirected output mode                  // let the console be as wide as possible                  _consoleWidth = 1000;              }
Magic Number,Rosalia.Core.Logging,ColoredConsoleLogRenderer,C:\repos\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\ColoredConsoleLogRenderer.cs,Render,The following statement contains a magic number: lock (_lockObject)              {                  var level = message.Level;                    if (_lastSource == null || !Equals(_lastSource' source))                  {                      for (int index = 0; index < source.Items.Length; index++)                      {                          Identity identity = source.Items[index];                            WriteColored("["' ConsoleColor.DarkMagenta);                          WriteColored(identity.Value' ConsoleColor.DarkMagenta);                          WriteColored("]"' ConsoleColor.DarkMagenta);                            if (index < source.Items.Length - 1)                          {                              WriteColored("->"' ConsoleColor.DarkCyan);                              }                      }                        Console.WriteLine();                  }                    var lines = message.Text.Split(new[] { Environment.NewLine }' StringSplitOptions.None).ToList();                  var procesedLines = new List<string>();                                    const int fullIndentSize = 8;                    var maxWidth = _consoleWidth - fullIndentSize - 1;                  foreach (var line in lines)                  {                      var currentLine = line;                      while (currentLine.Length > maxWidth)                      {                          procesedLines.Add(currentLine.Substring(0' maxWidth));                          currentLine = currentLine.Substring(maxWidth);                      }                        procesedLines.Add(currentLine);                  }                    if (procesedLines.Count > 0)                  {                      var levelString = " " + level.ToString().ToUpper();                      WriteColored(levelString' ConsoleColor.DarkGray);                      Console.Write(new string(' '' fullIndentSize - levelString.Length));                        WriteColored(procesedLines[0]' GetColorForLevel(level));                      Console.WriteLine();                        if (procesedLines.Count > 1)                      {                          for (int i = 1; i < procesedLines.Count; i++)                          {                              Console.Write(new string(' '' fullIndentSize));                              WriteColored(procesedLines[i]' GetColorForLevel(level));                              Console.WriteLine();                          }                      }                  }                  else                  {                      Console.WriteLine();                  }                    _lastSource = source;              }
