Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rosalia.Core.Engine.Composing,SimpleLayersComposer,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Engine\Composing\SimpleLayersComposer.cs,GetAllTasks,Cyclomatic complexity of the method is 7
Long Parameter List,Rosalia.Core.Api,RepeaterRegistry,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Api\ForEachConfig.cs,RepeaterRegistry,The method has 4 parameters.
Long Parameter List,Rosalia.Core.Interception,CompositeInterceptor,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Interception\CompositeInterceptor.cs,AfterTaskExecute,The method has 4 parameters.
Long Parameter List,Rosalia.Core.Interception,ITaskInterceptor,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Interception\ITaskInterceptor.cs,AfterTaskExecute,The method has 4 parameters.
Long Parameter List,Rosalia.Core.Logging,LoggingInterceptor,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\LoggingInterceptor.cs,AfterTaskExecute,The method has 4 parameters.
Long Parameter List,Rosalia.Core.Tasks,TaskContext,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\TaskContext.cs,TaskContext,The method has 5 parameters.
Long Parameter List,Rosalia.Core.Tasks,TaskContext,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\TaskContext.cs,TaskContext,The method has 8 parameters.
Long Statement,Rosalia.Core.Api,Extensions,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Api\Extensions_Recovery.cs,SelectMany,The length of the statement  "	return input.SelectManyCore (func' (context' inputValue' tempValue) => resultSelector.Invoke (inputValue' tempValue).Execute (context)); " is 136.
Long Statement,Rosalia.Core.Api,Extensions,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Api\Extensions_Recovery.cs,SelectMany,The length of the statement  "	return SelectMany (input' func' (inputArg' intermediaArg) => resultSelector.Invoke (inputArg' intermediaArg).ToTask ()); " is 120.
Long Statement,Rosalia.Core.Api,Extensions,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Api\Extensions_Recovery.cs,SelectMany,The length of the statement  "	return input.SelectManyCore (func' (context' inputValue' tempValue) => context.ApplyActionAsTask (resultSelector.Invoke (inputValue' tempValue))); " is 146.
Long Statement,Rosalia.Core.Api,Extensions,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Api\Extensions_Recovery.cs,GetAllDependencies,The length of the statement  "	ITaskFuture<object>[] recentDependencies = input is ILinqTaskFuture ? ((ILinqTaskFuture)input).Dependencies : new ITaskFuture<object>[] { " is 137.
Long Statement,Rosalia.Core.Api,RepeaterRegistry,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Api\ForEachConfig.cs,GetRegisteredTasks,The length of the statement  "	RegistrationTaskFuture<TAggregatedResult> resultTask = map.Register (Guid.NewGuid ().ToString ()' new FuncTask<TAggregatedResult> (context => { " is 143.
Long Statement,Rosalia.Core.Logging,LoggingInterceptor,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\LoggingInterceptor.cs,FormatData,The length of the statement  "		result.AppendFormat ("{0}{1} = {2}"' new string (' '' level * 2)' propertyInfo.Name' FormatData (propertyInfo.GetValue (data)' level + 1)); " is 139.
Long Statement,Rosalia.Core.Logging,HtmlLogRenderer,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\HtmlLogRenderer.cs,Render,The length of the statement  "	_writerProvider.Value.WriteLine ("<td>{0}</td>"' string.Join (" -> "' source.Items.Select (id => id.Value).ToArray ())); " is 120.
Long Statement,Rosalia.Core.Tasks,SubflowTask,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\SubflowTask.cs,SafeExecute,The length of the statement  "		ITaskResult<IdentityWithResult[]> layerResults = context.ExecutionStrategy.Execute (layer' context.CreateFor' context.Interceptor); " is 131.
Long Statement,Rosalia.Core.Tasks,TaskContext,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\TaskContext.cs,CreateFor,The length of the statement  "	return new TaskContext (Results' ExecutionStrategy' task' LogRenderer' WorkDirectory' Environment' Interceptor' GetFullIdentitiesPath ()); " is 138.
Long Statement,Rosalia.Core.Tasks,TaskContext,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Tasks\TaskContext.cs,CreateDerived,The length of the statement  "	return new TaskContext (resultsToAdd.Aggregate (Results' (results' identityWithResult) => results.CreateDerived (identityWithResult.Identity' identityWithResult.Value))' ExecutionStrategy' Identity' LogRenderer' WorkDirectory' Environment' Interceptor' IdentitiesTail); " is 269.
Long Statement,Rosalia.Core.Engine.Composing,SimpleLayersComposer,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Engine\Composing\SimpleLayersComposer.cs,GetErrorMessage,The length of the statement  "	errorBuilder.AppendLine ("Could not compose layers (probably caused by circular references). The tasks that could not be layered:"); " is 132.
Long Statement,Rosalia.Core.Engine.Composing,SimpleLayersComposer,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Engine\Composing\SimpleLayersComposer.cs,GetAllTasks,The length of the statement  "		IEnumerable<ExecutableWithIdentity> iterationDependencies = map.Transform (currentTasks' (id' task) => new ExecutableWithIdentity (task.Task' id)); " is 147.
Magic Number,Rosalia.Core.Logging,LoggingInterceptor,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\LoggingInterceptor.cs,FormatData,The following statement contains a magic number: if (level > 3) {  	return "...";  }  
Magic Number,Rosalia.Core.Logging,LoggingInterceptor,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\LoggingInterceptor.cs,FormatData,The following statement contains a magic number: foreach (PropertyInfo propertyInfo in dataType.GetProperties ().Where (prop => prop.CanRead)) {  	result.AppendFormat ("{0}{1} = {2}"' new string (' '' level * 2)' propertyInfo.Name' FormatData (propertyInfo.GetValue (data)' level + 1));  	result.AppendLine ();  }  
Magic Number,Rosalia.Core.Logging,LoggingInterceptor,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\LoggingInterceptor.cs,FormatData,The following statement contains a magic number: result.AppendFormat ("{0}{1} = {2}"' new string (' '' level * 2)' propertyInfo.Name' FormatData (propertyInfo.GetValue (data)' level + 1));  
Magic Number,Rosalia.Core.Logging,ColoredConsoleLogRenderer,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\ColoredConsoleLogRenderer.cs,Init,The following statement contains a magic number: try {  	_consoleWidth = Console.WindowWidth;  } catch (Exception) {  	// we are in the redirected output mode  	// let the console be as wide as possible  	_consoleWidth = 1000;  }  
Magic Number,Rosalia.Core.Logging,ColoredConsoleLogRenderer,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\ColoredConsoleLogRenderer.cs,Init,The following statement contains a magic number: _consoleWidth = 1000;  
Magic Number,Rosalia.Core.Logging,ColoredConsoleLogRenderer,D:\newReposJune17\rosaliafx_Rosalia\Src\Rosalia.Core\Logging\ColoredConsoleLogRenderer.cs,Render,The following statement contains a magic number: lock (_lockObject) {  	var level = message.Level;  	if (_lastSource == null || !Equals (_lastSource' source)) {  		for (int index = 0; index < source.Items.Length; index++) {  			Identity identity = source.Items [index];  			WriteColored ("["' ConsoleColor.DarkMagenta);  			WriteColored (identity.Value' ConsoleColor.DarkMagenta);  			WriteColored ("]"' ConsoleColor.DarkMagenta);  			if (index < source.Items.Length - 1) {  				WriteColored ("->"' ConsoleColor.DarkCyan);  			}  		}  		Console.WriteLine ();  	}  	var lines = message.Text.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.None).ToList ();  	var procesedLines = new List<string> ();  	const int fullIndentSize = 8;  	var maxWidth = _consoleWidth - fullIndentSize - 1;  	foreach (var line in lines) {  		var currentLine = line;  		while (currentLine.Length > maxWidth) {  			procesedLines.Add (currentLine.Substring (0' maxWidth));  			currentLine = currentLine.Substring (maxWidth);  		}  		procesedLines.Add (currentLine);  	}  	if (procesedLines.Count > 0) {  		var levelString = " " + level.ToString ().ToUpper ();  		WriteColored (levelString' ConsoleColor.DarkGray);  		Console.Write (new string (' '' fullIndentSize - levelString.Length));  		WriteColored (procesedLines [0]' GetColorForLevel (level));  		Console.WriteLine ();  		if (procesedLines.Count > 1) {  			for (int i = 1; i < procesedLines.Count; i++) {  				Console.Write (new string (' '' fullIndentSize));  				WriteColored (procesedLines [i]' GetColorForLevel (level));  				Console.WriteLine ();  			}  		}  	} else {  		Console.WriteLine ();  	}  	_lastSource = source;  }  
