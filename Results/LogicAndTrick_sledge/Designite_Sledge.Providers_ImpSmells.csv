Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The method has 289 lines of code.
Long Method,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,Read,The method has 113 lines of code.
Long Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadModel,The method has 207 lines of code.
Long Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The method has 109 lines of code.
Long Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The method has 186 lines of code.
Long Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadQuakeModel,The method has 110 lines of code.
Complex Method,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,LexNew,Cyclomatic complexity of the method is 13
Complex Method,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,Cyclomatic complexity of the method is 15
Complex Method,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,DeserialiseHelper,Cyclomatic complexity of the method is 10
Complex Method,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,GetPrimitiveName,Cyclomatic complexity of the method is 10
Complex Method,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadWorld,Cyclomatic complexity of the method is 11
Complex Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadModel,Cyclomatic complexity of the method is 24
Complex Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,Cyclomatic complexity of the method is 10
Complex Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationSource,Cyclomatic complexity of the method is 9
Complex Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationGoldsource,Cyclomatic complexity of the method is 8
Complex Method,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadQuakeModel,Cyclomatic complexity of the method is 8
Complex Method,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,Cyclomatic complexity of the method is 15
Long Parameter List,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadTextureInfo,The method has 6 parameters. Parameters: file' br' data' model' numTextures' textureIndex
Long Parameter List,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The method has 5 parameters. Parameters: br' index' data' model' groups
Long Parameter List,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadStudioModel,The method has 6 parameters. Parameters: br' groupName' bodyPartIndex' modelIndex' data' model
Long Parameter List,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesGoldSource,The method has 12 parameters. Parameters: br' bodyPartName' modelIndex' model' numVerts' vertInfoIndex' vertIndex' numMesh' meshIndex' numNorms' normInfoIndex' normIndex
Long Parameter List,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesSource,The method has 8 parameters. Parameters: br' groupName' bodyPartIndex' modelIndex' modelData' model' numMesh' meshIndex
Long Parameter List,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeMesh,The method has 9 parameters. Parameters: br' model' scale' translate' numverts' numtris' texcoords' tris' skinwidth
Long Parameter List,Sledge.Providers.Model,VVDPoint,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,VVDPoint,The method has 7 parameters. Parameters: boneWeights' bones' numBones' position' normal' textureS' textureT
Long Parameter List,Sledge.Providers.Model,SourceAnimation,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,SourceAnimation,The method has 11 parameters. Parameters: id' numFrames' fps' flags' numMovements' movementIndex' animBlock' animIndex' numIKRules' ikRuleIndex' animBlockIKRuleIndex
Long Parameter List,Sledge.Providers.Texture,TextureItem,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\TextureItem.cs,TextureItem,The method has 5 parameters. Parameters: name' flags' primarySubItemName' width' height
Long Parameter List,Sledge.Providers.Texture,TextureSubItem,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\TextureSubItem.cs,TextureSubItem,The method has 5 parameters. Parameters: type' item' name' width' height
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                    if (!gd.Includes.Any(x => String.Equals(x' filename' StringComparison.InvariantCultureIgnoreCase))) gd.Includes.Add(filename); " is 126.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                    gd.Classes.AddRange(incgd.Classes.Where(x => !gd.Classes.Any(y => String.Equals(x.Name' y.Name' StringComparison.InvariantCultureIgnoreCase)))); " is 144.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                    gd.AutoVisgroups.AddRange(incgd.AutoVisgroups.Where(x => !gd.AutoVisgroups.Any(y => String.Equals(x.Name' y.Name' StringComparison.InvariantCultureIgnoreCase)))); " is 162.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                    gd.MaterialExclusions.AddRange(incgd.MaterialExclusions.Where(x => !gd.MaterialExclusions.Any(y => String.Equals(x' y' StringComparison.InvariantCultureIgnoreCase)))); " is 167.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                    Assert(iterator.Current' iterator.Current.IsValueOrString()' "Expected value type' got " + iterator.Current.Type + "."); " is 120.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                Assert(iterator.Current' iterator.Current.IsValueOrString()' "Expected value type' got " + iterator.Current.Type + "."); " is 120.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                    Assert(iterator.Current' iterator.Current.IsValueOrString()' "Expected value type' got " + iterator.Current.Type + "."); " is 120.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                        Assert(iterator.Current' iterator.Current.IsValueOrString()' "Expected value type' got " + iterator.Current.Type + "."); " is 120.
Long Statement,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The length of the statement  "                                    throw new ProviderException("Unable to parse FGD. Expected " + LexType.String + "' got " + iterator.Current.Type + ".\n" + " is 122.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,GetPropertyValue,The length of the statement  "            var prop = Properties.FirstOrDefault(x => String.Equals(x.Key' name' ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture)); " is 160.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "            if (Equals(obj' null)) return new GenericStructure("Serialise.Null") { Properties = { new GenericStructureProperty("Serialise.Null.Value"' "null") } }; " is 151.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "                rf.AddProperty("Serialise.Reference.Index"' (encounteredObjects.IndexOf(obj) + 1).ToString(CultureInfo.InvariantCulture)); " is 122.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "	            return new GenericStructure(name) {Properties = {new GenericStructureProperty("Primitive.Value"' Convert.ToString(obj' CultureInfo.InvariantCulture))}}; " is 152.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "                return new GenericStructure("Primitives.DateTime") { Properties = { new GenericStructureProperty("Primitive.Value"' ((DateTime)obj).ToString("u")) } }; " is 151.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "                return new GenericStructure("Primitives.Colour") { Properties = { new GenericStructureProperty("Primitive.Value"' col) } }; " is 123.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "                return new GenericStructure("Primitives.Coordinate") { Properties = { new GenericStructureProperty("Primitive.Value"' obj.ToString()) } }; " is 138.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "                return new GenericStructure("Primitives.Box") { Properties = { new GenericStructureProperty("Primitive.Value"' b.Start + " " + b.End) } }; " is 138.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "                return new GenericStructure("Primitives.Rectangle") { Properties = { new GenericStructureProperty("Primitive.Value"' r.X + " " + r.Y + " " + r.Width + " " + r.Height) } }; " is 171.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,SerialiseHelper,The length of the statement  "                return new GenericStructure("Primitives.Plane") { Properties = { new GenericStructureProperty("Primitive.Value"' p.Normal + " " + p.DistanceFromOrigin) } }; " is 156.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,DeserialiseHelper,The length of the statement  "	        var args = ctor.GetParameters().Select(x => x.ParameterType.IsValueType ? Activator.CreateInstance(x.ParameterType) : null).ToArray(); " is 134.
Long Statement,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,DeserialiseList,The length of the statement  "	            var type = AppDomain.CurrentDomain.GetAssemblies().Select(a => a.GetType(name)).FirstOrDefault(t => t != null) ?? (listType ?? typeof(object)); " is 143.
Long Statement,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadEntity,The length of the statement  "            var ent = new Entity(generator.GetNextObjectID()) { EntityData = new EntityData()' Colour = Colour.GetRandomBrushColour() }; " is 124.
Long Statement,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,WriteEntity,The length of the statement  "                var gameDataProp = ent.GameData != null ? ent.GameData.Properties.FirstOrDefault(x => String.Equals(x.Name' prop.Key' StringComparison.InvariantCultureIgnoreCase)) : null; " is 171.
Long Statement,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,Read,The length of the statement  "                    case "cstype": // rational or non-rational forms of curve or surface type: basis matrix' Bezier' B-spline' Cardinal' Taylor " is 123.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadDisplacement,The length of the statement  "                var norm = normals != null ? normals.PropertyCoordinateArray(row' size) : Enumerable.Range(0' size).Select(x => Coordinate.Zero).ToArray(); " is 139.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadDisplacement,The length of the statement  "                var dist = distances != null ? distances.PropertyDecimalArray(row' size) : Enumerable.Range(0' size).Select(x => 0m).ToArray(); " is 127.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadDisplacement,The length of the statement  "                var offn = offsetNormals != null ? offsetNormals.PropertyCoordinateArray(row' size) : Enumerable.Range(0' size).Select(x => Coordinate.Zero).ToArray(); " is 151.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadDisplacement,The length of the statement  "                var offs = offsets != null ? offsets.PropertyDecimalArray(row' size) : Enumerable.Range(0' size).Select(x => 0m).ToArray(); " is 123.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadDisplacement,The length of the statement  "                var alph = alphas != null ? alphas.PropertyDecimalArray(row' size) : Enumerable.Range(0' size).Select(x => 0m).ToArray(); " is 121.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,WriteFace,The length of the statement  "            ret["uaxis"] = String.Format(CultureInfo.InvariantCulture' "[{0} {1}] {2}"' FormatCoordinate(face.Texture.UAxis)' face.Texture.XShift' face.Texture.XScale); " is 156.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,WriteFace,The length of the statement  "            ret["vaxis"] = String.Format(CultureInfo.InvariantCulture' "[{0} {1}] {2}"' FormatCoordinate(face.Texture.VAxis)' face.Texture.YShift' face.Texture.YScale); " is 156.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadWorld,The length of the statement  "            foreach (var read in world.GetChildren("solid").AsParallel().Select(x => new { Solid = ReadSolid(x' generator)' Structure = x})) " is 128.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadWorld,The length of the statement  "                foreach (var read in hidden.GetChildren("solid").AsParallel().Select(x => new { Solid = ReadSolid(x' generator)' Structure = x })) " is 130.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,CreateCopyStream,The length of the statement  "            stream.Children.AddRange(objects.OfType<Solid>().Where(x => !x.IsCodeHidden && !x.IsVisgroupHidden && !entitySolids.Contains(x)).Select(WriteSolid)); " is 149.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ExtractCopyStream,The length of the statement  "                var groupid = entity.Children.Where(x => x.Name == "editor").Select(x => x.PropertyInteger("groupid")).FirstOrDefault(); " is 120.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,GetFromStream,The length of the statement  "                    var groupid = entity.Children.Where(x => x.Name == "editor").Select(x => x.PropertyInteger("groupid")).FirstOrDefault(); " is 120.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,GetFromStream,The length of the statement  "                    var entParent = groupid > 0 ? map.WorldSpawn.Find(x => x.ID == groupid && x is Group).FirstOrDefault() ?? map.WorldSpawn : map.WorldSpawn; " is 138.
Long Statement,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,SaveToStream,The length of the statement  "            versioninfo.AddProperty("editorversion"' fvi.ProductMajorPart.ToString(CultureInfo.InvariantCulture) + "." + fvi.ProductMinorPart.ToString(CultureInfo.InvariantCulture)); " is 170.
Long Statement,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationSource,The length of the statement  "                                : OpenTkExtensions.QuaternionFromEulerRotation(Vector3.Multiply(fang' bone.DefaultAnglesScale));// + bone.DefaultAngles); " is 121.
Long Statement,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadStudioModel,The length of the statement  "                ReadVerticesGoldSource(br' groupName' modelIndex' model' numVerts' vertInfoIndex' vertIndex' numMesh' meshIndex' numNorms' normInfoIndex' normIndex); " is 149.
Long Statement,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The length of the statement  "                                        // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown) " is 136.
Long Statement,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The length of the statement  "                                            // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown) " is 136.
Complex Conditional,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The conditional expression  "decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3)"  is complex.
Complex Conditional,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyTextureAxis,The conditional expression  "decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out sh)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out sc)"  is complex.
Complex Conditional,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadModel,The conditional expression  "version !=  MDLVersionQuake                  && version != MDLVersionGoldsource                  && version != MDLVersionSource2006                  && version != MDLVersionSourceEpisode2                  && version != MDLVersionSourcePortal                  && version != MDLVersionSource2007                  && version != MDLVersionSource2012"  is complex.
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (prop == null || prop.Count(c => c == ' ') != 8) return defaultValue;
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3))              {                  return new Plane(                      new Coordinate(x1' y1' z1).Round()'                      new Coordinate(x2' y2' z2).Round()'                      new Coordinate(x3' y3' z3).Round());              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3))              {                  return new Plane(                      new Coordinate(x1' y1' z1).Round()'                      new Coordinate(x2' y2' z2).Round()'                      new Coordinate(x3' y3' z3).Round());              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3))              {                  return new Plane(                      new Coordinate(x1' y1' z1).Round()'                      new Coordinate(x2' y2' z2).Round()'                      new Coordinate(x3' y3' z3).Round());              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3))              {                  return new Plane(                      new Coordinate(x1' y1' z1).Round()'                      new Coordinate(x2' y2' z2).Round()'                      new Coordinate(x3' y3' z3).Round());              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3))              {                  return new Plane(                      new Coordinate(x1' y1' z1).Round()'                      new Coordinate(x2' y2' z2).Round()'                      new Coordinate(x3' y3' z3).Round());              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3))              {                  return new Plane(                      new Coordinate(x1' y1' z1).Round()'                      new Coordinate(x2' y2' z2).Round()'                      new Coordinate(x3' y3' z3).Round());              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyPlane,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x1)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y1)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z1)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x2)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out y2)                  && decimal.TryParse(split[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out z2)                  && decimal.TryParse(split[6]' NumberStyles.Float' CultureInfo.InvariantCulture' out x3)                  && decimal.TryParse(split[7]' NumberStyles.Float' CultureInfo.InvariantCulture' out y3)                  && decimal.TryParse(split[8]' NumberStyles.Float' CultureInfo.InvariantCulture' out z3))              {                  return new Plane(                      new Coordinate(x1' y1' z1).Round()'                      new Coordinate(x2' y2' z2).Round()'                      new Coordinate(x3' y3' z3).Round());              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyCoordinate,The following statement contains a magic number: if (prop == null || prop.Count(c => c == ' ') != 2) return defaultValue;
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyCoordinate,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z))              {                  return new Coordinate(x' y' z);              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyCoordinateArray,The following statement contains a magic number: if (prop == null || prop.Count(c => c == ' ') != (count * 3 - 1)) return defaultValue;
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyCoordinateArray,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  decimal x' y' z;                  if (decimal.TryParse(split[i * 3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                      && decimal.TryParse(split[i * 3 + 1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                      && decimal.TryParse(split[i * 3 + 2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z))                  {                      defaultValue[i] = new Coordinate(x' y' z);                  }              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyCoordinateArray,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  decimal x' y' z;                  if (decimal.TryParse(split[i * 3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                      && decimal.TryParse(split[i * 3 + 1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                      && decimal.TryParse(split[i * 3 + 2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z))                  {                      defaultValue[i] = new Coordinate(x' y' z);                  }              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyCoordinateArray,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  decimal x' y' z;                  if (decimal.TryParse(split[i * 3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                      && decimal.TryParse(split[i * 3 + 1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                      && decimal.TryParse(split[i * 3 + 2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z))                  {                      defaultValue[i] = new Coordinate(x' y' z);                  }              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyCoordinateArray,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  decimal x' y' z;                  if (decimal.TryParse(split[i * 3]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                      && decimal.TryParse(split[i * 3 + 1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                      && decimal.TryParse(split[i * 3 + 2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z))                  {                      defaultValue[i] = new Coordinate(x' y' z);                  }              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyTextureAxis,The following statement contains a magic number: if (prop == null || prop.Count(c => c == ' ') != 4) return defaultValue;
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyTextureAxis,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out sh)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out sc))              {                  return Tuple.Create(new Coordinate(x' y' z)' sh' sc);              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyTextureAxis,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out sh)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out sc))              {                  return Tuple.Create(new Coordinate(x' y' z)' sh' sc);              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyTextureAxis,The following statement contains a magic number: if (decimal.TryParse(split[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out x)                  && decimal.TryParse(split[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out y)                  && decimal.TryParse(split[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out z)                  && decimal.TryParse(split[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out sh)                  && decimal.TryParse(split[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out sc))              {                  return Tuple.Create(new Coordinate(x' y' z)' sh' sc);              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyColour,The following statement contains a magic number: if (prop == null || prop.Count(x => x == ' ') != 2) return defaultValue;
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,PropertyColour,The following statement contains a magic number: if (int.TryParse(split[0]' NumberStyles.Integer' CultureInfo.InvariantCulture' out r)                  && int.TryParse(split[1]' NumberStyles.Integer' CultureInfo.InvariantCulture' out g)                  && int.TryParse(split[2]' NumberStyles.Integer' CultureInfo.InvariantCulture' out b))              {                  return Color.FromArgb(r' g' b);              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ConvertPrimitive,The following statement contains a magic number: switch (primitiveType)              {                  case "Boolean":                      return Boolean.Parse(value);                  case "String":                      return value;                  case "Numeric":                      return Decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture);                  case "DateTime":                      return DateTime.ParseExact(value' "u"' CultureInfo.InvariantCulture);                  case "Colour":                      return Color.FromArgb(int.Parse(spl[3])' int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2]));                  case "Coordinate":                      return Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'));                  case "Box":                      return new Box(                          Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))'                          Coordinate.Parse(spl[3].TrimStart('(')' spl[4]' spl[5].TrimEnd(')')));                  case "Plane":                      return new Plane(Coordinate.Parse(spl[0].TrimStart('(')' spl[1]' spl[2].TrimEnd(')'))' Decimal.Parse(spl[3]));                  case "Rectangle":                      return new Rectangle(int.Parse(spl[0])' int.Parse(spl[1])' int.Parse(spl[2])' int.Parse(spl[3]));                  default:                      throw new ArgumentException();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,Print,The following statement contains a magic number: var preTabStr = new string(' '' tabs * 4);
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,Print,The following statement contains a magic number: var postTabStr = new string(' '' (tabs + 1) * 4);
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,Print,The following statement contains a magic number: foreach (var kv in Properties)              {                  tw.Write(postTabStr);                  tw.Write('"');                  tw.Write(LengthLimit(kv.Key' 1024));                  tw.Write('"');                  tw.Write(' ');                  tw.Write('"');                  tw.Write(LengthLimit((kv.Value ?? "").Replace('"'' '`')' 1024));                  tw.Write('"');                  tw.WriteLine();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,Print,The following statement contains a magic number: foreach (var kv in Properties)              {                  tw.Write(postTabStr);                  tw.Write('"');                  tw.Write(LengthLimit(kv.Key' 1024));                  tw.Write('"');                  tw.Write(' ');                  tw.Write('"');                  tw.Write(LengthLimit((kv.Value ?? "").Replace('"'' '`')' 1024));                  tw.Write('"');                  tw.WriteLine();              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ParseStructure,The following statement contains a magic number: if (spl.Length != 2 || spl[1] != "{")              {                  do                  {                      line = CleanLine(reader.ReadLine());                  } while (String.IsNullOrWhiteSpace(line));                  if (line != "{")                  {                      return gs;                  }              }
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ValidStructStartString,The following statement contains a magic number: return split.Length == 1 || (split.Length == 2 && split[1] == "{");
Magic Number,Sledge.Providers,GenericStructure,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GenericStructure.cs,ValidStructPropertyString,The following statement contains a magic number: return split.Length == 2;
Magic Number,Sledge.Providers,BinaryExtensions,C:\repos\LogicAndTrick_sledge\Sledge.Providers\BinaryExtensions.cs,WritePlane,The following statement contains a magic number: WriteCoordinate(bw' coords[2]);
Magic Number,Sledge.Providers,BinaryExtensions,C:\repos\LogicAndTrick_sledge\Sledge.Providers\BinaryExtensions.cs,ReadRGBColour,The following statement contains a magic number: return Color.FromArgb(255' br.ReadByte()' br.ReadByte()' br.ReadByte());
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: Assert(parts[4] == ")");
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: Assert(parts[5] == "(");
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: Assert(parts[9] == ")");
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: Assert(parts[10] == "(");
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: Assert(parts[14] == ")");
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: var face = new Face(generator.GetNextFaceID())              {                  Plane = new Plane(Coordinate.Parse(parts[1]' parts[2]' parts[3])'                      Coordinate.Parse(parts[6]' parts[7]' parts[8])'                      Coordinate.Parse(parts[11]' parts[12]' parts[13]))'                  Texture = {Name = parts[15]}              };
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadFace,The following statement contains a magic number: if (parts.Count == 21 || parts.Count == 24)              {                  QuakeEdAlignTextureToWorld(face);                    var xshift = decimal.Parse(parts[16]' ns' CultureInfo.InvariantCulture);                  var yshift = decimal.Parse(parts[17]' ns' CultureInfo.InvariantCulture);                  var rotate = decimal.Parse(parts[18]' ns' CultureInfo.InvariantCulture);                  var xscale = decimal.Parse(parts[19]' ns' CultureInfo.InvariantCulture);                  var yscale = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                    face.SetTextureRotation(-rotate);                  face.Texture.Rotation = rotate;                  face.Texture.XScale = xscale;                  face.Texture.YScale = yscale;                  face.Texture.XShift = xshift;                  face.Texture.YShift = yshift;              }              else              {                  Assert(parts[16] == "[");                  Assert(parts[21] == "]");                  Assert(parts[22] == "[");                  Assert(parts[27] == "]");                    face.Texture.UAxis = Coordinate.Parse(parts[17]' parts[18]' parts[19]);                  face.Texture.XShift = decimal.Parse(parts[20]' ns' CultureInfo.InvariantCulture);                  face.Texture.VAxis = Coordinate.Parse(parts[23]' parts[24]' parts[25]);                  face.Texture.YShift = decimal.Parse(parts[26]' ns' CultureInfo.InvariantCulture);                  face.Texture.Rotation = decimal.Parse(parts[28]' ns' CultureInfo.InvariantCulture);                  face.Texture.XScale = decimal.Parse(parts[29]' ns' CultureInfo.InvariantCulture);                  face.Texture.YScale = decimal.Parse(parts[30]' ns' CultureInfo.InvariantCulture);              }
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,WriteFace,The following statement contains a magic number: var strings = face.Vertices.Take(3).Select(x => "( " + FormatCoordinate(x.Location) + " )").ToList();
Magic Number,Sledge.Providers.Map,MapFormatProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\MapFormatProvider.cs,ReadProperty,The following statement contains a magic number: if (key == "classname")              {                  ent.EntityData.Name = val;              }              else if (key == "spawnflags")              {                  ent.EntityData.Flags = int.Parse(val);              }              else if (key == "origin")              {                  var osp = val.Split(' ');                  ent.Origin = Coordinate.Parse(osp[0]' osp[1]' osp[2]);              }              else if (!ExcludedKeys.Contains(key.ToLower()))              {                  ent.EntityData.SetPropertyValue(key' val);              }
Magic Number,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  if (line.StartsWith("# Scale: "))                  {                      var num = line.Substring(9);                      decimal s;                      if (decimal.TryParse(num' NumberStyles.Float' CultureInfo.InvariantCulture' out s))                      {                          scale = s;                      }                  }                    line = CleanLine(line);                  string keyword' values;                  SplitLine(line' out keyword' out values);                  if (String.IsNullOrWhiteSpace(keyword)) continue;                    var vals = (values ?? "").Split(' ').Where(x => !String.IsNullOrWhiteSpace(x)).ToArray();                  switch (keyword.ToLower())                  {                      // Things I care about                      case "v": // geometric vertices                          points.Add(Coordinate.Parse(vals[0]' vals[1]' vals[2]) * scale);                          break;                      case "f": // face                          faces.Add(new ObjFace(currentGroup' vals.Select(x => ParseFaceIndex(points' x))));                          break;                      case "g": // group name                          currentGroup = (values ?? "").Trim();                          break;                        // Things I don't care about                      #region Not Implemented                        // Vertex data                      // "v"                      case "vt": // texture vertices                          break;                      case "vn": // vertex normals                          break;                      case "vp": // parameter space vertices                      case "cstype": // rational or non-rational forms of curve or surface type: basis matrix' Bezier' B-spline' Cardinal' Taylor                      case "degree": // degree                      case "bmat": // basis matrix                      case "step": // step size                          // not supported                          break;                        // Elements                      // "f"                      case "p": // point                      case "l": // line                      case "curv": // curve                      case "curv2": // 2D curve                      case "surf": // surface                          // not supported                          break;                        // Free-form curve/surface body statements                      case "parm": // parameter name                      case "trim": // outer trimming loop (trim)                      case "hole": // inner trimming loop (hole)                      case "scrv": // special curve (scrv)                      case "sp":  // special point (sp)                      case "end": // end statement (end)                          // not supported                          break;                        // Connectivity between free-form surfaces                      case "con": // connect                          // not supported                          break;                        // Grouping                      // "g"                      case "s": // smoothing group                          break;                      case "mg": // merging group                          break;                      case "o": // object name                          // not supported                          break;                        // Display/render attributes                      case "mtllib": // material library                      case "usemtl": // material name                      case "usemap": // texture map name                      case "bevel": // bevel interpolation                      case "c_interp": // color interpolation                      case "d_interp": // dissolve interpolation                      case "lod": // level of detail                      case "shadow_obj": // shadow casting                      case "trace_obj": // ray tracing                      case "ctech": // curve approximation technique                      case "stech": // surface approximation technique                          // not relevant                          break;                        #endregion                  }              }
Magic Number,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  if (line.StartsWith("# Scale: "))                  {                      var num = line.Substring(9);                      decimal s;                      if (decimal.TryParse(num' NumberStyles.Float' CultureInfo.InvariantCulture' out s))                      {                          scale = s;                      }                  }                    line = CleanLine(line);                  string keyword' values;                  SplitLine(line' out keyword' out values);                  if (String.IsNullOrWhiteSpace(keyword)) continue;                    var vals = (values ?? "").Split(' ').Where(x => !String.IsNullOrWhiteSpace(x)).ToArray();                  switch (keyword.ToLower())                  {                      // Things I care about                      case "v": // geometric vertices                          points.Add(Coordinate.Parse(vals[0]' vals[1]' vals[2]) * scale);                          break;                      case "f": // face                          faces.Add(new ObjFace(currentGroup' vals.Select(x => ParseFaceIndex(points' x))));                          break;                      case "g": // group name                          currentGroup = (values ?? "").Trim();                          break;                        // Things I don't care about                      #region Not Implemented                        // Vertex data                      // "v"                      case "vt": // texture vertices                          break;                      case "vn": // vertex normals                          break;                      case "vp": // parameter space vertices                      case "cstype": // rational or non-rational forms of curve or surface type: basis matrix' Bezier' B-spline' Cardinal' Taylor                      case "degree": // degree                      case "bmat": // basis matrix                      case "step": // step size                          // not supported                          break;                        // Elements                      // "f"                      case "p": // point                      case "l": // line                      case "curv": // curve                      case "curv2": // 2D curve                      case "surf": // surface                          // not supported                          break;                        // Free-form curve/surface body statements                      case "parm": // parameter name                      case "trim": // outer trimming loop (trim)                      case "hole": // inner trimming loop (hole)                      case "scrv": // special curve (scrv)                      case "sp":  // special point (sp)                      case "end": // end statement (end)                          // not supported                          break;                        // Connectivity between free-form surfaces                      case "con": // connect                          // not supported                          break;                        // Grouping                      // "g"                      case "s": // smoothing group                          break;                      case "mg": // merging group                          break;                      case "o": // object name                          // not supported                          break;                        // Display/render attributes                      case "mtllib": // material library                      case "usemtl": // material name                      case "usemap": // texture map name                      case "bevel": // bevel interpolation                      case "c_interp": // color interpolation                      case "d_interp": // dissolve interpolation                      case "lod": // level of detail                      case "shadow_obj": // shadow casting                      case "trace_obj": // ray tracing                      case "ctech": // curve approximation technique                      case "stech": // surface approximation technique                          // not relevant                          break;                        #endregion                  }              }
Magic Number,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,CreateSolids,The following statement contains a magic number: if (solid.IsValid())              {                  // Do an additional check to ensure that all edges are shared                  var edges = solid.Faces.SelectMany(x => x.GetEdges()).ToList();                  if (edges.All(x => edges.Count(y => x.EquivalentTo(y)) == 2))                  {                      // Valid! let's get out of here!                      yield return solid;                      yield break;                  }              }
Magic Number,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,CreateSolids,The following statement contains a magic number: foreach (var face in faces)              {                  var polygon = new Polygon(face.Vertices.Select(x => x.Location));                  if (!polygon.IsValid() || !polygon.IsConvex())                  {                      // tetrahedrons                      foreach (var triangle in face.GetTriangles())                      {                          var tf = new Face(map.IDGenerator.GetNextFaceID());                          tf.Plane = new Plane(triangle[0].Location' triangle[1].Location' triangle[2].Location);                          tf.Vertices.AddRange(triangle.Select(x => new Vertex(x.Location' tf)));                          tf.UpdateBoundingBox();                          yield return SolidifyFace(map' tf);                      }                  }                  else                  {                      // cone/pyramid/whatever                      yield return SolidifyFace(map' face);                  }              }
Magic Number,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,SolidifyFace,The following statement contains a magic number: var offset = center - face.Plane.Normal * 5;
Magic Number,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,CreateFace,The following statement contains a magic number: f.Plane = new Plane(verts[2]' verts[1]' verts[0]);
Magic Number,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadDisplacement,The following statement contains a magic number: disp.SetPower(dispinfo.PropertyInteger("power"' 3));
Magic Number,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,WriteFace,The following statement contains a magic number: ret["plane"] = String.Format("({0}) ({1}) ({2})"'                                           FormatCoordinate(face.Vertices[0].Location)'                                           FormatCoordinate(face.Vertices[1].Location)'                                           FormatCoordinate(face.Vertices[2].Location));
Magic Number,Sledge.Providers.Map,VmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\VmfProvider.cs,ReadSolid,The following statement contains a magic number: if (faces.All(x => x.Vertices.Count >= 3))              {                  // Vertices were stored in the VMF                  ret = new Solid(GetObjectID(solid' generator));                  ret.Faces.AddRange(faces);              }              else              {                  // Need to grab the vertices using plane intersections                  var idg = new IDGenerator(); // No need to increment the id generator if it doesn't have to be                  ret = Solid.CreateFromIntersectingPlanes(faces.Select(x => x.Plane)' idg);                  ret.ID = GetObjectID(solid' generator);                    for (var i = 0; i < ret.Faces.Count; i++)                  {                      var face = ret.Faces[i];                      var f = faces.FirstOrDefault(x => x.Plane.Normal.EquivalentTo(ret.Faces[i].Plane.Normal));                      if (f == null)                      {                          // TODO: Report invalid solids                          Debug.WriteLine("Invalid solid! ID: " + solid["id"]);                          return null;                      }                      face.Texture = f.Texture;                        var disp = f as Displacement;                      if (disp == null) continue;                        disp.Plane = face.Plane;                      disp.Vertices = face.Vertices;                      disp.Texture = f.Texture;                      disp.AlignTextureToWorld();                      disp.CalculatePoints();                      ret.Faces[i] = disp;                  }              }
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,GetFromStream,The following statement contains a magic number: if (Math.Abs(version - 2.2) > 0.01)              {                  throw new ProviderException("Incorrect RMF version number. Expected 2.2' got " + version + ".");              }
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,GetFromStream,The following statement contains a magic number: if (Math.Abs(version - 2.2) > 0.01)              {                  throw new ProviderException("Incorrect RMF version number. Expected 2.2' got " + version + ".");              }
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,GetFromStream,The following statement contains a magic number: var header = br.ReadFixedLengthString(Encoding.UTF8' 3);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,GetFromStream,The following statement contains a magic number: var docinfo = br.ReadFixedLengthString(Encoding.UTF8' 8);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,SaveToStream,The following statement contains a magic number: bw.WriteFixedLengthString(Encoding.UTF8' 3' "RMF");
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,SaveToStream,The following statement contains a magic number: bw.WriteFixedLengthString(Encoding.UTF8' 8' "DOCINFO");
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadEntityData,The following statement contains a magic number: br.ReadBytes(4);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadEntityData,The following statement contains a magic number: br.ReadBytes(12);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteEntityData,The following statement contains a magic number: bw.Write(new byte[4]);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteEntityData,The following statement contains a magic number: bw.Write(new byte[12]);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadMapEntity,The following statement contains a magic number: br.ReadBytes(2);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadMapEntity,The following statement contains a magic number: br.ReadBytes(4);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteMapEntity,The following statement contains a magic number: bw.Write(new byte[2]);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteMapEntity,The following statement contains a magic number: bw.Write(new byte[4]);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadFace,The following statement contains a magic number: var textureName = br.ReadFixedLengthString(Encoding.UTF8' 256);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadFace,The following statement contains a magic number: br.ReadBytes(4);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadFace,The following statement contains a magic number: br.ReadBytes(16);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteFace,The following statement contains a magic number: bw.WriteFixedLengthString(Encoding.UTF8' 256' face.Texture.Name);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteFace,The following statement contains a magic number: bw.Write(new byte[4]);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteFace,The following statement contains a magic number: bw.Write(new byte[16]);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadPathNode,The following statement contains a magic number: var node = new PathNode                  {                      Position = br.ReadCoordinate()'                      ID = br.ReadInt32()'                      Name = br.ReadFixedLengthString(Encoding.UTF8' 128)                  };
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WritePathNode,The following statement contains a magic number: bw.WriteFixedLengthString(Encoding.UTF8' 128' node.Name);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadPath,The following statement contains a magic number: var path = new Path                  {                      Name = br.ReadFixedLengthString(Encoding.UTF8' 128)'                      Type = br.ReadFixedLengthString(Encoding.UTF8' 128)'                      Direction = (PathDirection) br.ReadInt32()                  };
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadPath,The following statement contains a magic number: var path = new Path                  {                      Name = br.ReadFixedLengthString(Encoding.UTF8' 128)'                      Type = br.ReadFixedLengthString(Encoding.UTF8' 128)'                      Direction = (PathDirection) br.ReadInt32()                  };
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WritePath,The following statement contains a magic number: bw.WriteFixedLengthString(Encoding.UTF8' 128' path.Name);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WritePath,The following statement contains a magic number: bw.WriteFixedLengthString(Encoding.UTF8' 128' path.Type);
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadVisgroups,The following statement contains a magic number: for (var i = 0; i < numVisgroups; i++)              {                  var vis = new Visgroup                      {                          Name = br.ReadFixedLengthString(Encoding.UTF8' 128)'                          Colour = br.ReadRGBAColour()'                          ID = br.ReadInt32()'                          Visible = br.ReadBoolean()                      };                  vis.Colour = Color.FromArgb(255' vis.Colour);                  br.ReadBytes(3);                  list.Add(vis);              }
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadVisgroups,The following statement contains a magic number: for (var i = 0; i < numVisgroups; i++)              {                  var vis = new Visgroup                      {                          Name = br.ReadFixedLengthString(Encoding.UTF8' 128)'                          Colour = br.ReadRGBAColour()'                          ID = br.ReadInt32()'                          Visible = br.ReadBoolean()                      };                  vis.Colour = Color.FromArgb(255' vis.Colour);                  br.ReadBytes(3);                  list.Add(vis);              }
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,ReadVisgroups,The following statement contains a magic number: for (var i = 0; i < numVisgroups; i++)              {                  var vis = new Visgroup                      {                          Name = br.ReadFixedLengthString(Encoding.UTF8' 128)'                          Colour = br.ReadRGBAColour()'                          ID = br.ReadInt32()'                          Visible = br.ReadBoolean()                      };                  vis.Colour = Color.FromArgb(255' vis.Colour);                  br.ReadBytes(3);                  list.Add(vis);              }
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteVisgroups,The following statement contains a magic number: foreach (var visgroup in vis)              {                  bw.WriteFixedLengthString(Encoding.UTF8' 128' visgroup.Name);                  bw.WriteRGBAColour(visgroup.Colour);                  bw.Write(visgroup.ID);                  bw.Write(visgroup.Visible);                  bw.Write(new byte[3]); // Unused              }
Magic Number,Sledge.Providers.Map,RmfProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\RmfProvider.cs,WriteVisgroups,The following statement contains a magic number: foreach (var visgroup in vis)              {                  bw.WriteFixedLengthString(Encoding.UTF8' 128' visgroup.Name);                  bw.WriteRGBAColour(visgroup.Colour);                  bw.Write(visgroup.ID);                  bw.Write(visgroup.Visible);                  bw.Write(new byte[3]); // Unused              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadModel,The following statement contains a magic number: var magicString = br.ReadFixedLengthString(Encoding.UTF8' 4);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadModel,The following statement contains a magic number: var path = br.ReadFixedLengthString(Encoding.UTF8' 64);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadModel,The following statement contains a magic number: if (version >= MDLVersionSource2006)              {                  var numlocalnodes = br.ReadInt32();                  var localnodeindex = br.ReadInt32();                  var localnodenameindex = br.ReadInt32();                    var numflexdesc = br.ReadInt32();                  var flexdescindex = br.ReadInt32();                    var numflexcontrollers = br.ReadInt32();                  var flexcontrollerindex = br.ReadInt32();                    var numflexrules = br.ReadInt32();                  var flexruleindex = br.ReadInt32();                    var numikchains = br.ReadInt32();                  var ikchainindex = br.ReadInt32();                    var nummouths = br.ReadInt32();                  var mouthindex = br.ReadInt32();                    var numlocalposeparameters = br.ReadInt32();                  var localposeparamindex = br.ReadInt32();                    var surfacepropindex = br.ReadInt32();                    var keyvalueindex = br.ReadInt32();                  var keyvaluesize = br.ReadInt32();                    var numlocalikautoplaylocks = br.ReadInt32();                  var localikautoplaylockindex = br.ReadInt32();                    var mass = br.ReadSingle();                  var contents = br.ReadInt32();                    var numincludemodels = br.ReadInt32();                  var includemodelindex = br.ReadInt32();                    var virtualModelPointer = br.ReadInt32();                    var szanimblocknameindex = br.ReadInt32();                  var numanimblocks = br.ReadInt32();                  var animblockindex = br.ReadInt32();                  var animblockModelPointer = br.ReadInt32();                    var bonetablebynameindex = br.ReadInt32();                    var pVertexBasePointer = br.ReadInt32();                  var pIndexBasePointer = br.ReadInt32();                    var constdirectionallightdot = br.ReadByte();                  var rootLod = br.ReadByte();                  var numAllowedRootLods = br.ReadByte(); // Unused in Source2006                  br.ReadByte(); // Unused                    var zeroframecacheindex = br.ReadInt32(); // Unused in Source2007                    if (version == MDLVersionSource2006)                  {                      br.ReadBytes(6); // Unused                  }                  else if (version == MDLVersionSource2007)                  {                      var numflexcontrollerui = br.ReadInt32();                      var flexcontrolleruiindex = br.ReadInt32();                        br.ReadIntArray(2); // Unused                        var studiohdr2Index = br.ReadInt32();                      br.ReadInt32(); // Unused                  }              }              else if (version == MDLVersionGoldsource)              {                  var soundTable = br.ReadInt32();                  var soundIndex = br.ReadInt32();                  var soundGroups = br.ReadInt32();                  var soundGroupIndex = br.ReadInt32();                    var numTransitions = br.ReadInt32();                  var transitionIndex = br.ReadInt32();              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadModel,The following statement contains a magic number: if (version >= MDLVersionSource2006)              {                  var numlocalnodes = br.ReadInt32();                  var localnodeindex = br.ReadInt32();                  var localnodenameindex = br.ReadInt32();                    var numflexdesc = br.ReadInt32();                  var flexdescindex = br.ReadInt32();                    var numflexcontrollers = br.ReadInt32();                  var flexcontrollerindex = br.ReadInt32();                    var numflexrules = br.ReadInt32();                  var flexruleindex = br.ReadInt32();                    var numikchains = br.ReadInt32();                  var ikchainindex = br.ReadInt32();                    var nummouths = br.ReadInt32();                  var mouthindex = br.ReadInt32();                    var numlocalposeparameters = br.ReadInt32();                  var localposeparamindex = br.ReadInt32();                    var surfacepropindex = br.ReadInt32();                    var keyvalueindex = br.ReadInt32();                  var keyvaluesize = br.ReadInt32();                    var numlocalikautoplaylocks = br.ReadInt32();                  var localikautoplaylockindex = br.ReadInt32();                    var mass = br.ReadSingle();                  var contents = br.ReadInt32();                    var numincludemodels = br.ReadInt32();                  var includemodelindex = br.ReadInt32();                    var virtualModelPointer = br.ReadInt32();                    var szanimblocknameindex = br.ReadInt32();                  var numanimblocks = br.ReadInt32();                  var animblockindex = br.ReadInt32();                  var animblockModelPointer = br.ReadInt32();                    var bonetablebynameindex = br.ReadInt32();                    var pVertexBasePointer = br.ReadInt32();                  var pIndexBasePointer = br.ReadInt32();                    var constdirectionallightdot = br.ReadByte();                  var rootLod = br.ReadByte();                  var numAllowedRootLods = br.ReadByte(); // Unused in Source2006                  br.ReadByte(); // Unused                    var zeroframecacheindex = br.ReadInt32(); // Unused in Source2007                    if (version == MDLVersionSource2006)                  {                      br.ReadBytes(6); // Unused                  }                  else if (version == MDLVersionSource2007)                  {                      var numflexcontrollerui = br.ReadInt32();                      var flexcontrolleruiindex = br.ReadInt32();                        br.ReadIntArray(2); // Unused                        var studiohdr2Index = br.ReadInt32();                      br.ReadInt32(); // Unused                  }              }              else if (version == MDLVersionGoldsource)              {                  var soundTable = br.ReadInt32();                  var soundIndex = br.ReadInt32();                  var soundGroups = br.ReadInt32();                  var soundGroupIndex = br.ReadInt32();                    var numTransitions = br.ReadInt32();                  var transitionIndex = br.ReadInt32();              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadTextureInfo,The following statement contains a magic number: if (data.Version == MDLVersionGoldsource)              {                  var tempBr = br;                  var disp = false;                  if (numTextures == 0)                  {                      disp = true;                      var texFile = file.Parent.GetFile(file.NameWithoutExtension + "T." + file.Extension);                      br = new BinaryReader(texFile.Open());                      br.BaseStream.Position = 180; // skip all the unused nonsense in the T file                      numTextures = br.ReadInt32();                      textureIndex = br.ReadInt32();                      var textureDataIndex = br.ReadInt32();                      var numSkinRef = br.ReadInt32();                      var numSkinFamilies = br.ReadInt32();                      var skinIndex = br.ReadInt32();                  }                  br.BaseStream.Position = textureIndex;                  for (var i = 0; i < numTextures; i++)                  {                      var name = br.ReadFixedLengthString(Encoding.ASCII' 64);                      var flags = br.ReadInt32();                      var width = br.ReadInt32();                      var height = br.ReadInt32();                      var index = br.ReadInt32();                        var savedPosition = br.BaseStream.Position;                      br.BaseStream.Position = index;                        var indices = br.ReadBytes(width * height);                      var palette = br.ReadBytes((byte.MaxValue + 1) * 3);                      var bmp = new Bitmap(width' height' PixelFormat.Format8bppIndexed);                      var pal = bmp.Palette;                      for (var j = 0; j <= byte.MaxValue; j++)                      {                          var k = j * 3;                          pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);                      }                      bmp.Palette = pal;                      var bmpData = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' bmp.PixelFormat);                      Marshal.Copy(indices' 0' bmpData.Scan0' indices.Length);                      bmp.UnlockBits(bmpData);                        var tex = new DataStructures.Models.Texture                                    {                                        Name = name'                                        Index = i'                                        Width = width'                                        Height = height'                                        Flags = flags'                                        Image = bmp                                    };                      model.Textures.Add(tex);                        br.BaseStream.Position = savedPosition;                  }                  //                  if (disp)                  {                      br.BaseStream.Dispose();                      br.Dispose();                      br = tempBr;                  }              }              else if (data.Version >= MDLVersionSource2006)              {                                }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadTextureInfo,The following statement contains a magic number: if (data.Version == MDLVersionGoldsource)              {                  var tempBr = br;                  var disp = false;                  if (numTextures == 0)                  {                      disp = true;                      var texFile = file.Parent.GetFile(file.NameWithoutExtension + "T." + file.Extension);                      br = new BinaryReader(texFile.Open());                      br.BaseStream.Position = 180; // skip all the unused nonsense in the T file                      numTextures = br.ReadInt32();                      textureIndex = br.ReadInt32();                      var textureDataIndex = br.ReadInt32();                      var numSkinRef = br.ReadInt32();                      var numSkinFamilies = br.ReadInt32();                      var skinIndex = br.ReadInt32();                  }                  br.BaseStream.Position = textureIndex;                  for (var i = 0; i < numTextures; i++)                  {                      var name = br.ReadFixedLengthString(Encoding.ASCII' 64);                      var flags = br.ReadInt32();                      var width = br.ReadInt32();                      var height = br.ReadInt32();                      var index = br.ReadInt32();                        var savedPosition = br.BaseStream.Position;                      br.BaseStream.Position = index;                        var indices = br.ReadBytes(width * height);                      var palette = br.ReadBytes((byte.MaxValue + 1) * 3);                      var bmp = new Bitmap(width' height' PixelFormat.Format8bppIndexed);                      var pal = bmp.Palette;                      for (var j = 0; j <= byte.MaxValue; j++)                      {                          var k = j * 3;                          pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);                      }                      bmp.Palette = pal;                      var bmpData = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' bmp.PixelFormat);                      Marshal.Copy(indices' 0' bmpData.Scan0' indices.Length);                      bmp.UnlockBits(bmpData);                        var tex = new DataStructures.Models.Texture                                    {                                        Name = name'                                        Index = i'                                        Width = width'                                        Height = height'                                        Flags = flags'                                        Image = bmp                                    };                      model.Textures.Add(tex);                        br.BaseStream.Position = savedPosition;                  }                  //                  if (disp)                  {                      br.BaseStream.Dispose();                      br.Dispose();                      br = tempBr;                  }              }              else if (data.Version >= MDLVersionSource2006)              {                                }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadTextureInfo,The following statement contains a magic number: if (data.Version == MDLVersionGoldsource)              {                  var tempBr = br;                  var disp = false;                  if (numTextures == 0)                  {                      disp = true;                      var texFile = file.Parent.GetFile(file.NameWithoutExtension + "T." + file.Extension);                      br = new BinaryReader(texFile.Open());                      br.BaseStream.Position = 180; // skip all the unused nonsense in the T file                      numTextures = br.ReadInt32();                      textureIndex = br.ReadInt32();                      var textureDataIndex = br.ReadInt32();                      var numSkinRef = br.ReadInt32();                      var numSkinFamilies = br.ReadInt32();                      var skinIndex = br.ReadInt32();                  }                  br.BaseStream.Position = textureIndex;                  for (var i = 0; i < numTextures; i++)                  {                      var name = br.ReadFixedLengthString(Encoding.ASCII' 64);                      var flags = br.ReadInt32();                      var width = br.ReadInt32();                      var height = br.ReadInt32();                      var index = br.ReadInt32();                        var savedPosition = br.BaseStream.Position;                      br.BaseStream.Position = index;                        var indices = br.ReadBytes(width * height);                      var palette = br.ReadBytes((byte.MaxValue + 1) * 3);                      var bmp = new Bitmap(width' height' PixelFormat.Format8bppIndexed);                      var pal = bmp.Palette;                      for (var j = 0; j <= byte.MaxValue; j++)                      {                          var k = j * 3;                          pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);                      }                      bmp.Palette = pal;                      var bmpData = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' bmp.PixelFormat);                      Marshal.Copy(indices' 0' bmpData.Scan0' indices.Length);                      bmp.UnlockBits(bmpData);                        var tex = new DataStructures.Models.Texture                                    {                                        Name = name'                                        Index = i'                                        Width = width'                                        Height = height'                                        Flags = flags'                                        Image = bmp                                    };                      model.Textures.Add(tex);                        br.BaseStream.Position = savedPosition;                  }                  //                  if (disp)                  {                      br.BaseStream.Dispose();                      br.Dispose();                      br = tempBr;                  }              }              else if (data.Version >= MDLVersionSource2006)              {                                }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadTextureInfo,The following statement contains a magic number: if (data.Version == MDLVersionGoldsource)              {                  var tempBr = br;                  var disp = false;                  if (numTextures == 0)                  {                      disp = true;                      var texFile = file.Parent.GetFile(file.NameWithoutExtension + "T." + file.Extension);                      br = new BinaryReader(texFile.Open());                      br.BaseStream.Position = 180; // skip all the unused nonsense in the T file                      numTextures = br.ReadInt32();                      textureIndex = br.ReadInt32();                      var textureDataIndex = br.ReadInt32();                      var numSkinRef = br.ReadInt32();                      var numSkinFamilies = br.ReadInt32();                      var skinIndex = br.ReadInt32();                  }                  br.BaseStream.Position = textureIndex;                  for (var i = 0; i < numTextures; i++)                  {                      var name = br.ReadFixedLengthString(Encoding.ASCII' 64);                      var flags = br.ReadInt32();                      var width = br.ReadInt32();                      var height = br.ReadInt32();                      var index = br.ReadInt32();                        var savedPosition = br.BaseStream.Position;                      br.BaseStream.Position = index;                        var indices = br.ReadBytes(width * height);                      var palette = br.ReadBytes((byte.MaxValue + 1) * 3);                      var bmp = new Bitmap(width' height' PixelFormat.Format8bppIndexed);                      var pal = bmp.Palette;                      for (var j = 0; j <= byte.MaxValue; j++)                      {                          var k = j * 3;                          pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);                      }                      bmp.Palette = pal;                      var bmpData = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' bmp.PixelFormat);                      Marshal.Copy(indices' 0' bmpData.Scan0' indices.Length);                      bmp.UnlockBits(bmpData);                        var tex = new DataStructures.Models.Texture                                    {                                        Name = name'                                        Index = i'                                        Width = width'                                        Height = height'                                        Flags = flags'                                        Image = bmp                                    };                      model.Textures.Add(tex);                        br.BaseStream.Position = savedPosition;                  }                  //                  if (disp)                  {                      br.BaseStream.Dispose();                      br.Dispose();                      br = tempBr;                  }              }              else if (data.Version >= MDLVersionSource2006)              {                                }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadTextureInfo,The following statement contains a magic number: if (data.Version == MDLVersionGoldsource)              {                  var tempBr = br;                  var disp = false;                  if (numTextures == 0)                  {                      disp = true;                      var texFile = file.Parent.GetFile(file.NameWithoutExtension + "T." + file.Extension);                      br = new BinaryReader(texFile.Open());                      br.BaseStream.Position = 180; // skip all the unused nonsense in the T file                      numTextures = br.ReadInt32();                      textureIndex = br.ReadInt32();                      var textureDataIndex = br.ReadInt32();                      var numSkinRef = br.ReadInt32();                      var numSkinFamilies = br.ReadInt32();                      var skinIndex = br.ReadInt32();                  }                  br.BaseStream.Position = textureIndex;                  for (var i = 0; i < numTextures; i++)                  {                      var name = br.ReadFixedLengthString(Encoding.ASCII' 64);                      var flags = br.ReadInt32();                      var width = br.ReadInt32();                      var height = br.ReadInt32();                      var index = br.ReadInt32();                        var savedPosition = br.BaseStream.Position;                      br.BaseStream.Position = index;                        var indices = br.ReadBytes(width * height);                      var palette = br.ReadBytes((byte.MaxValue + 1) * 3);                      var bmp = new Bitmap(width' height' PixelFormat.Format8bppIndexed);                      var pal = bmp.Palette;                      for (var j = 0; j <= byte.MaxValue; j++)                      {                          var k = j * 3;                          pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);                      }                      bmp.Palette = pal;                      var bmpData = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' bmp.PixelFormat);                      Marshal.Copy(indices' 0' bmpData.Scan0' indices.Length);                      bmp.UnlockBits(bmpData);                        var tex = new DataStructures.Models.Texture                                    {                                        Name = name'                                        Index = i'                                        Width = width'                                        Height = height'                                        Flags = flags'                                        Image = bmp                                    };                      model.Textures.Add(tex);                        br.BaseStream.Position = savedPosition;                  }                  //                  if (disp)                  {                      br.BaseStream.Dispose();                      br.Dispose();                      br = tempBr;                  }              }              else if (data.Version >= MDLVersionSource2006)              {                                }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadTextureInfo,The following statement contains a magic number: if (data.Version == MDLVersionGoldsource)              {                  var tempBr = br;                  var disp = false;                  if (numTextures == 0)                  {                      disp = true;                      var texFile = file.Parent.GetFile(file.NameWithoutExtension + "T." + file.Extension);                      br = new BinaryReader(texFile.Open());                      br.BaseStream.Position = 180; // skip all the unused nonsense in the T file                      numTextures = br.ReadInt32();                      textureIndex = br.ReadInt32();                      var textureDataIndex = br.ReadInt32();                      var numSkinRef = br.ReadInt32();                      var numSkinFamilies = br.ReadInt32();                      var skinIndex = br.ReadInt32();                  }                  br.BaseStream.Position = textureIndex;                  for (var i = 0; i < numTextures; i++)                  {                      var name = br.ReadFixedLengthString(Encoding.ASCII' 64);                      var flags = br.ReadInt32();                      var width = br.ReadInt32();                      var height = br.ReadInt32();                      var index = br.ReadInt32();                        var savedPosition = br.BaseStream.Position;                      br.BaseStream.Position = index;                        var indices = br.ReadBytes(width * height);                      var palette = br.ReadBytes((byte.MaxValue + 1) * 3);                      var bmp = new Bitmap(width' height' PixelFormat.Format8bppIndexed);                      var pal = bmp.Palette;                      for (var j = 0; j <= byte.MaxValue; j++)                      {                          var k = j * 3;                          pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);                      }                      bmp.Palette = pal;                      var bmpData = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' bmp.PixelFormat);                      Marshal.Copy(indices' 0' bmpData.Scan0' indices.Length);                      bmp.UnlockBits(bmpData);                        var tex = new DataStructures.Models.Texture                                    {                                        Name = name'                                        Index = i'                                        Width = width'                                        Height = height'                                        Flags = flags'                                        Image = bmp                                    };                      model.Textures.Add(tex);                        br.BaseStream.Position = savedPosition;                  }                  //                  if (disp)                  {                      br.BaseStream.Dispose();                      br.Dispose();                      br = tempBr;                  }              }              else if (data.Version >= MDLVersionSource2006)              {                                }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The following statement contains a magic number: if (data.Version == MDLVersionGoldsource)              {                  name = br.ReadFixedLengthString(Encoding.ASCII' 32);                  fps = br.ReadSingle();              }              else if (data.Version >= MDLVersionSource2006)              {                  var baseIndex = br.ReadInt32();                  var labelIndex = br.ReadInt32();                  var activityNameIndex = br.ReadInt32();              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The following statement contains a magic number: if (data.Version >= MDLVersionSource2006)              {                  var movementindex = br.ReadInt32();                  groupsize = br.ReadIntArray(2);              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The following statement contains a magic number: var blendtype = br.ReadIntArray(2);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The following statement contains a magic number: var blendstart = br.ReadSingleArray(2);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The following statement contains a magic number: var blendend = br.ReadSingleArray(2);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequence,The following statement contains a magic number: if (data.Version >= MDLVersionSource2006)              {                  var pose = br.ReadInt32();                    var numikrules = br.ReadInt32();                    var numautolayers = br.ReadInt32();                  var autolayerindex = br.ReadInt32();                    var weightlistindex = br.ReadInt32();                    var wlpos = br.BaseStream.Position;                  br.BaseStream.Position = startReadIndex + weightlistindex;                                    var weightList = br.ReadSingleArray(model.Bones.Count);                                    br.BaseStream.Position = wlpos;                    var posekeyindex = br.ReadInt32();                    var numiklocks = br.ReadInt32();                  var iklockindex = br.ReadInt32();                    var keyvalueindex = br.ReadInt32();                  var keyvaluesize = br.ReadInt32();                    var cycleposeindex = br.ReadInt32();                  br.ReadIntArray(7); // Unused              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceAnimationData,The following statement contains a magic number: for (var i = 0; i < numAnim; i++)              {                  var animStartPos = br.BaseStream.Position;                    var basePointer = br.ReadInt32();                  var szNameIndex = br.ReadInt32();                    var fps = br.ReadSingle();                  var animDescFlags = br.ReadInt32();                    var numframes = br.ReadInt32();                    var numMovements = br.ReadInt32();                  var movementIndex = br.ReadInt32();                    br.ReadVector3Array(2); // bounding box; unused                    var ablock = br.ReadInt32();                  var aindex = br.ReadInt32();                    var numIkRules = br.ReadInt32();                  var ikRuleIndex = br.ReadInt32();                    var animBlockIkRuleIndex = br.ReadInt32();                  br.ReadIntArray(7); // Unused                    var animEndPos = br.BaseStream.Position;                    var sourceAnim = new SourceAnimation(i' numframes' fps' animDescFlags' numMovements' movementIndex'                                                       ablock' aindex' numIkRules' ikRuleIndex' animBlockIkRuleIndex);                    var currentOffset = aindex;                  short nextOffset;                  do                  {                      br.BaseStream.Position = animStartPos + currentOffset;                      var animBone = br.ReadByte();                      var animFlags = br.ReadByte();                      nextOffset = br.ReadInt16();                      currentOffset += nextOffset;                        var aniBone = new SourceAnimationBone(animBone' animFlags' numframes);                      aniBone.ReadData(br);                      sourceAnim.AnimationBones.Add(aniBone);                    } while (nextOffset != 0);                    modelData.SourceAnimations.Add(sourceAnim);                    br.BaseStream.Position = animEndPos;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceAnimationData,The following statement contains a magic number: for (var i = 0; i < numAnim; i++)              {                  var animStartPos = br.BaseStream.Position;                    var basePointer = br.ReadInt32();                  var szNameIndex = br.ReadInt32();                    var fps = br.ReadSingle();                  var animDescFlags = br.ReadInt32();                    var numframes = br.ReadInt32();                    var numMovements = br.ReadInt32();                  var movementIndex = br.ReadInt32();                    br.ReadVector3Array(2); // bounding box; unused                    var ablock = br.ReadInt32();                  var aindex = br.ReadInt32();                    var numIkRules = br.ReadInt32();                  var ikRuleIndex = br.ReadInt32();                    var animBlockIkRuleIndex = br.ReadInt32();                  br.ReadIntArray(7); // Unused                    var animEndPos = br.BaseStream.Position;                    var sourceAnim = new SourceAnimation(i' numframes' fps' animDescFlags' numMovements' movementIndex'                                                       ablock' aindex' numIkRules' ikRuleIndex' animBlockIkRuleIndex);                    var currentOffset = aindex;                  short nextOffset;                  do                  {                      br.BaseStream.Position = animStartPos + currentOffset;                      var animBone = br.ReadByte();                      var animFlags = br.ReadByte();                      nextOffset = br.ReadInt16();                      currentOffset += nextOffset;                        var aniBone = new SourceAnimationBone(animBone' animFlags' numframes);                      aniBone.ReadData(br);                      sourceAnim.AnimationBones.Add(aniBone);                    } while (nextOffset != 0);                    modelData.SourceAnimations.Add(sourceAnim);                    br.BaseStream.Position = animEndPos;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationGoldsource,The following statement contains a magic number: foreach (var bone in model.Bones)              {                  var offsetPos = br.BaseStream.Position;                  var offsets = br.ReadShortArray(6);                  var restorePoint = br.BaseStream.Position;                    var position = bone.DefaultPosition;                  var angles = bone.DefaultAngles;                    var boneFrames = new List<float[]>();                  for (var i = 0; i < numframes; i++) boneFrames.Add(new float[] {0' 0' 0' 0' 0' 0});                    for (var i = 0; i < 6; i++) // For each offset [X' Y' Z' XR' YR' ZR]                  {                      if (offsets[i] <= 0) continue;                      br.BaseStream.Position = offsetPos + offsets[i];                      var values = ReadRLEEncodedAnimationFrameValues(br' numframes);                      for (var f = 0; f < numframes; f++)                      {                          boneFrames[f][i] += values[f];                      }                  }                    for (var f = 0; f < numframes; f++)                  {                      var frame = boneFrames[f];                      var dps = bone.DefaultPositionScale;                      var das = bone.DefaultAnglesScale;                      var fpos = new Vector3(frame[0] * dps.X' frame[1] * dps.Y' frame[2] * dps.Z) + bone.DefaultPosition;                      var fang = new Vector3(frame[3] * das.X' frame[4] * das.Y' frame[5] * das.Z) + bone.DefaultAngles;                      anim.Frames[f].Bones.Add(new BoneAnimationFrame(bone' fpos' OpenTkExtensions.QuaternionFromEulerRotation(fang)));                  }                    br.BaseStream.Position = restorePoint;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationGoldsource,The following statement contains a magic number: foreach (var bone in model.Bones)              {                  var offsetPos = br.BaseStream.Position;                  var offsets = br.ReadShortArray(6);                  var restorePoint = br.BaseStream.Position;                    var position = bone.DefaultPosition;                  var angles = bone.DefaultAngles;                    var boneFrames = new List<float[]>();                  for (var i = 0; i < numframes; i++) boneFrames.Add(new float[] {0' 0' 0' 0' 0' 0});                    for (var i = 0; i < 6; i++) // For each offset [X' Y' Z' XR' YR' ZR]                  {                      if (offsets[i] <= 0) continue;                      br.BaseStream.Position = offsetPos + offsets[i];                      var values = ReadRLEEncodedAnimationFrameValues(br' numframes);                      for (var f = 0; f < numframes; f++)                      {                          boneFrames[f][i] += values[f];                      }                  }                    for (var f = 0; f < numframes; f++)                  {                      var frame = boneFrames[f];                      var dps = bone.DefaultPositionScale;                      var das = bone.DefaultAnglesScale;                      var fpos = new Vector3(frame[0] * dps.X' frame[1] * dps.Y' frame[2] * dps.Z) + bone.DefaultPosition;                      var fang = new Vector3(frame[3] * das.X' frame[4] * das.Y' frame[5] * das.Z) + bone.DefaultAngles;                      anim.Frames[f].Bones.Add(new BoneAnimationFrame(bone' fpos' OpenTkExtensions.QuaternionFromEulerRotation(fang)));                  }                    br.BaseStream.Position = restorePoint;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationGoldsource,The following statement contains a magic number: foreach (var bone in model.Bones)              {                  var offsetPos = br.BaseStream.Position;                  var offsets = br.ReadShortArray(6);                  var restorePoint = br.BaseStream.Position;                    var position = bone.DefaultPosition;                  var angles = bone.DefaultAngles;                    var boneFrames = new List<float[]>();                  for (var i = 0; i < numframes; i++) boneFrames.Add(new float[] {0' 0' 0' 0' 0' 0});                    for (var i = 0; i < 6; i++) // For each offset [X' Y' Z' XR' YR' ZR]                  {                      if (offsets[i] <= 0) continue;                      br.BaseStream.Position = offsetPos + offsets[i];                      var values = ReadRLEEncodedAnimationFrameValues(br' numframes);                      for (var f = 0; f < numframes; f++)                      {                          boneFrames[f][i] += values[f];                      }                  }                    for (var f = 0; f < numframes; f++)                  {                      var frame = boneFrames[f];                      var dps = bone.DefaultPositionScale;                      var das = bone.DefaultAnglesScale;                      var fpos = new Vector3(frame[0] * dps.X' frame[1] * dps.Y' frame[2] * dps.Z) + bone.DefaultPosition;                      var fang = new Vector3(frame[3] * das.X' frame[4] * das.Y' frame[5] * das.Z) + bone.DefaultAngles;                      anim.Frames[f].Bones.Add(new BoneAnimationFrame(bone' fpos' OpenTkExtensions.QuaternionFromEulerRotation(fang)));                  }                    br.BaseStream.Position = restorePoint;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationGoldsource,The following statement contains a magic number: foreach (var bone in model.Bones)              {                  var offsetPos = br.BaseStream.Position;                  var offsets = br.ReadShortArray(6);                  var restorePoint = br.BaseStream.Position;                    var position = bone.DefaultPosition;                  var angles = bone.DefaultAngles;                    var boneFrames = new List<float[]>();                  for (var i = 0; i < numframes; i++) boneFrames.Add(new float[] {0' 0' 0' 0' 0' 0});                    for (var i = 0; i < 6; i++) // For each offset [X' Y' Z' XR' YR' ZR]                  {                      if (offsets[i] <= 0) continue;                      br.BaseStream.Position = offsetPos + offsets[i];                      var values = ReadRLEEncodedAnimationFrameValues(br' numframes);                      for (var f = 0; f < numframes; f++)                      {                          boneFrames[f][i] += values[f];                      }                  }                    for (var f = 0; f < numframes; f++)                  {                      var frame = boneFrames[f];                      var dps = bone.DefaultPositionScale;                      var das = bone.DefaultAnglesScale;                      var fpos = new Vector3(frame[0] * dps.X' frame[1] * dps.Y' frame[2] * dps.Z) + bone.DefaultPosition;                      var fang = new Vector3(frame[3] * das.X' frame[4] * das.Y' frame[5] * das.Z) + bone.DefaultAngles;                      anim.Frames[f].Bones.Add(new BoneAnimationFrame(bone' fpos' OpenTkExtensions.QuaternionFromEulerRotation(fang)));                  }                    br.BaseStream.Position = restorePoint;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationGoldsource,The following statement contains a magic number: foreach (var bone in model.Bones)              {                  var offsetPos = br.BaseStream.Position;                  var offsets = br.ReadShortArray(6);                  var restorePoint = br.BaseStream.Position;                    var position = bone.DefaultPosition;                  var angles = bone.DefaultAngles;                    var boneFrames = new List<float[]>();                  for (var i = 0; i < numframes; i++) boneFrames.Add(new float[] {0' 0' 0' 0' 0' 0});                    for (var i = 0; i < 6; i++) // For each offset [X' Y' Z' XR' YR' ZR]                  {                      if (offsets[i] <= 0) continue;                      br.BaseStream.Position = offsetPos + offsets[i];                      var values = ReadRLEEncodedAnimationFrameValues(br' numframes);                      for (var f = 0; f < numframes; f++)                      {                          boneFrames[f][i] += values[f];                      }                  }                    for (var f = 0; f < numframes; f++)                  {                      var frame = boneFrames[f];                      var dps = bone.DefaultPositionScale;                      var das = bone.DefaultAnglesScale;                      var fpos = new Vector3(frame[0] * dps.X' frame[1] * dps.Y' frame[2] * dps.Z) + bone.DefaultPosition;                      var fang = new Vector3(frame[3] * das.X' frame[4] * das.Y' frame[5] * das.Z) + bone.DefaultAngles;                      anim.Frames[f].Bones.Add(new BoneAnimationFrame(bone' fpos' OpenTkExtensions.QuaternionFromEulerRotation(fang)));                  }                    br.BaseStream.Position = restorePoint;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadAnimationGoldsource,The following statement contains a magic number: foreach (var bone in model.Bones)              {                  var offsetPos = br.BaseStream.Position;                  var offsets = br.ReadShortArray(6);                  var restorePoint = br.BaseStream.Position;                    var position = bone.DefaultPosition;                  var angles = bone.DefaultAngles;                    var boneFrames = new List<float[]>();                  for (var i = 0; i < numframes; i++) boneFrames.Add(new float[] {0' 0' 0' 0' 0' 0});                    for (var i = 0; i < 6; i++) // For each offset [X' Y' Z' XR' YR' ZR]                  {                      if (offsets[i] <= 0) continue;                      br.BaseStream.Position = offsetPos + offsets[i];                      var values = ReadRLEEncodedAnimationFrameValues(br' numframes);                      for (var f = 0; f < numframes; f++)                      {                          boneFrames[f][i] += values[f];                      }                  }                    for (var f = 0; f < numframes; f++)                  {                      var frame = boneFrames[f];                      var dps = bone.DefaultPositionScale;                      var das = bone.DefaultAnglesScale;                      var fpos = new Vector3(frame[0] * dps.X' frame[1] * dps.Y' frame[2] * dps.Z) + bone.DefaultPosition;                      var fang = new Vector3(frame[3] * das.X' frame[4] * das.Y' frame[5] * das.Z) + bone.DefaultAngles;                      anim.Frames[f].Bones.Add(new BoneAnimationFrame(bone' fpos' OpenTkExtensions.QuaternionFromEulerRotation(fang)));                  }                    br.BaseStream.Position = restorePoint;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequenceGroup,The following statement contains a magic number: var name = br.ReadFixedLengthString(Encoding.ASCII' 32);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadSequenceGroup,The following statement contains a magic number: var filename = br.ReadFixedLengthString(Encoding.ASCII' 64);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadBone,The following statement contains a magic number: if (data.Version >= MDLVersionSource2006)              {                  nameIndex = br.ReadInt32();              }              else if (data.Version == MDLVersionGoldsource)              {                  name = br.ReadFixedLengthString(Encoding.UTF8' 32);              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadBone,The following statement contains a magic number: var boneController = br.ReadIntArray(6);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadBone,The following statement contains a magic number: if (data.Version >= MDLVersionSource2006)              {                  var poseToBone = br.ReadIntArray(12); // 3x4 matrix                  var qAlignment = new Quaternion(br.ReadVector3()' br.ReadSingle());                  flags = br.ReadInt32();                  var proctype = br.ReadInt32();                  var procindex = br.ReadInt32();                  var physicsbone = br.ReadInt32();                  var surfacepropidx = br.ReadInt32();                  var contents = br.ReadInt32();                  br.ReadIntArray(8); // Unused              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadBone,The following statement contains a magic number: if (data.Version >= MDLVersionSource2006)              {                  var poseToBone = br.ReadIntArray(12); // 3x4 matrix                  var qAlignment = new Quaternion(br.ReadVector3()' br.ReadSingle());                  flags = br.ReadInt32();                  var proctype = br.ReadInt32();                  var procindex = br.ReadInt32();                  var physicsbone = br.ReadInt32();                  var surfacepropidx = br.ReadInt32();                  var contents = br.ReadInt32();                  br.ReadIntArray(8); // Unused              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadBodyPart,The following statement contains a magic number: if (data.Version >= MDLVersionSource2006)              {                  nameIndex = br.ReadInt32();                  var idx = br.BaseStream.Position;                  br.BaseStream.Position = startIndex + nameIndex;                  name = br.ReadNullTerminatedString();                  br.BaseStream.Position = idx;              }              else if (data.Version == MDLVersionGoldsource)              {                  name = br.ReadFixedLengthString(Encoding.UTF8' 64);              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadStudioModel,The following statement contains a magic number: var name = br.ReadFixedLengthString(Encoding.ASCII' 64);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadStudioModel,The following statement contains a magic number: if (data.Version >= MDLVersionSource2006)              {                  var numEyeballs = br.ReadInt32();                  var eyeballIndex = br.ReadInt32();                    var vertexDataPointer = br.ReadInt32();                  var tangentDataPointer = br.ReadInt32();                    br.ReadIntArray(8); // Unused              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesGoldSource,The following statement contains a magic number: for (var i = 0; i < numMesh; i++)              {                  var mesh = new Mesh(0); // GoldSource meshes don't have LODs                  var meshNumTris = br.ReadInt32();                  var meshTriIndex = br.ReadInt32();                  var meshSkinRef = br.ReadInt32();                  var meshNumNorms = br.ReadInt32();                  var meshNormIndex = br.ReadInt32();                    mesh.SkinRef = meshSkinRef;                    var pos = br.BaseStream.Position;                  br.BaseStream.Position = meshTriIndex;                  int sh;                  // Read all the triangle strips and fans from the mesh and convert into easy-to-render 3-point triangles                  while ((sh = br.ReadInt16()) != 0)                  {                      var list = new List<MdlProviderSequenceDataPoint>();                      var fan = sh < 0;                      if (fan) sh = -sh; // Negative value flags a fan' otherwise it is a strip                      for (var j = 0; j < sh; j++) // Read the points in the sequence                      {                          list.Add(new MdlProviderSequenceDataPoint                                       {                                           Vertex = br.ReadInt16()' // Vertex index in the vertices array                                           Normal = br.ReadInt16()' // Normal index in the normals array                                           TextureS = br.ReadInt16()'                                           TextureT = br.ReadInt16()                                       });                      }                      for (var j = 0; j < list.Count - 2; j++)                      {                          // Get the vert indices to use for the various types of strip/fan                          //                    |TRIANGLE FAN   |                       |TRIANGLE STRIP (ODD)|         |TRIANGLE STRIP (EVEN)|                          var add = fan ? new[] {0' j + 1' j + 2} : (j % 2 == 1 ? new[] {j + 1' j' j + 2     } : new[] {j' j + 1' j + 2      });                          foreach (var idx in add)                          {                              var vi = list[idx];                              var boneIndex = vertInfoData[vi.Vertex]; // Vertinfo tells what bone the vert belongs to                              mesh.Vertices.Add(new MeshVertex(                                  vertices[vi.Vertex]'                                  normals[vi.Normal]'                                  model.Bones[boneIndex]'                                  vi.TextureS'                                  vi.TextureT));                          }                      }                  }                  model.AddMesh(bodyPartName' modelIndex' mesh);                  br.BaseStream.Position = pos;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesGoldSource,The following statement contains a magic number: for (var i = 0; i < numMesh; i++)              {                  var mesh = new Mesh(0); // GoldSource meshes don't have LODs                  var meshNumTris = br.ReadInt32();                  var meshTriIndex = br.ReadInt32();                  var meshSkinRef = br.ReadInt32();                  var meshNumNorms = br.ReadInt32();                  var meshNormIndex = br.ReadInt32();                    mesh.SkinRef = meshSkinRef;                    var pos = br.BaseStream.Position;                  br.BaseStream.Position = meshTriIndex;                  int sh;                  // Read all the triangle strips and fans from the mesh and convert into easy-to-render 3-point triangles                  while ((sh = br.ReadInt16()) != 0)                  {                      var list = new List<MdlProviderSequenceDataPoint>();                      var fan = sh < 0;                      if (fan) sh = -sh; // Negative value flags a fan' otherwise it is a strip                      for (var j = 0; j < sh; j++) // Read the points in the sequence                      {                          list.Add(new MdlProviderSequenceDataPoint                                       {                                           Vertex = br.ReadInt16()' // Vertex index in the vertices array                                           Normal = br.ReadInt16()' // Normal index in the normals array                                           TextureS = br.ReadInt16()'                                           TextureT = br.ReadInt16()                                       });                      }                      for (var j = 0; j < list.Count - 2; j++)                      {                          // Get the vert indices to use for the various types of strip/fan                          //                    |TRIANGLE FAN   |                       |TRIANGLE STRIP (ODD)|         |TRIANGLE STRIP (EVEN)|                          var add = fan ? new[] {0' j + 1' j + 2} : (j % 2 == 1 ? new[] {j + 1' j' j + 2     } : new[] {j' j + 1' j + 2      });                          foreach (var idx in add)                          {                              var vi = list[idx];                              var boneIndex = vertInfoData[vi.Vertex]; // Vertinfo tells what bone the vert belongs to                              mesh.Vertices.Add(new MeshVertex(                                  vertices[vi.Vertex]'                                  normals[vi.Normal]'                                  model.Bones[boneIndex]'                                  vi.TextureS'                                  vi.TextureT));                          }                      }                  }                  model.AddMesh(bodyPartName' modelIndex' mesh);                  br.BaseStream.Position = pos;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesGoldSource,The following statement contains a magic number: for (var i = 0; i < numMesh; i++)              {                  var mesh = new Mesh(0); // GoldSource meshes don't have LODs                  var meshNumTris = br.ReadInt32();                  var meshTriIndex = br.ReadInt32();                  var meshSkinRef = br.ReadInt32();                  var meshNumNorms = br.ReadInt32();                  var meshNormIndex = br.ReadInt32();                    mesh.SkinRef = meshSkinRef;                    var pos = br.BaseStream.Position;                  br.BaseStream.Position = meshTriIndex;                  int sh;                  // Read all the triangle strips and fans from the mesh and convert into easy-to-render 3-point triangles                  while ((sh = br.ReadInt16()) != 0)                  {                      var list = new List<MdlProviderSequenceDataPoint>();                      var fan = sh < 0;                      if (fan) sh = -sh; // Negative value flags a fan' otherwise it is a strip                      for (var j = 0; j < sh; j++) // Read the points in the sequence                      {                          list.Add(new MdlProviderSequenceDataPoint                                       {                                           Vertex = br.ReadInt16()' // Vertex index in the vertices array                                           Normal = br.ReadInt16()' // Normal index in the normals array                                           TextureS = br.ReadInt16()'                                           TextureT = br.ReadInt16()                                       });                      }                      for (var j = 0; j < list.Count - 2; j++)                      {                          // Get the vert indices to use for the various types of strip/fan                          //                    |TRIANGLE FAN   |                       |TRIANGLE STRIP (ODD)|         |TRIANGLE STRIP (EVEN)|                          var add = fan ? new[] {0' j + 1' j + 2} : (j % 2 == 1 ? new[] {j + 1' j' j + 2     } : new[] {j' j + 1' j + 2      });                          foreach (var idx in add)                          {                              var vi = list[idx];                              var boneIndex = vertInfoData[vi.Vertex]; // Vertinfo tells what bone the vert belongs to                              mesh.Vertices.Add(new MeshVertex(                                  vertices[vi.Vertex]'                                  normals[vi.Normal]'                                  model.Bones[boneIndex]'                                  vi.TextureS'                                  vi.TextureT));                          }                      }                  }                  model.AddMesh(bodyPartName' modelIndex' mesh);                  br.BaseStream.Position = pos;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesGoldSource,The following statement contains a magic number: for (var i = 0; i < numMesh; i++)              {                  var mesh = new Mesh(0); // GoldSource meshes don't have LODs                  var meshNumTris = br.ReadInt32();                  var meshTriIndex = br.ReadInt32();                  var meshSkinRef = br.ReadInt32();                  var meshNumNorms = br.ReadInt32();                  var meshNormIndex = br.ReadInt32();                    mesh.SkinRef = meshSkinRef;                    var pos = br.BaseStream.Position;                  br.BaseStream.Position = meshTriIndex;                  int sh;                  // Read all the triangle strips and fans from the mesh and convert into easy-to-render 3-point triangles                  while ((sh = br.ReadInt16()) != 0)                  {                      var list = new List<MdlProviderSequenceDataPoint>();                      var fan = sh < 0;                      if (fan) sh = -sh; // Negative value flags a fan' otherwise it is a strip                      for (var j = 0; j < sh; j++) // Read the points in the sequence                      {                          list.Add(new MdlProviderSequenceDataPoint                                       {                                           Vertex = br.ReadInt16()' // Vertex index in the vertices array                                           Normal = br.ReadInt16()' // Normal index in the normals array                                           TextureS = br.ReadInt16()'                                           TextureT = br.ReadInt16()                                       });                      }                      for (var j = 0; j < list.Count - 2; j++)                      {                          // Get the vert indices to use for the various types of strip/fan                          //                    |TRIANGLE FAN   |                       |TRIANGLE STRIP (ODD)|         |TRIANGLE STRIP (EVEN)|                          var add = fan ? new[] {0' j + 1' j + 2} : (j % 2 == 1 ? new[] {j + 1' j' j + 2     } : new[] {j' j + 1' j + 2      });                          foreach (var idx in add)                          {                              var vi = list[idx];                              var boneIndex = vertInfoData[vi.Vertex]; // Vertinfo tells what bone the vert belongs to                              mesh.Vertices.Add(new MeshVertex(                                  vertices[vi.Vertex]'                                  normals[vi.Normal]'                                  model.Bones[boneIndex]'                                  vi.TextureS'                                  vi.TextureT));                          }                      }                  }                  model.AddMesh(bodyPartName' modelIndex' mesh);                  br.BaseStream.Position = pos;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesGoldSource,The following statement contains a magic number: for (var i = 0; i < numMesh; i++)              {                  var mesh = new Mesh(0); // GoldSource meshes don't have LODs                  var meshNumTris = br.ReadInt32();                  var meshTriIndex = br.ReadInt32();                  var meshSkinRef = br.ReadInt32();                  var meshNumNorms = br.ReadInt32();                  var meshNormIndex = br.ReadInt32();                    mesh.SkinRef = meshSkinRef;                    var pos = br.BaseStream.Position;                  br.BaseStream.Position = meshTriIndex;                  int sh;                  // Read all the triangle strips and fans from the mesh and convert into easy-to-render 3-point triangles                  while ((sh = br.ReadInt16()) != 0)                  {                      var list = new List<MdlProviderSequenceDataPoint>();                      var fan = sh < 0;                      if (fan) sh = -sh; // Negative value flags a fan' otherwise it is a strip                      for (var j = 0; j < sh; j++) // Read the points in the sequence                      {                          list.Add(new MdlProviderSequenceDataPoint                                       {                                           Vertex = br.ReadInt16()' // Vertex index in the vertices array                                           Normal = br.ReadInt16()' // Normal index in the normals array                                           TextureS = br.ReadInt16()'                                           TextureT = br.ReadInt16()                                       });                      }                      for (var j = 0; j < list.Count - 2; j++)                      {                          // Get the vert indices to use for the various types of strip/fan                          //                    |TRIANGLE FAN   |                       |TRIANGLE STRIP (ODD)|         |TRIANGLE STRIP (EVEN)|                          var add = fan ? new[] {0' j + 1' j + 2} : (j % 2 == 1 ? new[] {j + 1' j' j + 2     } : new[] {j' j + 1' j + 2      });                          foreach (var idx in add)                          {                              var vi = list[idx];                              var boneIndex = vertInfoData[vi.Vertex]; // Vertinfo tells what bone the vert belongs to                              mesh.Vertices.Add(new MeshVertex(                                  vertices[vi.Vertex]'                                  normals[vi.Normal]'                                  model.Bones[boneIndex]'                                  vi.TextureS'                                  vi.TextureT));                          }                      }                  }                  model.AddMesh(bodyPartName' modelIndex' mesh);                  br.BaseStream.Position = pos;              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesSource,The following statement contains a magic number: for (var i = 0; i < numMesh; i++)              {                  var material = br.ReadInt32();                  var modelOffset = br.ReadInt32();                  var numVerts = br.ReadInt32();                  var vertexOffset = br.ReadInt32();                  var numFlexes = br.ReadInt32();                  var flexIndex = br.ReadInt32();                  var materialType = br.ReadInt32();                  var materialParam = br.ReadInt32();                  var meshId = br.ReadInt32();                  var center = br.ReadVector3();                  var modelVertexDataPointer = br.ReadInt32();                  var numLODVertices = br.ReadIntArray(8);                  br.ReadIntArray(8); // Unused                    foreach (var mm in modelData.Meshes.Where(mm => mm.BodyPart == bodyPartIndex                                                                  && mm.Model == modelIndex                                                                  && mm.LOD == 0                                                                  && mm.MeshIndex == meshId))                  {                      var mesh = new Mesh(mm.LOD);                      foreach (var point in mm.Mesh.Points)                      {                          var vert = modelData.Vertices[point.VertexIndex + vertexOffset];                          var boneWeights = new List<BoneWeighting>();                          for (var j = 0; j < vert.NumBones; j++)                          {                              boneWeights.Add(new BoneWeighting(model.Bones[vert.Bones[j]]' vert.BoneWeights[j]));                          }                          var mv = new MeshVertex(vert.Position' vert.Normal' boneWeights' vert.TextureS' vert.TextureT);                          mesh.Vertices.Add(mv);                      }                      model.AddMesh(groupName' modelIndex' mesh);                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadVerticesSource,The following statement contains a magic number: for (var i = 0; i < numMesh; i++)              {                  var material = br.ReadInt32();                  var modelOffset = br.ReadInt32();                  var numVerts = br.ReadInt32();                  var vertexOffset = br.ReadInt32();                  var numFlexes = br.ReadInt32();                  var flexIndex = br.ReadInt32();                  var materialType = br.ReadInt32();                  var materialParam = br.ReadInt32();                  var meshId = br.ReadInt32();                  var center = br.ReadVector3();                  var modelVertexDataPointer = br.ReadInt32();                  var numLODVertices = br.ReadIntArray(8);                  br.ReadIntArray(8); // Unused                    foreach (var mm in modelData.Meshes.Where(mm => mm.BodyPart == bodyPartIndex                                                                  && mm.Model == modelIndex                                                                  && mm.LOD == 0                                                                  && mm.MeshIndex == meshId))                  {                      var mesh = new Mesh(mm.LOD);                      foreach (var point in mm.Mesh.Points)                      {                          var vert = modelData.Vertices[point.VertexIndex + vertexOffset];                          var boneWeights = new List<BoneWeighting>();                          for (var j = 0; j < vert.NumBones; j++)                          {                              boneWeights.Add(new BoneWeighting(model.Bones[vert.Bones[j]]' vert.BoneWeights[j]));                          }                          var mv = new MeshVertex(vert.Position' vert.Normal' boneWeights' vert.TextureS' vert.TextureT);                          mesh.Vertices.Add(mv);                      }                      model.AddMesh(groupName' modelIndex' mesh);                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vvd.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var magicString = vbr.ReadFixedLengthString(Encoding.UTF8' 4);                      if (magicString != MagicStringIDSV)                      {                          throw new ProviderException("Bad magic number for vertex file. Expected IDSV' got: " + magicString);                      }                        var version = vbr.ReadInt32();                      if (version != VVDVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 4' got: " + version);                      }                        long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var numLodVertices = vbr.ReadIntArray(8);                        var numFixups = vbr.ReadInt32();                      var fixupTableStart = vbr.ReadInt32();                      var vertexDataStart = vbr.ReadInt32();                      var tangentDataStart = vbr.ReadInt32();                        vbr.BaseStream.Position = vertexDataStart;                        // Read all the vertices from LOD 0 (this should contain the vertices for all LODs)                      for (var i = 0; i < numLodVertices[0]; i++)                      {                          var boneWeights = vbr.ReadSingleArray(3);                          var bones = vbr.ReadBytes(3);                          var numBones = vbr.ReadByte();                          var position = vbr.ReadVector3();                          var normal = vbr.ReadVector3();                          var textureS = vbr.ReadSingle();                          var textureT = vbr.ReadSingle();                          vertices.Add(new VVDPoint(boneWeights' bones' numBones' position' normal' textureS' textureT));                      }                        // Apply the fixup table' this re-orders the indices in reverse LOD order for performance reasons                      if (numFixups > 0)                      {                          vbr.BaseStream.Position = fixupTableStart;                          var newVerts = new List<VVDPoint>();                          for (var i = 0; i < numFixups; i++)                          {                              var fuLod = vbr.ReadInt32();                              var fuvertid = vbr.ReadInt32();                              var funumverts = vbr.ReadInt32();                              newVerts.AddRange(vertices.GetRange(fuvertid' funumverts));                          }                          vertices.Clear();                          vertices.AddRange(newVerts);                      }                        modelData.Vertices = vertices;                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vvd.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var magicString = vbr.ReadFixedLengthString(Encoding.UTF8' 4);                      if (magicString != MagicStringIDSV)                      {                          throw new ProviderException("Bad magic number for vertex file. Expected IDSV' got: " + magicString);                      }                        var version = vbr.ReadInt32();                      if (version != VVDVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 4' got: " + version);                      }                        long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var numLodVertices = vbr.ReadIntArray(8);                        var numFixups = vbr.ReadInt32();                      var fixupTableStart = vbr.ReadInt32();                      var vertexDataStart = vbr.ReadInt32();                      var tangentDataStart = vbr.ReadInt32();                        vbr.BaseStream.Position = vertexDataStart;                        // Read all the vertices from LOD 0 (this should contain the vertices for all LODs)                      for (var i = 0; i < numLodVertices[0]; i++)                      {                          var boneWeights = vbr.ReadSingleArray(3);                          var bones = vbr.ReadBytes(3);                          var numBones = vbr.ReadByte();                          var position = vbr.ReadVector3();                          var normal = vbr.ReadVector3();                          var textureS = vbr.ReadSingle();                          var textureT = vbr.ReadSingle();                          vertices.Add(new VVDPoint(boneWeights' bones' numBones' position' normal' textureS' textureT));                      }                        // Apply the fixup table' this re-orders the indices in reverse LOD order for performance reasons                      if (numFixups > 0)                      {                          vbr.BaseStream.Position = fixupTableStart;                          var newVerts = new List<VVDPoint>();                          for (var i = 0; i < numFixups; i++)                          {                              var fuLod = vbr.ReadInt32();                              var fuvertid = vbr.ReadInt32();                              var funumverts = vbr.ReadInt32();                              newVerts.AddRange(vertices.GetRange(fuvertid' funumverts));                          }                          vertices.Clear();                          vertices.AddRange(newVerts);                      }                        modelData.Vertices = vertices;                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vvd.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var magicString = vbr.ReadFixedLengthString(Encoding.UTF8' 4);                      if (magicString != MagicStringIDSV)                      {                          throw new ProviderException("Bad magic number for vertex file. Expected IDSV' got: " + magicString);                      }                        var version = vbr.ReadInt32();                      if (version != VVDVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 4' got: " + version);                      }                        long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var numLodVertices = vbr.ReadIntArray(8);                        var numFixups = vbr.ReadInt32();                      var fixupTableStart = vbr.ReadInt32();                      var vertexDataStart = vbr.ReadInt32();                      var tangentDataStart = vbr.ReadInt32();                        vbr.BaseStream.Position = vertexDataStart;                        // Read all the vertices from LOD 0 (this should contain the vertices for all LODs)                      for (var i = 0; i < numLodVertices[0]; i++)                      {                          var boneWeights = vbr.ReadSingleArray(3);                          var bones = vbr.ReadBytes(3);                          var numBones = vbr.ReadByte();                          var position = vbr.ReadVector3();                          var normal = vbr.ReadVector3();                          var textureS = vbr.ReadSingle();                          var textureT = vbr.ReadSingle();                          vertices.Add(new VVDPoint(boneWeights' bones' numBones' position' normal' textureS' textureT));                      }                        // Apply the fixup table' this re-orders the indices in reverse LOD order for performance reasons                      if (numFixups > 0)                      {                          vbr.BaseStream.Position = fixupTableStart;                          var newVerts = new List<VVDPoint>();                          for (var i = 0; i < numFixups; i++)                          {                              var fuLod = vbr.ReadInt32();                              var fuvertid = vbr.ReadInt32();                              var funumverts = vbr.ReadInt32();                              newVerts.AddRange(vertices.GetRange(fuvertid' funumverts));                          }                          vertices.Clear();                          vertices.AddRange(newVerts);                      }                        modelData.Vertices = vertices;                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vvd.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var magicString = vbr.ReadFixedLengthString(Encoding.UTF8' 4);                      if (magicString != MagicStringIDSV)                      {                          throw new ProviderException("Bad magic number for vertex file. Expected IDSV' got: " + magicString);                      }                        var version = vbr.ReadInt32();                      if (version != VVDVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 4' got: " + version);                      }                        long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var numLodVertices = vbr.ReadIntArray(8);                        var numFixups = vbr.ReadInt32();                      var fixupTableStart = vbr.ReadInt32();                      var vertexDataStart = vbr.ReadInt32();                      var tangentDataStart = vbr.ReadInt32();                        vbr.BaseStream.Position = vertexDataStart;                        // Read all the vertices from LOD 0 (this should contain the vertices for all LODs)                      for (var i = 0; i < numLodVertices[0]; i++)                      {                          var boneWeights = vbr.ReadSingleArray(3);                          var bones = vbr.ReadBytes(3);                          var numBones = vbr.ReadByte();                          var position = vbr.ReadVector3();                          var normal = vbr.ReadVector3();                          var textureS = vbr.ReadSingle();                          var textureT = vbr.ReadSingle();                          vertices.Add(new VVDPoint(boneWeights' bones' numBones' position' normal' textureS' textureT));                      }                        // Apply the fixup table' this re-orders the indices in reverse LOD order for performance reasons                      if (numFixups > 0)                      {                          vbr.BaseStream.Position = fixupTableStart;                          var newVerts = new List<VVDPoint>();                          for (var i = 0; i < numFixups; i++)                          {                              var fuLod = vbr.ReadInt32();                              var fuvertid = vbr.ReadInt32();                              var funumverts = vbr.ReadInt32();                              newVerts.AddRange(vertices.GetRange(fuvertid' funumverts));                          }                          vertices.Clear();                          vertices.AddRange(newVerts);                      }                        modelData.Vertices = vertices;                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vtx.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var version = vbr.ReadInt32(); // 7                      if (version != VTXVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 7' got: " + version);                      }                      var vertCacheSize = vbr.ReadInt32();                      var maxBonesPerStrip = vbr.ReadUInt16();                      var maxBonesPerTri = vbr.ReadUInt16();                      var maxBonesPerVert = vbr.ReadInt32();                      long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var materialReplacementListOffset = vbr.ReadInt32();                      var numBodyParts = vbr.ReadInt32();                      var bodyPartOffset = vbr.ReadInt32();                        // BODY PARTS                      long posbp = bodyPartOffset;                      for (var bp = 0; bp < numBodyParts; bp++)                      {                          vbr.BaseStream.Position = posbp;                            var numModels = vbr.ReadInt32();                          var modelOffset = vbr.ReadInt32();                            var posmdl = posbp + modelOffset;                          posbp = vbr.BaseStream.Position;                            // MODELS                          for (var mdl = 0; mdl < numModels; mdl++)                          {                              vbr.BaseStream.Position = posmdl;                                var numLod = vbr.ReadInt32();                              var lodOffset = vbr.ReadInt32();                                var poslod = posmdl + lodOffset;                              posmdl = vbr.BaseStream.Position;                                // LODS                              for (var lod = 0; lod < numLod; lod++)                              {                                  vbr.BaseStream.Position = poslod;                                    var meshNum = vbr.ReadInt32();                                  var meshOffset = vbr.ReadInt32();                                  var switchPoint = vbr.ReadSingle();                                    var posmesh = poslod + meshOffset;                                  poslod = vbr.BaseStream.Position;                                    // MESHES                                  for (var msh = 0; msh < meshNum; msh++)                                  {                                      vbr.BaseStream.Position = posmesh;                                        var sgNum = vbr.ReadInt32();                                      var sgOffset = vbr.ReadInt32();                                      var meshFlags = vbr.ReadByte();                                        var possg = posmesh + sgOffset;                                      posmesh = vbr.BaseStream.Position;                                        var mesh = new VTXModel(bp' mdl' lod' msh);                                        // STRIP GROUPS                                      for (var sg = 0; sg < sgNum; sg++)                                      {                                          vbr.BaseStream.Position = possg;                                            var vertNum = vbr.ReadInt32();                                          var vertOffset = vbr.ReadInt32();                                          var indexNum = vbr.ReadInt32();                                          var indexOffset = vbr.ReadInt32();                                          var stripNum = vbr.ReadInt32();                                          var stripOffset = vbr.ReadInt32();                                          var sgFlags = vbr.ReadByte();                                          // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                            var posvert = possg + vertOffset;                                          var posidx = possg + indexOffset;                                          var posstrip = possg + stripOffset;                                          possg = vbr.BaseStream.Position;                                            var vertinfo = new List<VTXPoint>();                                          vbr.BaseStream.Position = posvert;                                          for (var vert = 0; vert < vertNum; vert++)                                          {                                              var boneWeightIndices = vbr.ReadBytes(3);                                              var numBones = vbr.ReadByte();                                              var meshVertex = vbr.ReadInt16();                                              var boneIDs = vbr.ReadBytes(3);                                                vertinfo.Add(new VTXPoint(boneWeightIndices' numBones' meshVertex' boneIDs));                                          }                                            vbr.BaseStream.Position = posidx;                                          var indices = vbr.ReadShortArray(indexNum);                                            // The strips hold info about whether this is a triangle strip or just a list                                          vbr.BaseStream.Position = posstrip;                                          for (var st = 0; st < stripNum; st++)                                          {                                              var numStIndices = vbr.ReadInt32();                                              var stIndexOffset = vbr.ReadInt32();                                              var numStVerts = vbr.ReadInt32();                                              var stVertOffset = vbr.ReadInt32();                                              var numStBones = vbr.ReadInt16();                                              var stFlags = vbr.ReadByte();                                              var numStBoneStateChanges = vbr.ReadInt32();                                              var stBoneStateChangeOffset = vbr.ReadInt32();                                              // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                                if ((stFlags & VTXStripGroupTriListFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices; j++)                                                  {                                                      mesh.Mesh.Points.Add(vertinfo[indices[j]]);                                                      //mesh.Vertices.Add(vertices[vertinfo[indices[j]]]);                                                  }                                              }                                              else if ((stFlags & VTXStripGroupTriStripFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices - 2; j++)                                                  {                                                      var add = j % 2 == 1 ? new[] { j + 1' j' j + 2 } : new[] { j' j + 1' j + 2 };                                                      foreach (var idx in add)                                                      {                                                          mesh.Mesh.Points.Add(vertinfo[indices[idx]]);                                                          //mesh.Vertices.Add(vertices[vertinfo[indices[idx]]]);                                                      }                                                  }                                              }                                          } // Strips                                      } // Strip Groups                                      modelData.Meshes.Add(mesh);                                  } // Meshes                              } // LODs                          } // Models                      } // Body Parts                  } // using (var br)              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vtx.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var version = vbr.ReadInt32(); // 7                      if (version != VTXVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 7' got: " + version);                      }                      var vertCacheSize = vbr.ReadInt32();                      var maxBonesPerStrip = vbr.ReadUInt16();                      var maxBonesPerTri = vbr.ReadUInt16();                      var maxBonesPerVert = vbr.ReadInt32();                      long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var materialReplacementListOffset = vbr.ReadInt32();                      var numBodyParts = vbr.ReadInt32();                      var bodyPartOffset = vbr.ReadInt32();                        // BODY PARTS                      long posbp = bodyPartOffset;                      for (var bp = 0; bp < numBodyParts; bp++)                      {                          vbr.BaseStream.Position = posbp;                            var numModels = vbr.ReadInt32();                          var modelOffset = vbr.ReadInt32();                            var posmdl = posbp + modelOffset;                          posbp = vbr.BaseStream.Position;                            // MODELS                          for (var mdl = 0; mdl < numModels; mdl++)                          {                              vbr.BaseStream.Position = posmdl;                                var numLod = vbr.ReadInt32();                              var lodOffset = vbr.ReadInt32();                                var poslod = posmdl + lodOffset;                              posmdl = vbr.BaseStream.Position;                                // LODS                              for (var lod = 0; lod < numLod; lod++)                              {                                  vbr.BaseStream.Position = poslod;                                    var meshNum = vbr.ReadInt32();                                  var meshOffset = vbr.ReadInt32();                                  var switchPoint = vbr.ReadSingle();                                    var posmesh = poslod + meshOffset;                                  poslod = vbr.BaseStream.Position;                                    // MESHES                                  for (var msh = 0; msh < meshNum; msh++)                                  {                                      vbr.BaseStream.Position = posmesh;                                        var sgNum = vbr.ReadInt32();                                      var sgOffset = vbr.ReadInt32();                                      var meshFlags = vbr.ReadByte();                                        var possg = posmesh + sgOffset;                                      posmesh = vbr.BaseStream.Position;                                        var mesh = new VTXModel(bp' mdl' lod' msh);                                        // STRIP GROUPS                                      for (var sg = 0; sg < sgNum; sg++)                                      {                                          vbr.BaseStream.Position = possg;                                            var vertNum = vbr.ReadInt32();                                          var vertOffset = vbr.ReadInt32();                                          var indexNum = vbr.ReadInt32();                                          var indexOffset = vbr.ReadInt32();                                          var stripNum = vbr.ReadInt32();                                          var stripOffset = vbr.ReadInt32();                                          var sgFlags = vbr.ReadByte();                                          // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                            var posvert = possg + vertOffset;                                          var posidx = possg + indexOffset;                                          var posstrip = possg + stripOffset;                                          possg = vbr.BaseStream.Position;                                            var vertinfo = new List<VTXPoint>();                                          vbr.BaseStream.Position = posvert;                                          for (var vert = 0; vert < vertNum; vert++)                                          {                                              var boneWeightIndices = vbr.ReadBytes(3);                                              var numBones = vbr.ReadByte();                                              var meshVertex = vbr.ReadInt16();                                              var boneIDs = vbr.ReadBytes(3);                                                vertinfo.Add(new VTXPoint(boneWeightIndices' numBones' meshVertex' boneIDs));                                          }                                            vbr.BaseStream.Position = posidx;                                          var indices = vbr.ReadShortArray(indexNum);                                            // The strips hold info about whether this is a triangle strip or just a list                                          vbr.BaseStream.Position = posstrip;                                          for (var st = 0; st < stripNum; st++)                                          {                                              var numStIndices = vbr.ReadInt32();                                              var stIndexOffset = vbr.ReadInt32();                                              var numStVerts = vbr.ReadInt32();                                              var stVertOffset = vbr.ReadInt32();                                              var numStBones = vbr.ReadInt16();                                              var stFlags = vbr.ReadByte();                                              var numStBoneStateChanges = vbr.ReadInt32();                                              var stBoneStateChangeOffset = vbr.ReadInt32();                                              // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                                if ((stFlags & VTXStripGroupTriListFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices; j++)                                                  {                                                      mesh.Mesh.Points.Add(vertinfo[indices[j]]);                                                      //mesh.Vertices.Add(vertices[vertinfo[indices[j]]]);                                                  }                                              }                                              else if ((stFlags & VTXStripGroupTriStripFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices - 2; j++)                                                  {                                                      var add = j % 2 == 1 ? new[] { j + 1' j' j + 2 } : new[] { j' j + 1' j + 2 };                                                      foreach (var idx in add)                                                      {                                                          mesh.Mesh.Points.Add(vertinfo[indices[idx]]);                                                          //mesh.Vertices.Add(vertices[vertinfo[indices[idx]]]);                                                      }                                                  }                                              }                                          } // Strips                                      } // Strip Groups                                      modelData.Meshes.Add(mesh);                                  } // Meshes                              } // LODs                          } // Models                      } // Body Parts                  } // using (var br)              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vtx.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var version = vbr.ReadInt32(); // 7                      if (version != VTXVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 7' got: " + version);                      }                      var vertCacheSize = vbr.ReadInt32();                      var maxBonesPerStrip = vbr.ReadUInt16();                      var maxBonesPerTri = vbr.ReadUInt16();                      var maxBonesPerVert = vbr.ReadInt32();                      long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var materialReplacementListOffset = vbr.ReadInt32();                      var numBodyParts = vbr.ReadInt32();                      var bodyPartOffset = vbr.ReadInt32();                        // BODY PARTS                      long posbp = bodyPartOffset;                      for (var bp = 0; bp < numBodyParts; bp++)                      {                          vbr.BaseStream.Position = posbp;                            var numModels = vbr.ReadInt32();                          var modelOffset = vbr.ReadInt32();                            var posmdl = posbp + modelOffset;                          posbp = vbr.BaseStream.Position;                            // MODELS                          for (var mdl = 0; mdl < numModels; mdl++)                          {                              vbr.BaseStream.Position = posmdl;                                var numLod = vbr.ReadInt32();                              var lodOffset = vbr.ReadInt32();                                var poslod = posmdl + lodOffset;                              posmdl = vbr.BaseStream.Position;                                // LODS                              for (var lod = 0; lod < numLod; lod++)                              {                                  vbr.BaseStream.Position = poslod;                                    var meshNum = vbr.ReadInt32();                                  var meshOffset = vbr.ReadInt32();                                  var switchPoint = vbr.ReadSingle();                                    var posmesh = poslod + meshOffset;                                  poslod = vbr.BaseStream.Position;                                    // MESHES                                  for (var msh = 0; msh < meshNum; msh++)                                  {                                      vbr.BaseStream.Position = posmesh;                                        var sgNum = vbr.ReadInt32();                                      var sgOffset = vbr.ReadInt32();                                      var meshFlags = vbr.ReadByte();                                        var possg = posmesh + sgOffset;                                      posmesh = vbr.BaseStream.Position;                                        var mesh = new VTXModel(bp' mdl' lod' msh);                                        // STRIP GROUPS                                      for (var sg = 0; sg < sgNum; sg++)                                      {                                          vbr.BaseStream.Position = possg;                                            var vertNum = vbr.ReadInt32();                                          var vertOffset = vbr.ReadInt32();                                          var indexNum = vbr.ReadInt32();                                          var indexOffset = vbr.ReadInt32();                                          var stripNum = vbr.ReadInt32();                                          var stripOffset = vbr.ReadInt32();                                          var sgFlags = vbr.ReadByte();                                          // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                            var posvert = possg + vertOffset;                                          var posidx = possg + indexOffset;                                          var posstrip = possg + stripOffset;                                          possg = vbr.BaseStream.Position;                                            var vertinfo = new List<VTXPoint>();                                          vbr.BaseStream.Position = posvert;                                          for (var vert = 0; vert < vertNum; vert++)                                          {                                              var boneWeightIndices = vbr.ReadBytes(3);                                              var numBones = vbr.ReadByte();                                              var meshVertex = vbr.ReadInt16();                                              var boneIDs = vbr.ReadBytes(3);                                                vertinfo.Add(new VTXPoint(boneWeightIndices' numBones' meshVertex' boneIDs));                                          }                                            vbr.BaseStream.Position = posidx;                                          var indices = vbr.ReadShortArray(indexNum);                                            // The strips hold info about whether this is a triangle strip or just a list                                          vbr.BaseStream.Position = posstrip;                                          for (var st = 0; st < stripNum; st++)                                          {                                              var numStIndices = vbr.ReadInt32();                                              var stIndexOffset = vbr.ReadInt32();                                              var numStVerts = vbr.ReadInt32();                                              var stVertOffset = vbr.ReadInt32();                                              var numStBones = vbr.ReadInt16();                                              var stFlags = vbr.ReadByte();                                              var numStBoneStateChanges = vbr.ReadInt32();                                              var stBoneStateChangeOffset = vbr.ReadInt32();                                              // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                                if ((stFlags & VTXStripGroupTriListFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices; j++)                                                  {                                                      mesh.Mesh.Points.Add(vertinfo[indices[j]]);                                                      //mesh.Vertices.Add(vertices[vertinfo[indices[j]]]);                                                  }                                              }                                              else if ((stFlags & VTXStripGroupTriStripFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices - 2; j++)                                                  {                                                      var add = j % 2 == 1 ? new[] { j + 1' j' j + 2 } : new[] { j' j + 1' j + 2 };                                                      foreach (var idx in add)                                                      {                                                          mesh.Mesh.Points.Add(vertinfo[indices[idx]]);                                                          //mesh.Vertices.Add(vertices[vertinfo[indices[idx]]]);                                                      }                                                  }                                              }                                          } // Strips                                      } // Strip Groups                                      modelData.Meshes.Add(mesh);                                  } // Meshes                              } // LODs                          } // Models                      } // Body Parts                  } // using (var br)              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vtx.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var version = vbr.ReadInt32(); // 7                      if (version != VTXVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 7' got: " + version);                      }                      var vertCacheSize = vbr.ReadInt32();                      var maxBonesPerStrip = vbr.ReadUInt16();                      var maxBonesPerTri = vbr.ReadUInt16();                      var maxBonesPerVert = vbr.ReadInt32();                      long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var materialReplacementListOffset = vbr.ReadInt32();                      var numBodyParts = vbr.ReadInt32();                      var bodyPartOffset = vbr.ReadInt32();                        // BODY PARTS                      long posbp = bodyPartOffset;                      for (var bp = 0; bp < numBodyParts; bp++)                      {                          vbr.BaseStream.Position = posbp;                            var numModels = vbr.ReadInt32();                          var modelOffset = vbr.ReadInt32();                            var posmdl = posbp + modelOffset;                          posbp = vbr.BaseStream.Position;                            // MODELS                          for (var mdl = 0; mdl < numModels; mdl++)                          {                              vbr.BaseStream.Position = posmdl;                                var numLod = vbr.ReadInt32();                              var lodOffset = vbr.ReadInt32();                                var poslod = posmdl + lodOffset;                              posmdl = vbr.BaseStream.Position;                                // LODS                              for (var lod = 0; lod < numLod; lod++)                              {                                  vbr.BaseStream.Position = poslod;                                    var meshNum = vbr.ReadInt32();                                  var meshOffset = vbr.ReadInt32();                                  var switchPoint = vbr.ReadSingle();                                    var posmesh = poslod + meshOffset;                                  poslod = vbr.BaseStream.Position;                                    // MESHES                                  for (var msh = 0; msh < meshNum; msh++)                                  {                                      vbr.BaseStream.Position = posmesh;                                        var sgNum = vbr.ReadInt32();                                      var sgOffset = vbr.ReadInt32();                                      var meshFlags = vbr.ReadByte();                                        var possg = posmesh + sgOffset;                                      posmesh = vbr.BaseStream.Position;                                        var mesh = new VTXModel(bp' mdl' lod' msh);                                        // STRIP GROUPS                                      for (var sg = 0; sg < sgNum; sg++)                                      {                                          vbr.BaseStream.Position = possg;                                            var vertNum = vbr.ReadInt32();                                          var vertOffset = vbr.ReadInt32();                                          var indexNum = vbr.ReadInt32();                                          var indexOffset = vbr.ReadInt32();                                          var stripNum = vbr.ReadInt32();                                          var stripOffset = vbr.ReadInt32();                                          var sgFlags = vbr.ReadByte();                                          // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                            var posvert = possg + vertOffset;                                          var posidx = possg + indexOffset;                                          var posstrip = possg + stripOffset;                                          possg = vbr.BaseStream.Position;                                            var vertinfo = new List<VTXPoint>();                                          vbr.BaseStream.Position = posvert;                                          for (var vert = 0; vert < vertNum; vert++)                                          {                                              var boneWeightIndices = vbr.ReadBytes(3);                                              var numBones = vbr.ReadByte();                                              var meshVertex = vbr.ReadInt16();                                              var boneIDs = vbr.ReadBytes(3);                                                vertinfo.Add(new VTXPoint(boneWeightIndices' numBones' meshVertex' boneIDs));                                          }                                            vbr.BaseStream.Position = posidx;                                          var indices = vbr.ReadShortArray(indexNum);                                            // The strips hold info about whether this is a triangle strip or just a list                                          vbr.BaseStream.Position = posstrip;                                          for (var st = 0; st < stripNum; st++)                                          {                                              var numStIndices = vbr.ReadInt32();                                              var stIndexOffset = vbr.ReadInt32();                                              var numStVerts = vbr.ReadInt32();                                              var stVertOffset = vbr.ReadInt32();                                              var numStBones = vbr.ReadInt16();                                              var stFlags = vbr.ReadByte();                                              var numStBoneStateChanges = vbr.ReadInt32();                                              var stBoneStateChangeOffset = vbr.ReadInt32();                                              // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                                if ((stFlags & VTXStripGroupTriListFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices; j++)                                                  {                                                      mesh.Mesh.Points.Add(vertinfo[indices[j]]);                                                      //mesh.Vertices.Add(vertices[vertinfo[indices[j]]]);                                                  }                                              }                                              else if ((stFlags & VTXStripGroupTriStripFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices - 2; j++)                                                  {                                                      var add = j % 2 == 1 ? new[] { j + 1' j' j + 2 } : new[] { j' j + 1' j + 2 };                                                      foreach (var idx in add)                                                      {                                                          mesh.Mesh.Points.Add(vertinfo[indices[idx]]);                                                          //mesh.Vertices.Add(vertices[vertinfo[indices[idx]]]);                                                      }                                                  }                                              }                                          } // Strips                                      } // Strip Groups                                      modelData.Meshes.Add(mesh);                                  } // Meshes                              } // LODs                          } // Models                      } // Body Parts                  } // using (var br)              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vtx.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var version = vbr.ReadInt32(); // 7                      if (version != VTXVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 7' got: " + version);                      }                      var vertCacheSize = vbr.ReadInt32();                      var maxBonesPerStrip = vbr.ReadUInt16();                      var maxBonesPerTri = vbr.ReadUInt16();                      var maxBonesPerVert = vbr.ReadInt32();                      long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var materialReplacementListOffset = vbr.ReadInt32();                      var numBodyParts = vbr.ReadInt32();                      var bodyPartOffset = vbr.ReadInt32();                        // BODY PARTS                      long posbp = bodyPartOffset;                      for (var bp = 0; bp < numBodyParts; bp++)                      {                          vbr.BaseStream.Position = posbp;                            var numModels = vbr.ReadInt32();                          var modelOffset = vbr.ReadInt32();                            var posmdl = posbp + modelOffset;                          posbp = vbr.BaseStream.Position;                            // MODELS                          for (var mdl = 0; mdl < numModels; mdl++)                          {                              vbr.BaseStream.Position = posmdl;                                var numLod = vbr.ReadInt32();                              var lodOffset = vbr.ReadInt32();                                var poslod = posmdl + lodOffset;                              posmdl = vbr.BaseStream.Position;                                // LODS                              for (var lod = 0; lod < numLod; lod++)                              {                                  vbr.BaseStream.Position = poslod;                                    var meshNum = vbr.ReadInt32();                                  var meshOffset = vbr.ReadInt32();                                  var switchPoint = vbr.ReadSingle();                                    var posmesh = poslod + meshOffset;                                  poslod = vbr.BaseStream.Position;                                    // MESHES                                  for (var msh = 0; msh < meshNum; msh++)                                  {                                      vbr.BaseStream.Position = posmesh;                                        var sgNum = vbr.ReadInt32();                                      var sgOffset = vbr.ReadInt32();                                      var meshFlags = vbr.ReadByte();                                        var possg = posmesh + sgOffset;                                      posmesh = vbr.BaseStream.Position;                                        var mesh = new VTXModel(bp' mdl' lod' msh);                                        // STRIP GROUPS                                      for (var sg = 0; sg < sgNum; sg++)                                      {                                          vbr.BaseStream.Position = possg;                                            var vertNum = vbr.ReadInt32();                                          var vertOffset = vbr.ReadInt32();                                          var indexNum = vbr.ReadInt32();                                          var indexOffset = vbr.ReadInt32();                                          var stripNum = vbr.ReadInt32();                                          var stripOffset = vbr.ReadInt32();                                          var sgFlags = vbr.ReadByte();                                          // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                            var posvert = possg + vertOffset;                                          var posidx = possg + indexOffset;                                          var posstrip = possg + stripOffset;                                          possg = vbr.BaseStream.Position;                                            var vertinfo = new List<VTXPoint>();                                          vbr.BaseStream.Position = posvert;                                          for (var vert = 0; vert < vertNum; vert++)                                          {                                              var boneWeightIndices = vbr.ReadBytes(3);                                              var numBones = vbr.ReadByte();                                              var meshVertex = vbr.ReadInt16();                                              var boneIDs = vbr.ReadBytes(3);                                                vertinfo.Add(new VTXPoint(boneWeightIndices' numBones' meshVertex' boneIDs));                                          }                                            vbr.BaseStream.Position = posidx;                                          var indices = vbr.ReadShortArray(indexNum);                                            // The strips hold info about whether this is a triangle strip or just a list                                          vbr.BaseStream.Position = posstrip;                                          for (var st = 0; st < stripNum; st++)                                          {                                              var numStIndices = vbr.ReadInt32();                                              var stIndexOffset = vbr.ReadInt32();                                              var numStVerts = vbr.ReadInt32();                                              var stVertOffset = vbr.ReadInt32();                                              var numStBones = vbr.ReadInt16();                                              var stFlags = vbr.ReadByte();                                              var numStBoneStateChanges = vbr.ReadInt32();                                              var stBoneStateChangeOffset = vbr.ReadInt32();                                              // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                                if ((stFlags & VTXStripGroupTriListFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices; j++)                                                  {                                                      mesh.Mesh.Points.Add(vertinfo[indices[j]]);                                                      //mesh.Vertices.Add(vertices[vertinfo[indices[j]]]);                                                  }                                              }                                              else if ((stFlags & VTXStripGroupTriStripFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices - 2; j++)                                                  {                                                      var add = j % 2 == 1 ? new[] { j + 1' j' j + 2 } : new[] { j' j + 1' j + 2 };                                                      foreach (var idx in add)                                                      {                                                          mesh.Mesh.Points.Add(vertinfo[indices[idx]]);                                                          //mesh.Vertices.Add(vertices[vertinfo[indices[idx]]]);                                                      }                                                  }                                              }                                          } // Strips                                      } // Strip Groups                                      modelData.Meshes.Add(mesh);                                  } // Meshes                              } // LODs                          } // Models                      } // Body Parts                  } // using (var br)              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadSourceMeshData,The following statement contains a magic number: using (var fs = vtx.Open())              {                  using (var vbr = new BinaryReader(fs))                  {                      var version = vbr.ReadInt32(); // 7                      if (version != VTXVersionSource)                      {                          throw new ProviderException("Bad version number for vertex file. Expected 7' got: " + version);                      }                      var vertCacheSize = vbr.ReadInt32();                      var maxBonesPerStrip = vbr.ReadUInt16();                      var maxBonesPerTri = vbr.ReadUInt16();                      var maxBonesPerVert = vbr.ReadInt32();                      long checksum = vbr.ReadInt32();                      var numLods = vbr.ReadInt32();                      var materialReplacementListOffset = vbr.ReadInt32();                      var numBodyParts = vbr.ReadInt32();                      var bodyPartOffset = vbr.ReadInt32();                        // BODY PARTS                      long posbp = bodyPartOffset;                      for (var bp = 0; bp < numBodyParts; bp++)                      {                          vbr.BaseStream.Position = posbp;                            var numModels = vbr.ReadInt32();                          var modelOffset = vbr.ReadInt32();                            var posmdl = posbp + modelOffset;                          posbp = vbr.BaseStream.Position;                            // MODELS                          for (var mdl = 0; mdl < numModels; mdl++)                          {                              vbr.BaseStream.Position = posmdl;                                var numLod = vbr.ReadInt32();                              var lodOffset = vbr.ReadInt32();                                var poslod = posmdl + lodOffset;                              posmdl = vbr.BaseStream.Position;                                // LODS                              for (var lod = 0; lod < numLod; lod++)                              {                                  vbr.BaseStream.Position = poslod;                                    var meshNum = vbr.ReadInt32();                                  var meshOffset = vbr.ReadInt32();                                  var switchPoint = vbr.ReadSingle();                                    var posmesh = poslod + meshOffset;                                  poslod = vbr.BaseStream.Position;                                    // MESHES                                  for (var msh = 0; msh < meshNum; msh++)                                  {                                      vbr.BaseStream.Position = posmesh;                                        var sgNum = vbr.ReadInt32();                                      var sgOffset = vbr.ReadInt32();                                      var meshFlags = vbr.ReadByte();                                        var possg = posmesh + sgOffset;                                      posmesh = vbr.BaseStream.Position;                                        var mesh = new VTXModel(bp' mdl' lod' msh);                                        // STRIP GROUPS                                      for (var sg = 0; sg < sgNum; sg++)                                      {                                          vbr.BaseStream.Position = possg;                                            var vertNum = vbr.ReadInt32();                                          var vertOffset = vbr.ReadInt32();                                          var indexNum = vbr.ReadInt32();                                          var indexOffset = vbr.ReadInt32();                                          var stripNum = vbr.ReadInt32();                                          var stripOffset = vbr.ReadInt32();                                          var sgFlags = vbr.ReadByte();                                          // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                            var posvert = possg + vertOffset;                                          var posidx = possg + indexOffset;                                          var posstrip = possg + stripOffset;                                          possg = vbr.BaseStream.Position;                                            var vertinfo = new List<VTXPoint>();                                          vbr.BaseStream.Position = posvert;                                          for (var vert = 0; vert < vertNum; vert++)                                          {                                              var boneWeightIndices = vbr.ReadBytes(3);                                              var numBones = vbr.ReadByte();                                              var meshVertex = vbr.ReadInt16();                                              var boneIDs = vbr.ReadBytes(3);                                                vertinfo.Add(new VTXPoint(boneWeightIndices' numBones' meshVertex' boneIDs));                                          }                                            vbr.BaseStream.Position = posidx;                                          var indices = vbr.ReadShortArray(indexNum);                                            // The strips hold info about whether this is a triangle strip or just a list                                          vbr.BaseStream.Position = posstrip;                                          for (var st = 0; st < stripNum; st++)                                          {                                              var numStIndices = vbr.ReadInt32();                                              var stIndexOffset = vbr.ReadInt32();                                              var numStVerts = vbr.ReadInt32();                                              var stVertOffset = vbr.ReadInt32();                                              var numStBones = vbr.ReadInt16();                                              var stFlags = vbr.ReadByte();                                              var numStBoneStateChanges = vbr.ReadInt32();                                              var stBoneStateChangeOffset = vbr.ReadInt32();                                              // vbr.ReadIntArray(2); //TODO FIXME Newer model format 49's (DOTA2' CSGO) have two extra integers here' (num + offset' purpose unknown)                                                if ((stFlags & VTXStripGroupTriListFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices; j++)                                                  {                                                      mesh.Mesh.Points.Add(vertinfo[indices[j]]);                                                      //mesh.Vertices.Add(vertices[vertinfo[indices[j]]]);                                                  }                                              }                                              else if ((stFlags & VTXStripGroupTriStripFlag) > 0)                                              {                                                  for (var j = stIndexOffset; j < stIndexOffset + numStIndices - 2; j++)                                                  {                                                      var add = j % 2 == 1 ? new[] { j + 1' j' j + 2 } : new[] { j' j + 1' j + 2 };                                                      foreach (var idx in add)                                                      {                                                          mesh.Mesh.Points.Add(vertinfo[indices[idx]]);                                                          //mesh.Vertices.Add(vertices[vertinfo[indices[idx]]]);                                                      }                                                  }                                              }                                          } // Strips                                      } // Strip Groups                                      modelData.Meshes.Add(mesh);                                  } // Meshes                              } // LODs                          } // Models                      } // Body Parts                  } // using (var br)              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeSkin,The following statement contains a magic number: for (var j = 0; j <= byte.MaxValue; j++)              {                  var k = j * 3;                  pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeSkin,The following statement contains a magic number: for (var j = 0; j <= byte.MaxValue; j++)              {                  var k = j * 3;                  pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeSkin,The following statement contains a magic number: for (var j = 0; j <= byte.MaxValue; j++)              {                  var k = j * 3;                  pal.Entries[j] = Color.FromArgb(255' palette[k]' palette[k + 1]' palette[k + 2]);              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeMesh,The following statement contains a magic number: var bboxmin = br.ReadBytes(4);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeMesh,The following statement contains a magic number: var bboxmax = br.ReadBytes(4);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeMesh,The following statement contains a magic number: var name = br.ReadBytes(16);
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeMesh,The following statement contains a magic number: for (int i = 0; i < numverts; i++)              {                  var byte_coord = br.ReadByteArray(3);                  var normal_index = br.ReadByte();                  verts.Add(new QuakeVert                  {                      x = byte_coord[0]'                      y = byte_coord[1]'                      z = byte_coord[2]'                      normalindex = normal_index'                  });              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeMesh,The following statement contains a magic number: for (int i = 0; i < numverts; i++)              {                  var byte_coord = br.ReadByteArray(3);                  var normal_index = br.ReadByte();                  verts.Add(new QuakeVert                  {                      x = byte_coord[0]'                      y = byte_coord[1]'                      z = byte_coord[2]'                      normalindex = normal_index'                  });              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,LoadQuakeMesh,The following statement contains a magic number: for (int i = 0; i < numtris; i++)              {                  for (int j = 0; j < 3; j++)                  {                      var vert = verts[tris[i].vertindices[j]];                      var texcoord = texcoords[tris[i].vertindices[j]];                      float s = texcoord.s;                      float t = texcoord.t;                      if (!tris[i].facesfront && texcoord.onseam)                      {                          s += skinwidth * 0.5f;                      }                        // Convert to float and transform                      var float_coord = new Vector3(vert.x' vert.y' vert.z);                      var transformed_coord = Vector3.Multiply(float_coord' scale) + translate;                        // Insert the triangles.                          mesh.Vertices.Add(new MeshVertex(                                          transformed_coord'                                          new Vector3(0' 0' 1)' // FIXME: Use proper normal                                          model.Bones[0]'                                          s'                                          t));                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadQuakeModel,The following statement contains a magic number: for (int i = 0; i < numtris; i++)              {                  QuakeTri tri;                  tri.facesfront = br.ReadInt32() == 0 ? false : true;                  tri.vertindices = br.ReadIntArray(3);                  tris.Add(tri);              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadQuakeModel,The following statement contains a magic number: for (int i = 0; i < numframes; i++)              {                  var frametype = br.ReadInt32();                  if (frametype == 0)                  {                      // Single frame                      var frame = LoadQuakeMesh(br' qmodel' scale' translate' numverts' numtris' texcoords' tris' skinwidth);                        if (!hasframe)                      {                          qmodel.AddMesh(""' 0' frame);                          hasframe = true;                      }                  }                  else if (frametype == 1)                  {                      // Framegroup                      var groupframes = br.ReadInt32();                      var groupbboxmin = br.ReadBytes(4);                      var groupbboxmax = br.ReadBytes(4);                      var times = br.ReadSingleArray(groupframes);                      for (int j = 0; j < groupframes; j++)                      {                          var frame = LoadQuakeMesh(br' qmodel' scale' translate' numverts' numtris' texcoords' tris' skinwidth);                            if (!hasframe)                          {                              qmodel.AddMesh(""' 0' frame);                              hasframe = true;                          }                      }                  }              }
Magic Number,Sledge.Providers.Model,MdlProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadQuakeModel,The following statement contains a magic number: for (int i = 0; i < numframes; i++)              {                  var frametype = br.ReadInt32();                  if (frametype == 0)                  {                      // Single frame                      var frame = LoadQuakeMesh(br' qmodel' scale' translate' numverts' numtris' texcoords' tris' skinwidth);                        if (!hasframe)                      {                          qmodel.AddMesh(""' 0' frame);                          hasframe = true;                      }                  }                  else if (frametype == 1)                  {                      // Framegroup                      var groupframes = br.ReadInt32();                      var groupbboxmin = br.ReadBytes(4);                      var groupbboxmax = br.ReadBytes(4);                      var times = br.ReadSingleArray(groupframes);                      for (int j = 0; j < groupframes; j++)                      {                          var frame = LoadQuakeMesh(br' qmodel' scale' translate' numverts' numtris' texcoords' tris' skinwidth);                            if (!hasframe)                          {                              qmodel.AddMesh(""' 0' frame);                              hasframe = true;                          }                      }                  }              }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimRawpos) > 0)                  {                      // What's this? A custom made' 16-bit floating point implementation? WHAT DID I DO TO DESERVE THIS???                      var bytes = br.ReadBytes(6);                      // Wait a minute.....                      var x = OpenTK.Half.FromBytes(bytes' 0).ToSingle();                      var y = OpenTK.Half.FromBytes(bytes' 2).ToSingle();                      var z = OpenTK.Half.FromBytes(bytes' 4).ToSingle();                      // Ha ha' screw you' custom floating-point implementation! Thanks' OpenTK!                      FixedPosition = new Vector3(x' y' z);                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimRawpos) > 0)                  {                      // What's this? A custom made' 16-bit floating point implementation? WHAT DID I DO TO DESERVE THIS???                      var bytes = br.ReadBytes(6);                      // Wait a minute.....                      var x = OpenTK.Half.FromBytes(bytes' 0).ToSingle();                      var y = OpenTK.Half.FromBytes(bytes' 2).ToSingle();                      var z = OpenTK.Half.FromBytes(bytes' 4).ToSingle();                      // Ha ha' screw you' custom floating-point implementation! Thanks' OpenTK!                      FixedPosition = new Vector3(x' y' z);                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimRawpos) > 0)                  {                      // What's this? A custom made' 16-bit floating point implementation? WHAT DID I DO TO DESERVE THIS???                      var bytes = br.ReadBytes(6);                      // Wait a minute.....                      var x = OpenTK.Half.FromBytes(bytes' 0).ToSingle();                      var y = OpenTK.Half.FromBytes(bytes' 2).ToSingle();                      var z = OpenTK.Half.FromBytes(bytes' 4).ToSingle();                      // Ha ha' screw you' custom floating-point implementation! Thanks' OpenTK!                      FixedPosition = new Vector3(x' y' z);                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimAnimrot) > 0)                  {                      // Why is this so painful :(                      // Read the per-frame data using RLE' just like GoldSource models                      var startPos = br.BaseStream.Position;                      var offsets = br.ReadShortArray(3);                      var endPos = br.BaseStream.Position;                      var rotFrames = new List<float[]>();                      for (var i = 0; i < NumFrames; i++) rotFrames.Add(new float[] {0' 0' 0});                      for (var i = 0; i < 3; i++)                      {                          if (offsets[i] == 0) continue;                          br.BaseStream.Position = startPos + offsets[i];                          var values = ReadRLEEncodedAnimationFrameValues(br' NumFrames);                          for (var f = 0; f < values.Count; f++)                          {                              rotFrames[f][i] =+ values[f];                              if (f > 0 && delta) rotFrames[f][i] += values[f - 1];                          }                      }                      FrameAngles.AddRange(rotFrames.Select(x => new Vector3(x[0]' x[1]' x[2])));                      br.BaseStream.Position = endPos;                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimAnimrot) > 0)                  {                      // Why is this so painful :(                      // Read the per-frame data using RLE' just like GoldSource models                      var startPos = br.BaseStream.Position;                      var offsets = br.ReadShortArray(3);                      var endPos = br.BaseStream.Position;                      var rotFrames = new List<float[]>();                      for (var i = 0; i < NumFrames; i++) rotFrames.Add(new float[] {0' 0' 0});                      for (var i = 0; i < 3; i++)                      {                          if (offsets[i] == 0) continue;                          br.BaseStream.Position = startPos + offsets[i];                          var values = ReadRLEEncodedAnimationFrameValues(br' NumFrames);                          for (var f = 0; f < values.Count; f++)                          {                              rotFrames[f][i] =+ values[f];                              if (f > 0 && delta) rotFrames[f][i] += values[f - 1];                          }                      }                      FrameAngles.AddRange(rotFrames.Select(x => new Vector3(x[0]' x[1]' x[2])));                      br.BaseStream.Position = endPos;                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimAnimrot) > 0)                  {                      // Why is this so painful :(                      // Read the per-frame data using RLE' just like GoldSource models                      var startPos = br.BaseStream.Position;                      var offsets = br.ReadShortArray(3);                      var endPos = br.BaseStream.Position;                      var rotFrames = new List<float[]>();                      for (var i = 0; i < NumFrames; i++) rotFrames.Add(new float[] {0' 0' 0});                      for (var i = 0; i < 3; i++)                      {                          if (offsets[i] == 0) continue;                          br.BaseStream.Position = startPos + offsets[i];                          var values = ReadRLEEncodedAnimationFrameValues(br' NumFrames);                          for (var f = 0; f < values.Count; f++)                          {                              rotFrames[f][i] =+ values[f];                              if (f > 0 && delta) rotFrames[f][i] += values[f - 1];                          }                      }                      FrameAngles.AddRange(rotFrames.Select(x => new Vector3(x[0]' x[1]' x[2])));                      br.BaseStream.Position = endPos;                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimAnimpos) > 0)                  {                      // Same as above' except for the position coordinate                      var startPos = br.BaseStream.Position;                      var offsets = br.ReadShortArray(3);                      var endPos = br.BaseStream.Position;                      var posFrames = new List<float[]>();                      for (var i = 0; i < NumFrames; i++) posFrames.Add(new float[] { 0' 0' 0 });                      for (var i = 0; i < 3; i++)                      {                          if (offsets[i] == 0) continue;                          br.BaseStream.Position = startPos + offsets[i];                          var values = ReadRLEEncodedAnimationFrameValues(br' NumFrames);                          for (var f = 0; f < values.Count; f++)                          {                              posFrames[f][i] = +values[f];                              if (f > 0 && delta) posFrames[f][i] += values[f - 1];                          }                      }                      FramePositions.AddRange(posFrames.Select(x => new Vector3(x[0]' x[1]' x[2])));                      br.BaseStream.Position = endPos;                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimAnimpos) > 0)                  {                      // Same as above' except for the position coordinate                      var startPos = br.BaseStream.Position;                      var offsets = br.ReadShortArray(3);                      var endPos = br.BaseStream.Position;                      var posFrames = new List<float[]>();                      for (var i = 0; i < NumFrames; i++) posFrames.Add(new float[] { 0' 0' 0 });                      for (var i = 0; i < 3; i++)                      {                          if (offsets[i] == 0) continue;                          br.BaseStream.Position = startPos + offsets[i];                          var values = ReadRLEEncodedAnimationFrameValues(br' NumFrames);                          for (var f = 0; f < values.Count; f++)                          {                              posFrames[f][i] = +values[f];                              if (f > 0 && delta) posFrames[f][i] += values[f - 1];                          }                      }                      FramePositions.AddRange(posFrames.Select(x => new Vector3(x[0]' x[1]' x[2])));                      br.BaseStream.Position = endPos;                  }
Magic Number,Sledge.Providers.Model,SourceAnimationBone,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Model\MdlProvider.cs,ReadData,The following statement contains a magic number: if ((Flags & StudioAnimAnimpos) > 0)                  {                      // Same as above' except for the position coordinate                      var startPos = br.BaseStream.Position;                      var offsets = br.ReadShortArray(3);                      var endPos = br.BaseStream.Position;                      var posFrames = new List<float[]>();                      for (var i = 0; i < NumFrames; i++) posFrames.Add(new float[] { 0' 0' 0 });                      for (var i = 0; i < 3; i++)                      {                          if (offsets[i] == 0) continue;                          br.BaseStream.Position = startPos + offsets[i];                          var values = ReadRLEEncodedAnimationFrameValues(br' NumFrames);                          for (var f = 0; f < values.Count; f++)                          {                              posFrames[f][i] = +values[f];                              if (f > 0 && delta) posFrames[f][i] += values[f - 1];                          }                      }                      FramePositions.AddRange(posFrames.Select(x => new Vector3(x[0]' x[1]' x[2])));                      br.BaseStream.Position = endPos;                  }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: PlaceholderImage = new Bitmap(16' 16' PixelFormat.Format32bppArgb);
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: PlaceholderImage = new Bitmap(16' 16' PixelFormat.Format32bppArgb);
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Magic Number,Sledge.Providers.Texture,NullTextureStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Texture\NullTextureStreamSource.cs,NullTextureStreamSource,The following statement contains a magic number: using (var g = Graphics.FromImage(PlaceholderImage))              {                  g.FillRectangle(Brushes.Black' 0' 0' 16' 16);                  g.FillRectangle(Brushes.Magenta' 8' 0' 8' 8);                  g.FillRectangle(Brushes.Magenta' 0' 8' 8' 8);              }
Missing Default,Sledge.Providers.GameData,FgdProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\GameData\FgdProvider.cs,ParseAt,The following switch statement is missing a default case: switch (iterator.Current.Value)                              {                                  case "readonly":                                      prop.ReadOnly = true;                                      iterator.MoveNext();                                      break;                                  case "report":                                      prop.ShowInEntityReport = true;                                      iterator.MoveNext();                                      break;                              }
Missing Default,Sledge.Providers.Map,ObjProvider,C:\repos\LogicAndTrick_sledge\Sledge.Providers\Map\ObjProvider.cs,Read,The following switch statement is missing a default case: switch (keyword.ToLower())                  {                      // Things I care about                      case "v": // geometric vertices                          points.Add(Coordinate.Parse(vals[0]' vals[1]' vals[2]) * scale);                          break;                      case "f": // face                          faces.Add(new ObjFace(currentGroup' vals.Select(x => ParseFaceIndex(points' x))));                          break;                      case "g": // group name                          currentGroup = (values ?? "").Trim();                          break;                        // Things I don't care about                      #region Not Implemented                        // Vertex data                      // "v"                      case "vt": // texture vertices                          break;                      case "vn": // vertex normals                          break;                      case "vp": // parameter space vertices                      case "cstype": // rational or non-rational forms of curve or surface type: basis matrix' Bezier' B-spline' Cardinal' Taylor                      case "degree": // degree                      case "bmat": // basis matrix                      case "step": // step size                          // not supported                          break;                        // Elements                      // "f"                      case "p": // point                      case "l": // line                      case "curv": // curve                      case "curv2": // 2D curve                      case "surf": // surface                          // not supported                          break;                        // Free-form curve/surface body statements                      case "parm": // parameter name                      case "trim": // outer trimming loop (trim)                      case "hole": // inner trimming loop (hole)                      case "scrv": // special curve (scrv)                      case "sp":  // special point (sp)                      case "end": // end statement (end)                          // not supported                          break;                        // Connectivity between free-form surfaces                      case "con": // connect                          // not supported                          break;                        // Grouping                      // "g"                      case "s": // smoothing group                          break;                      case "mg": // merging group                          break;                      case "o": // object name                          // not supported                          break;                        // Display/render attributes                      case "mtllib": // material library                      case "usemtl": // material name                      case "usemap": // texture map name                      case "bevel": // bevel interpolation                      case "c_interp": // color interpolation                      case "d_interp": // dissolve interpolation                      case "lod": // level of detail                      case "shadow_obj": // shadow casting                      case "trace_obj": // ray tracing                      case "ctech": // curve approximation technique                      case "stech": // surface approximation technique                          // not relevant                          break;                        #endregion                  }
