Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,OrthographicCamera,Cyclomatic complexity of the method is 9
Complex Method,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,Cyclomatic complexity of the method is 12
Complex Method,Sledge.Rendering.Materials,StringTextureManager,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetTexture,Cyclomatic complexity of the method is 8
Complex Method,Sledge.Rendering.OpenGL.Arrays,OctreeRenderableBase<T>,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\OctreeRenderableBase.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,Cyclomatic complexity of the method is 15
Long Parameter List,Sledge.Rendering.DataStructures.Models,MeshVertex,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Models\MeshVertex.cs,MeshVertex,The method has 5 parameters. Parameters: location' normal' textureU' textureV' weightings
Long Parameter List,Sledge.Rendering.Interfaces,ITextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Interfaces\ITextureStorage.cs,Create,The method has 5 parameters. Parameters: name' bitmap' width' height' flags
Long Parameter List,Sledge.Rendering.Interfaces,TextureDetails,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Interfaces\TextureDetails.cs,TextureDetails,The method has 5 parameters. Parameters: name' bitmap' width' height' flags
Long Parameter List,Sledge.Rendering.Materials,StringTextureManager,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetElement,The method has 9 parameters. Parameters: text' color' type' position' anchorX' anchorY' fontName' fontSize' style
Long Parameter List,Sledge.Rendering.OpenGL.Arrays,Subset,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\VertexArray.cs,Subset,The method has 5 parameters. Parameters: groupId' type' instance' start' count
Long Parameter List,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,Create,The method has 5 parameters. Parameters: name' bitmap' width' height' flags
Long Statement,Sledge.Rendering.Cameras,Camera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\Camera.cs,Deserialise,The length of the statement  "            var ty = typeof (Camera).Assembly.GetTypes().FirstOrDefault(x => String.Equals(x.Name' split[0]' StringComparison.InvariantCultureIgnoreCase)); " is 143.
Long Statement,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,GetClippingPlanes,The length of the statement  "            var pm = Matrix4.CreatePerspectiveFieldOfView(MathHelper.DegreesToRadians(FOV)' width / (float)height' 1.0f' ClipDistance); " is 123.
Long Statement,Sledge.Rendering.DataStructures,OctreeNode<T>,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\OctreeNode.cs,Add,The length of the statement  "                _children = ClippingBox.GetBoxPoints().Select(x => new OctreeNode<T>(Root' this' new Box(x' center)' _limit)).ToArray(); " is 120.
Long Statement,Sledge.Rendering.DataStructures,OctreeNode<T>,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\OctreeNode.cs,Add,The length of the statement  "                // Everything is in the same group! Since we split based on the average origin' that means all the origins are identical. " is 121.
Long Statement,Sledge.Rendering.Materials,StringTextureManager,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetElement,The length of the statement  "                new PositionVertex(new Position(position) { Offset = new Vector3((float) Math.Floor(-size.Width * anchorX)'      (float) Math.Floor(-size.Height * anchorY)'      0) }' uv.X' uv.Y)' " is 180.
Long Statement,Sledge.Rendering.Materials,StringTextureManager,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetElement,The length of the statement  "                new PositionVertex(new Position(position) { Offset = new Vector3((float) Math.Floor(size.Width * (1 - anchorX))' (float) Math.Floor(-size.Height * anchorY)'      0) }' uv.X + uv.Width' uv.Y)' " is 191.
Long Statement,Sledge.Rendering.Materials,StringTextureManager,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetElement,The length of the statement  "                new PositionVertex(new Position(position) { Offset = new Vector3((float) Math.Floor(size.Width * (1 - anchorX))' (float) Math.Floor(size.Height * (1 - anchorY))' 0) }' uv.X + uv.Width' uv.Y + uv.Height)' " is 203.
Long Statement,Sledge.Rendering.Materials,StringTextureManager,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetElement,The length of the statement  "                new PositionVertex(new Position(position) { Offset = new Vector3((float) Math.Floor(-size.Width * anchorX)'      (float) Math.Floor(size.Height * (1 - anchorY))' 0) }' uv.X' uv.Y + uv.Height) " is 191.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,RenderPositionType,The length of the statement  "            var wireframeId = type == PositionType.Screen ? ScreenFaceWireframe : (type == PositionType.Anchored ? AnchoredFaceWireframe : WorldFaceWireframe); " is 147.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,RenderPositionType,The length of the statement  "            var polygonId = type == PositionType.Screen ? ScreenFacePolygons : (type == PositionType.Anchored ? AnchoredFacePolygons : WorldFacePolygons); " is 142.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,CreatePositionTypeArray,The length of the statement  "            var wireframeId = type == PositionType.Screen ? ScreenFaceWireframe : (type == PositionType.Anchored ? AnchoredFaceWireframe : WorldFaceWireframe); " is 147.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,CreatePositionTypeArray,The length of the statement  "            var polygonId = type == PositionType.Screen ? ScreenFacePolygons : (type == PositionType.Anchored ? AnchoredFacePolygons : WorldFacePolygons); " is 142.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,CreatePositionTypeArray,The length of the statement  "            foreach (var g in list.SelectMany(x => x.GetLines(_viewport' _renderer)).GroupBy(x => new { x.Width' x.DepthTested' x.Smooth' x.Stippled })) " is 140.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,CreatePositionTypeArray,The length of the statement  "                PushSubset(wireframeId' new WireframeProperties {Width = g.Key.Width' DepthTested = g.Key.DepthTested' Smooth = g.Key.Smooth' IsStippled = g.Key.Stippled }); " is 157.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ModelVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ModelVertexArray.cs,Render,The length of the statement  "                foreach (var subset in GetSubsets<string>(FacePolygons).Where(x => x.Instance != null).OrderBy(x => (string) x.Instance)) " is 121.
Long Statement,Sledge.Rendering.OpenGL.Arrays,ModelVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ModelVertexArray.cs,CreateArray,The length of the statement  "                        PushIndex(FaceWireframe' index' Enumerable.Range(0' mesh.Vertices.Count / 3).Select(x => 3 * (uint)x).SelectMany(x => new[] { x' x + 1' x + 1' x + 2 })); " is 153.
Long Statement,Sledge.Rendering.OpenGL.Arrays,WireframeProperties,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\WireframeProperties.cs,Equals,The length of the statement  "            return DepthTested.Equals(other.DepthTested) && Smooth.Equals(other.Smooth) && Width.Equals(other.Width) && StippleFactor == other.StippleFactor && StipplePattern == other.StipplePattern; " is 187.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,DeletePartial,The length of the statement  "                if (obj is Face) Update(offset' Convert((Face)obj' VertexFlags.InvisibleOrthographic | VertexFlags.InvisiblePerspective)); " is 122.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,DeletePartial,The length of the statement  "                if (obj is Line) Update(offset' Convert((Line)obj' VertexFlags.InvisibleOrthographic | VertexFlags.InvisiblePerspective)); " is 122.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,DeletePartial,The length of the statement  "                if (obj is Sprite) Update(offset' Convert((Sprite)obj' VertexFlags.InvisibleOrthographic | VertexFlags.InvisiblePerspective)); " is 126.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The length of the statement  "                    if (face.ForcedRenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(transparent ? ForcedTransparentPolygons : ForcedPolygons' index' Triangulate(face.Vertices.Count)); " is 166.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The length of the statement  "                    else if (face.RenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(transparent ? FaceTransparentPolygons : FacePolygons' index' Triangulate(face.Vertices.Count)); " is 161.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The length of the statement  "                    if (face.ForcedRenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(ForcedWireframe' index' Linearise(face.Vertices.Count)); " is 125.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The length of the statement  "                    else if (face.RenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(FaceWireframe' index' Linearise(face.Vertices.Count)); " is 122.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The length of the statement  "                if (line.ForcedRenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(ForcedWireframe' index' Linearise(line.Vertices.Count)); " is 125.
Long Statement,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The length of the statement  "                else if (line.RenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(LineWireframe' index' Linearise(line.Vertices.Count)); " is 122.
Long Statement,Sledge.Rendering.OpenGL.Arrays,VertexArray<TIn;TOut>,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\VertexArray.cs,Commit,The length of the statement  "            GL.BufferData(BufferTarget.ElementArrayBuffer' new IntPtr(elementData.Length * sizeof(uint))' elementData' BufferUsageHint.StreamDraw); " is 135.
Long Statement,Sledge.Rendering.OpenGL,Framebuffer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Framebuffer.cs,Resize,The length of the statement  "            GL.TexImage2D(TextureTarget.Texture2D' 0' PixelInternalFormat.Rgba8' _internalSize.Width' _internalSize.Height' 0' PixelFormat.Bgra' PixelType.UnsignedByte' IntPtr.Zero); " is 170.
Long Statement,Sledge.Rendering.OpenGL,Framebuffer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Framebuffer.cs,Resize,The length of the statement  "            GL.RenderbufferStorage(RenderbufferTarget.Renderbuffer' RenderbufferStorage.DepthComponent24' _internalSize.Width' _internalSize.Height); " is 137.
Long Statement,Sledge.Rendering.OpenGL,Framebuffer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Framebuffer.cs,Render,The length of the statement  "            GL.BlitFramebuffer(0' 0' _size.Width' _size.Height' 0' 0' _size.Width' _size.Height' ClearBufferMask.ColorBufferBit' BlitFramebufferFilter.Nearest); " is 148.
Long Statement,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,Create,The length of the statement  "            GL.TexImage2D(TextureTarget.Texture2D' 0' PixelInternalFormat' 1' 1' 0' PixelFormat.Bgra' PixelType.UnsignedByte' new[] { 0xFFFFFFFF }); " is 136.
Long Statement,Sledge.Rendering.OpenGL,OpenGLRenderer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\OpenGLRenderer.cs,RenderViewport,The length of the statement  "            GL.ClearColor(viewport.Camera is PerspectiveCamera ? Settings.PerspectiveBackgroundColour : Settings.OrthographicBackgroundColour); " is 131.
Long Statement,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetFaces,The length of the statement  "                yield return new FaceElement(PositionType' Material.Flat(Color)' GetVertices().Select(x => new PositionVertex(x' 0' 0))) { DepthTested = DepthTested' ZIndex = ZIndex }; " is 168.
Long Statement,Sledge.Rendering.Scenes.Elements,TextElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\TextElement.cs,GetFaces,The length of the statement  "            var el = renderer.StringTextureManager.GetElement(Text' Color' PositionType' Location' AnchorX' AnchorY' FontName' FontSize' FontStyle); " is 136.
Long Statement,Sledge.Rendering.Scenes.Elements,TextElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\TextElement.cs,GetFaces,The length of the statement  "                Vector3 ConvertToScreen(Vector3 x) => PositionType == PositionType.Screen ? x : Viewport.Camera.WorldToScreen(x' rec.Width' rec.Height); " is 136.
Long Statement,Sledge.Rendering.Scenes.Elements,TextElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\TextElement.cs,GetFaces,The length of the statement  "                Vector3 ConvertToWorld(Vector3 x) => PositionType == PositionType.Screen ? x : Viewport.Camera.Expand(new Vector3(Viewport.Camera.PixelsToUnits(x.X)' -Viewport.Camera.PixelsToUnits(x.Y)' Viewport.Camera.PixelsToUnits(x.Z))); " is 224.
Long Statement,Sledge.Rendering.Scenes.Elements,TextElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\TextElement.cs,GetFaces,The length of the statement  "                if (minX < rec.Left) el.Vertices.ForEach(x => x.Position.Location += ConvertToWorld(new Vector3(rec.Left - minX' 0' 0))); " is 121.
Long Statement,Sledge.Rendering.Scenes.Elements,TextElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\TextElement.cs,GetFaces,The length of the statement  "                else if (maxX > rec.Right) el.Vertices.ForEach(x => x.Position.Location += ConvertToWorld(new Vector3(rec.Right - maxX' 0' 0))); " is 128.
Long Statement,Sledge.Rendering.Scenes.Elements,TextElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\TextElement.cs,GetFaces,The length of the statement  "                else if (maxY > rec.Bottom) el.Vertices.ForEach(x => x.Position.Location += ConvertToWorld(new Vector3(0' rec.Bottom - maxY' 0))); " is 130.
Long Statement,Sledge.Rendering.Scenes.Renderables,Model,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Renderables\Model.cs,GetTransform,The length of the statement  "            return Matrix4.CreateRotationX(Rotation.X) * Matrix4.CreateRotationY(Rotation.Y) * Matrix4.CreateRotationZ(Rotation.Z) * Matrix4.CreateTranslation(Origin); " is 155.
Virtual Method Call from Constructor,Sledge.Rendering.OpenGL.Shaders,ShaderBase,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Shaders\ShaderBase.cs,ShaderBase,The constructor "ShaderBase" calls a virtual method "GetShaderTypes".
Magic Number,Sledge.Rendering.Cameras,Camera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\Camera.cs,Deserialise,The following statement contains a magic number: var split = serialised.Split(new[] {'/'}' 2);
Magic Number,Sledge.Rendering.Cameras,Camera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\Camera.cs,Deserialise,The following statement contains a magic number: if (split.Length != 2) return null;
Magic Number,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,OrthographicCamera,The following statement contains a magic number: if (tags.Length < 4) return;
Magic Number,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,OrthographicCamera,The following statement contains a magic number: if (float.TryParse(tags[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out p)) y = p;
Magic Number,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,OrthographicCamera,The following statement contains a magic number: if (float.TryParse(tags[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out p)) z = p;
Magic Number,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,OrthographicCamera,The following statement contains a magic number: if (tags.Length < 5) return;
Magic Number,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,OrthographicCamera,The following statement contains a magic number: if (float.TryParse(tags[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out p)) Zoom = p;
Magic Number,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,GetViewportMatrix,The following statement contains a magic number: const float near = -1000000;
Magic Number,Sledge.Rendering.Cameras,OrthographicCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\OrthographicCamera.cs,GetViewportMatrix,The following statement contains a magic number: const float far = 1000000;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: FOV = 90;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: ClipDistance = 10000;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (tags.Length < 3) return;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (float.TryParse(tags[2]' NumberStyles.Float' CultureInfo.InvariantCulture' out p)) z = p;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (tags.Length < 6) return;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (float.TryParse(tags[3]' NumberStyles.Float' CultureInfo.InvariantCulture' out p)) x = p;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (float.TryParse(tags[4]' NumberStyles.Float' CultureInfo.InvariantCulture' out p)) y = p;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (float.TryParse(tags[5]' NumberStyles.Float' CultureInfo.InvariantCulture' out p)) z = p;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (tags.Length < 8) return;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (int.TryParse(tags[6]' NumberStyles.Integer' CultureInfo.InvariantCulture' out i)) FOV = i;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,PerspectiveCamera,The following statement contains a magic number: if (int.TryParse(tags[7]' NumberStyles.Integer' CultureInfo.InvariantCulture' out i)) ClipDistance = i;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,ScreenToWorld,The following statement contains a magic number: var pm = Matrix4.CreatePerspectiveFieldOfView(MathHelper.DegreesToRadians(FOV)' width / (float)height' 1.0f' 50000);
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,WorldToScreen,The following statement contains a magic number: var pm = Matrix4.CreatePerspectiveFieldOfView(MathHelper.DegreesToRadians(FOV)' width / (float)height' 1.0f' 50000);
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,CastRayFromScreen,The following statement contains a magic number: var pm = Matrix4.CreatePerspectiveFieldOfView(MathHelper.DegreesToRadians(FOV)' width / (float)height' 1.0f' 50000);
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,GetRotation,The following statement contains a magic number: if (rot < 0) rot += 2 * Math.PI;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,GetRotation,The following statement contains a magic number: if (rot > 2 * Math.PI) rot = rot % (2 * Math.PI);
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,GetRotation,The following statement contains a magic number: if (rot > 2 * Math.PI) rot = rot % (2 * Math.PI);
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,SetElevation,The following statement contains a magic number: if (elevation > (Math.PI * 0.99)) elevation = (float) Math.PI * 0.99f;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,SetElevation,The following statement contains a magic number: if (elevation < (Math.PI * 0.01)) elevation = (float) Math.PI * 0.01f;
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,Pan,The following statement contains a magic number: var rad = degrees * ((float)Math.PI / 180);
Magic Number,Sledge.Rendering.Cameras,PerspectiveCamera,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Cameras\PerspectiveCamera.cs,Tilt,The following statement contains a magic number: SetElevation(GetElevation() + (degrees * ((float)Math.PI / 180)));
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,Box,The following statement contains a magic number: Center = (Start + End) / 2;
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,Box,The following statement contains a magic number: Center = (Start + End) / 2;
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,IsEmpty,The following statement contains a magic number: return Math.Abs(Width) < 0.0001 && Math.Abs(Height) < 0.0001 && Math.Abs(Length) < 0.0001;
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,IsEmpty,The following statement contains a magic number: return Math.Abs(Width) < 0.0001 && Math.Abs(Height) < 0.0001 && Math.Abs(Length) < 0.0001;
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,IsEmpty,The following statement contains a magic number: return Math.Abs(Width) < 0.0001 && Math.Abs(Height) < 0.0001 && Math.Abs(Length) < 0.0001;
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,GetBoxPlanes,The following statement contains a magic number: var planes = new Plane[6];
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,GetBoxPlanes,The following statement contains a magic number: for (var i = 0; i < 6; i++)              {                  planes[i] = new Plane(faces[i][0]' faces[i][1]' faces[i][2]);              }
Magic Number,Sledge.Rendering.DataStructures,Box,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Box.cs,GetBoxPlanes,The following statement contains a magic number: for (var i = 0; i < 6; i++)              {                  planes[i] = new Plane(faces[i][0]' faces[i][1]' faces[i][2]);              }
Magic Number,Sledge.Rendering.DataStructures,OctreeNode<T>,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\OctreeNode.cs,Add,The following statement contains a magic number: if (list.Count < _limit / 2)              {                  foreach (var g in grouped)                  {                      g.Key.Add(g);                  }              }              else              {                  Parallel.ForEach(grouped' g => g.Key.Add(g));              }
Magic Number,Sledge.Rendering.DataStructures,OctreeNode<T>,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\OctreeNode.cs,Remove,The following statement contains a magic number: if (list.Count < _limit / 2)              {                  foreach (var g in grouped)                  {                      if (g.Key != null) g.Key.Remove(g);                  }              }              else              {                  Parallel.ForEach(grouped' g =>                  {                      if (g.Key != null) g.Key.Remove(g);                  });              }
Magic Number,Sledge.Rendering.DataStructures,Plane,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\DataStructures\Plane.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (Normal.GetHashCode() * 397) ^ DistanceFromOrigin.GetHashCode();              }
Magic Number,Sledge.Rendering,Extensions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Extensions.cs,ToAbgr,The following statement contains a magic number: return (color.A << 24) | (color.B << 16) | (color.G << 8) | color.R;
Magic Number,Sledge.Rendering,Extensions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Extensions.cs,ToAbgr,The following statement contains a magic number: return (color.A << 24) | (color.B << 16) | (color.G << 8) | color.R;
Magic Number,Sledge.Rendering,Extensions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Extensions.cs,ToAbgr,The following statement contains a magic number: return (color.A << 24) | (color.B << 16) | (color.G << 8) | color.R;
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Project,The following statement contains a magic number: if (vector.W < 0.00001) return Vector3.Zero;
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Project,The following statement contains a magic number: result.X = viewport[0] + viewport[2] * (result.X + 1) / 2;
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Project,The following statement contains a magic number: result.X = viewport[0] + viewport[2] * (result.X + 1) / 2;
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Project,The following statement contains a magic number: result.Y = viewport[1] + viewport[3] * (result.Y + 1) / 2;
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Project,The following statement contains a magic number: result.Y = viewport[1] + viewport[3] * (result.Y + 1) / 2;
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Project,The following statement contains a magic number: result.Z = (result.Z + 1) / 2;
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Unproject,The following statement contains a magic number: var source = new Vector4(                  (float) ((coordinate.X - viewport[0]) * 2 / viewport[2] - 1)'                  (float) ((coordinate.Y - viewport[1]) * 2 / viewport[3] - 1)'                  (float) (2 * coordinate.Z - 1)'                  1);
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Unproject,The following statement contains a magic number: var source = new Vector4(                  (float) ((coordinate.X - viewport[0]) * 2 / viewport[2] - 1)'                  (float) ((coordinate.Y - viewport[1]) * 2 / viewport[3] - 1)'                  (float) (2 * coordinate.Z - 1)'                  1);
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Unproject,The following statement contains a magic number: var source = new Vector4(                  (float) ((coordinate.X - viewport[0]) * 2 / viewport[2] - 1)'                  (float) ((coordinate.Y - viewport[1]) * 2 / viewport[3] - 1)'                  (float) (2 * coordinate.Z - 1)'                  1);
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Unproject,The following statement contains a magic number: var source = new Vector4(                  (float) ((coordinate.X - viewport[0]) * 2 / viewport[2] - 1)'                  (float) ((coordinate.Y - viewport[1]) * 2 / viewport[3] - 1)'                  (float) (2 * coordinate.Z - 1)'                  1);
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Unproject,The following statement contains a magic number: var source = new Vector4(                  (float) ((coordinate.X - viewport[0]) * 2 / viewport[2] - 1)'                  (float) ((coordinate.Y - viewport[1]) * 2 / viewport[3] - 1)'                  (float) (2 * coordinate.Z - 1)'                  1);
Magic Number,Sledge.Rendering,MathFunctions,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\MathFunctions.cs,Unproject,The following statement contains a magic number: if (vector.W < 0.00001) return Vector3.Zero;
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: DebugTexture = new Bitmap(100' 100);
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: DebugTexture = new Bitmap(100' 100);
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: SquareHandleTexture = new Bitmap(8' 8);
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: SquareHandleTexture = new Bitmap(8' 8);
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(SquareHandleTexture))              {                  g.SmoothingMode = SmoothingMode.HighSpeed;                  g.Clear(Color.White);                  g.DrawRectangle(Pens.Black' 0' 0' 7' 7);              }
Magic Number,Sledge.Rendering.Internal,InternalTextures,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Internal\InternalTextures.cs,InternalTextures,The following statement contains a magic number: using (var g = Graphics.FromImage(SquareHandleTexture))              {                  g.SmoothingMode = SmoothingMode.HighSpeed;                  g.Clear(Color.White);                  g.DrawRectangle(Pens.Black' 0' 0' 7' 7);              }
Magic Number,Sledge.Rendering.Materials,FontKey,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = (Name != null ? Name.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ Size.GetHashCode();                      hashCode = (hashCode * 397) ^ (int) Style;                      return hashCode;                  }
Magic Number,Sledge.Rendering.Materials,FontKey,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = (Name != null ? Name.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ Size.GetHashCode();                      hashCode = (hashCode * 397) ^ (int) Style;                      return hashCode;                  }
Magic Number,Sledge.Rendering.Materials,StringTexture,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,ExpandFor,The following statement contains a magic number: while (newSize < req) newSize *= 2;
Magic Number,Sledge.Rendering.Materials,StringTexture,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\StringTextureManager.cs,AddInternal,The following statement contains a magic number: size = new Size(size.Width' size.Height + 2);
Magic Number,Sledge.Rendering.Materials,Material,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Materials\Material.cs,Texture,The following statement contains a magic number: return new Material(MaterialType.Textured' Color.FromArgb((int)(opacity * 255)' Color.White)' name);
Magic Number,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,Render,The following statement contains a magic number: const float near = -1000000;
Magic Number,Sledge.Rendering.OpenGL.Arrays,ElementVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ElementVertexArray.cs,Render,The following statement contains a magic number: const float far = 1000000;
Magic Number,Sledge.Rendering.OpenGL.Arrays,ModelVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ModelVertexArray.cs,CreateArray,The following statement contains a magic number: foreach (var model in data)              {                  _model = model;                  foreach (var g in model.Meshes.GroupBy(x => x.Material.UniqueIdentifier))                  {                      StartSubset(FacePolygons);                        foreach (var mesh in g)                      {                          var index = PushData(mesh.Vertices.Select(Convert));                          PushIndex(FacePolygons' index' Enumerable.Range(0' mesh.Vertices.Count).Select(System.Convert.ToUInt32));                          PushIndex(FaceWireframe' index' Enumerable.Range(0' mesh.Vertices.Count / 3).Select(x => 3 * (uint)x).SelectMany(x => new[] { x' x + 1' x + 1' x + 2 }));                      }                        PushSubset(FacePolygons' g.Key);                  }              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,ModelVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ModelVertexArray.cs,CreateArray,The following statement contains a magic number: foreach (var model in data)              {                  _model = model;                  foreach (var g in model.Meshes.GroupBy(x => x.Material.UniqueIdentifier))                  {                      StartSubset(FacePolygons);                        foreach (var mesh in g)                      {                          var index = PushData(mesh.Vertices.Select(Convert));                          PushIndex(FacePolygons' index' Enumerable.Range(0' mesh.Vertices.Count).Select(System.Convert.ToUInt32));                          PushIndex(FaceWireframe' index' Enumerable.Range(0' mesh.Vertices.Count / 3).Select(x => 3 * (uint)x).SelectMany(x => new[] { x' x + 1' x + 1' x + 2 }));                      }                        PushSubset(FacePolygons' g.Key);                  }              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,ModelVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ModelVertexArray.cs,CreateArray,The following statement contains a magic number: foreach (var model in data)              {                  _model = model;                  foreach (var g in model.Meshes.GroupBy(x => x.Material.UniqueIdentifier))                  {                      StartSubset(FacePolygons);                        foreach (var mesh in g)                      {                          var index = PushData(mesh.Vertices.Select(Convert));                          PushIndex(FacePolygons' index' Enumerable.Range(0' mesh.Vertices.Count).Select(System.Convert.ToUInt32));                          PushIndex(FaceWireframe' index' Enumerable.Range(0' mesh.Vertices.Count / 3).Select(x => 3 * (uint)x).SelectMany(x => new[] { x' x + 1' x + 1' x + 2 }));                      }                        PushSubset(FacePolygons' g.Key);                  }              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,ModelVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ModelVertexArray.cs,Convert,The following statement contains a magic number: var w3 = weights.Count > 2 ? weights[2] : new KeyValuePair<int' float>(0' 0);
Magic Number,Sledge.Rendering.OpenGL.Arrays,ModelVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ModelVertexArray.cs,Convert,The following statement contains a magic number: var w3 = weights.Count > 2 ? weights[2] : new KeyValuePair<int' float>(0' 0);
Magic Number,Sledge.Rendering.OpenGL.Arrays,OctreeRenderableBase<T>,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\OctreeRenderableBase.cs,ApplyChanges,The following statement contains a magic number: _changeNum += addRenderable.Count + removeRenderable.Count + (replaceRenderable.Count * 2);
Magic Number,Sledge.Rendering.OpenGL.Arrays,WireframeProperties,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\WireframeProperties.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = DepthTested.GetHashCode();                  hashCode = (hashCode * 397) ^ Smooth.GetHashCode();                  hashCode = (hashCode * 397) ^ Width.GetHashCode();                  hashCode = (hashCode * 397) ^ StippleFactor;                  hashCode = (hashCode * 397) ^ StipplePattern.GetHashCode();                  return hashCode;              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,WireframeProperties,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\WireframeProperties.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = DepthTested.GetHashCode();                  hashCode = (hashCode * 397) ^ Smooth.GetHashCode();                  hashCode = (hashCode * 397) ^ Width.GetHashCode();                  hashCode = (hashCode * 397) ^ StippleFactor;                  hashCode = (hashCode * 397) ^ StipplePattern.GetHashCode();                  return hashCode;              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,WireframeProperties,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\WireframeProperties.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = DepthTested.GetHashCode();                  hashCode = (hashCode * 397) ^ Smooth.GetHashCode();                  hashCode = (hashCode * 397) ^ Width.GetHashCode();                  hashCode = (hashCode * 397) ^ StippleFactor;                  hashCode = (hashCode * 397) ^ StipplePattern.GetHashCode();                  return hashCode;              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,WireframeProperties,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\WireframeProperties.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = DepthTested.GetHashCode();                  hashCode = (hashCode * 397) ^ Smooth.GetHashCode();                  hashCode = (hashCode * 397) ^ Width.GetHashCode();                  hashCode = (hashCode * 397) ^ StippleFactor;                  hashCode = (hashCode * 397) ^ StipplePattern.GetHashCode();                  return hashCode;              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,ArrayIndex,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ArrayIndex.cs,GetSize,The following statement contains a magic number: switch (type)              {                  case VertexAttribPointerType.Byte:                  case VertexAttribPointerType.UnsignedByte:                      return sizeof(byte);                  case VertexAttribPointerType.Short:                      return sizeof(short);                  case VertexAttribPointerType.UnsignedShort:                      return sizeof(ushort);                  case VertexAttribPointerType.Int:                      return sizeof(int);                  case VertexAttribPointerType.UnsignedInt:                      return sizeof(uint);                  case VertexAttribPointerType.Float:                      return sizeof(float);                  case VertexAttribPointerType.Double:                      return sizeof(double);                  case VertexAttribPointerType.HalfFloat:                      return sizeof(float) / 2;                  default:                      throw new ArgumentOutOfRangeException("type");              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,ArraySpecification,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ArraySpecification.cs,ArraySpecification,The following statement contains a magic number: foreach (var field in t.GetFields())              {                  var attr = field.GetCustomAttributes(typeof(ArrayIndexAttribute)' false).OfType<ArrayIndexAttribute>().FirstOrDefault();                  if (attr != null)                  {                      Indices.Add(new ArrayIndex(field.Name' attr.Type' attr.Length) { Normalised = attr.Normalised });                      continue;                  }                  switch (field.FieldType.Name)                  {                      case "Vector2":                          Indices.Add(ArrayIndex.Float(field.Name' 2));                          break;                      case "Vector3":                          Indices.Add(ArrayIndex.Float(field.Name' 3));                          break;                      case "Vector4":                      case "Color4":                          Indices.Add(ArrayIndex.Float(field.Name' 4));                          break;                      case "Single":                          Indices.Add(ArrayIndex.Float(field.Name));                          break;                      case "Int32":                          Indices.Add(ArrayIndex.Integer(field.Name));                          break;                      case "Int16":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.Short' 1));                          break;                      case "Byte":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.UnsignedByte' 1));                          break;                  }              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,ArraySpecification,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ArraySpecification.cs,ArraySpecification,The following statement contains a magic number: foreach (var field in t.GetFields())              {                  var attr = field.GetCustomAttributes(typeof(ArrayIndexAttribute)' false).OfType<ArrayIndexAttribute>().FirstOrDefault();                  if (attr != null)                  {                      Indices.Add(new ArrayIndex(field.Name' attr.Type' attr.Length) { Normalised = attr.Normalised });                      continue;                  }                  switch (field.FieldType.Name)                  {                      case "Vector2":                          Indices.Add(ArrayIndex.Float(field.Name' 2));                          break;                      case "Vector3":                          Indices.Add(ArrayIndex.Float(field.Name' 3));                          break;                      case "Vector4":                      case "Color4":                          Indices.Add(ArrayIndex.Float(field.Name' 4));                          break;                      case "Single":                          Indices.Add(ArrayIndex.Float(field.Name));                          break;                      case "Int32":                          Indices.Add(ArrayIndex.Integer(field.Name));                          break;                      case "Int16":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.Short' 1));                          break;                      case "Byte":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.UnsignedByte' 1));                          break;                  }              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,ArraySpecification,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ArraySpecification.cs,ArraySpecification,The following statement contains a magic number: foreach (var field in t.GetFields())              {                  var attr = field.GetCustomAttributes(typeof(ArrayIndexAttribute)' false).OfType<ArrayIndexAttribute>().FirstOrDefault();                  if (attr != null)                  {                      Indices.Add(new ArrayIndex(field.Name' attr.Type' attr.Length) { Normalised = attr.Normalised });                      continue;                  }                  switch (field.FieldType.Name)                  {                      case "Vector2":                          Indices.Add(ArrayIndex.Float(field.Name' 2));                          break;                      case "Vector3":                          Indices.Add(ArrayIndex.Float(field.Name' 3));                          break;                      case "Vector4":                      case "Color4":                          Indices.Add(ArrayIndex.Float(field.Name' 4));                          break;                      case "Single":                          Indices.Add(ArrayIndex.Float(field.Name));                          break;                      case "Int32":                          Indices.Add(ArrayIndex.Integer(field.Name));                          break;                      case "Int16":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.Short' 1));                          break;                      case "Byte":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.UnsignedByte' 1));                          break;                  }              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The following statement contains a magic number: foreach (var sprite in items.OfType<Sprite>())              {                  StartSubset(FaceTransparentPolygons);                    PushOffset(sprite);                  var index = PushData(Convert(sprite));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(ForcedWireframe' index' Linearise(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(FaceWireframe' index' Linearise(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Point)) PushIndex(ForcedPoints' index' new[] { 0u });                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Point)) PushIndex(FacePoints' index' new[] { 0u });                    PushSubset(FaceTransparentPolygons' sprite);              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The following statement contains a magic number: foreach (var sprite in items.OfType<Sprite>())              {                  StartSubset(FaceTransparentPolygons);                    PushOffset(sprite);                  var index = PushData(Convert(sprite));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(ForcedWireframe' index' Linearise(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(FaceWireframe' index' Linearise(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Point)) PushIndex(ForcedPoints' index' new[] { 0u });                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Point)) PushIndex(FacePoints' index' new[] { 0u });                    PushSubset(FaceTransparentPolygons' sprite);              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The following statement contains a magic number: foreach (var sprite in items.OfType<Sprite>())              {                  StartSubset(FaceTransparentPolygons);                    PushOffset(sprite);                  var index = PushData(Convert(sprite));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(ForcedWireframe' index' Linearise(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(FaceWireframe' index' Linearise(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Point)) PushIndex(ForcedPoints' index' new[] { 0u });                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Point)) PushIndex(FacePoints' index' new[] { 0u });                    PushSubset(FaceTransparentPolygons' sprite);              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,CreateArray,The following statement contains a magic number: foreach (var sprite in items.OfType<Sprite>())              {                  StartSubset(FaceTransparentPolygons);                    PushOffset(sprite);                  var index = PushData(Convert(sprite));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Polygon)) PushIndex(FaceTransparentPolygons' index' Triangulate(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(ForcedWireframe' index' Linearise(4));                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Wireframe)) PushIndex(FaceWireframe' index' Linearise(4));                    if (sprite.ForcedRenderFlags.HasFlag(RenderFlags.Point)) PushIndex(ForcedPoints' index' new[] { 0u });                  else if (sprite.RenderFlags.HasFlag(RenderFlags.Point)) PushIndex(FacePoints' index' new[] { 0u });                    PushSubset(FaceTransparentPolygons' sprite);              }
Magic Number,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,Convert,The following statement contains a magic number: var w = sprite.Width / 2;
Magic Number,Sledge.Rendering.OpenGL.Arrays,RenderableVertexArray,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\RenderableVertexArray.cs,Convert,The following statement contains a magic number: var h = sprite.Height / 2;
Magic Number,Sledge.Rendering.OpenGL,Framebuffer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Framebuffer.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 2);
Magic Number,Sledge.Rendering.OpenGL,Framebuffer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Framebuffer.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 4);
Magic Number,Sledge.Rendering.OpenGL,Framebuffer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Framebuffer.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 8);
Magic Number,Sledge.Rendering.OpenGL,Framebuffer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Framebuffer.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 16);
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: DebugTexture = new Bitmap(100' 100);
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: DebugTexture = new Bitmap(100' 100);
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,TextureStorage,The following statement contains a magic number: using (var g = Graphics.FromImage(DebugTexture))              {                  g.Clear(Color.White);                  g.FillRectangle(Brushes.Blue' 10' 10' 80' 80);                  g.FillRectangle(Brushes.Orange' 20' 20' 60' 60);                  g.FillRectangle(Brushes.Purple' 30' 30' 40' 40);                  g.FillRectangle(Brushes.Yellow' 40' 40' 20' 20);              }
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 2);
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 4);
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 8);
Magic Number,Sledge.Rendering.OpenGL,TextureStorage,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\TextureStorage.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 16);
Magic Number,Sledge.Rendering.OpenGL,OpenGLRenderer,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\OpenGLRenderer.cs,ProcessTextureQueue,The following statement contains a magic number: foreach (var tp in TextureProviders)              {                  foreach (var td in tp.PopRequestedTextures(5))                  {                      Textures.Create(td.Name' td.Bitmap' td.Width' td.Height' td.Flags);                  }              }
Magic Number,Sledge.Rendering.OpenGL,OpenGLViewport,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\OpenGLViewport.cs,UpdateFrame,The following statement contains a magic number: if (!IsFocused) // Change this if things start to get choppy              {                  UnfocusedUpdateCounter++;                  // Update every 10th frame                  if (UnfocusedUpdateCounter % 10 != 0)                  {                      return;                  }              }
Magic Number,Sledge.Rendering.OpenGL.Shaders,Shader,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Shaders\Shader.cs,BindAttribLocations,The following statement contains a magic number: foreach (Match match in regex.Matches(ShaderCode))              {                  GL.BindAttribLocation(program' int.Parse(match.Groups[1].Value)' match.Groups[3].Value);              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Magic Number,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following statement contains a magic number: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
Missing Default,Sledge.Rendering.OpenGL.Arrays,ArraySpecification,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\OpenGL\Arrays\ArraySpecification.cs,ArraySpecification,The following switch statement is missing a default case: switch (field.FieldType.Name)                  {                      case "Vector2":                          Indices.Add(ArrayIndex.Float(field.Name' 2));                          break;                      case "Vector3":                          Indices.Add(ArrayIndex.Float(field.Name' 3));                          break;                      case "Vector4":                      case "Color4":                          Indices.Add(ArrayIndex.Float(field.Name' 4));                          break;                      case "Single":                          Indices.Add(ArrayIndex.Float(field.Name));                          break;                      case "Int32":                          Indices.Add(ArrayIndex.Integer(field.Name));                          break;                      case "Int16":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.Short' 1));                          break;                      case "Byte":                          Indices.Add(new ArrayIndex(field.Name' VertexAttribPointerType.UnsignedByte' 1));                          break;                  }
Missing Default,Sledge.Rendering.Scenes.Elements,HandleElement,C:\repos\LogicAndTrick_sledge\Sledge.Rendering\Scenes\Elements\HandleElement.cs,GetVertices,The following switch statement is missing a default case: switch (Type)              {                  case HandleType.Square:                      yield return Offset(-Radius' -Radius);                      yield return Offset(+Radius' -Radius);                      yield return Offset(+Radius' +Radius);                      yield return Offset(-Radius' +Radius);                      break;                  case HandleType.Circle:                      int sides;                      if (Radius < 5) sides = 8;                      else if (Radius < 20) sides = 16;                      else if (Radius < 50) sides = 24;                      else if (Radius < 100) sides = 42;                      else if (Radius < 300) sides = 64;                      else sides = 128;                      var diff = (2 * (float) Math.PI) / sides;                      for (var i = 0; i < sides; i++)                      {                          var deg = diff * i;                          var x = Math.Cos(deg) * Radius;                          var y = Math.Sin(deg) * Radius;                          yield return Offset((float) x' (float) y);                      }                      break;                  case HandleType.UpTriangle:                      break;                  case HandleType.DownTriangle:                      break;              }
