Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sledge.BspEditor.Rendering.Scene,MapDocumentSceneObjectProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Scene\MapDocumentSceneObjectProvider.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,Cyclomatic complexity of the method is 9
Long Identifier,Sledge.BspEditor.Rendering.Converters,CenterHandlesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,,The length of the parameter _centerHandlesActiveViewportOnly is 32.
Long Identifier,Sledge.BspEditor.Rendering.Viewport,MapViewportControlFactory,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\MapViewportControlFactory.cs,,The length of the parameter _viewportEventListenerFactories is 31.
Long Statement,Sledge.BspEditor.Rendering.Converters,EntityAnglesLineElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityAngleConverter.cs,RequiresValidation,The length of the statement  "                return !GetValue<bool>(viewport' "Validated") || GetValue(viewport' "Zoomed"' viewport.Camera.Zoom >= 0.5) != viewport.Camera.Zoom >= 0.5; " is 138.
Long Statement,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CalculateDecalGeometry,The length of the statement  "                // Calculate the X and Y shift bases on the first vertex location (assuming U/V of first vertex is zero) - we dont want these to change " is 135.
Long Statement,Sledge.BspEditor.Rendering.Converters,GridElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\GridConverter.cs,GetValidatedBounds,The length of the statement  "                var vmin = viewport.Camera.Flatten(viewport.Camera.ScreenToWorld(new Vector3(-padding' viewport.Control.Height + padding' 0)' viewport.Control.Width' viewport.Control.Height)); " is 176.
Long Statement,Sledge.BspEditor.Rendering.Converters,GridElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\GridConverter.cs,GetValidatedBounds,The length of the statement  "                var vmax = viewport.Camera.Flatten(viewport.Camera.ScreenToWorld(new Vector3(viewport.Control.Width + padding' -padding' 0)' viewport.Control.Width' viewport.Control.Height)); " is 175.
Long Statement,Sledge.BspEditor.Rendering.Converters,GridElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\GridConverter.cs,GetLines,The length of the statement  "                var vmin = viewport.Camera.ScreenToWorld(new Vector3(-padding' viewport.Control.Height + padding' 0)' viewport.Control.Width' viewport.Control.Height); " is 151.
Long Statement,Sledge.BspEditor.Rendering.Converters,GridElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\GridConverter.cs,GetLines,The length of the statement  "                var vmax = viewport.Camera.ScreenToWorld(new Vector3(viewport.Control.Width + padding' -padding' 0)' viewport.Control.Width' viewport.Control.Height); " is 150.
Long Statement,Sledge.BspEditor.Rendering.Converters,DefaultSolidConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultSolidConverter.cs,ConvertFace,The length of the statement  "            var sceneFace = new SceneFace(mat' coords.Select(x => new Vertex(x.Item1.ToVector3()' (float) x.Item2' (float) x.Item3)).ToList()) " is 130.
Long Statement,Sledge.BspEditor.Rendering.Converters,EntityTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityNameConverter.cs,GetFaces,The length of the statement  "                // This is done by flattening the coordinate' extracting the Y value' and then expanding it back out to the world coordinate " is 124.
Long Statement,Sledge.BspEditor.Rendering.Converters,EntityTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityNameConverter.cs,GetFaces,The length of the statement  "                var el = renderer.StringTextureManager.GetElement(Text' Color' PositionType' loc' AnchorX' AnchorY' FontName' FontSize' FontStyle); " is 131.
Long Statement,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The length of the statement  "            smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Red)' Vector3.Zero' Vector3.UnitX * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective }); " is 190.
Long Statement,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The length of the statement  "            smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Lime)' Vector3.Zero' Vector3.UnitY * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective }); " is 191.
Long Statement,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The length of the statement  "            smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Blue)' Vector3.Zero' Vector3.UnitZ * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective }); " is 191.
Long Statement,Sledge.BspEditor.Rendering.Converters,ViewportLabelTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\ViewportTextConverter.cs,GetFaces,The length of the statement  "                var el = renderer.StringTextureManager.GetElement(text' Color' PositionType' Location' AnchorX' AnchorY' FontName' FontSize' FontStyle); " is 136.
Long Statement,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The length of the statement  "            var moveAllowed = false; //DocumentManager.CurrentDocument != null && (DocumentManager.CurrentDocument.Selection.IsEmpty() || !Sledge.Settings.Select.ArrowKeysNudgeSelection); " is 175.
Long Statement,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,UpdateFrame,The length of the statement  "            if (Viewport.Viewport.IsFocused && _mouseDown != null && Control.MouseButtons.HasFlag(MouseButtons.Left) && !KeyboardState.IsKeyDown(Keys.Space)) " is 145.
Long Statement,Sledge.BspEditor.Rendering.Viewport,CameraNavigataionViewportSettings,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\CameraNavigataionViewportSettings.cs,GetKeys,The length of the statement  "            yield return new SettingKey("Navigation"' "ForwardSpeed"' typeof(int)) { EditorType = "Slider"' EditorHint = "100'500" }; " is 121.
Long Statement,Sledge.BspEditor.Rendering.Viewport,CameraNavigataionViewportSettings,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\CameraNavigataionViewportSettings.cs,GetKeys,The length of the statement  "            yield return new SettingKey("Navigation"' "TimeToTopSpeed"' typeof(decimal)) { EditorType = "Slider"' EditorHint = "0'50'1'5'10" }; " is 131.
Long Statement,Sledge.BspEditor.Rendering.Resources,EnvironmentTextureProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Resources\EnvironmentTextureProvider.cs,Request,The length of the statement  "            var n = names.Where(x => x.Length > _idLen && x.Substring(0' _idLen - 2) == Environment.ID).Select(x => x.Substring(_idLen)).ToList(); " is 134.
Long Statement,Sledge.BspEditor.Rendering.Resources,EnvironmentTextureProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Resources\EnvironmentTextureProvider.cs,Request,The length of the statement  "                    var td = new TextureDetails($"{Environment.ID}::{item.Name}"' await ss.GetImage(item.Name' 1024' 1024)' item.Width' item.Height' item.Flags); " is 141.
Long Statement,Sledge.BspEditor.Rendering,Renderer,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Renderer.cs,LoadValues,The length of the statement  "            var render = Enum.TryParse(store.Get("Renderer"' "OpenGLRenderer")' out RenderEngine r) ? r : RenderEngine.OpenGLRenderer; " is 122.
Complex Conditional,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,UpdateFrame,The conditional expression  "Viewport.Viewport.IsFocused && _mouseDown != null && Control.MouseButtons.HasFlag(MouseButtons.Left) && !KeyboardState.IsKeyDown(Keys.Space)"  is complex.
Complex Conditional,Sledge.BspEditor.Rendering.Viewport,PerspectiveCameraNavigationViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\PerspectiveCameraNavigationViewportListener.cs,KeyDown,The conditional expression  "e.KeyCode == Keys.Z && !e.Alt && !e.Control && !e.Shift"  is complex.
Complex Conditional,Sledge.BspEditor.Rendering.Viewport,MapViewport,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\MapViewport.cs,OnMouseMove,The conditional expression  "!_dragging                  && (Math.Abs(_mouseDownLocation.X - e.Location.X) > 1                      || Math.Abs(_mouseDownLocation.Y - e.Location.Y) > 1)                  && _mouseDownLocation.X >= 0 && _mouseDownLocation.Y >= 0"  is complex.
Empty Catch Block,Sledge.BspEditor.Rendering.Viewport,ViewportMapDocumentControl,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\ViewportMapDocumentControl.cs,SetSerialisedSettings,The method has an empty catch block.
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Init,The following statement contains a magic number: using (var bmp = new Bitmap(5' 5))                  {                      using (var g = Graphics.FromImage(bmp))                      {                          g.SmoothingMode = SmoothingMode.None;                          g.DrawLine(Pens.White' 0' 0' 4' 4);                          g.DrawLine(Pens.White' 4' 0' 0' 4);                      }                      renderer.Textures.Create(Name' bmp' bmp.Width' bmp.Height' TextureFlags.PixelPerfect);                  }
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Init,The following statement contains a magic number: using (var bmp = new Bitmap(5' 5))                  {                      using (var g = Graphics.FromImage(bmp))                      {                          g.SmoothingMode = SmoothingMode.None;                          g.DrawLine(Pens.White' 0' 0' 4' 4);                          g.DrawLine(Pens.White' 4' 0' 0' 4);                      }                      renderer.Textures.Create(Name' bmp' bmp.Width' bmp.Height' TextureFlags.PixelPerfect);                  }
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Init,The following statement contains a magic number: using (var bmp = new Bitmap(5' 5))                  {                      using (var g = Graphics.FromImage(bmp))                      {                          g.SmoothingMode = SmoothingMode.None;                          g.DrawLine(Pens.White' 0' 0' 4' 4);                          g.DrawLine(Pens.White' 4' 0' 0' 4);                      }                      renderer.Textures.Create(Name' bmp' bmp.Width' bmp.Height' TextureFlags.PixelPerfect);                  }
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Init,The following statement contains a magic number: using (var bmp = new Bitmap(5' 5))                  {                      using (var g = Graphics.FromImage(bmp))                      {                          g.SmoothingMode = SmoothingMode.None;                          g.DrawLine(Pens.White' 0' 0' 4' 4);                          g.DrawLine(Pens.White' 4' 0' 0' 4);                      }                      renderer.Textures.Create(Name' bmp' bmp.Width' bmp.Height' TextureFlags.PixelPerfect);                  }
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Init,The following statement contains a magic number: using (var bmp = new Bitmap(5' 5))                  {                      using (var g = Graphics.FromImage(bmp))                      {                          g.SmoothingMode = SmoothingMode.None;                          g.DrawLine(Pens.White' 0' 0' 4' 4);                          g.DrawLine(Pens.White' 4' 0' 0' 4);                      }                      renderer.Textures.Create(Name' bmp' bmp.Width' bmp.Height' TextureFlags.PixelPerfect);                  }
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Init,The following statement contains a magic number: using (var bmp = new Bitmap(5' 5))                  {                      using (var g = Graphics.FromImage(bmp))                      {                          g.SmoothingMode = SmoothingMode.None;                          g.DrawLine(Pens.White' 0' 0' 4' 4);                          g.DrawLine(Pens.White' 4' 0' 0' 4);                      }                      renderer.Textures.Create(Name' bmp' bmp.Width' bmp.Height' TextureFlags.PixelPerfect);                  }
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,CenterHandleTextElement,The following statement contains a magic number: _color = Color.FromArgb(192' obj.Data.GetOne<ObjectColor>()?.Color ?? Color.White);
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Update,The following statement contains a magic number: _color = Color.FromArgb(192' Color.FromArgb(192' obj.Data.GetOne<ObjectColor>()?.Color ?? Color.White));
Magic Number,Sledge.BspEditor.Rendering.Converters,CenterHandleTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\CenterHandlesConverter.cs,Update,The following statement contains a magic number: _color = Color.FromArgb(192' Color.FromArgb(192' obj.Data.GetOne<ObjectColor>()?.Color ?? Color.White));
Magic Number,Sledge.BspEditor.Rendering.Converters,DefaultEntityConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultEntityConverter.cs,Convert,The following statement contains a magic number: foreach (var face in entity.BoundingBox.GetBoxFaces())              {                  var sel = entity.IsSelected;                  var color = entity.Color?.Color ?? Color.Green;                  var mat = Material.Flat(color);                    var f = new Face(mat' face.Select(x => new Vertex(x.ToVector3()' 0' 0)).ToList())                  {                      AccentColor = sel ? Color.Red : color'                      PointColor = sel ? Color.Red : color'                      TintColor = sel ? Color.FromArgb(128' Color.Red) : Color.White'                      IsSelected = sel'                      ForcedRenderFlags = sel ? RenderFlags.Wireframe : RenderFlags.None'                      RenderFlags = RenderFlags.Polygon | RenderFlags.Wireframe'                      CameraFlags = flags                  };                    smo.SceneObjects.Add(face' f);              }
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityAnglesLineElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityAngleConverter.cs,RequiresValidation,The following statement contains a magic number: return !GetValue<bool>(viewport' "Validated") || GetValue(viewport' "Zoomed"' viewport.Camera.Zoom >= 0.5) != viewport.Camera.Zoom >= 0.5;
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityAnglesLineElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityAngleConverter.cs,RequiresValidation,The following statement contains a magic number: return !GetValue<bool>(viewport' "Validated") || GetValue(viewport' "Zoomed"' viewport.Camera.Zoom >= 0.5) != viewport.Camera.Zoom >= 0.5;
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityAnglesLineElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityAngleConverter.cs,Validate,The following statement contains a magic number: SetValue(viewport' "Zoomed"' viewport.Camera.Zoom >= 0.5);
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityAnglesLineElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityAngleConverter.cs,GetLines,The following statement contains a magic number: if (ortho != null && ortho.Zoom < 0.5) return new LineElement[0];
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CalculateDecalGeometry,The following statement contains a magic number: var boxRadius = Coordinate.One * 4;
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CalculateDecalGeometry,The following statement contains a magic number: foreach (var sf in faces)              {                  var solid = sf.Solid;                  var face = sf.Face;                    // Project the decal onto the face                  var center = face.Plane.Project(entity.Origin);                  var texture = face.Texture.Clone();                  texture.Name = decal.Name;                  texture.XShift = -decal.Width / 2m;                  texture.YShift = -decal.Height / 2m;                  var decalFace = new Face(0)                  {                      Plane = face.Plane'                      Texture = texture                  };                  // Re-project the vertices in case the texture axes are not on the face plane                  var xShift = face.Texture.UAxis * face.Texture.XScale * decal.Width / 2;                  var yShift = face.Texture.VAxis * face.Texture.YScale * decal.Height / 2;                  var verts = new[]                  {                      face.Plane.Project(center + xShift - yShift)' // Bottom Right                      face.Plane.Project(center + xShift + yShift)' // Top Right                      face.Plane.Project(center - xShift + yShift)' // Top Left                      face.Plane.Project(center - xShift - yShift)  // Bottom Left                  };                    // Because the texture axes don't have to align to the face' we might have a reversed face here                  // If so' reverse the points to get a valid face for the plane.                  // TODO: Is there a better way to do this?                  var vertPlane = new Plane(verts[0]' verts[1]' verts[2]);                  if (!face.Plane.Normal.EquivalentTo(vertPlane.Normal))                  {                      Array.Reverse(verts);                  }                    decalFace.Vertices.AddRange(verts);                    // Calculate the X and Y shift bases on the first vertex location (assuming U/V of first vertex is zero) - we dont want these to change                  var vtx = decalFace.Vertices[0];                  decalFace.Texture.XShift = -(vtx.Dot(decalFace.Texture.UAxis)) / decalFace.Texture.XScale;                  decalFace.Texture.YShift = -(vtx.Dot(decalFace.Texture.VAxis)) / decalFace.Texture.YScale;                    // Next' the decal geometry needs to be clipped to the face so it doesn't spill into the void                  // Create a fake solid out of the decal geometry and clip it against all the brush planes                  var poly = new Polygon(decalFace.Vertices);                  var fake = CreateFakeDecalSolid(poly);                    foreach (var f in solid.Faces.Except(new[] { decalFace }))                  {                      Polyhedron back' front;                      fake.Split(f.Plane' out back' out front);                      fake = back ?? fake;                  }                    // Extract out the original face                  var newFace = fake.Polygons.FirstOrDefault(x => x.GetPlane().EquivalentTo(face.Plane' 0.05m));                  if (newFace == null) continue;                    decalFace.Vertices.Clear();                  decalFace.Vertices.AddRange(newFace.Vertices);                    // Add a tiny bit to the normal axis to ensure the decal is rendered in front of the face                  var normalAdd = face.Plane.Normal * 0.2m;                  decalFace.Transform(Matrix.Translation(normalAdd));                    yield return decalFace;              }
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CalculateDecalGeometry,The following statement contains a magic number: foreach (var sf in faces)              {                  var solid = sf.Solid;                  var face = sf.Face;                    // Project the decal onto the face                  var center = face.Plane.Project(entity.Origin);                  var texture = face.Texture.Clone();                  texture.Name = decal.Name;                  texture.XShift = -decal.Width / 2m;                  texture.YShift = -decal.Height / 2m;                  var decalFace = new Face(0)                  {                      Plane = face.Plane'                      Texture = texture                  };                  // Re-project the vertices in case the texture axes are not on the face plane                  var xShift = face.Texture.UAxis * face.Texture.XScale * decal.Width / 2;                  var yShift = face.Texture.VAxis * face.Texture.YScale * decal.Height / 2;                  var verts = new[]                  {                      face.Plane.Project(center + xShift - yShift)' // Bottom Right                      face.Plane.Project(center + xShift + yShift)' // Top Right                      face.Plane.Project(center - xShift + yShift)' // Top Left                      face.Plane.Project(center - xShift - yShift)  // Bottom Left                  };                    // Because the texture axes don't have to align to the face' we might have a reversed face here                  // If so' reverse the points to get a valid face for the plane.                  // TODO: Is there a better way to do this?                  var vertPlane = new Plane(verts[0]' verts[1]' verts[2]);                  if (!face.Plane.Normal.EquivalentTo(vertPlane.Normal))                  {                      Array.Reverse(verts);                  }                    decalFace.Vertices.AddRange(verts);                    // Calculate the X and Y shift bases on the first vertex location (assuming U/V of first vertex is zero) - we dont want these to change                  var vtx = decalFace.Vertices[0];                  decalFace.Texture.XShift = -(vtx.Dot(decalFace.Texture.UAxis)) / decalFace.Texture.XScale;                  decalFace.Texture.YShift = -(vtx.Dot(decalFace.Texture.VAxis)) / decalFace.Texture.YScale;                    // Next' the decal geometry needs to be clipped to the face so it doesn't spill into the void                  // Create a fake solid out of the decal geometry and clip it against all the brush planes                  var poly = new Polygon(decalFace.Vertices);                  var fake = CreateFakeDecalSolid(poly);                    foreach (var f in solid.Faces.Except(new[] { decalFace }))                  {                      Polyhedron back' front;                      fake.Split(f.Plane' out back' out front);                      fake = back ?? fake;                  }                    // Extract out the original face                  var newFace = fake.Polygons.FirstOrDefault(x => x.GetPlane().EquivalentTo(face.Plane' 0.05m));                  if (newFace == null) continue;                    decalFace.Vertices.Clear();                  decalFace.Vertices.AddRange(newFace.Vertices);                    // Add a tiny bit to the normal axis to ensure the decal is rendered in front of the face                  var normalAdd = face.Plane.Normal * 0.2m;                  decalFace.Transform(Matrix.Translation(normalAdd));                    yield return decalFace;              }
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CalculateDecalGeometry,The following statement contains a magic number: foreach (var sf in faces)              {                  var solid = sf.Solid;                  var face = sf.Face;                    // Project the decal onto the face                  var center = face.Plane.Project(entity.Origin);                  var texture = face.Texture.Clone();                  texture.Name = decal.Name;                  texture.XShift = -decal.Width / 2m;                  texture.YShift = -decal.Height / 2m;                  var decalFace = new Face(0)                  {                      Plane = face.Plane'                      Texture = texture                  };                  // Re-project the vertices in case the texture axes are not on the face plane                  var xShift = face.Texture.UAxis * face.Texture.XScale * decal.Width / 2;                  var yShift = face.Texture.VAxis * face.Texture.YScale * decal.Height / 2;                  var verts = new[]                  {                      face.Plane.Project(center + xShift - yShift)' // Bottom Right                      face.Plane.Project(center + xShift + yShift)' // Top Right                      face.Plane.Project(center - xShift + yShift)' // Top Left                      face.Plane.Project(center - xShift - yShift)  // Bottom Left                  };                    // Because the texture axes don't have to align to the face' we might have a reversed face here                  // If so' reverse the points to get a valid face for the plane.                  // TODO: Is there a better way to do this?                  var vertPlane = new Plane(verts[0]' verts[1]' verts[2]);                  if (!face.Plane.Normal.EquivalentTo(vertPlane.Normal))                  {                      Array.Reverse(verts);                  }                    decalFace.Vertices.AddRange(verts);                    // Calculate the X and Y shift bases on the first vertex location (assuming U/V of first vertex is zero) - we dont want these to change                  var vtx = decalFace.Vertices[0];                  decalFace.Texture.XShift = -(vtx.Dot(decalFace.Texture.UAxis)) / decalFace.Texture.XScale;                  decalFace.Texture.YShift = -(vtx.Dot(decalFace.Texture.VAxis)) / decalFace.Texture.YScale;                    // Next' the decal geometry needs to be clipped to the face so it doesn't spill into the void                  // Create a fake solid out of the decal geometry and clip it against all the brush planes                  var poly = new Polygon(decalFace.Vertices);                  var fake = CreateFakeDecalSolid(poly);                    foreach (var f in solid.Faces.Except(new[] { decalFace }))                  {                      Polyhedron back' front;                      fake.Split(f.Plane' out back' out front);                      fake = back ?? fake;                  }                    // Extract out the original face                  var newFace = fake.Polygons.FirstOrDefault(x => x.GetPlane().EquivalentTo(face.Plane' 0.05m));                  if (newFace == null) continue;                    decalFace.Vertices.Clear();                  decalFace.Vertices.AddRange(newFace.Vertices);                    // Add a tiny bit to the normal axis to ensure the decal is rendered in front of the face                  var normalAdd = face.Plane.Normal * 0.2m;                  decalFace.Transform(Matrix.Translation(normalAdd));                    yield return decalFace;              }
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CreateFakeDecalSolid,The following statement contains a magic number: var p = bbox.Center - plane.Normal * 10;
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CreateFakeDecalSolid,The following statement contains a magic number: var p3 = face.Vertices[2];
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityDecalConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityDecalConverter.cs,CreateFakeDecalSolid,The following statement contains a magic number: var p4 = face.Vertices[3];
Magic Number,Sledge.BspEditor.Rendering.Converters,GridElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\GridConverter.cs,RequiresValidation,The following statement contains a magic number: if (Math.Abs(GetValue(viewport' "Scale"' 1f) - viewport.Camera.Zoom) > 0.001) return true;
Magic Number,Sledge.BspEditor.Rendering.Converters,GridElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\GridConverter.cs,GetLines,The following statement contains a magic number: foreach (var line in _grid.GetLines(normal' (decimal) viewport.Camera.Zoom' vmin.ToCoordinate()' vmax.ToCoordinate()))                  {                      var c = GetColorForGridLineType(line.Type);                      yield return new LineElement(PositionType.World' c'                          new List<Position>                          {                              new Position(line.Line.Start.ToVector3())'                              new Position(line.Line.End.ToVector3())                          })                      {                          Smooth = false'                          ZIndex = -10'                          DepthTested = true                      };                  }
Magic Number,Sledge.BspEditor.Rendering.Converters,DefaultSolidConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultSolidConverter.cs,ConvertFace,The following statement contains a magic number: var size = tex?.Size ?? new Size(16' 16);
Magic Number,Sledge.BspEditor.Rendering.Converters,DefaultSolidConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultSolidConverter.cs,ConvertFace,The following statement contains a magic number: var size = tex?.Size ?? new Size(16' 16);
Magic Number,Sledge.BspEditor.Rendering.Converters,DefaultSolidConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultSolidConverter.cs,ConvertFace,The following statement contains a magic number: var sceneFace = new SceneFace(mat' coords.Select(x => new Vertex(x.Item1.ToVector3()' (float) x.Item2' (float) x.Item3)).ToList())              {                  AccentColor = sel ? Color.Red : color'                  PointColor = sel ? Color.Red : color'                  TintColor = sel ? Color.FromArgb(128' Color.Red) : Color.White'                  IsSelected = sel'                  ForcedRenderFlags = sel ? RenderFlags.Wireframe : RenderFlags.None              };
Magic Number,Sledge.BspEditor.Rendering.Converters,DefaultSolidConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultSolidConverter.cs,UpdateFace,The following statement contains a magic number: var size = tex?.Size ?? new Size(16' 16);
Magic Number,Sledge.BspEditor.Rendering.Converters,DefaultSolidConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultSolidConverter.cs,UpdateFace,The following statement contains a magic number: var size = tex?.Size ?? new Size(16' 16);
Magic Number,Sledge.BspEditor.Rendering.Converters,DefaultSolidConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\DefaultSolidConverter.cs,UpdateFace,The following statement contains a magic number: sceneFace.TintColor = sel ? Color.FromArgb(128' Color.Red) : Color.White;
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityNameConverter.cs,EntityTextElement,The following statement contains a magic number: ScreenOffset = new Vector3(0' -FontSize / 2 - 5' 0);
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityNameConverter.cs,EntityTextElement,The following statement contains a magic number: ScreenOffset = new Vector3(0' -FontSize / 2 - 5' 0);
Magic Number,Sledge.BspEditor.Rendering.Converters,EntityTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\EntityNameConverter.cs,GetFaces,The following statement contains a magic number: var dim = viewport.Camera.Flatten((Box.Dimensions / 2).ToVector3());
Magic Number,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The following statement contains a magic number: smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Red)' Vector3.Zero' Vector3.UnitX * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective });
Magic Number,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The following statement contains a magic number: smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Red)' Vector3.Zero' Vector3.UnitX * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective });
Magic Number,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The following statement contains a magic number: smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Lime)' Vector3.Zero' Vector3.UnitY * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective });
Magic Number,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The following statement contains a magic number: smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Lime)' Vector3.Zero' Vector3.UnitY * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective });
Magic Number,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The following statement contains a magic number: smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Blue)' Vector3.Zero' Vector3.UnitZ * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective });
Magic Number,Sledge.BspEditor.Rendering.Converters,AxisLinesConverter,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\AxisLinesConverter.cs,Convert,The following statement contains a magic number: smo.SceneObjects.Add(new Holder()' new Line(Color.FromArgb(255' Color.Blue)' Vector3.Zero' Vector3.UnitZ * 10) { RenderFlags = RenderFlags.Wireframe' CameraFlags = CameraFlags.Perspective });
Magic Number,Sledge.BspEditor.Rendering.Converters,ViewportLabelTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\ViewportTextConverter.cs,ViewportLabelTextElement,The following statement contains a magic number: BackgroundColor = Color.FromArgb(128' Color.Red);
Magic Number,Sledge.BspEditor.Rendering.Converters,ViewportLabelTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\ViewportTextConverter.cs,GetFaces,The following statement contains a magic number: el.ZIndex = 11;
Magic Number,Sledge.BspEditor.Rendering.Converters,ViewportLabelTextElement,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Converters\ViewportTextConverter.cs,GetFaces,The following statement contains a magic number: if (BackgroundColor.A > 0)                  {                      yield return new FaceElement(el.PositionType' Material.Flat(BackgroundColor)' el.Vertices.Select(x => x.Clone()))                      {                          ZIndex = 10                      };                  }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (moveAllowed)              {                  var shift = new Coordinate(0' 0' 0);                    switch (e.KeyCode)                  {                      case Keys.Left:                          shift.X = (decimal) (-Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Right:                          shift.X = (decimal)(Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Up:                          shift.Y = (decimal)(Viewport.Height / Camera.Zoom / 4);                          break;                      case Keys.Down:                          shift.Y = (decimal)(-Viewport.Height / Camera.Zoom / 4);                          break;                  }                    Camera.Position += shift.ToVector3();              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (moveAllowed)              {                  var shift = new Coordinate(0' 0' 0);                    switch (e.KeyCode)                  {                      case Keys.Left:                          shift.X = (decimal) (-Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Right:                          shift.X = (decimal)(Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Up:                          shift.Y = (decimal)(Viewport.Height / Camera.Zoom / 4);                          break;                      case Keys.Down:                          shift.Y = (decimal)(-Viewport.Height / Camera.Zoom / 4);                          break;                  }                    Camera.Position += shift.ToVector3();              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (moveAllowed)              {                  var shift = new Coordinate(0' 0' 0);                    switch (e.KeyCode)                  {                      case Keys.Left:                          shift.X = (decimal) (-Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Right:                          shift.X = (decimal)(Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Up:                          shift.Y = (decimal)(Viewport.Height / Camera.Zoom / 4);                          break;                      case Keys.Down:                          shift.Y = (decimal)(-Viewport.Height / Camera.Zoom / 4);                          break;                  }                    Camera.Position += shift.ToVector3();              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (moveAllowed)              {                  var shift = new Coordinate(0' 0' 0);                    switch (e.KeyCode)                  {                      case Keys.Left:                          shift.X = (decimal) (-Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Right:                          shift.X = (decimal)(Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Up:                          shift.Y = (decimal)(Viewport.Height / Camera.Zoom / 4);                          break;                      case Keys.Down:                          shift.Y = (decimal)(-Viewport.Height / Camera.Zoom / 4);                          break;                  }                    Camera.Position += shift.ToVector3();              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (str.StartsWith("NumPad") || str.StartsWith("D"))              {                  var last = str.Last();                  if (Char.IsDigit(last))                  {                      var press = (int) Char.GetNumericValue(last);                      if (press >= 0 && press <= 9)                      {                          if (press == 0) press = 10;                          var num = Math.Max(press - 6' 6 - press);                          var pow = (decimal) Math.Pow(2' num);                          var zoom = press < 6 ? 1 / pow : pow;                          Camera.Zoom = (float) zoom;                          // Mediator.Publish(EditorMediator.ViewZoomChanged' Camera.Zoom);                      }                  }              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (str.StartsWith("NumPad") || str.StartsWith("D"))              {                  var last = str.Last();                  if (Char.IsDigit(last))                  {                      var press = (int) Char.GetNumericValue(last);                      if (press >= 0 && press <= 9)                      {                          if (press == 0) press = 10;                          var num = Math.Max(press - 6' 6 - press);                          var pow = (decimal) Math.Pow(2' num);                          var zoom = press < 6 ? 1 / pow : pow;                          Camera.Zoom = (float) zoom;                          // Mediator.Publish(EditorMediator.ViewZoomChanged' Camera.Zoom);                      }                  }              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (str.StartsWith("NumPad") || str.StartsWith("D"))              {                  var last = str.Last();                  if (Char.IsDigit(last))                  {                      var press = (int) Char.GetNumericValue(last);                      if (press >= 0 && press <= 9)                      {                          if (press == 0) press = 10;                          var num = Math.Max(press - 6' 6 - press);                          var pow = (decimal) Math.Pow(2' num);                          var zoom = press < 6 ? 1 / pow : pow;                          Camera.Zoom = (float) zoom;                          // Mediator.Publish(EditorMediator.ViewZoomChanged' Camera.Zoom);                      }                  }              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (str.StartsWith("NumPad") || str.StartsWith("D"))              {                  var last = str.Last();                  if (Char.IsDigit(last))                  {                      var press = (int) Char.GetNumericValue(last);                      if (press >= 0 && press <= 9)                      {                          if (press == 0) press = 10;                          var num = Math.Max(press - 6' 6 - press);                          var pow = (decimal) Math.Pow(2' num);                          var zoom = press < 6 ? 1 / pow : pow;                          Camera.Zoom = (float) zoom;                          // Mediator.Publish(EditorMediator.ViewZoomChanged' Camera.Zoom);                      }                  }              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (str.StartsWith("NumPad") || str.StartsWith("D"))              {                  var last = str.Last();                  if (Char.IsDigit(last))                  {                      var press = (int) Char.GetNumericValue(last);                      if (press >= 0 && press <= 9)                      {                          if (press == 0) press = 10;                          var num = Math.Max(press - 6' 6 - press);                          var pow = (decimal) Math.Pow(2' num);                          var zoom = press < 6 ? 1 / pow : pow;                          Camera.Zoom = (float) zoom;                          // Mediator.Publish(EditorMediator.ViewZoomChanged' Camera.Zoom);                      }                  }              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following statement contains a magic number: if (str.StartsWith("NumPad") || str.StartsWith("D"))              {                  var last = str.Last();                  if (Char.IsDigit(last))                  {                      var press = (int) Char.GetNumericValue(last);                      if (press >= 0 && press <= 9)                      {                          if (press == 0) press = 10;                          var num = Math.Max(press - 6' 6 - press);                          var pow = (decimal) Math.Pow(2' num);                          var zoom = press < 6 ? 1 / pow : pow;                          Camera.Zoom = (float) zoom;                          // Mediator.Publish(EditorMediator.ViewZoomChanged' Camera.Zoom);                      }                  }              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,PerspectiveCameraNavigationViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\PerspectiveCameraNavigationViewportListener.cs,MouseMoved,The following statement contains a magic number: LastKnownX = Viewport.Width/2;
Magic Number,Sledge.BspEditor.Rendering.Viewport,PerspectiveCameraNavigationViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\PerspectiveCameraNavigationViewportListener.cs,MouseMoved,The following statement contains a magic number: LastKnownY = Viewport.Height/2;
Magic Number,Sledge.BspEditor.Rendering.Viewport,PerspectiveCameraNavigationViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\PerspectiveCameraNavigationViewportListener.cs,MouseLeave,The following statement contains a magic number: if (FreeLook)              {                  LastKnownX = Viewport.Width/2;                  LastKnownY = Viewport.Height/2;                  Cursor.Position = Viewport.Control.PointToScreen(new Point(LastKnownX' LastKnownY));                }              else              {                  if (!CursorVisible)                  {                      Cursor.Clip = CursorClip;                      CursorClip = Rectangle.Empty;                      Viewport.Control.Capture = false;                      CursorVisible = true;                      Cursor.Show();                      Viewport.ReleaseInputLock(this);                      ClearSceneObjects();                  }                  PositionKnown = false;                  Focus = false;              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,PerspectiveCameraNavigationViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\PerspectiveCameraNavigationViewportListener.cs,MouseLeave,The following statement contains a magic number: if (FreeLook)              {                  LastKnownX = Viewport.Width/2;                  LastKnownY = Viewport.Height/2;                  Cursor.Position = Viewport.Control.PointToScreen(new Point(LastKnownX' LastKnownY));                }              else              {                  if (!CursorVisible)                  {                      Cursor.Clip = CursorClip;                      CursorClip = Rectangle.Empty;                      Viewport.Control.Capture = false;                      CursorVisible = true;                      Cursor.Show();                      Viewport.ReleaseInputLock(this);                      ClearSceneObjects();                  }                  PositionKnown = false;                  Focus = false;              }
Magic Number,Sledge.BspEditor.Rendering.Viewport,MapViewport,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\MapViewport.cs,FocusOn,The following statement contains a magic number: if (Is2D)              {                  var cam = (OrthographicCamera) Viewport.Camera;                  cam.Position = Flatten(coordinate).ToVector3();              }              else              {                  FocusOn(coordinate' Coordinate.UnitY * -100);              }
Magic Number,Sledge.BspEditor.Rendering.Resources,EnvironmentTextureProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Resources\EnvironmentTextureProvider.cs,EnvironmentTextureProvider,The following statement contains a magic number: _idLen = environment.ID.Length + 2;
Magic Number,Sledge.BspEditor.Rendering.Resources,EnvironmentTextureProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Resources\EnvironmentTextureProvider.cs,Exists,The following statement contains a magic number: return name.Length > _idLen                  && name.Substring(0' _idLen - 2) == Environment.ID                  && _textureCollection.HasTexture(name.Substring(_idLen));
Magic Number,Sledge.BspEditor.Rendering.Resources,EnvironmentTextureProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Resources\EnvironmentTextureProvider.cs,Request,The following statement contains a magic number: var n = names.Where(x => x.Length > _idLen && x.Substring(0' _idLen - 2) == Environment.ID).Select(x => x.Substring(_idLen)).ToList();
Magic Number,Sledge.BspEditor.Rendering.Resources,EnvironmentTextureProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Resources\EnvironmentTextureProvider.cs,Request,The following statement contains a magic number: using (var ss = await _textureCollection.GetStreamSource())              {                  foreach (var item in items)                  {                      var td = new TextureDetails($"{Environment.ID}::{item.Name}"' await ss.GetImage(item.Name' 1024' 1024)' item.Width' item.Height' item.Flags);                      _textureQueue.Enqueue(td);                  }              }
Magic Number,Sledge.BspEditor.Rendering.Resources,EnvironmentTextureProvider,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Resources\EnvironmentTextureProvider.cs,Request,The following statement contains a magic number: using (var ss = await _textureCollection.GetStreamSource())              {                  foreach (var item in items)                  {                      var td = new TextureDetails($"{Environment.ID}::{item.Name}"' await ss.GetImage(item.Name' 1024' 1024)' item.Width' item.Height' item.Flags);                      _textureQueue.Enqueue(td);                  }              }
Missing Default,Sledge.BspEditor.Rendering.Viewport,OrthographicCameraViewportListener,C:\repos\LogicAndTrick_sledge\Sledge.BspEditor.Rendering\Viewport\OrthographicCameraViewportListener.cs,KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)                  {                      case Keys.Left:                          shift.X = (decimal) (-Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Right:                          shift.X = (decimal)(Viewport.Width / Camera.Zoom / 4);                          break;                      case Keys.Up:                          shift.Y = (decimal)(Viewport.Height / Camera.Zoom / 4);                          break;                      case Keys.Down:                          shift.Y = (decimal)(-Viewport.Height / Camera.Zoom / 4);                          break;                  }
