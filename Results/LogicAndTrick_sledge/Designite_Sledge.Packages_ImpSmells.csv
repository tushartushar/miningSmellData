Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Sledge.Packages.Vpk,VpkEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkEntry.cs,VpkEntry,The method has 7 parameters. Parameters: directory' path' crc32' preloadBytes' archiveIndex' entryOffset' entryLength
Long Parameter List,Sledge.Packages.Wad,WadEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadEntry.cs,WadEntry,The method has 7 parameters. Parameters: package' name' type' offset' compressionType' compressedLength' fullLength
Long Statement,Sledge.Packages.Pak,PakPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Pak\PakPackage.cs,OpenFile,The length of the statement  "            return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess)); " is 143.
Long Statement,Sledge.Packages.Zip,ZipPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipPackage.cs,OpenFile,The length of the statement  "            return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess)); " is 143.
Long Statement,Sledge.Packages.Vpk,VpkDirectory,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkDirectory.cs,OpenFile,The length of the statement  "            return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess)); " is 143.
Long Statement,Sledge.Packages.Vpk,VpkDirectory,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkDirectory.cs,ReadEntry,The length of the statement  "            if (terminator != VpkEntry.EntryTerminator) throw new PackageException("Invalid terminator. Expected " + VpkEntry.EntryTerminator.ToString("x8") + "' got " + terminator.ToString("x8") + "."); " is 191.
Long Statement,Sledge.Packages.Vpk,VpkPackageStreamSource,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkPackageStreamSource.cs,OpenFile,The length of the statement  "            var offset = entry.ArchiveIndex == VpkDirectory.DirectoryIndex ? _directory.HeaderLength + _directory.TreeLength + entry.EntryOffset : entry.EntryOffset; " is 153.
Long Statement,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,GetEntryNames,The length of the statement  "                if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'."); " is 128.
Long Statement,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,OpenFile,The length of the statement  "            return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess)); " is 143.
Magic Number,Sledge.Packages.Pak,PakPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Pak\PakPackage.cs,PakPackage,The following statement contains a magic number: using (var br = new BinaryReader(OpenFile(packageFile)))              {                  var sig = br.ReadFixedLengthString(Encoding.ASCII' 4);                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'.");                    TreeOffset = br.ReadInt32();                  TreeLength = br.ReadInt32();                    // Read all the entries from the pak                  ReadPackageEntries(br);                  BuildDirectories();              }
Magic Number,Sledge.Packages.Pak,PakPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Pak\PakPackage.cs,OpenFile,The following statement contains a magic number: return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess));
Magic Number,Sledge.Packages.Pak,PakPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Pak\PakPackage.cs,ReadPackageEntries,The following statement contains a magic number: var numEntries = TreeLength / 64;
Magic Number,Sledge.Packages.Pak,PakPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Pak\PakPackage.cs,ReadPackageEntries,The following statement contains a magic number: for (int i = 0; i < numEntries; i++)              {                  var path = br.ReadFixedLengthString(Encoding.ASCII' 56).ToLowerInvariant();                  var offset = br.ReadInt32();                  var length = br.ReadInt32();                  Entries.Add(new PakEntry(this' path' offset' length));              }
Magic Number,Sledge.Packages.Zip,ZipArchive,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,ReadEntry,The following statement contains a magic number: br.BaseStream.Seek(-4' SeekOrigin.Current);
Magic Number,Sledge.Packages.Zip,FileEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,FileEntry,The following statement contains a magic number: br.BaseStream.Seek(4' SeekOrigin.Current);
Magic Number,Sledge.Packages.Zip,FileEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,FileEntry,The following statement contains a magic number: br.BaseStream.Seek(8' SeekOrigin.Current);
Magic Number,Sledge.Packages.Zip,CentralDirectoryEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,CentralDirectoryEntry,The following statement contains a magic number: br.BaseStream.Seek(6' SeekOrigin.Current);
Magic Number,Sledge.Packages.Zip,CentralDirectoryEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,CentralDirectoryEntry,The following statement contains a magic number: br.BaseStream.Seek(8' SeekOrigin.Current);
Magic Number,Sledge.Packages.Zip,CentralDirectoryEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,CentralDirectoryEntry,The following statement contains a magic number: br.BaseStream.Seek(8' SeekOrigin.Current);
Magic Number,Sledge.Packages.Zip,EndOfCentralDirectoryEntry,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,EndOfCentralDirectoryEntry,The following statement contains a magic number: br.BaseStream.Seek(12' SeekOrigin.Current);
Magic Number,Sledge.Packages.Zip,ZipPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipPackage.cs,OpenFile,The following statement contains a magic number: return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess));
Magic Number,Sledge.Packages.Vpk,VpkDirectory,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkDirectory.cs,VpkDirectory,The following statement contains a magic number: foreach (var mf in matchingFiles)              {                  var index = mf.Name.Substring(baseName.Length + 1' 3);                  ushort num;                  if (ushort.TryParse(index' out num))                  {                      Chunks.Add(num' mf);                  }              }
Magic Number,Sledge.Packages.Vpk,VpkDirectory,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkDirectory.cs,VpkDirectory,The following statement contains a magic number: using (var br = new BinaryReader(OpenFile(packageFile)))              {                  var sig = br.ReadUInt32();                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected 0x" + Signature.ToString("x8") + "' got 0x" + sig.ToString("x8") + ".");                    Version = br.ReadUInt32();                  TreeLength = br.ReadUInt32();                  switch (Version)                  {                      case 1:                          HeaderLength = 12;                          break;                      case 2:                          HeaderLength = 28;                          var dataLength = br.ReadInt32();                          var archiveMd5Length = br.ReadUInt32();                          var fileMd5Length = br.ReadInt32();                          var signatureLength = br.ReadInt32();                          break;                      default:                          throw new PackageException("Unknown version number: Expected 1 or 2' got " + Version + ".");                  }                    // Read all the entries from the vpk                  ReadDirectoryEntries(br);                  BuildDirectories();              }
Magic Number,Sledge.Packages.Vpk,VpkDirectory,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkDirectory.cs,VpkDirectory,The following statement contains a magic number: using (var br = new BinaryReader(OpenFile(packageFile)))              {                  var sig = br.ReadUInt32();                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected 0x" + Signature.ToString("x8") + "' got 0x" + sig.ToString("x8") + ".");                    Version = br.ReadUInt32();                  TreeLength = br.ReadUInt32();                  switch (Version)                  {                      case 1:                          HeaderLength = 12;                          break;                      case 2:                          HeaderLength = 28;                          var dataLength = br.ReadInt32();                          var archiveMd5Length = br.ReadUInt32();                          var fileMd5Length = br.ReadInt32();                          var signatureLength = br.ReadInt32();                          break;                      default:                          throw new PackageException("Unknown version number: Expected 1 or 2' got " + Version + ".");                  }                    // Read all the entries from the vpk                  ReadDirectoryEntries(br);                  BuildDirectories();              }
Magic Number,Sledge.Packages.Vpk,VpkDirectory,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkDirectory.cs,VpkDirectory,The following statement contains a magic number: using (var br = new BinaryReader(OpenFile(packageFile)))              {                  var sig = br.ReadUInt32();                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected 0x" + Signature.ToString("x8") + "' got 0x" + sig.ToString("x8") + ".");                    Version = br.ReadUInt32();                  TreeLength = br.ReadUInt32();                  switch (Version)                  {                      case 1:                          HeaderLength = 12;                          break;                      case 2:                          HeaderLength = 28;                          var dataLength = br.ReadInt32();                          var archiveMd5Length = br.ReadUInt32();                          var fileMd5Length = br.ReadInt32();                          var signatureLength = br.ReadInt32();                          break;                      default:                          throw new PackageException("Unknown version number: Expected 1 or 2' got " + Version + ".");                  }                    // Read all the entries from the vpk                  ReadDirectoryEntries(br);                  BuildDirectories();              }
Magic Number,Sledge.Packages.Vpk,VpkDirectory,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Vpk\VpkDirectory.cs,OpenFile,The following statement contains a magic number: return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess));
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: const uint headerSize = 14;
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: const uint infoSize = 40;
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: _length = headerSize + infoSize + _entry.PaletteSize * 4 + _entry.Width * _entry.Height;
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadImageStream,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadImageStream.cs,PrepareData,The following statement contains a magic number: using (var bw = new BinaryWriter(new MemoryStream(_data' true)))              {                  // BITMAPFILEHEADER                  bw.WriteFixedLengthString(Encoding.ASCII' 2' "BM"); // Type                  bw.Write(_length); // Size                  bw.Write((short)0); // Reserved 1                  bw.Write((short)0); // Reserved 2                  bw.Write((int) (headerSize + infoSize + _entry.PaletteSize * 4)); // Offset to pixel array                    // BITMAPINFOHEADER                  bw.Write(infoSize); // Header size                  bw.Write(_entry.Width);                  bw.Write(_entry.Height);                  bw.Write((short) 1); // Number of colour planes                  bw.Write((short) 8); // Colour depth                  bw.Write(0); // Compression method                  bw.Write(_entry.Width * _entry.Height); // Image data size                  bw.Write(0); // Horizontal resolution                  bw.Write(0); // Vertical resolution                  bw.Write(_entry.PaletteSize); // Colours used                  bw.Write(_entry.PaletteSize); // "Important" colours used                    br.BaseStream.Position = startIndex + (_entry.PaletteDataOffset - _entry.Offset);                  var paletteData = br.ReadBytes((int)(_entry.PaletteSize * 3));                  for (var i = 0; i < _entry.PaletteSize; i++)                  {                      // Wad palettes are RGB' bitmap is BGRX                      bw.Write(paletteData[i * 3 + 2]);                      bw.Write(paletteData[i * 3 + 1]);                      bw.Write(paletteData[i * 3 + 0]);                      bw.Write((byte)0);                  }                    br.BaseStream.Position = startIndex + (_entry.TextureDataOffset - _entry.Offset);                  var imageData = br.ReadBytes((int)(_entry.Width * _entry.Height));                  for (var y = (int)_entry.Height - 1; y >= 0; y--)                  {                      // The Y axis is reversed                      bw.Write(imageData' (int)_entry.Width * y' (int) _entry.Width);                  }              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,WadPackage,The following statement contains a magic number: using (var br = new BinaryReader(OpenFile(packageFile)))              {                  var sig = br.ReadFixedLengthString(Encoding.ASCII' 4);                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'.");                                    NumTextures = br.ReadUInt32();                  LumpOffset = br.ReadUInt32();                    // Read all the entries from the wad                  ReadTextureEntries(br);                  SetAdditionalEntryData(br);                  RemoveInvalidEntries();                  BuildDirectories();              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,GetEntryNames,The following statement contains a magic number: using (var br = new BinaryReader(packageFile.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))              {                  var sig = br.ReadFixedLengthString(Encoding.ASCII' 4);                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'.");                    var numTextures = br.ReadUInt32();                  var lumpOffset = br.ReadUInt32();                    var validTypes = Enum.GetValues(typeof(WadEntryType)).OfType<WadEntryType>().Select(x => (byte)x).ToArray();                  br.BaseStream.Position = lumpOffset;                    for (var i = 0; i < numTextures; i++)                  {                      br.BaseStream.Seek(12' SeekOrigin.Current);                      var type = br.ReadByte();                        if (!validTypes.Contains(type))                      {                          // Skip unsupported types                          br.BaseStream.Seek(19' SeekOrigin.Current);                      }                      else                      {                          br.BaseStream.Seek(3' SeekOrigin.Current);                          yield return br.ReadFixedLengthString(Encoding.ASCII' 16).ToLowerInvariant();                      }                  }              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,GetEntryNames,The following statement contains a magic number: using (var br = new BinaryReader(packageFile.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))              {                  var sig = br.ReadFixedLengthString(Encoding.ASCII' 4);                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'.");                    var numTextures = br.ReadUInt32();                  var lumpOffset = br.ReadUInt32();                    var validTypes = Enum.GetValues(typeof(WadEntryType)).OfType<WadEntryType>().Select(x => (byte)x).ToArray();                  br.BaseStream.Position = lumpOffset;                    for (var i = 0; i < numTextures; i++)                  {                      br.BaseStream.Seek(12' SeekOrigin.Current);                      var type = br.ReadByte();                        if (!validTypes.Contains(type))                      {                          // Skip unsupported types                          br.BaseStream.Seek(19' SeekOrigin.Current);                      }                      else                      {                          br.BaseStream.Seek(3' SeekOrigin.Current);                          yield return br.ReadFixedLengthString(Encoding.ASCII' 16).ToLowerInvariant();                      }                  }              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,GetEntryNames,The following statement contains a magic number: using (var br = new BinaryReader(packageFile.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))              {                  var sig = br.ReadFixedLengthString(Encoding.ASCII' 4);                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'.");                    var numTextures = br.ReadUInt32();                  var lumpOffset = br.ReadUInt32();                    var validTypes = Enum.GetValues(typeof(WadEntryType)).OfType<WadEntryType>().Select(x => (byte)x).ToArray();                  br.BaseStream.Position = lumpOffset;                    for (var i = 0; i < numTextures; i++)                  {                      br.BaseStream.Seek(12' SeekOrigin.Current);                      var type = br.ReadByte();                        if (!validTypes.Contains(type))                      {                          // Skip unsupported types                          br.BaseStream.Seek(19' SeekOrigin.Current);                      }                      else                      {                          br.BaseStream.Seek(3' SeekOrigin.Current);                          yield return br.ReadFixedLengthString(Encoding.ASCII' 16).ToLowerInvariant();                      }                  }              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,GetEntryNames,The following statement contains a magic number: using (var br = new BinaryReader(packageFile.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))              {                  var sig = br.ReadFixedLengthString(Encoding.ASCII' 4);                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'.");                    var numTextures = br.ReadUInt32();                  var lumpOffset = br.ReadUInt32();                    var validTypes = Enum.GetValues(typeof(WadEntryType)).OfType<WadEntryType>().Select(x => (byte)x).ToArray();                  br.BaseStream.Position = lumpOffset;                    for (var i = 0; i < numTextures; i++)                  {                      br.BaseStream.Seek(12' SeekOrigin.Current);                      var type = br.ReadByte();                        if (!validTypes.Contains(type))                      {                          // Skip unsupported types                          br.BaseStream.Seek(19' SeekOrigin.Current);                      }                      else                      {                          br.BaseStream.Seek(3' SeekOrigin.Current);                          yield return br.ReadFixedLengthString(Encoding.ASCII' 16).ToLowerInvariant();                      }                  }              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,GetEntryNames,The following statement contains a magic number: using (var br = new BinaryReader(packageFile.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))              {                  var sig = br.ReadFixedLengthString(Encoding.ASCII' 4);                  if (sig != Signature) throw new PackageException("Unknown package signature: Expected '" + Signature + "'' got '" + sig + "'.");                    var numTextures = br.ReadUInt32();                  var lumpOffset = br.ReadUInt32();                    var validTypes = Enum.GetValues(typeof(WadEntryType)).OfType<WadEntryType>().Select(x => (byte)x).ToArray();                  br.BaseStream.Position = lumpOffset;                    for (var i = 0; i < numTextures; i++)                  {                      br.BaseStream.Seek(12' SeekOrigin.Current);                      var type = br.ReadByte();                        if (!validTypes.Contains(type))                      {                          // Skip unsupported types                          br.BaseStream.Seek(19' SeekOrigin.Current);                      }                      else                      {                          br.BaseStream.Seek(3' SeekOrigin.Current);                          yield return br.ReadFixedLengthString(Encoding.ASCII' 16).ToLowerInvariant();                      }                  }              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,RemoveInvalidEntries,The following statement contains a magic number: Entries.RemoveAll(e => (e.PaletteDataOffset + e.PaletteSize * 3) - e.Offset > e.Length);
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,OpenFile,The following statement contains a magic number: return Stream.Synchronized(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 4096' FileOptions.RandomAccess));
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,ReadTextureEntries,The following statement contains a magic number: for (int i = 0; i < NumTextures; i++)              {                  var offset = br.ReadUInt32();                  var compressedLength = br.ReadUInt32();                  var fullLength = br.ReadUInt32();                  var type =  br.ReadByte();                  var compressionType = br.ReadByte();                  br.ReadBytes(2); // struct padding                  var name = br.ReadFixedLengthString(Encoding.ASCII' 16).ToLowerInvariant();                    if (!validTypes.Contains(type)) continue; // Skip unsupported types                  if (names.Contains(name)) continue; // Don't add duplicates                    names.Add(name);                  Entries.Add(new WadEntry(this' name' (WadEntryType) type' offset' compressionType' compressedLength' fullLength));              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,ReadTextureEntries,The following statement contains a magic number: for (int i = 0; i < NumTextures; i++)              {                  var offset = br.ReadUInt32();                  var compressedLength = br.ReadUInt32();                  var fullLength = br.ReadUInt32();                  var type =  br.ReadByte();                  var compressionType = br.ReadByte();                  br.ReadBytes(2); // struct padding                  var name = br.ReadFixedLengthString(Encoding.ASCII' 16).ToLowerInvariant();                    if (!validTypes.Contains(type)) continue; // Skip unsupported types                  if (names.Contains(name)) continue; // Don't add duplicates                    names.Add(name);                  Entries.Add(new WadEntry(this' name' (WadEntryType) type' offset' compressionType' compressedLength' fullLength));              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,SetEntryData,The following statement contains a magic number: switch (e.Type)              {                  case WadEntryType.Image:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position;                      br.BaseStream.Position += width * height; // Skip texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                  case WadEntryType.Texture:                      br.BaseStream.Position += 16; // Skip name                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 16;                      var num = (int)(width * height);                      var skipMapData = (num / 4) + (num / 16) + (num / 64);                      br.BaseStream.Position += 16 + num + skipMapData; // Skip mipmap offsets' texture data' mipmap texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                      /*                  case WadEntryType.Font:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 8 + (256 * 4);                      br.BaseStream.Position += 8 + (256 * 4) + (width * height); // Skip font data' texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;*/                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,SetEntryData,The following statement contains a magic number: switch (e.Type)              {                  case WadEntryType.Image:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position;                      br.BaseStream.Position += width * height; // Skip texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                  case WadEntryType.Texture:                      br.BaseStream.Position += 16; // Skip name                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 16;                      var num = (int)(width * height);                      var skipMapData = (num / 4) + (num / 16) + (num / 64);                      br.BaseStream.Position += 16 + num + skipMapData; // Skip mipmap offsets' texture data' mipmap texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                      /*                  case WadEntryType.Font:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 8 + (256 * 4);                      br.BaseStream.Position += 8 + (256 * 4) + (width * height); // Skip font data' texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;*/                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,SetEntryData,The following statement contains a magic number: switch (e.Type)              {                  case WadEntryType.Image:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position;                      br.BaseStream.Position += width * height; // Skip texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                  case WadEntryType.Texture:                      br.BaseStream.Position += 16; // Skip name                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 16;                      var num = (int)(width * height);                      var skipMapData = (num / 4) + (num / 16) + (num / 64);                      br.BaseStream.Position += 16 + num + skipMapData; // Skip mipmap offsets' texture data' mipmap texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                      /*                  case WadEntryType.Font:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 8 + (256 * 4);                      br.BaseStream.Position += 8 + (256 * 4) + (width * height); // Skip font data' texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;*/                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,SetEntryData,The following statement contains a magic number: switch (e.Type)              {                  case WadEntryType.Image:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position;                      br.BaseStream.Position += width * height; // Skip texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                  case WadEntryType.Texture:                      br.BaseStream.Position += 16; // Skip name                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 16;                      var num = (int)(width * height);                      var skipMapData = (num / 4) + (num / 16) + (num / 64);                      br.BaseStream.Position += 16 + num + skipMapData; // Skip mipmap offsets' texture data' mipmap texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                      /*                  case WadEntryType.Font:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 8 + (256 * 4);                      br.BaseStream.Position += 8 + (256 * 4) + (width * height); // Skip font data' texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;*/                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,SetEntryData,The following statement contains a magic number: switch (e.Type)              {                  case WadEntryType.Image:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position;                      br.BaseStream.Position += width * height; // Skip texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                  case WadEntryType.Texture:                      br.BaseStream.Position += 16; // Skip name                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 16;                      var num = (int)(width * height);                      var skipMapData = (num / 4) + (num / 16) + (num / 64);                      br.BaseStream.Position += 16 + num + skipMapData; // Skip mipmap offsets' texture data' mipmap texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                      /*                  case WadEntryType.Font:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 8 + (256 * 4);                      br.BaseStream.Position += 8 + (256 * 4) + (width * height); // Skip font data' texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;*/                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Sledge.Packages.Wad,WadPackage,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Wad\WadPackage.cs,SetEntryData,The following statement contains a magic number: switch (e.Type)              {                  case WadEntryType.Image:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position;                      br.BaseStream.Position += width * height; // Skip texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                  case WadEntryType.Texture:                      br.BaseStream.Position += 16; // Skip name                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 16;                      var num = (int)(width * height);                      var skipMapData = (num / 4) + (num / 16) + (num / 64);                      br.BaseStream.Position += 16 + num + skipMapData; // Skip mipmap offsets' texture data' mipmap texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;                      /*                  case WadEntryType.Font:                      width = br.ReadUInt32();                      height = br.ReadUInt32();                      textureDataOffset = br.BaseStream.Position + 8 + (256 * 4);                      br.BaseStream.Position += 8 + (256 * 4) + (width * height); // Skip font data' texture data                      paletteSize = br.ReadUInt16();                      paletteDataOffset = br.BaseStream.Position;                      break;*/                  default:                      throw new ArgumentOutOfRangeException();              }
Missing Default,Sledge.Packages.Zip,ZipArchive,C:\repos\LogicAndTrick_sledge\Sledge.Packages\Zip\ZipArchive.cs,ReadEntry,The following switch statement is missing a default case: switch (type)              {                  case ZipEntryType.File:                      return new FileEntry(br);                  case ZipEntryType.DataDescriptor:                      return new DataDescriptorEntry(br);                  case ZipEntryType.CentralDirectory:                      return new CentralDirectoryEntry(br);                  case ZipEntryType.EndOfCentralDirectory:                      return new EndOfCentralDirectoryEntry(br);              }
