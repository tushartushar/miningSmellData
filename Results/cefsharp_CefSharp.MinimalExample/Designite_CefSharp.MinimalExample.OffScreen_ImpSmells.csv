Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CefSharp.MinimalExample.OffScreen,Program,F:\newReposMay17\cefsharp_CefSharp.MinimalExample\CefSharp.MinimalExample.OffScreen\Program.cs,Main,The length of the statement  "		CachePath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' "CefSharp\\Cache") " is 120.
Long Statement,CefSharp.MinimalExample.OffScreen,Program,F:\newReposMay17\cefsharp_CefSharp.MinimalExample\CefSharp.MinimalExample.OffScreen\Program.cs,BrowserLoadingStateChanged,The length of the statement  "				var screenshotPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Desktop)' "CefSharp screenshot.png"); " is 125.
Magic Number,CefSharp.MinimalExample.OffScreen,Program,F:\newReposMay17\cefsharp_CefSharp.MinimalExample\CefSharp.MinimalExample.OffScreen\Program.cs,BrowserLoadingStateChanged,The following statement contains a magic number: if (!e.IsLoading) {  	// Remove the load event handler' because we only want one snapshot of the initial page.  	browser.LoadingStateChanged -= BrowserLoadingStateChanged;  	var scriptTask = browser.EvaluateScriptAsync ("document.getElementById('lst-ib').value = 'CefSharp Was Here!'");  	scriptTask.ContinueWith (t => {  		//Give the browser a little time to render  		Thread.Sleep (500);  		// Wait for the screenshot to be taken.  		var task = browser.ScreenshotAsync ();  		task.ContinueWith (x => {  			// Make a file to save it to (e.g. C:\Users\jan\Desktop\CefSharp screenshot.png)  			var screenshotPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Desktop)' "CefSharp screenshot.png");  			Console.WriteLine ();  			Console.WriteLine ("Screenshot ready. Saving to {0}"' screenshotPath);  			// Save the Bitmap to the path.  			// The image type is auto-detected via the ".png" extension.  			task.Result.Save (screenshotPath);  			// We no longer need the Bitmap.  			// Dispose it to avoid keeping the memory alive.  Especially important in 32-bit applications.  			task.Result.Dispose ();  			Console.WriteLine ("Screenshot saved.  Launching your default image viewer...");  			// Tell Windows to launch the saved image.  			Process.Start (screenshotPath);  			Console.WriteLine ("Image viewer launched.  Press any key to exit.");  		}' TaskScheduler.Default);  	});  }  
Magic Number,CefSharp.MinimalExample.OffScreen,Program,F:\newReposMay17\cefsharp_CefSharp.MinimalExample\CefSharp.MinimalExample.OffScreen\Program.cs,BrowserLoadingStateChanged,The following statement contains a magic number: scriptTask.ContinueWith (t => {  	//Give the browser a little time to render  	Thread.Sleep (500);  	// Wait for the screenshot to be taken.  	var task = browser.ScreenshotAsync ();  	task.ContinueWith (x => {  		// Make a file to save it to (e.g. C:\Users\jan\Desktop\CefSharp screenshot.png)  		var screenshotPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Desktop)' "CefSharp screenshot.png");  		Console.WriteLine ();  		Console.WriteLine ("Screenshot ready. Saving to {0}"' screenshotPath);  		// Save the Bitmap to the path.  		// The image type is auto-detected via the ".png" extension.  		task.Result.Save (screenshotPath);  		// We no longer need the Bitmap.  		// Dispose it to avoid keeping the memory alive.  Especially important in 32-bit applications.  		task.Result.Dispose ();  		Console.WriteLine ("Screenshot saved.  Launching your default image viewer...");  		// Tell Windows to launch the saved image.  		Process.Start (screenshotPath);  		Console.WriteLine ("Image viewer launched.  Press any key to exit.");  	}' TaskScheduler.Default);  });  
Magic Number,CefSharp.MinimalExample.OffScreen,Program,F:\newReposMay17\cefsharp_CefSharp.MinimalExample\CefSharp.MinimalExample.OffScreen\Program.cs,BrowserLoadingStateChanged,The following statement contains a magic number: Thread.Sleep (500);  
