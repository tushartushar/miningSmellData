Implementation smell,Namespace,Class,File,Method,Description
Long Method,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The method has 260 lines of code.
Long Method,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The method has 101 lines of code.
Long Method,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The method has 100 lines of code.
Long Method,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The method has 662 lines of code.
Complex Method,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,Cyclomatic complexity of the method is 46
Complex Method,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,Cyclomatic complexity of the method is 12
Complex Method,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,Cyclomatic complexity of the method is 46
Complex Method,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlaircraft,Cyclomatic complexity of the method is 37
Complex Method,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,Cyclomatic complexity of the method is 14
Long Parameter List,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The method has 11 parameters.
Long Statement,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The length of the statement  "				for (int d = (int)(spacing - ((closest.basepnt.GetDistance (closest.p1)) % spacing)); d < (closest.p1.GetDistance (closest.p2)); d += (int)spacing) { " is 149.
Long Statement,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The length of the statement  "				for (int d = (int)((closest.basepnt.GetDistance (closest.p2)) % spacing); d < (closest.p1.GetDistance (closest.p2)); d += (int)spacing) { " is 137.
Long Statement,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,findClosestLine,The length of the statement  "		utmpos p = FindLineIntersection (extended_line_start' extended_line_stop' start_perpendicular_line' stop_perpendicular_line); " is 125.
Long Statement,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,PointInPolygon,The length of the statement  "		if ((newPoint.y < p.y) == (p.y <= oldPoint.y) && ((double)p.x - (double)p1.x) * (double)(p2.y - p1.y) < ((double)p2.x - (double)p1.x) * (double)(p.y - p1.y)) { " is 159.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The length of the statement  "	grid = Grid.CreateGrid (newlist' (double)NUM_altitude.Value' (double)NUM_Distance' (double)NUM_spacing' (double)NUM_angle.Value' 0' 0' Grid.StartPosition.Home' false' 0); " is 170.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The length of the statement  "			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.LAND' 0' 0' 0' 0' plugin.Host.cs.HomeLocation.Lng' plugin.Host.cs.HomeLocation.Lat' 0); " is 128.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The length of the statement  "					xmlwriter.WriteElementString ("flen"' cameras [key].focallen.ToString (new System.Globalization.CultureInfo ("en-US"))); " is 120.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The length of the statement  "					xmlwriter.WriteElementString ("imgh"' cameras [key].imageheight.ToString (new System.Globalization.CultureInfo ("en-US"))); " is 123.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The length of the statement  "					xmlwriter.WriteElementString ("imgw"' cameras [key].imagewidth.ToString (new System.Globalization.CultureInfo ("en-US"))); " is 122.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The length of the statement  "					xmlwriter.WriteElementString ("senh"' cameras [key].sensorheight.ToString (new System.Globalization.CultureInfo ("en-US"))); " is 124.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The length of the statement  "					xmlwriter.WriteElementString ("senw"' cameras [key].sensorwidth.ToString (new System.Globalization.CultureInfo ("en-US"))); " is 123.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The length of the statement  "				var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat); " is 128.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(GridUIv2)); " is 129.
Long Statement,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The length of the statement  "	this.map.SelectedAreaFillColor = System.Drawing.Color.FromArgb (((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225))))); " is 158.
Long Statement,MissionPlanner,GridPluginv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridPluginv2.cs,Loaded,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(GridUIv2)); " is 129.
Complex Conditional,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,FindLineIntersection,The conditional expression  "(r < 0 || r > 1) || (s < 0 || s > 1)"  is complex.
Empty Catch Block,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The method has an empty catch block.
Empty Catch Block,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The method has an empty catch block.
Empty Catch Block,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The method has an empty catch block.
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,addtomap,The following statement contains a magic number: polygons.Routes.Add (new GMapRoute (list' "test") {  	Stroke = new System.Drawing.Pen (System.Drawing.Color.Yellow' 4)  });  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,DoDebug,The following statement contains a magic number: timer.Interval = 2000;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,DoDebug,The following statement contains a magic number: map.MaxZoom = 20;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,DoDebug,The following statement contains a magic number: map.Size = new Size (1024' 768);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,DoDebug,The following statement contains a magic number: map.Size = new Size (1024' 768);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: if (spacing < 4 && spacing != 0)  	spacing = 4;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: if (spacing < 4 && spacing != 0)  	spacing = 4;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: spacing = 4;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: if (distance < 0.1)  	distance = 0.1;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: if (distance < 0.1)  	distance = 0.1;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: distance = 0.1;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb1' ref yb1' angle - 90' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb1' ref yb1' angle - 90' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb1' ref yb1' angle + 180' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb1' ref yb1' angle + 180' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb2' ref yb2' angle + 90' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb2' ref yb2' angle + 90' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb2' ref yb2' angle + 180' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref xb2' ref yb2' angle + 180' diagdist / 2 + distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: while (lines < ((diagdist + distance * 2) / distance)) {  	// copy the start point to generate the end point  	double nx = x;  	double ny = y;  	newpos (ref nx' ref ny' angle' diagdist + distance * 2);  	linelatlng line = new linelatlng ();  	line.p1 = new utmpos (x' y' utmzone);  	line.p2 = new utmpos (nx' ny' utmzone);  	line.basepnt = new utmpos (x' y' utmzone);  	grid.Add (line);  	// addtomap(line);  	newpos (ref x' ref y' angle + 90' distance);  	lines++;  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: while (lines < ((diagdist + distance * 2) / distance)) {  	// copy the start point to generate the end point  	double nx = x;  	double ny = y;  	newpos (ref nx' ref ny' angle' diagdist + distance * 2);  	linelatlng line = new linelatlng ();  	line.p1 = new utmpos (x' y' utmzone);  	line.p2 = new utmpos (nx' ny' utmzone);  	line.basepnt = new utmpos (x' y' utmzone);  	grid.Add (line);  	// addtomap(line);  	newpos (ref x' ref y' angle + 90' distance);  	lines++;  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: while (lines < ((diagdist + distance * 2) / distance)) {  	// copy the start point to generate the end point  	double nx = x;  	double ny = y;  	newpos (ref nx' ref ny' angle' diagdist + distance * 2);  	linelatlng line = new linelatlng ();  	line.p1 = new utmpos (x' y' utmzone);  	line.p2 = new utmpos (nx' ny' utmzone);  	line.basepnt = new utmpos (x' y' utmzone);  	grid.Add (line);  	// addtomap(line);  	newpos (ref x' ref y' angle + 90' distance);  	lines++;  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref nx' ref ny' angle' diagdist + distance * 2);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: newpos (ref x' ref y' angle + 90' distance);  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: for (int a = 0; a < gridno; a++) {  	double closestdistance = double.MaxValue;  	double farestdistance = double.MinValue;  	utmpos closestpoint = utmpos.Zero;  	utmpos farestpoint = utmpos.Zero;  	// somewhere to store our intersections  	List<utmpos> matchs = new List<utmpos> ();  	int b = -1;  	int crosses = 0;  	utmpos newutmpos = utmpos.Zero;  	foreach (utmpos pnt in utmpositions) {  		b++;  		if (b == 0) {  			continue;  		}  		newutmpos = FindLineIntersection (utmpositions [b - 1]' utmpositions [b]' grid [a].p1' grid [a].p2);  		if (!newutmpos.IsZero) {  			crosses++;  			matchs.Add (newutmpos);  			if (closestdistance > grid [a].p1.GetDistance (newutmpos)) {  				closestpoint.y = newutmpos.y;  				closestpoint.x = newutmpos.x;  				closestpoint.zone = newutmpos.zone;  				closestdistance = grid [a].p1.GetDistance (newutmpos);  			}  			if (farestdistance < grid [a].p1.GetDistance (newutmpos)) {  				farestpoint.y = newutmpos.y;  				farestpoint.x = newutmpos.x;  				farestpoint.zone = newutmpos.zone;  				farestdistance = grid [a].p1.GetDistance (newutmpos);  			}  		}  	}  	if (crosses == 0)// outside our polygon  	 {  		if (!PointInPolygon (grid [a].p1' utmpositions) && !PointInPolygon (grid [a].p2' utmpositions))  			remove.Add (grid [a]);  	} else if (crosses == 1)// bad - shouldnt happen  	 {  	} else if (crosses == 2)// simple start and finish  	 {  		linelatlng line = grid [a];  		line.p1 = closestpoint;  		line.p2 = farestpoint;  		grid [a] = line;  	} else// multiple intersections  	 {  		linelatlng line = grid [a];  		remove.Add (line);  		while (matchs.Count > 1) {  			linelatlng newline = new linelatlng ();  			closestpoint = findClosestPoint (closestpoint' matchs);  			newline.p1 = closestpoint;  			matchs.Remove (closestpoint);  			closestpoint = findClosestPoint (closestpoint' matchs);  			newline.p2 = closestpoint;  			matchs.Remove (closestpoint);  			newline.basepnt = line.basepnt;  			grid.Add (newline);  		}  	}  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: if (crosses == 0)// outside our polygon   {  	if (!PointInPolygon (grid [a].p1' utmpositions) && !PointInPolygon (grid [a].p2' utmpositions))  		remove.Add (grid [a]);  } else if (crosses == 1)// bad - shouldnt happen   {  } else if (crosses == 2)// simple start and finish   {  	linelatlng line = grid [a];  	line.p1 = closestpoint;  	line.p2 = farestpoint;  	grid [a] = line;  } else// multiple intersections   {  	linelatlng line = grid [a];  	remove.Add (line);  	while (matchs.Count > 1) {  		linelatlng newline = new linelatlng ();  		closestpoint = findClosestPoint (closestpoint' matchs);  		newline.p1 = closestpoint;  		matchs.Remove (closestpoint);  		closestpoint = findClosestPoint (closestpoint' matchs);  		newline.p2 = closestpoint;  		matchs.Remove (closestpoint);  		newline.basepnt = line.basepnt;  		grid.Add (newline);  	}  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: if (crosses == 1)// bad - shouldnt happen   {  } else if (crosses == 2)// simple start and finish   {  	linelatlng line = grid [a];  	line.p1 = closestpoint;  	line.p2 = farestpoint;  	grid [a] = line;  } else// multiple intersections   {  	linelatlng line = grid [a];  	remove.Add (line);  	while (matchs.Count > 1) {  		linelatlng newline = new linelatlng ();  		closestpoint = findClosestPoint (closestpoint' matchs);  		newline.p1 = closestpoint;  		matchs.Remove (closestpoint);  		closestpoint = findClosestPoint (closestpoint' matchs);  		newline.p2 = closestpoint;  		matchs.Remove (closestpoint);  		newline.basepnt = line.basepnt;  		grid.Add (newline);  	}  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,CreateGrid,The following statement contains a magic number: if (crosses == 2)// simple start and finish   {  	linelatlng line = grid [a];  	line.p1 = closestpoint;  	line.p2 = farestpoint;  	grid [a] = line;  } else// multiple intersections   {  	linelatlng line = grid [a];  	remove.Add (line);  	while (matchs.Count > 1) {  		linelatlng newline = new linelatlng ();  		closestpoint = findClosestPoint (closestpoint' matchs);  		newline.p1 = closestpoint;  		matchs.Remove (closestpoint);  		closestpoint = findClosestPoint (closestpoint' matchs);  		newline.p2 = closestpoint;  		matchs.Remove (closestpoint);  		newline.basepnt = line.basepnt;  		grid.Add (newline);  	}  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,newpos,The following statement contains a magic number: if (degN < 0)  	degN += 360;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,newpos,The following statement contains a magic number: degN += 360;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,newpos,The following statement contains a magic number: if (degN < 0)  	degN += 360;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,newpos,The following statement contains a magic number: degN += 360;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,AddAngle,The following statement contains a magic number: angle = angle % 360;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,AddAngle,The following statement contains a magic number: while (angle < 0) {  	angle += 360;  }  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,AddAngle,The following statement contains a magic number: angle += 360;  
Magic Number,MissionPlanner,Grid,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\..\..\Grid\Grid.cs,PointInPolygon,The following statement contains a magic number: if (poly.Count < 3) {  	return inside;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,GridUIv2,The following statement contains a magic number: map.Zoom = 16;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,GridUIv2,The following statement contains a magic number: num_overlap = 50;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,GridUIv2,The following statement contains a magic number: num_sidelap = 60;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,GridUIv2,The following statement contains a magic number: NUM_altitude.Value = 50;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,GridUIv2,The following statement contains a magic number: NUM_angle.Value = (decimal)((getAngleOfLongestSide (list) + 360) % 360);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,GridUIv2,The following statement contains a magic number: NUM_angle.Value = (decimal)((getAngleOfLongestSide (list) + 360) % 360);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,getAngleOfLongestSide,The following statement contains a magic number: return (angle + 360) % 360;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,getAngleOfLongestSide,The following statement contains a magic number: return (angle + 360) % 360;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: foreach (var item in grid) {  	if (item.Tag == "M") {  		images++;  		if (chk_internals.Checked) {  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.OnMouseOver  			});  			a++;  		}  		try {  			if (chk_footprints.Checked) {  				if (TXT_fovH != "") {  					double fovh = double.Parse (TXT_fovH);  					double fovv = double.Parse (TXT_fovV);  					double startangle = 0;  					if (!RAD_camdirectionland.Checked) {  						startangle = 90;  					}  					double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  					double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  					double bearing = (double)NUM_angle.Value;  					// (prevpoint.GetBearing(item) + 360.0) % 360;  					List<PointLatLng> footprint = new List<PointLatLng> ();  					footprint.Add (item.newpos (bearing + angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  					footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  					footprint.Add (item.newpos (bearing - angle1' dist1));  					GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  					poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  					poly.Stroke.Width = 1;  					poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  					layerpolygons.Polygons.Add (poly);  				}  			}  		} catch {  		}  	} else {  		strips++;  		if (chk_markers.Checked)  			layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  				ToolTipText = a.ToString ()'  				ToolTipMode = MarkerTooltipMode.Always  			});  		a++;  	}  	prevpoint = item;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (item.Tag == "M") {  	images++;  	if (chk_internals.Checked) {  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.OnMouseOver  		});  		a++;  	}  	try {  		if (chk_footprints.Checked) {  			if (TXT_fovH != "") {  				double fovh = double.Parse (TXT_fovH);  				double fovv = double.Parse (TXT_fovV);  				double startangle = 0;  				if (!RAD_camdirectionland.Checked) {  					startangle = 90;  				}  				double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  				double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  				double bearing = (double)NUM_angle.Value;  				// (prevpoint.GetBearing(item) + 360.0) % 360;  				List<PointLatLng> footprint = new List<PointLatLng> ();  				footprint.Add (item.newpos (bearing + angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  				footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  				footprint.Add (item.newpos (bearing - angle1' dist1));  				GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  				poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  				poly.Stroke.Width = 1;  				poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  				layerpolygons.Polygons.Add (poly);  			}  		}  	} catch {  	}  } else {  	strips++;  	if (chk_markers.Checked)  		layerpolygons.Markers.Add (new GMarkerGoogle (item' GMarkerGoogleType.green) {  			ToolTipText = a.ToString ()'  			ToolTipMode = MarkerTooltipMode.Always  		});  	a++;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: try {  	if (chk_footprints.Checked) {  		if (TXT_fovH != "") {  			double fovh = double.Parse (TXT_fovH);  			double fovv = double.Parse (TXT_fovV);  			double startangle = 0;  			if (!RAD_camdirectionland.Checked) {  				startangle = 90;  			}  			double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  			double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  			double bearing = (double)NUM_angle.Value;  			// (prevpoint.GetBearing(item) + 360.0) % 360;  			List<PointLatLng> footprint = new List<PointLatLng> ();  			footprint.Add (item.newpos (bearing + angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  			footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  			footprint.Add (item.newpos (bearing - angle1' dist1));  			GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  			poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  			poly.Stroke.Width = 1;  			poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  			layerpolygons.Polygons.Add (poly);  		}  	}  } catch {  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (chk_footprints.Checked) {  	if (TXT_fovH != "") {  		double fovh = double.Parse (TXT_fovH);  		double fovv = double.Parse (TXT_fovV);  		double startangle = 0;  		if (!RAD_camdirectionland.Checked) {  			startangle = 90;  		}  		double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  		double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  		double bearing = (double)NUM_angle.Value;  		// (prevpoint.GetBearing(item) + 360.0) % 360;  		List<PointLatLng> footprint = new List<PointLatLng> ();  		footprint.Add (item.newpos (bearing + angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  		footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  		footprint.Add (item.newpos (bearing - angle1' dist1));  		GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  		poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  		poly.Stroke.Width = 1;  		poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  		layerpolygons.Polygons.Add (poly);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (TXT_fovH != "") {  	double fovh = double.Parse (TXT_fovH);  	double fovv = double.Parse (TXT_fovV);  	double startangle = 0;  	if (!RAD_camdirectionland.Checked) {  		startangle = 90;  	}  	double angle1 = startangle - (Math.Tan ((fovv / 2.0) / (fovh / 2.0)) * rad2deg);  	double dist1 = Math.Sqrt (Math.Pow (fovh / 2.0' 2) + Math.Pow (fovv / 2.0' 2));  	double bearing = (double)NUM_angle.Value;  	// (prevpoint.GetBearing(item) + 360.0) % 360;  	List<PointLatLng> footprint = new List<PointLatLng> ();  	footprint.Add (item.newpos (bearing + angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  	footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  	footprint.Add (item.newpos (bearing - angle1' dist1));  	GMapPolygon poly = new GMapPolygon (footprint' a.ToString ());  	poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  	poly.Stroke.Width = 1;  	poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  	layerpolygons.Polygons.Add (poly);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: if (!RAD_camdirectionland.Checked) {  	startangle = 90;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: startangle = 90;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: footprint.Add (item.newpos (bearing + 180 - angle1' dist1));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: footprint.Add (item.newpos (bearing + 180 + angle1' dist1));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Stroke.Color = Color.FromArgb (250 - ((a * 5) % 240)' 250 - ((a * 3) % 240)' 250 - ((a * 9) % 240));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: poly.Fill = new SolidBrush (Color.FromArgb (40' Color.Purple));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: wppoly.Stroke.Width = 4;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: quickViewarea.number = calcpolygonarea (list) / (1000.0 * 1000.0);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: quickViewarea.number = calcpolygonarea (list) / (1000.0 * 1000.0);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: lbl_strips.Text = ((int)(strips / 2)).ToString ();  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: quickViewflighttime.number = seconds / 60.0;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,domainUpDown1_ValueChanged,The following statement contains a magic number: seconds = ((wppoly.Distance * 1000.0) / ((double)numericUpDownFlySpeed.Value));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (grid != null && grid.Count > 0) {  	MainV2.instance.FlightPlanner.quickadd = true;  	if (CHK_includetakeoff.Checked) {  		if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  		} else {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  		}  	}  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.DO_SET_CAM_TRIGG_DIST' (float)NUM_spacing' 0' 0' 0' 0' 0' 0);  	grid.ForEach (plla => {  		// skip internals  		if (plla.Tag == "M") {  		} else {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.WAYPOINT' 0' 0' 0' 0' plla.Lng' plla.Lat' plla.Alt);  		}  	});  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.DO_SET_CAM_TRIGG_DIST' 0' 0' 0' 0' 0' 0' 0);  	if (chk_includeland.Checked) {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.LAND' 0' 0' 0' 0' plugin.Host.cs.HomeLocation.Lng' plugin.Host.cs.HomeLocation.Lat' 0);  	}  	savesettings ();  	MainV2.instance.FlightPlanner.quickadd = false;  	MainV2.instance.FlightPlanner.writeKML ();  	this.Close ();  } else {  	CustomMessageBox.Show ("Bad Grid"' "Error");  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (grid != null && grid.Count > 0) {  	MainV2.instance.FlightPlanner.quickadd = true;  	if (CHK_includetakeoff.Checked) {  		if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  		} else {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  		}  	}  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.DO_SET_CAM_TRIGG_DIST' (float)NUM_spacing' 0' 0' 0' 0' 0' 0);  	grid.ForEach (plla => {  		// skip internals  		if (plla.Tag == "M") {  		} else {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.WAYPOINT' 0' 0' 0' 0' plla.Lng' plla.Lat' plla.Alt);  		}  	});  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.DO_SET_CAM_TRIGG_DIST' 0' 0' 0' 0' 0' 0' 0);  	if (chk_includeland.Checked) {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.LAND' 0' 0' 0' 0' plugin.Host.cs.HomeLocation.Lng' plugin.Host.cs.HomeLocation.Lat' 0);  	}  	savesettings ();  	MainV2.instance.FlightPlanner.quickadd = false;  	MainV2.instance.FlightPlanner.writeKML ();  	this.Close ();  } else {  	CustomMessageBox.Show ("Bad Grid"' "Error");  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (grid != null && grid.Count > 0) {  	MainV2.instance.FlightPlanner.quickadd = true;  	if (CHK_includetakeoff.Checked) {  		if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  		} else {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  		}  	}  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.DO_SET_CAM_TRIGG_DIST' (float)NUM_spacing' 0' 0' 0' 0' 0' 0);  	grid.ForEach (plla => {  		// skip internals  		if (plla.Tag == "M") {  		} else {  			plugin.Host.AddWPtoList (MAVLink.MAV_CMD.WAYPOINT' 0' 0' 0' 0' plla.Lng' plla.Lat' plla.Alt);  		}  	});  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.DO_SET_CAM_TRIGG_DIST' 0' 0' 0' 0' 0' 0' 0);  	if (chk_includeland.Checked) {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.LAND' 0' 0' 0' 0' plugin.Host.cs.HomeLocation.Lng' plugin.Host.cs.HomeLocation.Lat' 0);  	}  	savesettings ();  	MainV2.instance.FlightPlanner.quickadd = false;  	MainV2.instance.FlightPlanner.writeKML ();  	this.Close ();  } else {  	CustomMessageBox.Show ("Bad Grid"' "Error");  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (CHK_includetakeoff.Checked) {  	if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  	} else {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (CHK_includetakeoff.Checked) {  	if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  	} else {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (CHK_includetakeoff.Checked) {  	if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  	} else {  		plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  } else {  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  } else {  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: if (plugin.Host.cs.firmware == MainV2.Firmwares.ArduCopter2) {  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  } else {  	plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 30);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,BUT_Accept_Click,The following statement contains a magic number: plugin.Host.AddWPtoList (MAVLink.MAV_CMD.TAKEOFF' 20' 0' 0' 0' 0' 0' 30);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: try {  	// entered values  	float focallen = (float)num_focallength;  	float flyalt = (float)NUM_altitude.Value;  	int imagewidth = int.Parse (TXT_imgwidth);  	int imageheight = int.Parse (TXT_imgheight);  	float sensorwidth = float.Parse (TXT_senswidth);  	float sensorheight = float.Parse (TXT_sensheight);  	int overlap = (int)num_overlap;  	int sidelap = (int)num_sidelap;  	// scale      mm / mm  	float flscale = (1000 * flyalt) / focallen;  	//   mm * mm / 1000  	float viewwidth = (sensorwidth * flscale / 1000);  	float viewheight = (sensorheight * flscale / 1000);  	TXT_fovH = viewwidth.ToString ("#.#");  	TXT_fovV = viewheight.ToString ("#.#");  	float fovh = (float)(Math.Atan (sensorwidth / (2 * focallen)) * rad2deg * 2);  	float fovv = (float)(Math.Atan (sensorheight / (2 * focallen)) * rad2deg * 2);  	//    mm  / pixels * 100  	TXT_cmpixel = ((viewheight / imageheight) * 100);  	if (!RAD_camdirectionport.Checked) {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewheight);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewwidth);  	} else {  		NUM_spacing = ((1 - (overlap / 100.0f)) * viewwidth);  		NUM_Distance = ((1 - (sidelap / 100.0f)) * viewheight);  	}  } catch {  	return;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,doCalc,The following statement contains a magic number: TXT_cmpixel = ((viewheight / imageheight) * 100);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (mousedown) {  	mousedragging = true;  	if (currentmode == mode.panmode) {  		if (e.Button == MouseButtons.Left) {  			double latdif = mousestart.Lat - mousecurrent.Lat;  			double lngdif = mousestart.Lng - mousecurrent.Lng;  			try {  				map.Position = new PointLatLng (map.Position.Lat + latdif' map.Position.Lng + lngdif);  			} catch {  			}  		}  	} else if (currentmode == mode.drawbox) {  		if (e.Button == MouseButtons.Left) {  			var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  			list.Clear ();  			// tl  			list.Add (mousestart);  			// tr  			list.Add (new PointLatLng (rect.Top' rect.Right));  			// br  			list.Add (mousecurrent);  			// bl  			list.Add (new PointLatLng (rect.Bottom' rect.Left));  			if (boxpoly != null)  				layerpolygons.Polygons.Remove (boxpoly);  			boxpoly = null;  			boxpoly = new GMapPolygon (list' "boxpoly");  			boxpoly.IsHitTestVisible = true;  			boxpoly.Stroke = new Pen (Color.Red' 2);  			boxpoly.Fill = Brushes.Transparent;  			layerpolygons.Polygons.Add (boxpoly);  			map.Invalidate ();  		}  	} else if (currentmode == mode.movebox) {  		//if (mouseinsidepoly)  		{  			double latdif = mousestart.Lat - mousecurrent.Lat;  			double lngdif = mousestart.Lng - mousecurrent.Lng;  			for (int a = 0; a < boxpoly.Points.Count; a++) {  				boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  			}  			UpdateListFromBox ();  			map.UpdatePolygonLocalPosition (boxpoly);  			map.Invalidate ();  			mousestart = mousecurrent;  		}  	} else if (currentmode == mode.editbox) {  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		// 2 point the create the lowest crosstrack distance  		// extend at 90 degrees to the bearing of the points based on mouse position  		PointLatLngAlt p0;  		PointLatLngAlt p1;  		PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  		PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  		double bestcrosstrack = 9999999;  		double R = 6371000;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			p0 = boxpoly.Points [a];  			p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  			var distp0p1 = p0.GetDistance (mousecurrent);  			var bearingp0curr = p0.GetBearing (mousecurrent);  			var bearringp0p1 = p0.GetBearing (p1);  			var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  			if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  				bestp0 = p0;  				bestp1 = p1;  				bestcrosstrack = ct;  			}  		}  		var bearing = bestp0.GetBearing (bestp1);  		layerpolygons.Markers.Clear ();  		layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  		layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  		bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  		var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  		var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  		boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  		boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (mousedown) {  	mousedragging = true;  	if (currentmode == mode.panmode) {  		if (e.Button == MouseButtons.Left) {  			double latdif = mousestart.Lat - mousecurrent.Lat;  			double lngdif = mousestart.Lng - mousecurrent.Lng;  			try {  				map.Position = new PointLatLng (map.Position.Lat + latdif' map.Position.Lng + lngdif);  			} catch {  			}  		}  	} else if (currentmode == mode.drawbox) {  		if (e.Button == MouseButtons.Left) {  			var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  			list.Clear ();  			// tl  			list.Add (mousestart);  			// tr  			list.Add (new PointLatLng (rect.Top' rect.Right));  			// br  			list.Add (mousecurrent);  			// bl  			list.Add (new PointLatLng (rect.Bottom' rect.Left));  			if (boxpoly != null)  				layerpolygons.Polygons.Remove (boxpoly);  			boxpoly = null;  			boxpoly = new GMapPolygon (list' "boxpoly");  			boxpoly.IsHitTestVisible = true;  			boxpoly.Stroke = new Pen (Color.Red' 2);  			boxpoly.Fill = Brushes.Transparent;  			layerpolygons.Polygons.Add (boxpoly);  			map.Invalidate ();  		}  	} else if (currentmode == mode.movebox) {  		//if (mouseinsidepoly)  		{  			double latdif = mousestart.Lat - mousecurrent.Lat;  			double lngdif = mousestart.Lng - mousecurrent.Lng;  			for (int a = 0; a < boxpoly.Points.Count; a++) {  				boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  			}  			UpdateListFromBox ();  			map.UpdatePolygonLocalPosition (boxpoly);  			map.Invalidate ();  			mousestart = mousecurrent;  		}  	} else if (currentmode == mode.editbox) {  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		// 2 point the create the lowest crosstrack distance  		// extend at 90 degrees to the bearing of the points based on mouse position  		PointLatLngAlt p0;  		PointLatLngAlt p1;  		PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  		PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  		double bestcrosstrack = 9999999;  		double R = 6371000;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			p0 = boxpoly.Points [a];  			p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  			var distp0p1 = p0.GetDistance (mousecurrent);  			var bearingp0curr = p0.GetBearing (mousecurrent);  			var bearringp0p1 = p0.GetBearing (p1);  			var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  			if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  				bestp0 = p0;  				bestp1 = p1;  				bestcrosstrack = ct;  			}  		}  		var bearing = bestp0.GetBearing (bestp1);  		layerpolygons.Markers.Clear ();  		layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  		layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  		bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  		var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  		var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  		boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  		boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (mousedown) {  	mousedragging = true;  	if (currentmode == mode.panmode) {  		if (e.Button == MouseButtons.Left) {  			double latdif = mousestart.Lat - mousecurrent.Lat;  			double lngdif = mousestart.Lng - mousecurrent.Lng;  			try {  				map.Position = new PointLatLng (map.Position.Lat + latdif' map.Position.Lng + lngdif);  			} catch {  			}  		}  	} else if (currentmode == mode.drawbox) {  		if (e.Button == MouseButtons.Left) {  			var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  			list.Clear ();  			// tl  			list.Add (mousestart);  			// tr  			list.Add (new PointLatLng (rect.Top' rect.Right));  			// br  			list.Add (mousecurrent);  			// bl  			list.Add (new PointLatLng (rect.Bottom' rect.Left));  			if (boxpoly != null)  				layerpolygons.Polygons.Remove (boxpoly);  			boxpoly = null;  			boxpoly = new GMapPolygon (list' "boxpoly");  			boxpoly.IsHitTestVisible = true;  			boxpoly.Stroke = new Pen (Color.Red' 2);  			boxpoly.Fill = Brushes.Transparent;  			layerpolygons.Polygons.Add (boxpoly);  			map.Invalidate ();  		}  	} else if (currentmode == mode.movebox) {  		//if (mouseinsidepoly)  		{  			double latdif = mousestart.Lat - mousecurrent.Lat;  			double lngdif = mousestart.Lng - mousecurrent.Lng;  			for (int a = 0; a < boxpoly.Points.Count; a++) {  				boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  			}  			UpdateListFromBox ();  			map.UpdatePolygonLocalPosition (boxpoly);  			map.Invalidate ();  			mousestart = mousecurrent;  		}  	} else if (currentmode == mode.editbox) {  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		// 2 point the create the lowest crosstrack distance  		// extend at 90 degrees to the bearing of the points based on mouse position  		PointLatLngAlt p0;  		PointLatLngAlt p1;  		PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  		PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  		double bestcrosstrack = 9999999;  		double R = 6371000;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			p0 = boxpoly.Points [a];  			p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  			var distp0p1 = p0.GetDistance (mousecurrent);  			var bearingp0curr = p0.GetBearing (mousecurrent);  			var bearringp0p1 = p0.GetBearing (p1);  			var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  			if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  				bestp0 = p0;  				bestp1 = p1;  				bestcrosstrack = ct;  			}  		}  		var bearing = bestp0.GetBearing (bestp1);  		layerpolygons.Markers.Clear ();  		layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  		layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  		bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  		var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  		var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  		boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  		boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.panmode) {  	if (e.Button == MouseButtons.Left) {  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		try {  			map.Position = new PointLatLng (map.Position.Lat + latdif' map.Position.Lng + lngdif);  		} catch {  		}  	}  } else if (currentmode == mode.drawbox) {  	if (e.Button == MouseButtons.Left) {  		var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  		list.Clear ();  		// tl  		list.Add (mousestart);  		// tr  		list.Add (new PointLatLng (rect.Top' rect.Right));  		// br  		list.Add (mousecurrent);  		// bl  		list.Add (new PointLatLng (rect.Bottom' rect.Left));  		if (boxpoly != null)  			layerpolygons.Polygons.Remove (boxpoly);  		boxpoly = null;  		boxpoly = new GMapPolygon (list' "boxpoly");  		boxpoly.IsHitTestVisible = true;  		boxpoly.Stroke = new Pen (Color.Red' 2);  		boxpoly.Fill = Brushes.Transparent;  		layerpolygons.Polygons.Add (boxpoly);  		map.Invalidate ();  	}  } else if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.panmode) {  	if (e.Button == MouseButtons.Left) {  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		try {  			map.Position = new PointLatLng (map.Position.Lat + latdif' map.Position.Lng + lngdif);  		} catch {  		}  	}  } else if (currentmode == mode.drawbox) {  	if (e.Button == MouseButtons.Left) {  		var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  		list.Clear ();  		// tl  		list.Add (mousestart);  		// tr  		list.Add (new PointLatLng (rect.Top' rect.Right));  		// br  		list.Add (mousecurrent);  		// bl  		list.Add (new PointLatLng (rect.Bottom' rect.Left));  		if (boxpoly != null)  			layerpolygons.Polygons.Remove (boxpoly);  		boxpoly = null;  		boxpoly = new GMapPolygon (list' "boxpoly");  		boxpoly.IsHitTestVisible = true;  		boxpoly.Stroke = new Pen (Color.Red' 2);  		boxpoly.Fill = Brushes.Transparent;  		layerpolygons.Polygons.Add (boxpoly);  		map.Invalidate ();  	}  } else if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.panmode) {  	if (e.Button == MouseButtons.Left) {  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		try {  			map.Position = new PointLatLng (map.Position.Lat + latdif' map.Position.Lng + lngdif);  		} catch {  		}  	}  } else if (currentmode == mode.drawbox) {  	if (e.Button == MouseButtons.Left) {  		var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  		list.Clear ();  		// tl  		list.Add (mousestart);  		// tr  		list.Add (new PointLatLng (rect.Top' rect.Right));  		// br  		list.Add (mousecurrent);  		// bl  		list.Add (new PointLatLng (rect.Bottom' rect.Left));  		if (boxpoly != null)  			layerpolygons.Polygons.Remove (boxpoly);  		boxpoly = null;  		boxpoly = new GMapPolygon (list' "boxpoly");  		boxpoly.IsHitTestVisible = true;  		boxpoly.Stroke = new Pen (Color.Red' 2);  		boxpoly.Fill = Brushes.Transparent;  		layerpolygons.Polygons.Add (boxpoly);  		map.Invalidate ();  	}  } else if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.drawbox) {  	if (e.Button == MouseButtons.Left) {  		var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  		list.Clear ();  		// tl  		list.Add (mousestart);  		// tr  		list.Add (new PointLatLng (rect.Top' rect.Right));  		// br  		list.Add (mousecurrent);  		// bl  		list.Add (new PointLatLng (rect.Bottom' rect.Left));  		if (boxpoly != null)  			layerpolygons.Polygons.Remove (boxpoly);  		boxpoly = null;  		boxpoly = new GMapPolygon (list' "boxpoly");  		boxpoly.IsHitTestVisible = true;  		boxpoly.Stroke = new Pen (Color.Red' 2);  		boxpoly.Fill = Brushes.Transparent;  		layerpolygons.Polygons.Add (boxpoly);  		map.Invalidate ();  	}  } else if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.drawbox) {  	if (e.Button == MouseButtons.Left) {  		var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  		list.Clear ();  		// tl  		list.Add (mousestart);  		// tr  		list.Add (new PointLatLng (rect.Top' rect.Right));  		// br  		list.Add (mousecurrent);  		// bl  		list.Add (new PointLatLng (rect.Bottom' rect.Left));  		if (boxpoly != null)  			layerpolygons.Polygons.Remove (boxpoly);  		boxpoly = null;  		boxpoly = new GMapPolygon (list' "boxpoly");  		boxpoly.IsHitTestVisible = true;  		boxpoly.Stroke = new Pen (Color.Red' 2);  		boxpoly.Fill = Brushes.Transparent;  		layerpolygons.Polygons.Add (boxpoly);  		map.Invalidate ();  	}  } else if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.drawbox) {  	if (e.Button == MouseButtons.Left) {  		var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  		list.Clear ();  		// tl  		list.Add (mousestart);  		// tr  		list.Add (new PointLatLng (rect.Top' rect.Right));  		// br  		list.Add (mousecurrent);  		// bl  		list.Add (new PointLatLng (rect.Bottom' rect.Left));  		if (boxpoly != null)  			layerpolygons.Polygons.Remove (boxpoly);  		boxpoly = null;  		boxpoly = new GMapPolygon (list' "boxpoly");  		boxpoly.IsHitTestVisible = true;  		boxpoly.Stroke = new Pen (Color.Red' 2);  		boxpoly.Fill = Brushes.Transparent;  		layerpolygons.Polygons.Add (boxpoly);  		map.Invalidate ();  	}  } else if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	var rect = RectangleF.FromLTRB ((float)mousestart.Lng' (float)mousestart.Lat' (float)mousecurrent.Lng' (float)mousecurrent.Lat);  	list.Clear ();  	// tl  	list.Add (mousestart);  	// tr  	list.Add (new PointLatLng (rect.Top' rect.Right));  	// br  	list.Add (mousecurrent);  	// bl  	list.Add (new PointLatLng (rect.Bottom' rect.Left));  	if (boxpoly != null)  		layerpolygons.Polygons.Remove (boxpoly);  	boxpoly = null;  	boxpoly = new GMapPolygon (list' "boxpoly");  	boxpoly.IsHitTestVisible = true;  	boxpoly.Stroke = new Pen (Color.Red' 2);  	boxpoly.Fill = Brushes.Transparent;  	layerpolygons.Polygons.Add (boxpoly);  	map.Invalidate ();  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: boxpoly.Stroke = new Pen (Color.Red' 2);  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.movebox) {  	//if (mouseinsidepoly)  	{  		double latdif = mousestart.Lat - mousecurrent.Lat;  		double lngdif = mousestart.Lng - mousecurrent.Lng;  		for (int a = 0; a < boxpoly.Points.Count; a++) {  			boxpoly.Points [a] = new PointLatLng (boxpoly.Points [a].Lat - latdif' boxpoly.Points [a].Lng - lngdif);  		}  		UpdateListFromBox ();  		map.UpdatePolygonLocalPosition (boxpoly);  		map.Invalidate ();  		mousestart = mousecurrent;  	}  } else if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,map_MouseMove,The following statement contains a magic number: if (currentmode == mode.editbox) {  	double latdif = mousestart.Lat - mousecurrent.Lat;  	double lngdif = mousestart.Lng - mousecurrent.Lng;  	// 2 point the create the lowest crosstrack distance  	// extend at 90 degrees to the bearing of the points based on mouse position  	PointLatLngAlt p0;  	PointLatLngAlt p1;  	PointLatLngAlt bestp0 = PointLatLngAlt.Zero;  	PointLatLngAlt bestp1 = PointLatLngAlt.Zero;  	double bestcrosstrack = 9999999;  	double R = 6371000;  	for (int a = 0; a < boxpoly.Points.Count; a++) {  		p0 = boxpoly.Points [a];  		p1 = boxpoly.Points [(a + 1) % (boxpoly.Points.Count)];  		var distp0p1 = p0.GetDistance (mousecurrent);  		var bearingp0curr = p0.GetBearing (mousecurrent);  		var bearringp0p1 = p0.GetBearing (p1);  		var ct = Math.Asin (Math.Sin (distp0p1 / R) * Math.Sin ((bearingp0curr - bearringp0p1) * deg2rad)) * R;  		if (Math.Abs (ct) < Math.Abs (bestcrosstrack)) {  			bestp0 = p0;  			bestp1 = p1;  			bestcrosstrack = ct;  		}  	}  	var bearing = bestp0.GetBearing (bestp1);  	layerpolygons.Markers.Clear ();  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp0' GMarkerGoogleType.blue));  	layerpolygons.Markers.Add (new GMarkerGoogle (bestp1' GMarkerGoogleType.blue));  	bearing = ((PointLatLngAlt)mousestart).GetBearing (mousecurrent);  	var newposp0 = bestp0.newpos (bearing' Math.Abs (bestcrosstrack));  	var newposp1 = bestp1.newpos (bearing' Math.Abs (bestcrosstrack));  	boxpoly.Points [boxpoly.Points.IndexOf (bestp0)] = newposp0;  	boxpoly.Points [boxpoly.Points.IndexOf (bestp1)] = newposp1;  	UpdateListFromBox ();  	map.UpdatePolygonLocalPosition (boxpoly);  	map.Invalidate ();  	mousestart = mousecurrent;  }  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_angle.Maximum = new decimal (new int[] {  	360'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_altitude.Increment = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_altitude.Maximum = new decimal (new int[] {  	9999'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_altitude.Minimum = new decimal (new int[] {  	5'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_altitude.Value = new decimal (new int[] {  	100'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.TBAR_zoom.Maximum = 400;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.TBAR_zoom.Minimum = 10;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.TBAR_zoom.TickFrequency = 5;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.TBAR_zoom.Value = 100;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFlySpeed.Maximum = new decimal (new int[] {  	360'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFlySpeed.Value = new decimal (new int[] {  	5'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.map.LevelsKeepInMemmory = 5;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.map.MaxZoom = 19;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.map.MinZoom = 2;  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.map.SelectedAreaFillColor = System.Drawing.Color.FromArgb (((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.map.SelectedAreaFillColor = System.Drawing.Color.FromArgb (((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.map.SelectedAreaFillColor = System.Drawing.Color.FromArgb (((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.map.SelectedAreaFillColor = System.Drawing.Color.FromArgb (((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_maxflttime.Increment = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_maxflttime.Maximum = new decimal (new int[] {  	9999'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_maxflttime.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_maxspd.Increment = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_maxspd.Maximum = new decimal (new int[] {  	9999'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_maxspd.Value = new decimal (new int[] {  	20'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_minspd.Increment = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,InitializeComponent,The following statement contains a magic number: this.NUM_minspd.Maximum = new decimal (new int[] {  	9999'  	0'  	0'  	0  });  
Missing Default,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlcamera,The following switch statement is missing a default case: switch (xmlreader.Name) {  case "name":  	camera.name = xmlreader.ReadString ();  	break;  case "imgw":  	camera.imagewidth = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "imgh":  	camera.imageheight = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "senw":  	camera.sensorwidth = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "senh":  	camera.sensorheight = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "flen":  	camera.focallen = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "Camera":  	cameras [camera.name] = camera;  	dobreak = true;  	break;  }  
Missing Default,MissionPlanner,GridUIv2,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\MissionPlanner.Gridv2\GridUIv2.cs,xmlaircraft,The following switch statement is missing a default case: switch (xmlreader.Name) {  case "name":  	aircraft.name = xmlreader.ReadString ();  	break;  case "turn_rad_m":  	aircraft.turnrad = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "min_alt_m":  	aircraft.minalt = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "max_alt_m":  	aircraft.maxalt = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "min_vel_ms":  	aircraft.minvel = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "max_vel_ms":  	aircraft.maxvel = float.Parse (xmlreader.ReadString ()' new System.Globalization.CultureInfo ("en-US"));  	break;  case "Vehicle":  	aircrafts [aircraft.name] = aircraft;  	dobreak = true;  	break;  }  
