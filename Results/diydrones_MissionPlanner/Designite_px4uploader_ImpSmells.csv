Implementation smell,Namespace,Class,File,Method,Description
Long Method,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The method has 104 lines of code.
Complex Method,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ToObject,Cyclomatic complexity of the method is 13
Complex Method,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ParseDictionary,Cyclomatic complexity of the method is 16
Complex Method,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ReadDataTable,Cyclomatic complexity of the method is 10
Complex Method,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseString,Cyclomatic complexity of the method is 10
Complex Method,fastJSON,JSONSerializer,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonSerializer.cs,WriteObject,Cyclomatic complexity of the method is 8
Complex Method,fastJSON,JSONSerializer,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonSerializer.cs,WriteString,Cyclomatic complexity of the method is 8
Complex Method,fastJSON,Reflection,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\Reflection.cs,GetGetters,Cyclomatic complexity of the method is 9
Complex Method,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,Cyclomatic complexity of the method is 12
Long Statement,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,FillObject,The length of the statement  "            Dictionary<string' object> ht = new JsonParser(json' Parameters.IgnoreCaseOnDeserialize).Decode() as Dictionary<string' object>; " is 128.
Long Statement,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ParseDictionary,The length of the statement  "                            case myPropInfoType.StringDictionary: oset = CreateStringKeyDictionary((Dictionary<string' object>)v' pi.pt' pi.GenericTypes' globaltypes); break; " is 146.
Long Statement,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ReadSchema,The length of the statement  "                DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null); " is 128.
Long Statement,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDataTable,The length of the statement  "                var ms = (DatasetSchema)this.ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null); " is 123.
Long Statement,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,Uploader,The length of the statement  "                        Console.WriteLine("Found board type {0} boardrev {1} bl rev {2} fwmax {3} on {4}"' up.board_type' up.board_rev'up.bl_rev'up.fw_maxsize' port); " is 142.
Long Statement,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,Uploader,The length of the statement  "                    catch (Exception ex) { Console.WriteLine("No need to upload. already on the board" + ex.ToString()); up.close(); return true; } " is 127.
Long Statement,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,DecodeRsaPrivateKey,The length of the statement  "                parms.ProviderType = ((Environment.OSVersion.Version.Major > 5) || ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1))) ? 0x18 : 1; " is 170.
Long Statement,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The length of the statement  "                    if (ByteArrayCompare(sn' new byte[] { 0x00' 0x23' 0x00' 0x30' 0x35' 0x32' 0x47' 0x18' 0x36' 0x34' 0x30' 0x32' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 })) " is 160.
Long Statement,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The length of the statement  "                    if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x1F' 0x34' 0x32' 0x47' 0x0D' 0x31' 0x32' 0x35' 0x33' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 })) " is 160.
Long Statement,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The length of the statement  "                    if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x21' 0x31' 0x34' 0x51' 0x17' 0x33' 0x36' 0x38' 0x34' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 })) " is 160.
Complex Conditional,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseNumber,The conditional expression  "(c >= '0' && c <= '9') || c == '.' || c == '-' || c == '+' || c == 'e' || c == 'E'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "c != ' ' && c != '\t' && c != '\n' && c != '\r'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l'"  is complex.
Complex Conditional,fastJSON,JSONSerializer,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonSerializer.cs,WriteValue,The conditional expression  "obj is int || obj is long || obj is double ||                  obj is decimal || obj is float ||                  obj is byte || obj is short ||                  obj is sbyte || obj is ushort ||                  obj is uint || obj is ulong"  is complex.
Complex Conditional,fastJSON,JSONSerializer,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonSerializer.cs,WriteString,The conditional expression  "c >= ' ' && c < 128 && c != '\"' && c != '\\'"  is complex.
Complex Conditional,fastJSON,JSONSerializer,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonSerializer.cs,WriteString,The conditional expression  "c != '\t' && c != '\n' && c != '\r' && c != '\"' && c != '\\'"  is complex.
Complex Conditional,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,Uploader,The conditional expression  "!port.StartsWith("COM") && !port.Contains("APM") && !port.Contains("ACM") && !port.Contains("usb")"  is complex.
Complex Conditional,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The conditional expression  "otp.h1 == 'P' &&                          otp.h2 == 'X' &&                          otp.h3 == '4' &&                          otp.h4 == '\0'"  is complex.
Empty Catch Block,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,Uploader,The method has an empty catch block.
Empty Catch Block,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,Uploader,The method has an empty catch block.
Empty Catch Block,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,Uploader,The method has an empty catch block.
Empty Catch Block,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,Uploader,The method has an empty catch block.
Empty Catch Block,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,close,The method has an empty catch block.
Empty Catch Block,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__reboot,The method has an empty catch block.
Empty Catch Block,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,upload,The method has an empty catch block.
Empty Catch Block,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,Dispose,The method has an empty catch block.
Empty Catch Block,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,Dispose,The method has an empty catch block.
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateInteger,The following statement contains a magic number: for (int x = 0; x < count; x++' index++)              {                  char cc = s[index];                    if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (int)(cc - '0');                  }              }
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateLong,The following statement contains a magic number: for (int x = 0; x < count; x++' index++)              {                  char cc = s[index];                    if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (int)(cc - '0');                  }              }
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateGuid,The following statement contains a magic number: if (s.Length > 30)                  return new Guid(s);              else                  return new Guid(Convert.FromBase64String(s));
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out year' value' 0' 4);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out month' value' 5' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out month' value' 5' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out day' value' 8' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out day' value' 8' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out hour' value' 11' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out hour' value' 11' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out min' value' 14' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out min' value' 14' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out sec' value' 17' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: CreateInteger(out sec' value' 17' 2);
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ReadSchema,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  ds.ReadXmlSchema(tr);              }              else              {                  DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  ds.DataSetName = ms.Name;                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      if (ds.Tables.Contains(ms.Info[i]) == false)                          ds.Tables.Add(ms.Info[i]);                      ds.Tables[ms.Info[i]].Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ReadSchema,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  ds.ReadXmlSchema(tr);              }              else              {                  DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  ds.DataSetName = ms.Name;                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      if (ds.Tables.Contains(ms.Info[i]) == false)                          ds.Tables.Add(ms.Info[i]);                      ds.Tables[ms.Info[i]].Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,ReadDataTable,The following statement contains a magic number: foreach (List<object> row in rows)              {                  object[] v = new object[row.Count];                  row.CopyTo(v' 0);                  foreach (int i in guidcols)                  {                      string s = (string)v[i];                      if (s != null && s.Length < 36)                          v[i] = new Guid(Convert.FromBase64String(s));                  }                  if (_params.UseUTCDateTime)                  {                      foreach (int i in datecol)                      {                          string s = (string)v[i];                          if (s != null)                              v[i] = CreateDateTime(s);                      }                  }                  dt.Rows.Add(v);              }
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDataTable,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  dt.ReadXmlSchema(tr);              }              else              {                  var ms = (DatasetSchema)this.ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  dt.TableName = ms.Info[0];                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      dt.Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,JSON,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JSON.cs,CreateDataTable,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  dt.ReadXmlSchema(tr);              }              else              {                  var ms = (DatasetSchema)this.ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  dt.TableName = ms.Info[0];                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      dt.Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,CreateLong,The following statement contains a magic number: foreach (char cc in s)              {                  if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (int)(cc - '0');                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,fastJSON,JSONSerializer,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonSerializer.cs,WriteString,The following statement contains a magic number: for (var index = 0; index < l; ++index)              {                  var c = s[index];                    if (_useEscapedUnicode)                  {                      if (c >= ' ' && c < 128 && c != '\"' && c != '\\')                      {                          if (runIndex == -1)                              runIndex = index;                            continue;                      }                  }                  else                  {                      if (c != '\t' && c != '\n' && c != '\r' && c != '\"' && c != '\\')// && c != ':' && c!=''')                      {                          if (runIndex == -1)                              runIndex = index;                            continue;                      }                  }                    if (runIndex != -1)                  {                      _output.Append(s' runIndex' index - runIndex);                      runIndex = -1;                  }                    switch (c)                  {                      case '\t': _output.Append("\\t"); break;                      case '\r': _output.Append("\\r"); break;                      case '\n': _output.Append("\\n"); break;                      case '"':                      case '\\': _output.Append('\\'); _output.Append(c); break;                      default:                          if (_useEscapedUnicode)                          {                              _output.Append("\\u");                              _output.Append(((int)c).ToString("X4"' NumberFormatInfo.InvariantInfo));                          }                          else                              _output.Append(c);                            break;                  }              }
Magic Number,fastJSON,Reflection,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\Reflection.cs,CreateSetField,The following statement contains a magic number: Type[] arguments = new Type[2];
Magic Number,fastJSON,Reflection,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\Reflection.cs,CreateSetMethod,The following statement contains a magic number: Type[] arguments = new Type[2];
Magic Number,px4uploader,Firmware,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Firmware.cs,ProcessFirmware,The following statement contains a magic number: int size = fw.image_size + (fw.image_size % 4);
Magic Number,px4uploader,Firmware,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Firmware.cs,__crc32,The following statement contains a magic number: foreach (byte data in bytes)              {                  uint index = ((state ^ data) & 0xff);                  state = crctab[index] ^ (state >> 8);              }
Magic Number,px4uploader,Firmware,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Firmware.cs,crc,The following statement contains a magic number: for (int i = fw.imagebyte.Length; i < (padlen -1); i += 4)              {                  state = __crc32(crcpad' state);              }
Magic Number,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,Uploader,The following statement contains a magic number: while (true)              {                  string[] ports = GetPortNames();                    //ports = new string[] { "COM9"};                    foreach (string port in ports)                  {                        if (!port.StartsWith("COM") && !port.Contains("APM") && !port.Contains("ACM") && !port.Contains("usb"))                          continue;                        Console.WriteLine(DateTime.Now.Millisecond +  " Trying Port "+port);                        try                      {                          up = new Uploader(port' 115200);                      }                      catch ( Exception ex)                      {                          //System.Threading.Thread.Sleep(50);                          Console.WriteLine(DateTime.Now.Millisecond  + " " +ex.Message);                          continue;                      }                        try                      {                          up.identify();                          Console.WriteLine("Found board type {0} boardrev {1} bl rev {2} fwmax {3} on {4}"' up.board_type' up.board_rev'up.bl_rev'up.fw_maxsize' port);                      }                      catch ( Exception)                      {                          try                          {                              //System.Threading.ThreadPool.QueueUserWorkItem(up.__mavlinkreboot);                          }                          catch {                               //up.close();                          }                            Console.WriteLine(DateTime.Now.Millisecond + " " + "Not There..");                          //Console.WriteLine(ex.Message);                          try                          {                              up.close();                          }                          catch { }                          continue;                      }                        try                      {                          up.currentChecksum(fw);                      }                      catch (Exception ex) { Console.WriteLine("No need to upload. already on the board" + ex.ToString()); up.close(); return true; }                        try                      {                          up.upload(fw);                      }                      catch (Exception ex)                      {                          Console.WriteLine(ex.ToString());                      }                        up.close();                        return true;                  }              }
Magic Number,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,DecodeRsaPrivateKey,The following statement contains a magic number: try              {                  byte byteValue;                  ushort shortValue;                    shortValue = rd.ReadUInt16();                    switch (shortValue)                  {                      case 0x8130:                          // If true' data is little endian since the proper logical seq is 0x30 0x81                          rd.ReadByte(); //advance 1 byte                          break;                      case 0x8230:                          rd.ReadInt16();  //advance 2 bytes                          break;                      default:                          Debug.Assert(false);     // Improper ASN.1 format                          return null;                  }                    shortValue = rd.ReadUInt16();                  if (shortValue != 0x0102) // (version number)                  {                      Debug.Assert(false);     // Improper ASN.1 format' unexpected version number                      return null;                  }                    byteValue = rd.ReadByte();                  if (byteValue != 0x00)                  {                      Debug.Assert(false);     // Improper ASN.1 format                      return null;                  }                    // The data following the version will be the ASN.1 data itself' which in our case                  // are a sequence of integers.                    // In order to solve a problem with instancing RSACryptoServiceProvider                  // via default constructor on .net 4.0 this is a hack                  CspParameters parms = new CspParameters();                  parms.Flags = CspProviderFlags.NoFlags;                  parms.KeyContainerName = Guid.NewGuid().ToString().ToUpperInvariant();                  parms.ProviderType = ((Environment.OSVersion.Version.Major > 5) || ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1))) ? 0x18 : 1;                    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(parms);                  RSAParameters rsAparams = new RSAParameters();                    rsAparams.Modulus = rd.ReadBytes(Helpers.DecodeIntegerSize(rd));                    // Argh' this is a pain.  From emperical testing it appears to be that RSAParameters doesn't like byte buffers that                  // have their leading zeros removed.  The RFC doesn't address this area that I can see' so it's hard to say that this                  // is a bug' but it sure would be helpful if it allowed that. So' there's some extra code here that knows what the                  // sizes of the various components are supposed to be.  Using these sizes we can ensure the buffer sizes are exactly                  // what the RSAParameters expect.  Thanks' Microsoft.                  RSAParameterTraits traits = new RSAParameterTraits(rsAparams.Modulus.Length * 8);                    rsAparams.Modulus = Helpers.AlignBytes(rsAparams.Modulus' traits.size_Mod);                  rsAparams.Exponent = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_Exp);                  rsAparams.D = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_D);                  rsAparams.P = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_P);                  rsAparams.Q = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_Q);                  rsAparams.DP = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_DP);                  rsAparams.DQ = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_DQ);                  rsAparams.InverseQ = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_InvQ);                    rsa.ImportParameters(rsAparams);                  return rsa;              }              catch (Exception)              {                  Debug.Assert(false);                  return null;              }              finally              {                  rd.Close();              }
Magic Number,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,DecodeRsaPrivateKey,The following statement contains a magic number: try              {                  byte byteValue;                  ushort shortValue;                    shortValue = rd.ReadUInt16();                    switch (shortValue)                  {                      case 0x8130:                          // If true' data is little endian since the proper logical seq is 0x30 0x81                          rd.ReadByte(); //advance 1 byte                          break;                      case 0x8230:                          rd.ReadInt16();  //advance 2 bytes                          break;                      default:                          Debug.Assert(false);     // Improper ASN.1 format                          return null;                  }                    shortValue = rd.ReadUInt16();                  if (shortValue != 0x0102) // (version number)                  {                      Debug.Assert(false);     // Improper ASN.1 format' unexpected version number                      return null;                  }                    byteValue = rd.ReadByte();                  if (byteValue != 0x00)                  {                      Debug.Assert(false);     // Improper ASN.1 format                      return null;                  }                    // The data following the version will be the ASN.1 data itself' which in our case                  // are a sequence of integers.                    // In order to solve a problem with instancing RSACryptoServiceProvider                  // via default constructor on .net 4.0 this is a hack                  CspParameters parms = new CspParameters();                  parms.Flags = CspProviderFlags.NoFlags;                  parms.KeyContainerName = Guid.NewGuid().ToString().ToUpperInvariant();                  parms.ProviderType = ((Environment.OSVersion.Version.Major > 5) || ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1))) ? 0x18 : 1;                    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(parms);                  RSAParameters rsAparams = new RSAParameters();                    rsAparams.Modulus = rd.ReadBytes(Helpers.DecodeIntegerSize(rd));                    // Argh' this is a pain.  From emperical testing it appears to be that RSAParameters doesn't like byte buffers that                  // have their leading zeros removed.  The RFC doesn't address this area that I can see' so it's hard to say that this                  // is a bug' but it sure would be helpful if it allowed that. So' there's some extra code here that knows what the                  // sizes of the various components are supposed to be.  Using these sizes we can ensure the buffer sizes are exactly                  // what the RSAParameters expect.  Thanks' Microsoft.                  RSAParameterTraits traits = new RSAParameterTraits(rsAparams.Modulus.Length * 8);                    rsAparams.Modulus = Helpers.AlignBytes(rsAparams.Modulus' traits.size_Mod);                  rsAparams.Exponent = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_Exp);                  rsAparams.D = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_D);                  rsAparams.P = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_P);                  rsAparams.Q = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_Q);                  rsAparams.DP = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_DP);                  rsAparams.DQ = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_DQ);                  rsAparams.InverseQ = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_InvQ);                    rsa.ImportParameters(rsAparams);                  return rsa;              }              catch (Exception)              {                  Debug.Assert(false);                  return null;              }              finally              {                  rd.Close();              }
Magic Number,px4uploader,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,DecodeRsaPrivateKey,The following statement contains a magic number: try              {                  byte byteValue;                  ushort shortValue;                    shortValue = rd.ReadUInt16();                    switch (shortValue)                  {                      case 0x8130:                          // If true' data is little endian since the proper logical seq is 0x30 0x81                          rd.ReadByte(); //advance 1 byte                          break;                      case 0x8230:                          rd.ReadInt16();  //advance 2 bytes                          break;                      default:                          Debug.Assert(false);     // Improper ASN.1 format                          return null;                  }                    shortValue = rd.ReadUInt16();                  if (shortValue != 0x0102) // (version number)                  {                      Debug.Assert(false);     // Improper ASN.1 format' unexpected version number                      return null;                  }                    byteValue = rd.ReadByte();                  if (byteValue != 0x00)                  {                      Debug.Assert(false);     // Improper ASN.1 format                      return null;                  }                    // The data following the version will be the ASN.1 data itself' which in our case                  // are a sequence of integers.                    // In order to solve a problem with instancing RSACryptoServiceProvider                  // via default constructor on .net 4.0 this is a hack                  CspParameters parms = new CspParameters();                  parms.Flags = CspProviderFlags.NoFlags;                  parms.KeyContainerName = Guid.NewGuid().ToString().ToUpperInvariant();                  parms.ProviderType = ((Environment.OSVersion.Version.Major > 5) || ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1))) ? 0x18 : 1;                    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(parms);                  RSAParameters rsAparams = new RSAParameters();                    rsAparams.Modulus = rd.ReadBytes(Helpers.DecodeIntegerSize(rd));                    // Argh' this is a pain.  From emperical testing it appears to be that RSAParameters doesn't like byte buffers that                  // have their leading zeros removed.  The RFC doesn't address this area that I can see' so it's hard to say that this                  // is a bug' but it sure would be helpful if it allowed that. So' there's some extra code here that knows what the                  // sizes of the various components are supposed to be.  Using these sizes we can ensure the buffer sizes are exactly                  // what the RSAParameters expect.  Thanks' Microsoft.                  RSAParameterTraits traits = new RSAParameterTraits(rsAparams.Modulus.Length * 8);                    rsAparams.Modulus = Helpers.AlignBytes(rsAparams.Modulus' traits.size_Mod);                  rsAparams.Exponent = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_Exp);                  rsAparams.D = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_D);                  rsAparams.P = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_P);                  rsAparams.Q = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_Q);                  rsAparams.DP = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_DP);                  rsAparams.DQ = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_DQ);                  rsAparams.InverseQ = Helpers.AlignBytes(rd.ReadBytes(Helpers.DecodeIntegerSize(rd))' traits.size_InvQ);                    rsa.ImportParameters(rsAparams);                  return rsa;              }              catch (Exception)              {                  Debug.Assert(false);                  return null;              }              finally              {                  rd.Close();              }
Magic Number,px4uploader,RSAParameterTraits,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,RSAParameterTraits,The following statement contains a magic number: double logbase = Math.Log(modulusLengthInBits' 2);
Magic Number,px4uploader,RSAParameterTraits,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,RSAParameterTraits,The following statement contains a magic number: if (logbase == (int)logbase)                  {                      // It's already an even power of 2                      assumedLength = modulusLengthInBits;                  }                  else                  {                      // It's not an even power of 2' so round it up to the nearest power of 2.                      assumedLength = (int)(logbase + 1.0);                      assumedLength = (int)(Math.Pow(2' assumedLength));                      System.Diagnostics.Debug.Assert(false);  // Can this really happen in the field?  I've never seen it' so if it happens                      // you should verify that this really does the 'right' thing!                  }
Magic Number,px4uploader,RSAParameterTraits,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,RSAParameterTraits,The following statement contains a magic number: switch (assumedLength)                  {                      case 1024:                          this.size_Mod = 0x80;                          this.size_Exp = -1;                          this.size_D = 0x80;                          this.size_P = 0x40;                          this.size_Q = 0x40;                          this.size_DP = 0x40;                          this.size_DQ = 0x40;                          this.size_InvQ = 0x40;                          break;                      case 2048:                          this.size_Mod = 0x100;                          this.size_Exp = -1;                          this.size_D = 0x100;                          this.size_P = 0x80;                          this.size_Q = 0x80;                          this.size_DP = 0x80;                          this.size_DQ = 0x80;                          this.size_InvQ = 0x80;                          break;                      case 4096:                          this.size_Mod = 0x200;                          this.size_Exp = -1;                          this.size_D = 0x200;                          this.size_P = 0x100;                          this.size_Q = 0x100;                          this.size_DP = 0x100;                          this.size_DQ = 0x100;                          this.size_InvQ = 0x100;                          break;                      default:                          System.Diagnostics.Debug.Assert(false); // Unknown key size?                          break;                  }
Magic Number,px4uploader,RSAParameterTraits,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,RSAParameterTraits,The following statement contains a magic number: switch (assumedLength)                  {                      case 1024:                          this.size_Mod = 0x80;                          this.size_Exp = -1;                          this.size_D = 0x80;                          this.size_P = 0x40;                          this.size_Q = 0x40;                          this.size_DP = 0x40;                          this.size_DQ = 0x40;                          this.size_InvQ = 0x40;                          break;                      case 2048:                          this.size_Mod = 0x100;                          this.size_Exp = -1;                          this.size_D = 0x100;                          this.size_P = 0x80;                          this.size_Q = 0x80;                          this.size_DP = 0x80;                          this.size_DQ = 0x80;                          this.size_InvQ = 0x80;                          break;                      case 4096:                          this.size_Mod = 0x200;                          this.size_Exp = -1;                          this.size_D = 0x200;                          this.size_P = 0x100;                          this.size_Q = 0x100;                          this.size_DP = 0x100;                          this.size_DQ = 0x100;                          this.size_InvQ = 0x100;                          break;                      default:                          System.Diagnostics.Debug.Assert(false); // Unknown key size?                          break;                  }
Magic Number,px4uploader,RSAParameterTraits,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Program.cs,RSAParameterTraits,The following statement contains a magic number: switch (assumedLength)                  {                      case 1024:                          this.size_Mod = 0x80;                          this.size_Exp = -1;                          this.size_D = 0x80;                          this.size_P = 0x40;                          this.size_Q = 0x40;                          this.size_DP = 0x40;                          this.size_DQ = 0x40;                          this.size_InvQ = 0x40;                          break;                      case 2048:                          this.size_Mod = 0x100;                          this.size_Exp = -1;                          this.size_D = 0x100;                          this.size_P = 0x80;                          this.size_Q = 0x80;                          this.size_DP = 0x80;                          this.size_DQ = 0x80;                          this.size_InvQ = 0x80;                          break;                      case 4096:                          this.size_Mod = 0x200;                          this.size_Exp = -1;                          this.size_D = 0x200;                          this.size_P = 0x100;                          this.size_Q = 0x100;                          this.size_DP = 0x100;                          this.size_DQ = 0x100;                          this.size_InvQ = 0x100;                          break;                      default:                          System.Diagnostics.Debug.Assert(false); // Unknown key size?                          break;                  }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,Uploader,The following statement contains a magic number: this.port.ReadTimeout = 50;
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,Uploader,The following statement contains a magic number: this.port.WriteTimeout = 50;
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The following statement contains a magic number: if (board_type == 9) // &&up.bl_rev >= 4              {                  try                  {                      // get the device sn                      byte[] sn = __get_sn();                        string line = "";                        line="SN: ";                      for (int s = 0; s < sn.Length; s += 1)                      {                          line += sn[s].ToString("X2");                      }                      print(line);                        // 20 bytes - sha1                      Array.Resize(ref sn' 20);                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x23' 0x00' 0x30' 0x35' 0x32' 0x47' 0x18' 0x36' 0x34' 0x30' 0x32' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      {                          print("Libre bootloader");                          libre = true;                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x1F' 0x34' 0x32' 0x47' 0x0D' 0x31' 0x32' 0x35' 0x33' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixhawk lite                          // please sign your board via the proper process.                          // nuttx has an auth command. use it.                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x21' 0x31' 0x34' 0x51' 0x17' 0x33' 0x36' 0x38' 0x34' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixfalcon                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        object obj = new otp();                      byte[] test = __read_otp();                        ByteArrayToStructure(test' ref obj);                        otp otp = (otp)obj;                        print("id: " + otp.id_type.ToString("X"));                      print("vid: " + otp.vid.ToString("X"));                      print("pid: " + otp.pid.ToString("X"));                        if (otp.h1 == 'P' &&                          otp.h2 == 'X' &&                          otp.h3 == '4' &&                          otp.h4 == '\0')                      {                          // no vendor checks yet                          byte[] sig = otp.signature;                            line = "";                            for (int s = 0; s < 512; s += 1)                          {                              line += test[s].ToString("X2");                              if (s % 16 == 15)                              {                                  print(line);                                  line = "";                              }                          }                            /*                                                              byte[] PEMbuffer = Convert.FromBase64String(@"");                                                              */                          //   RSACryptoServiceProvider rsa = DecodeRsaPrivateKey(PEMbuffer);                            //   RSAParameters rsapublic = rsa.ExportParameters(false);                            foreach (var cert in certs)                          {                              byte[] pubpem = Convert.FromBase64String(cert.Value);                                AsymmetricKeyParameter asymmetricKeyParameter = PublicKeyFactory.CreateKey(pubpem);                              RsaKeyParameters rsaKeyParameters = (RsaKeyParameters)asymmetricKeyParameter;                              RSAParameters rsaParameters = new RSAParameters();                              rsaParameters.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();                              rsaParameters.Exponent = rsaKeyParameters.Exponent.ToByteArrayUnsigned();                              RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();                              rsa.ImportParameters(rsaParameters);                                bool valid = rsa.VerifyHash(sn' CryptoConfig.MapNameToOID("SHA1")' otp.signature);                                if (valid)                              {                                  print("Valid Key");                                  return true;                              }                          }                            print("Invalid Key");                          throw new InvalidKeyException("Invalid Board");                      }                      else                      {                          print("Failed Header Check");                          throw new FormatException("Failed Header Check");                      }                    }                  catch                   {                      print("Failed to read Certificate of Authenticity");                      throw;                  }              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The following statement contains a magic number: if (board_type == 9) // &&up.bl_rev >= 4              {                  try                  {                      // get the device sn                      byte[] sn = __get_sn();                        string line = "";                        line="SN: ";                      for (int s = 0; s < sn.Length; s += 1)                      {                          line += sn[s].ToString("X2");                      }                      print(line);                        // 20 bytes - sha1                      Array.Resize(ref sn' 20);                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x23' 0x00' 0x30' 0x35' 0x32' 0x47' 0x18' 0x36' 0x34' 0x30' 0x32' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      {                          print("Libre bootloader");                          libre = true;                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x1F' 0x34' 0x32' 0x47' 0x0D' 0x31' 0x32' 0x35' 0x33' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixhawk lite                          // please sign your board via the proper process.                          // nuttx has an auth command. use it.                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x21' 0x31' 0x34' 0x51' 0x17' 0x33' 0x36' 0x38' 0x34' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixfalcon                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        object obj = new otp();                      byte[] test = __read_otp();                        ByteArrayToStructure(test' ref obj);                        otp otp = (otp)obj;                        print("id: " + otp.id_type.ToString("X"));                      print("vid: " + otp.vid.ToString("X"));                      print("pid: " + otp.pid.ToString("X"));                        if (otp.h1 == 'P' &&                          otp.h2 == 'X' &&                          otp.h3 == '4' &&                          otp.h4 == '\0')                      {                          // no vendor checks yet                          byte[] sig = otp.signature;                            line = "";                            for (int s = 0; s < 512; s += 1)                          {                              line += test[s].ToString("X2");                              if (s % 16 == 15)                              {                                  print(line);                                  line = "";                              }                          }                            /*                                                              byte[] PEMbuffer = Convert.FromBase64String(@"");                                                              */                          //   RSACryptoServiceProvider rsa = DecodeRsaPrivateKey(PEMbuffer);                            //   RSAParameters rsapublic = rsa.ExportParameters(false);                            foreach (var cert in certs)                          {                              byte[] pubpem = Convert.FromBase64String(cert.Value);                                AsymmetricKeyParameter asymmetricKeyParameter = PublicKeyFactory.CreateKey(pubpem);                              RsaKeyParameters rsaKeyParameters = (RsaKeyParameters)asymmetricKeyParameter;                              RSAParameters rsaParameters = new RSAParameters();                              rsaParameters.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();                              rsaParameters.Exponent = rsaKeyParameters.Exponent.ToByteArrayUnsigned();                              RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();                              rsa.ImportParameters(rsaParameters);                                bool valid = rsa.VerifyHash(sn' CryptoConfig.MapNameToOID("SHA1")' otp.signature);                                if (valid)                              {                                  print("Valid Key");                                  return true;                              }                          }                            print("Invalid Key");                          throw new InvalidKeyException("Invalid Board");                      }                      else                      {                          print("Failed Header Check");                          throw new FormatException("Failed Header Check");                      }                    }                  catch                   {                      print("Failed to read Certificate of Authenticity");                      throw;                  }              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The following statement contains a magic number: if (board_type == 9) // &&up.bl_rev >= 4              {                  try                  {                      // get the device sn                      byte[] sn = __get_sn();                        string line = "";                        line="SN: ";                      for (int s = 0; s < sn.Length; s += 1)                      {                          line += sn[s].ToString("X2");                      }                      print(line);                        // 20 bytes - sha1                      Array.Resize(ref sn' 20);                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x23' 0x00' 0x30' 0x35' 0x32' 0x47' 0x18' 0x36' 0x34' 0x30' 0x32' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      {                          print("Libre bootloader");                          libre = true;                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x1F' 0x34' 0x32' 0x47' 0x0D' 0x31' 0x32' 0x35' 0x33' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixhawk lite                          // please sign your board via the proper process.                          // nuttx has an auth command. use it.                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x21' 0x31' 0x34' 0x51' 0x17' 0x33' 0x36' 0x38' 0x34' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixfalcon                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        object obj = new otp();                      byte[] test = __read_otp();                        ByteArrayToStructure(test' ref obj);                        otp otp = (otp)obj;                        print("id: " + otp.id_type.ToString("X"));                      print("vid: " + otp.vid.ToString("X"));                      print("pid: " + otp.pid.ToString("X"));                        if (otp.h1 == 'P' &&                          otp.h2 == 'X' &&                          otp.h3 == '4' &&                          otp.h4 == '\0')                      {                          // no vendor checks yet                          byte[] sig = otp.signature;                            line = "";                            for (int s = 0; s < 512; s += 1)                          {                              line += test[s].ToString("X2");                              if (s % 16 == 15)                              {                                  print(line);                                  line = "";                              }                          }                            /*                                                              byte[] PEMbuffer = Convert.FromBase64String(@"");                                                              */                          //   RSACryptoServiceProvider rsa = DecodeRsaPrivateKey(PEMbuffer);                            //   RSAParameters rsapublic = rsa.ExportParameters(false);                            foreach (var cert in certs)                          {                              byte[] pubpem = Convert.FromBase64String(cert.Value);                                AsymmetricKeyParameter asymmetricKeyParameter = PublicKeyFactory.CreateKey(pubpem);                              RsaKeyParameters rsaKeyParameters = (RsaKeyParameters)asymmetricKeyParameter;                              RSAParameters rsaParameters = new RSAParameters();                              rsaParameters.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();                              rsaParameters.Exponent = rsaKeyParameters.Exponent.ToByteArrayUnsigned();                              RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();                              rsa.ImportParameters(rsaParameters);                                bool valid = rsa.VerifyHash(sn' CryptoConfig.MapNameToOID("SHA1")' otp.signature);                                if (valid)                              {                                  print("Valid Key");                                  return true;                              }                          }                            print("Invalid Key");                          throw new InvalidKeyException("Invalid Board");                      }                      else                      {                          print("Failed Header Check");                          throw new FormatException("Failed Header Check");                      }                    }                  catch                   {                      print("Failed to read Certificate of Authenticity");                      throw;                  }              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The following statement contains a magic number: if (board_type == 9) // &&up.bl_rev >= 4              {                  try                  {                      // get the device sn                      byte[] sn = __get_sn();                        string line = "";                        line="SN: ";                      for (int s = 0; s < sn.Length; s += 1)                      {                          line += sn[s].ToString("X2");                      }                      print(line);                        // 20 bytes - sha1                      Array.Resize(ref sn' 20);                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x23' 0x00' 0x30' 0x35' 0x32' 0x47' 0x18' 0x36' 0x34' 0x30' 0x32' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      {                          print("Libre bootloader");                          libre = true;                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x1F' 0x34' 0x32' 0x47' 0x0D' 0x31' 0x32' 0x35' 0x33' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixhawk lite                          // please sign your board via the proper process.                          // nuttx has an auth command. use it.                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x21' 0x31' 0x34' 0x51' 0x17' 0x33' 0x36' 0x38' 0x34' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixfalcon                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        object obj = new otp();                      byte[] test = __read_otp();                        ByteArrayToStructure(test' ref obj);                        otp otp = (otp)obj;                        print("id: " + otp.id_type.ToString("X"));                      print("vid: " + otp.vid.ToString("X"));                      print("pid: " + otp.pid.ToString("X"));                        if (otp.h1 == 'P' &&                          otp.h2 == 'X' &&                          otp.h3 == '4' &&                          otp.h4 == '\0')                      {                          // no vendor checks yet                          byte[] sig = otp.signature;                            line = "";                            for (int s = 0; s < 512; s += 1)                          {                              line += test[s].ToString("X2");                              if (s % 16 == 15)                              {                                  print(line);                                  line = "";                              }                          }                            /*                                                              byte[] PEMbuffer = Convert.FromBase64String(@"");                                                              */                          //   RSACryptoServiceProvider rsa = DecodeRsaPrivateKey(PEMbuffer);                            //   RSAParameters rsapublic = rsa.ExportParameters(false);                            foreach (var cert in certs)                          {                              byte[] pubpem = Convert.FromBase64String(cert.Value);                                AsymmetricKeyParameter asymmetricKeyParameter = PublicKeyFactory.CreateKey(pubpem);                              RsaKeyParameters rsaKeyParameters = (RsaKeyParameters)asymmetricKeyParameter;                              RSAParameters rsaParameters = new RSAParameters();                              rsaParameters.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();                              rsaParameters.Exponent = rsaKeyParameters.Exponent.ToByteArrayUnsigned();                              RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();                              rsa.ImportParameters(rsaParameters);                                bool valid = rsa.VerifyHash(sn' CryptoConfig.MapNameToOID("SHA1")' otp.signature);                                if (valid)                              {                                  print("Valid Key");                                  return true;                              }                          }                            print("Invalid Key");                          throw new InvalidKeyException("Invalid Board");                      }                      else                      {                          print("Failed Header Check");                          throw new FormatException("Failed Header Check");                      }                    }                  catch                   {                      print("Failed to read Certificate of Authenticity");                      throw;                  }              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,verifyotp,The following statement contains a magic number: if (board_type == 9) // &&up.bl_rev >= 4              {                  try                  {                      // get the device sn                      byte[] sn = __get_sn();                        string line = "";                        line="SN: ";                      for (int s = 0; s < sn.Length; s += 1)                      {                          line += sn[s].ToString("X2");                      }                      print(line);                        // 20 bytes - sha1                      Array.Resize(ref sn' 20);                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x23' 0x00' 0x30' 0x35' 0x32' 0x47' 0x18' 0x36' 0x34' 0x30' 0x32' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      {                          print("Libre bootloader");                          libre = true;                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x1F' 0x34' 0x32' 0x47' 0x0D' 0x31' 0x32' 0x35' 0x33' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixhawk lite                          // please sign your board via the proper process.                          // nuttx has an auth command. use it.                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        if (ByteArrayCompare(sn' new byte[] { 0x00' 0x38' 0x00' 0x21' 0x31' 0x34' 0x51' 0x17' 0x33' 0x36' 0x38' 0x34' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 }))                      { // pixfalcon                          print("Forged Key");                          throw new InvalidKeyException("Invalid Board");                      }                        object obj = new otp();                      byte[] test = __read_otp();                        ByteArrayToStructure(test' ref obj);                        otp otp = (otp)obj;                        print("id: " + otp.id_type.ToString("X"));                      print("vid: " + otp.vid.ToString("X"));                      print("pid: " + otp.pid.ToString("X"));                        if (otp.h1 == 'P' &&                          otp.h2 == 'X' &&                          otp.h3 == '4' &&                          otp.h4 == '\0')                      {                          // no vendor checks yet                          byte[] sig = otp.signature;                            line = "";                            for (int s = 0; s < 512; s += 1)                          {                              line += test[s].ToString("X2");                              if (s % 16 == 15)                              {                                  print(line);                                  line = "";                              }                          }                            /*                                                              byte[] PEMbuffer = Convert.FromBase64String(@"");                                                              */                          //   RSACryptoServiceProvider rsa = DecodeRsaPrivateKey(PEMbuffer);                            //   RSAParameters rsapublic = rsa.ExportParameters(false);                            foreach (var cert in certs)                          {                              byte[] pubpem = Convert.FromBase64String(cert.Value);                                AsymmetricKeyParameter asymmetricKeyParameter = PublicKeyFactory.CreateKey(pubpem);                              RsaKeyParameters rsaKeyParameters = (RsaKeyParameters)asymmetricKeyParameter;                              RSAParameters rsaParameters = new RSAParameters();                              rsaParameters.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();                              rsaParameters.Exponent = rsaKeyParameters.Exponent.ToByteArrayUnsigned();                              RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();                              rsa.ImportParameters(rsaParameters);                                bool valid = rsa.VerifyHash(sn' CryptoConfig.MapNameToOID("SHA1")' otp.signature);                                if (valid)                              {                                  print("Valid Key");                                  return true;                              }                          }                            print("Invalid Key");                          throw new InvalidKeyException("Invalid Board");                      }                      else                      {                          print("Failed Header Check");                          throw new FormatException("Failed Header Check");                      }                    }                  catch                   {                      print("Failed to read Certificate of Authenticity");                      throw;                  }              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__read_otp,The following statement contains a magic number: byte[] otp = new byte[512];
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__read_otp,The following statement contains a magic number: while (addr < 512)              {                  __send(new byte[] { (byte)Code.GET_OTP });                  __send(BitConverter.GetBytes(addr));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Copy(ans' 0' otp' addr' 4);                  addr += 4;              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__read_otp,The following statement contains a magic number: while (addr < 512)              {                  __send(new byte[] { (byte)Code.GET_OTP });                  __send(BitConverter.GetBytes(addr));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Copy(ans' 0' otp' addr' 4);                  addr += 4;              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__read_otp,The following statement contains a magic number: while (addr < 512)              {                  __send(new byte[] { (byte)Code.GET_OTP });                  __send(BitConverter.GetBytes(addr));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Copy(ans' 0' otp' addr' 4);                  addr += 4;              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__read_otp,The following statement contains a magic number: while (addr < 512)              {                  __send(new byte[] { (byte)Code.GET_OTP });                  __send(BitConverter.GetBytes(addr));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Copy(ans' 0' otp' addr' 4);                  addr += 4;              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__get_sn,The following statement contains a magic number: byte[] sn = new byte[3*4];
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__get_sn,The following statement contains a magic number: byte[] sn = new byte[3*4];
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__get_sn,The following statement contains a magic number: for (int a = 0; a < 12; a+=4)              {                  __send(new byte[] { (byte)Code.GET_SN });                  __send(BitConverter.GetBytes(a));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Reverse(ans);                  Array.Copy(ans' 0' sn' a' 4);              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__get_sn,The following statement contains a magic number: for (int a = 0; a < 12; a+=4)              {                  __send(new byte[] { (byte)Code.GET_SN });                  __send(BitConverter.GetBytes(a));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Reverse(ans);                  Array.Copy(ans' 0' sn' a' 4);              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__get_sn,The following statement contains a magic number: for (int a = 0; a < 12; a+=4)              {                  __send(new byte[] { (byte)Code.GET_SN });                  __send(BitConverter.GetBytes(a));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Reverse(ans);                  Array.Copy(ans' 0' sn' a' 4);              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__get_sn,The following statement contains a magic number: for (int a = 0; a < 12; a+=4)              {                  __send(new byte[] { (byte)Code.GET_SN });                  __send(BitConverter.GetBytes(a));                  __send(new byte[] { (byte)Code.EOC });                  byte[] ans = __recv(4);                  __getSync();                  Array.Reverse(ans);                  Array.Copy(ans' 0' sn' a' 4);              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__recv_int,The following statement contains a magic number: byte[] raw = __recv(4);
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__erase,The following statement contains a magic number: DateTime deadline = DateTime.Now.AddSeconds(20);
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__erase,The following statement contains a magic number: while (DateTime.Now < deadline)              {                  System.Threading.Thread.Sleep(100);                  if (port.BytesToRead > 0)                  {                      Console.WriteLine("__erase btr "+ port.BytesToRead);                      break;                  }              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__program,The following statement contains a magic number: foreach (Byte[] bytes in groups)              {                  self.__program_multi(bytes);                    Console.WriteLine("Program {0}/{1}"'a' groups.Count);                    a++;                  if (ProgressEvent != null)                      ProgressEvent((a / (float)groups.Count) * 100.0);              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,__verify_v2,The following statement contains a magic number: foreach (byte[] bytes in groups)              {                  if (!self.__verify_multi(bytes))                  {                      throw new Exception("Verification failed");                  }                    Console.WriteLine("Verify {0}/{1}"' a' groups.Count);                    a++;                  if (ProgressEvent != null)                      ProgressEvent((a / (float)groups.Count) * 100.0);              }
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,currentChecksum,The following statement contains a magic number: if (self.bl_rev < 3)                  return;
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,currentChecksum,The following statement contains a magic number: this.port.ReadTimeout = 1000;
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,identify,The following statement contains a magic number: port.WriteTimeout = 500;
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,upload,The following statement contains a magic number: this.port.ReadTimeout = 1000;
Magic Number,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,upload,The following statement contains a magic number: if (self.bl_rev == 2)                  self.__verify_v2(fw);              else                  self.__verify_v3(fw);
Missing Default,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead())              {                  case Token.Number:                      return ParseNumber();                    case Token.String:                      return ParseString();                    case Token.Curly_Open:                      return ParseObject();                    case Token.Squared_Open:                      return ParseArray();                    case Token.True:                      ConsumeToken();                      return true;                    case Token.False:                      ConsumeToken();                      return false;                    case Token.Null:                      ConsumeToken();                      return null;              }
Missing Default,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,ParseString,The following switch statement is missing a default case: switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }
Missing Default,fastJSON,JsonParser,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\FastJSON\JsonParser.cs,NextTokenCore,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Missing Default,px4uploader,Uploader,C:\repos\diydrones_MissionPlanner\ExtLibs\px4uploader\Uploader.cs,readcerts,The following switch statement is missing a default case: switch (xmlreader2.Name)                              {                                  case "VENDOR":                                      vendor = xmlreader2.ReadString();                                      break;                                  case "PUBLICKEY":                                      publickey = xmlreader2.ReadString();                                      break;                              }
