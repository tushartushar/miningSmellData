Implementation smell,Namespace,Class,File,Method,Description
Long Method,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The method has 173 lines of code.
Long Method,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,OrderComponents,The method has 218 lines of code.
Long Method,AssortedWidgets.Layouts,GirdLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\GirdLayout.cs,UpdateLayout,The method has 138 lines of code.
Long Method,AssortedWidgets,UI,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\UI.cs,ImportMouseMotion,The method has 105 lines of code.
Complex Method,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,Cyclomatic complexity of the method is 11
Complex Method,AssortedWidgets.Layouts,GirdLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\GirdLayout.cs,UpdateLayout,Cyclomatic complexity of the method is 24
Complex Method,AssortedWidgets,UI,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\UI.cs,ImportMouseMotion,Cyclomatic complexity of the method is 12
Complex Method,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,OnMouseMove,Cyclomatic complexity of the method is 9
Long Parameter List,AssortedWidgets.Events,MouseEvent,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Events\MouseEvent.cs,MouseEvent,The method has 5 parameters. Parameters: source' type' x' y' mouseButton
Long Parameter List,AssortedWidgets.Graphics,SubImage,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\SubImage.cs,SubImage,The method has 5 parameters. Parameters: upLeftX' upLeftY' bottomRightX' bottomRightY' textureID
Long Parameter List,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,BorderLayout,The method has 5 parameters. Parameters: top' bottom' left' right' spacer
Long Parameter List,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,OrderComponents,The method has 6 parameters. Parameters: list' HAlignment' VAlignment' format' origin' area
Long Parameter List,AssortedWidgets.Layouts,FlowLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\FlowLayout.cs,FlowLayout,The method has 5 parameters. Parameters: top' bottom' left' right' spacer
Long Parameter List,AssortedWidgets.Layouts,Layout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\Layout.cs,Layout,The method has 5 parameters. Parameters: top' bottom' left' right' spacer
Long Parameter List,AssortedWidgets.Widgets,AbstractButton,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\buttons.cs,AbstractButton,The method has 5 parameters. Parameters: top' bottom' left' right' status
Long Parameter List,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The method has 5 parameters. Parameters: title' x' y' width' height
Long Statement,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The length of the statement  "                throw new ArgumentOutOfRangeException("_TextValue"' _TextValue.Length' "Text length must be between 1 and 8192 characters"); " is 124.
Long Statement,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The length of the statement  "            heightAvailable = Math.Max(heightAvailable' Math.Max(Math.Max(westHeight' eastHeight)' centerHeight) + northHeight + southHeight); " is 130.
Long Statement,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The length of the statement  "            westHeight = centerHeight = eastHeight = Math.Max(Math.Max(westHeight' eastHeight)' Math.Max(centerHeight' averageHeight)); " is 123.
Long Statement,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The length of the statement  "            widthAvailable = Math.Max(widthAvailable' Math.Max(westWidth + eastWidth + centerWidth + Spacer + Spacer' Math.Max(northWidth' southWidth))); " is 141.
Long Statement,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The length of the statement  "            Position southPosition = new Position((int)(origin.X + Left)' (int)(origin.Y + Top + Spacer + centerHeight + Spacer + northHeight)); " is 132.
Long Statement,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The length of the statement  "            Position eastPosition = new Position((int)(origin.X + Left + westWidth + Spacer + centerWidth + Spacer)' (int)(origin.Y + Top + northHeight + Spacer)); " is 151.
Long Statement,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The length of the statement  "            Position centerPosition = new Position((int)(origin.X + Left + Spacer + westWidth)' (int)(origin.Y + Spacer + northHeight + Top)); " is 130.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Setup,The length of the statement  "            scrollBarVerticalBottomHover = new SubImage(113.0f / dtt' 101.0f / dtt' 128.0f / dtt' 116.0f / dtt' (uint)tex2d.TextureId); " is 123.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Setup,The length of the statement  "            scrollBarVerticalBottomNormal = new SubImage(33.0f / dtt' 122.0f / dtt' 48.0f / dtt' 137.0f / dtt' (uint)tex2d.TextureId); " is 122.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBarSlider,The length of the statement  "            GL.Vertex2(origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height); " is 124.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 164.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 211.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11); " is 226.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 163.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 210.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11); " is 226.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 164.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 211.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The length of the statement  "                        checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11); " is 226.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The length of the statement  "                        GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height); " is 124.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The length of the statement  "                            menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14); " is 224.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The length of the statement  "                            menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14); " is 224.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The length of the statement  "                        GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height); " is 124.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The length of the statement  "                            menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14); " is 224.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The length of the statement  "                            menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14); " is 224.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialogTittleBar,The length of the statement  "            GL.Vertex2(origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height); " is 124.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The length of the statement  "                dialogUpRightActive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16); " is 124.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The length of the statement  "                dialogUpRightDeactive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16); " is 126.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The length of the statement  "                        buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 164.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The length of the statement  "                        buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 211.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The length of the statement  "                        buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 163.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The length of the statement  "                        buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 210.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The length of the statement  "                        buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 164.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The length of the statement  "                        buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 211.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintLabel,The length of the statement  "                GL.Vertex2(origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height); " is 124.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 164.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 211.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11); " is 226.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 163.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 210.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11); " is 226.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19); " is 164.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19); " is 211.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The length of the statement  "                        checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11); " is 226.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintScrollPanel,The length of the statement  "            GL.Vertex2(origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height); " is 124.
Long Statement,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,ScissorBegin,The length of the statement  "            GL.Scissor((int)(origin.X + Position.X)' (int)(UI.Instance.CurrentTheme.ScreenHeight - origin.Y - area.height - Position.Y)' (int)area.width' (int)area.height); " is 160.
Long Statement,AssortedWidgets,UI,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\UI.cs,Init,The length of the statement  "            menuItemProgressNSliderTest.MousePressedEvent += new MousePressedHandler(menuItemProgressNSliderTest_MousePressedEvent); " is 120.
Complex Conditional,AssortedWidgets.Managers,DropListManager,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Managers\DropListManager.cs,IsIn,The conditional expression  "(mx > position.X && mx < position.X + size.width) && (my > position.Y && my < position.Y + size.height)"  is complex.
Magic Number,AssortedWidgets.Graphics,TColor,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\TColor.cs,TColor,The following statement contains a magic number: this.R = pTColor.R / 255;
Magic Number,AssortedWidgets.Graphics,TColor,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\TColor.cs,TColor,The following statement contains a magic number: this.G = pTColor.G / 255;
Magic Number,AssortedWidgets.Graphics,TColor,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\TColor.cs,TColor,The following statement contains a magic number: this.B = pTColor.B / 255;
Magic Number,AssortedWidgets.Graphics,TColor,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\TColor.cs,TColor,The following statement contains a magic number: this.A = pTColor.A / 255;
Magic Number,AssortedWidgets.Graphics,TColor,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\TColor.cs,TColor,The following statement contains a magic number: this.B = vals[2];
Magic Number,AssortedWidgets.Graphics,TColor,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\TColor.cs,TColor,The following statement contains a magic number: this.A = vals[3];
Magic Number,AssortedWidgets.Graphics,Mesh,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\Mesh.cs,Render,The following statement contains a magic number: if (setStreams)              {                  if (PositionStream_ != null)                  {                      GL.EnableClientState(ArrayCap.VertexArray);                      GL.VertexPointer(3' VertexPointerType.Float' 0' PositionStream_.Data);                  }                  if (texCoordStream_ != null)                  {                      GL.EnableClientState(ArrayCap.TextureCoordArray);                      GL.TexCoordPointer(2' TexCoordPointerType.Float' 0' texCoordStream_.Data);                  }                  if (colorStream_ != null)                  {                      GL.EnableClientState(ArrayCap.ColorArray);                      GL.ColorPointer(3' ColorPointerType.Float' 0' colorStream_.Data);                  }                  if (normalStream_ != null)                  {                      GL.EnableClientState(ArrayCap.NormalArray);                      GL.NormalPointer(NormalPointerType.Float' 0' normalStream_.Data);                  }              }
Magic Number,AssortedWidgets.Graphics,Mesh,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\Mesh.cs,Render,The following statement contains a magic number: if (setStreams)              {                  if (PositionStream_ != null)                  {                      GL.EnableClientState(ArrayCap.VertexArray);                      GL.VertexPointer(3' VertexPointerType.Float' 0' PositionStream_.Data);                  }                  if (texCoordStream_ != null)                  {                      GL.EnableClientState(ArrayCap.TextureCoordArray);                      GL.TexCoordPointer(2' TexCoordPointerType.Float' 0' texCoordStream_.Data);                  }                  if (colorStream_ != null)                  {                      GL.EnableClientState(ArrayCap.ColorArray);                      GL.ColorPointer(3' ColorPointerType.Float' 0' colorStream_.Data);                  }                  if (normalStream_ != null)                  {                      GL.EnableClientState(ArrayCap.NormalArray);                      GL.NormalPointer(NormalPointerType.Float' 0' normalStream_.Data);                  }              }
Magic Number,AssortedWidgets.Graphics,Mesh,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\Mesh.cs,Render,The following statement contains a magic number: if (setStreams)              {                  if (PositionStream_ != null)                  {                      GL.EnableClientState(ArrayCap.VertexArray);                      GL.VertexPointer(3' VertexPointerType.Float' 0' PositionStream_.Data);                  }                  if (texCoordStream_ != null)                  {                      GL.EnableClientState(ArrayCap.TextureCoordArray);                      GL.TexCoordPointer(2' TexCoordPointerType.Float' 0' texCoordStream_.Data);                  }                  if (colorStream_ != null)                  {                      GL.EnableClientState(ArrayCap.ColorArray);                      GL.ColorPointer(3' ColorPointerType.Float' 0' colorStream_.Data);                  }                  if (normalStream_ != null)                  {                      GL.EnableClientState(ArrayCap.NormalArray);                      GL.NormalPointer(NormalPointerType.Float' 0' normalStream_.Data);                  }              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,VectorStream,The following statement contains a magic number: if (vt is Vector2f)                  this._data = new float[this.NumVertices * 2];
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,VectorStream,The following statement contains a magic number: if (vt is Vector3f)                  this._data = new float[this.NumVertices * 3];
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,VectorStream,The following statement contains a magic number: if (vt is Vector4f)                  this._data = new float[this.NumVertices * 4];
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,VectorStream,The following statement contains a magic number: if (vt is TColor)                  this._data = new float[this.NumVertices * 4];
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,VectorStream<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\VectorStream.cs,Write,The following statement contains a magic number: try              {                  if (valor is Vector2f)                  {                      int floatindex = CurrentOffset_ * 2;                      Vector2f v = (Vector2f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                  }                  if (valor is Vector3f)                  {                      int floatindex = CurrentOffset_ * 3;                      Vector3f v = (Vector3f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                  }                  if (valor is Vector4f)                  {                      int floatindex = CurrentOffset_ * 4;                      Vector4f v = (Vector4f)data;                      this._data[floatindex] = v.X;                      this._data[floatindex + 1] = v.Y;                      this._data[floatindex + 2] = v.Z;                      this._data[floatindex + 3] = v.W;                  }                  if (valor is TColor)                  {                      int floatindex = CurrentOffset_ * 4;                      TColor v = (TColor)data;                      this._data[floatindex] = v.R;                      this._data[floatindex + 1] = v.G;                      this._data[floatindex + 2] = v.B;                      this._data[floatindex + 3] = v.A;                  }                  CurrentOffset_++;              }              catch (Exception e)              {                  if (e is IndexOutOfRangeException)                      throw new IndexOutOfRangeException();              }
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,TextFontTexture,The following statement contains a magic number: if (pFont.Size > 48)                  throw new ArgumentException("El tamaño de la textura no puede ser superior a 48.");
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,drawCharacters,The following statement contains a magic number: int Size = (int)((_Font.Size + 2) * dim);
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,drawCharacters,The following statement contains a magic number: Size = (int)System.Math.Pow(2.0' System.Math.Ceiling(System.Math.Log((double)Size' 2.0)));
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,drawCharacters,The following statement contains a magic number: Size = (int)System.Math.Pow(2.0' System.Math.Ceiling(System.Math.Log((double)Size' 2.0)));
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,drawCharacters,The following statement contains a magic number: if (Size > 1024)                  Size = 1024;
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,drawCharacters,The following statement contains a magic number: if (Size > 1024)                  Size = 1024;
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,drawCharacters,The following statement contains a magic number: foreach (char c in pStr)              {                  if (xcont >= dim)                  {                      xcont = 0;                      ycont += 2;                  }                  xOrigen = xcont * cellDim;                  yOrigen = ycont * cellDim;                    xCoordTex = (float)xOrigen / TextureDim_;                  yCoordTex = (float)yOrigen / TextureDim_;                    MeasureString(c' out auxWidth' out auxHeight);                  Glyphs[(int)c] = new Glyph(xCoordTex' 1 - yCoordTex' auxWidth);                  gfx.DrawString(c.ToString()' _Font' System.Drawing.Brushes.White' xOrigen' yOrigen);                  xcont++;              }
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,TextFilter,The following statement contains a magic number: for (int cont = 0; cont < pText.Length; cont++)              {                  c = pText[cont];                  if ((int)c > 255)                  {                      pText = pText.Remove(cont' 1);                      if (cont > 0)                          cont--;                  }              }
Magic Number,AssortedWidgets.Graphics,TextFontTexture,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Graphics\textures.cs,MeasureString,The following statement contains a magic number: System.Drawing.SizeF Size = gfx.MeasureString(str' _Font' 16384' format);
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,Text,The following statement contains a magic number: numVertices = maxChars * 4;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (_TextValue.Length > 8192)                  throw new ArgumentOutOfRangeException("_TextValue"' _TextValue.Length' "Text length must be between 1 and 8192 characters");
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (_TextValue.Length > defMaxChars)                  PositionStream_.VariableVertices = defMaxChars * 4;              else                  PositionStream_.VariableVertices = _TextValue.Length * 4;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (_TextValue.Length > defMaxChars)                  PositionStream_.VariableVertices = defMaxChars * 4;              else                  PositionStream_.VariableVertices = _TextValue.Length * 4;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (texFont.Font.Size >= 32)                  adjust = 20;              else                  if (texFont.Font.Size >= 10)                      adjust = 6;                  else                      adjust = 2;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (texFont.Font.Size >= 32)                  adjust = 20;              else                  if (texFont.Font.Size >= 10)                      adjust = 6;                  else                      adjust = 2;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (texFont.Font.Size >= 32)                  adjust = 20;              else                  if (texFont.Font.Size >= 10)                      adjust = 6;                  else                      adjust = 2;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (texFont.Font.Size >= 32)                  adjust = 20;              else                  if (texFont.Font.Size >= 10)                      adjust = 6;                  else                      adjust = 2;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,PerformLayout,The following statement contains a magic number: if (texFont.Font.Size >= 32)                  adjust = 20;              else                  if (texFont.Font.Size >= 10)                      adjust = 6;                  else                      adjust = 2;
Magic Number,AssortedWidgets.GLFont,Text,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\GLFont\Text.cs,Render,The following statement contains a magic number: GL.Translate(2.5f' 2' 0);
Magic Number,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The following statement contains a magic number: List<Component> north = new List<Component>(20);
Magic Number,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The following statement contains a magic number: List<Component> south = new List<Component>(20);
Magic Number,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The following statement contains a magic number: List<Component> west = new List<Component>(20);
Magic Number,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The following statement contains a magic number: List<Component> east = new List<Component>(20);
Magic Number,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The following statement contains a magic number: List<Component> center = new List<Component>(20);
Magic Number,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,OrderComponents,The following statement contains a magic number: if (list.Count > 0)              {                  if (format == EFormat.Horizontal)                  {                      switch (HAlignment)                      {                          case EHorizontalAlignment.HLeft:                              {                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                  uint averageWidth = 0;                                  if (strechSegment > 0)                                  {                                      averageWidth = (uint)(widthAvailable / strechSegment);                                  }                                    int tempX = origin.X;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).HorizontalStyle == EElementStyle.Fit)                                      {                                          comp.Position.X = tempX;                                          comp.Size.width = perfectSize.width;                                          tempX += (int)(Spacer + perfectSize.width);                                      }                                      else if (((IElement)comp).HorizontalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.X = tempX;                                          comp.Size.width = averageWidth;                                          tempX += (int)(Spacer + averageWidth);                                      }                                  }                                  break;                              }                          case EHorizontalAlignment.HRight:                              {                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                  uint averageWidth = 0;                                  if (strechSegment > 0)                                  {                                      averageWidth = (uint)(widthAvailable / strechSegment);                                  }                                    int tempX = (int)(origin.X + area.width);                                    for (int i = list.Count - 1; i >= 0; --i)                                  {                                      Component iter = list[i];                                      Size perfectSize = iter.GetPreferedSize();                                      if (((IElement)iter).HorizontalStyle == EElementStyle.Fit)                                      {                                          tempX -= (int)perfectSize.width;                                          iter.Position.X = tempX;                                          iter.Size.width = perfectSize.width;                                          tempX -= (int)Spacer;                                      }                                      else if (((IElement)iter).HorizontalStyle == EElementStyle.Stretch)                                      {                                          tempX -= (int)averageWidth;                                          iter.Position.X = tempX;                                          iter.Size.width = averageWidth;                                          tempX -= (int)Spacer;                                      }                                  }                                  break;                              }                          case EHorizontalAlignment.HCenter:                              {                                  bool isStretch = false;                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                          isStretch = true;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    if (isStretch)                                  {                                      uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                      uint averageWidth = (uint)(widthAvailable / strechSegment);                                      int tempX = origin.X;                                        for (int iter = 0; iter < list.Count - 1; ++iter)                                      {                                          Component comp = list[iter];                                            Size perfectSize = comp.GetPreferedSize();                                          if (((IElement)comp).HorizontalStyle == EElementStyle.Fit)                                          {                                              comp.Position.X = tempX;                                              comp.Size.width = perfectSize.width;                                              tempX += (int)(Spacer + perfectSize.width);                                          }                                          else if (((IElement)comp).HorizontalStyle == EElementStyle.Stretch)                                          {                                              comp.Position.X = tempX;                                              comp.Size.width = averageWidth;                                              tempX += (int)(Spacer + averageWidth);                                          }                                      }                                  }                                  else                                  {                                      widthTakenUp += (uint)(Spacer * (list.Count - 1));                                      int tempX = (int)(origin.X + area.width * 0.5f - widthTakenUp * 0.5f);                                        foreach (Component comp in list)                                      {                                          Size perfectSize = comp.GetPreferedSize();                                          comp.Position.X = tempX;                                          comp.Size.width = perfectSize.width;                                          tempX += (int)(Spacer + perfectSize.width);                                      }                                  }                                  break;                              }                      }                        switch (VAlignment)                      {                          case EVerticalAlignment.VTop:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                          case EVerticalAlignment.VBottom:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = (int)(tempY + area.height - perfectSize.height);                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                          case EVerticalAlignment.VCenter:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = (int)(tempY + area.height * 0.5 - perfectSize.height * 0.5);                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                      }                  }                  else if (format == EFormat.Vertical)                  {                    }                    foreach (Component ele in list)                  {                      ele.Pack();                  }              }
Magic Number,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,OrderComponents,The following statement contains a magic number: if (list.Count > 0)              {                  if (format == EFormat.Horizontal)                  {                      switch (HAlignment)                      {                          case EHorizontalAlignment.HLeft:                              {                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                  uint averageWidth = 0;                                  if (strechSegment > 0)                                  {                                      averageWidth = (uint)(widthAvailable / strechSegment);                                  }                                    int tempX = origin.X;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).HorizontalStyle == EElementStyle.Fit)                                      {                                          comp.Position.X = tempX;                                          comp.Size.width = perfectSize.width;                                          tempX += (int)(Spacer + perfectSize.width);                                      }                                      else if (((IElement)comp).HorizontalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.X = tempX;                                          comp.Size.width = averageWidth;                                          tempX += (int)(Spacer + averageWidth);                                      }                                  }                                  break;                              }                          case EHorizontalAlignment.HRight:                              {                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                  uint averageWidth = 0;                                  if (strechSegment > 0)                                  {                                      averageWidth = (uint)(widthAvailable / strechSegment);                                  }                                    int tempX = (int)(origin.X + area.width);                                    for (int i = list.Count - 1; i >= 0; --i)                                  {                                      Component iter = list[i];                                      Size perfectSize = iter.GetPreferedSize();                                      if (((IElement)iter).HorizontalStyle == EElementStyle.Fit)                                      {                                          tempX -= (int)perfectSize.width;                                          iter.Position.X = tempX;                                          iter.Size.width = perfectSize.width;                                          tempX -= (int)Spacer;                                      }                                      else if (((IElement)iter).HorizontalStyle == EElementStyle.Stretch)                                      {                                          tempX -= (int)averageWidth;                                          iter.Position.X = tempX;                                          iter.Size.width = averageWidth;                                          tempX -= (int)Spacer;                                      }                                  }                                  break;                              }                          case EHorizontalAlignment.HCenter:                              {                                  bool isStretch = false;                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                          isStretch = true;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    if (isStretch)                                  {                                      uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                      uint averageWidth = (uint)(widthAvailable / strechSegment);                                      int tempX = origin.X;                                        for (int iter = 0; iter < list.Count - 1; ++iter)                                      {                                          Component comp = list[iter];                                            Size perfectSize = comp.GetPreferedSize();                                          if (((IElement)comp).HorizontalStyle == EElementStyle.Fit)                                          {                                              comp.Position.X = tempX;                                              comp.Size.width = perfectSize.width;                                              tempX += (int)(Spacer + perfectSize.width);                                          }                                          else if (((IElement)comp).HorizontalStyle == EElementStyle.Stretch)                                          {                                              comp.Position.X = tempX;                                              comp.Size.width = averageWidth;                                              tempX += (int)(Spacer + averageWidth);                                          }                                      }                                  }                                  else                                  {                                      widthTakenUp += (uint)(Spacer * (list.Count - 1));                                      int tempX = (int)(origin.X + area.width * 0.5f - widthTakenUp * 0.5f);                                        foreach (Component comp in list)                                      {                                          Size perfectSize = comp.GetPreferedSize();                                          comp.Position.X = tempX;                                          comp.Size.width = perfectSize.width;                                          tempX += (int)(Spacer + perfectSize.width);                                      }                                  }                                  break;                              }                      }                        switch (VAlignment)                      {                          case EVerticalAlignment.VTop:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                          case EVerticalAlignment.VBottom:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = (int)(tempY + area.height - perfectSize.height);                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                          case EVerticalAlignment.VCenter:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = (int)(tempY + area.height * 0.5 - perfectSize.height * 0.5);                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                      }                  }                  else if (format == EFormat.Vertical)                  {                    }                    foreach (Component ele in list)                  {                      ele.Pack();                  }              }
Magic Number,AssortedWidgets.Layouts,FlowLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\FlowLayout.cs,GetPreferedSize,The following statement contains a magic number: return new Size(10 + Left + Right' 10 + Top + Bottom);
Magic Number,AssortedWidgets.Layouts,FlowLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\FlowLayout.cs,GetPreferedSize,The following statement contains a magic number: return new Size(10 + Left + Right' 10 + Top + Bottom);
Magic Number,AssortedWidgets.Layouts,Layout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\Layout.cs,Layout,The following statement contains a magic number: Spacer = 2;
Magic Number,AssortedWidgets.Managers,DropListManager,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Managers\DropListManager.cs,SetDropped,The following statement contains a magic number: position.Y = currentY - ry + 22;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[02] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[03] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[04] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[05] = 1;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[06] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[07] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[08] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[09] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[10] = 1;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[11] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[12] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[13] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[14] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetIdentity,The following statement contains a magic number: values[15] = 1;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[02] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[03] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[04] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[05] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[06] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[07] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[08] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[09] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[10] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[11] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[12] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[13] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[14] = 0;
Magic Number,AssortedWidgets.Math3D,Matrix4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Matrix4f.cs,SetZero,The following statement contains a magic number: values[15] = 0;
Magic Number,AssortedWidgets.Math3D,Vector3f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Vector3f.cs,Vector3f,The following statement contains a magic number: values[2] = z;
Magic Number,AssortedWidgets.Math3D,Vector4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Vector4f.cs,Vector4f,The following statement contains a magic number: values[2] = z;
Magic Number,AssortedWidgets.Math3D,Vector4f,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Math3D\Vector4f.cs,Vector4f,The following statement contains a magic number: values[3] = w;
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout = new GirdLayout(4' 2);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout = new GirdLayout(4' 2);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(2' 0' EHAlignment.HCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(3' 0' EHAlignment.HCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(2' 1' EHAlignment.HCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(3' 1' EHAlignment.HCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetVerticalAlignment(2' 0' EVAlignment.VCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetVerticalAlignment(3' 0' EVAlignment.VCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetVerticalAlignment(2' 1' EVAlignment.VCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.SetVerticalAlignment(3' 1' EVAlignment.VCenter);
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.Right = 16;
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.Left = 16;
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.Top = 8;
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.Bottom = 8;
Magic Number,AssortedWidgets.Test,CheckNRadioTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\CheckNRadioTestDialog.cs,CheckNRadioTestDialog,The following statement contains a magic number: girdLayout.Spacer = 4;
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout = new GirdLayout(4' 1);
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(2' 0' EHAlignment.HCenter);
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(3' 0' EHAlignment.HRight);
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout.Right = 16;
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout.Left = 16;
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout.Top = 8;
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout.Bottom = 8;
Magic Number,AssortedWidgets.Test,DialogTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\DialogTestDialog.cs,DialogTestDialog,The following statement contains a magic number: girdLayout.Spacer = 4;
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: girdLayout=new GirdLayout(1'2);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: girdLayout.Right = 16;
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: girdLayout.Left = 16;
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: girdLayout.Top = 8;
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: girdLayout.Bottom = 8;
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: girdLayout.Spacer = 4;
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: flowLayout=new FlowLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: flowLayout=new FlowLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: flowLayout=new FlowLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: flowLayout=new FlowLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: flowLayout=new FlowLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: borderLayout=new BorderLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: borderLayout=new BorderLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: borderLayout=new BorderLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: borderLayout=new BorderLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,MultipleLayoutTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\MultipleLayoutTestDialog.cs,MultipleLayoutTestDialog,The following statement contains a magic number: borderLayout=new BorderLayout(2'2'2'2'4);
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout = new GirdLayout(4' 1);
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(2' 0' EHAlignment.HCenter);
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(3' 0' EHAlignment.HRight);
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout.Right = 16;
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout.Left = 16;
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout.Top = 8;
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout.Bottom = 8;
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,ProgressNSliderTestDialog,The following statement contains a magic number: girdLayout.Spacer = 4;
Magic Number,AssortedWidgets.Test,ProgressNSliderTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ProgressNSliderTestDialog.cs,Slider_DragMovedEvent,The following statement contains a magic number: String t = "Value: " + Math.Round(horizontalSBar.Value' 2) + "%";
Magic Number,AssortedWidgets.Test,ScrollPanelTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ScrollPanelTestDialog.cs,ScrollPanelTestDialog,The following statement contains a magic number: girdLayout=new GirdLayout(2'1);
Magic Number,AssortedWidgets.Test,ScrollPanelTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ScrollPanelTestDialog.cs,ScrollPanelTestDialog,The following statement contains a magic number: girdLayout.Right = 16;
Magic Number,AssortedWidgets.Test,ScrollPanelTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ScrollPanelTestDialog.cs,ScrollPanelTestDialog,The following statement contains a magic number: girdLayout.Left = 16;
Magic Number,AssortedWidgets.Test,ScrollPanelTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ScrollPanelTestDialog.cs,ScrollPanelTestDialog,The following statement contains a magic number: girdLayout.Top = 8;
Magic Number,AssortedWidgets.Test,ScrollPanelTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ScrollPanelTestDialog.cs,ScrollPanelTestDialog,The following statement contains a magic number: girdLayout.Bottom = 8;
Magic Number,AssortedWidgets.Test,ScrollPanelTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\ScrollPanelTestDialog.cs,ScrollPanelTestDialog,The following statement contains a magic number: girdLayout.Spacer = 4;
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout = new GirdLayout(4' 1);
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout.Right = 16;
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout.Left = 16;
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout.Top = 8;
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout.Bottom = 8;
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout.Spacer = 4;
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(2' 0' EHAlignment.HCenter);
Magic Number,AssortedWidgets.Test,TextNDropTestDialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Test\TextNDropTestDialog.cs,TextNDropTestDialog,The following statement contains a magic number: girdLayout.SetHorizontalAlignment(3' 0' EHAlignment.HRight);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuBar,The following statement contains a magic number: GL.Color4((byte)42' (byte)55' (byte)55' (byte)125);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuBar,The following statement contains a magic number: GL.Color4((byte)42' (byte)55' (byte)55' (byte)125);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuBar,The following statement contains a magic number: GL.Color4((byte)42' (byte)55' (byte)55' (byte)125);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuBar,The following statement contains a magic number: GL.Color4((byte)42' (byte)55' (byte)55' (byte)125);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuBar,The following statement contains a magic number: GL.Color3(55 / 255f' 65 / 255f' 67 / 255f);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuBar,The following statement contains a magic number: GL.Color3(55 / 255f' 65 / 255f' 67 / 255f);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuBar,The following statement contains a magic number: GL.Color3(55 / 255f' 65 / 255f' 67 / 255f);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetMenuItemButtonPreferedSize,The following statement contains a magic number: return new Size(24 + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetMenuItemButtonPreferedSize,The following statement contains a magic number: return new Size(24 + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetMenuPreferedSize,The following statement contains a magic number: return new Size(12 + (uint)w' 19);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetMenuPreferedSize,The following statement contains a magic number: return new Size(12 + (uint)w' 19);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetMenuItemSubMenuPreferedSize,The following statement contains a magic number: return new Size(24 + 10 + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetMenuItemSubMenuPreferedSize,The following statement contains a magic number: return new Size(24 + 10 + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetMenuItemSubMenuPreferedSize,The following statement contains a magic number: return new Size(24 + 10 + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetDialogTittleBarPreferedSize,The following statement contains a magic number: return new Size(20 + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetDialogTittleBarPreferedSize,The following statement contains a magic number: return new Size(20 + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetButtonPreferedSize,The following statement contains a magic number: return new Size(component.Right + component.Left + (uint)w' 19);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetLabelPreferedSize,The following statement contains a magic number: return new Size(component.Right + component.Left + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetCheckButtonPreferedSize,The following statement contains a magic number: return new Size(component.Right + component.Left + (uint)w + 15' 19);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetCheckButtonPreferedSize,The following statement contains a magic number: return new Size(component.Right + component.Left + (uint)w + 15' 19);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetRadioButtonPreferedSize,The following statement contains a magic number: return new Size(component.Right + component.Left + (uint)w + 15' 19);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetRadioButtonPreferedSize,The following statement contains a magic number: return new Size(component.Right + component.Left + (uint)w + 15' 19);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,GetDropListItemPreferedSize,The following statement contains a magic number: return new Size(component.Right + component.Left + (uint)w' 20);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBarSlider,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBarSlider,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBarSlider,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSeparator,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSeparator,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSeparator,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSeparator,The following statement contains a magic number: GL.Vertex2(10 + origin.X + component.Position.X' origin.Y + component.Position.Y + 1);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSeparator,The following statement contains a magic number: GL.Vertex2(origin.X + component.Position.X + component.Size.width - 10' origin.Y + component.Position.Y + 1);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: if (component.IsExpand)              {                  x1 = component.Position.X;                  y1 = component.Position.Y;                  x2 = component.Position.X + component.Size.width;                  y2 = component.Position.Y + component.Size.height;                    GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)44' (byte)55' (byte)55);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 6' y1);                  GL.Vertex2(x2 - 6' y1);                  GL.Vertex2(x2 - 6' y2);                  GL.Vertex2(x1 + 6' y2);                  GL.End();                  GL.Enable(EnableCap.Texture2D);                  GL.Color3((byte)255' (byte)255' (byte)255);                  menuLeft.Paint(x1' y1' x1 + 6' y2);                  menuRight.Paint(x2 - 6' y1' x2' y2);                  GL.Color3((byte)150' (byte)155' (byte)161);              }              else              {                  switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following statement contains a magic number: component.textFont.PosX = (int)(x1 + 3);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuList,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuList,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuList,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following statement contains a magic number: component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 2);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following statement contains a magic number: component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 2);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialogTittleBar,The following statement contains a magic number: GL.Color3((byte)31' (byte)31' (byte)31);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialogTittleBar,The following statement contains a magic number: GL.Color3((byte)31' (byte)31' (byte)31);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialogTittleBar,The following statement contains a magic number: GL.Color3((byte)31' (byte)31' (byte)31);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: float x1 = component.Position.X + 24;
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: float x2 = component.Position.X + component.Size.width - 24;
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: float y1 = component.Position.Y + component.Size.height - 16;
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: if (component.IsActive())              {                  dialogUpLeftActive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpActive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightActive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }              else              {                  dialogUpLeftDeactive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpDeactive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightDeactive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: if (component.IsActive())              {                  dialogUpLeftActive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpActive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightActive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }              else              {                  dialogUpLeftDeactive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpDeactive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightDeactive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: if (component.IsActive())              {                  dialogUpLeftActive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpActive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightActive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }              else              {                  dialogUpLeftDeactive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpDeactive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightDeactive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: if (component.IsActive())              {                  dialogUpLeftActive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpActive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightActive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }              else              {                  dialogUpLeftDeactive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpDeactive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightDeactive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: if (component.IsActive())              {                  dialogUpLeftActive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpActive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightActive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }              else              {                  dialogUpLeftDeactive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpDeactive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightDeactive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: if (component.IsActive())              {                  dialogUpLeftActive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpActive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightActive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }              else              {                  dialogUpLeftDeactive.Paint(component.Position.X' component.Position.Y' x1' component.Position.Y + 16);                  dialogUpDeactive.Paint(x1' component.Position.Y' x2' component.Position.Y + 16);                  dialogUpRightDeactive.Paint(x2' component.Position.Y' component.Position.X + component.Size.width' component.Position.Y + 16);              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: dialogLeft.Paint(component.Position.X' component.Position.Y + 16' x1' y1);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: dialogRight.Paint(x2' component.Position.Y + 16' component.Position.X + component.Size.width' y1);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: GL.Vertex2(x1' component.Position.Y + 16);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDialog,The following statement contains a magic number: GL.Vertex2(x2' component.Position.Y + 16);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 2);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following statement contains a magic number: component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 2);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintLabel,The following statement contains a magic number: component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 2);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following statement contains a magic number: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintProgressBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    subI1 = progressBarLeft;                  subI2 = progressBarRight;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + 4;                  x3 = origin.X + component.Position.X + component.Size.width - 4;                  x4 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y1 + 2);                  GL.Vertex2(x1 + 2 + component.POfSlider' y2 - 2);                  GL.Vertex2(x1 + 2' y2 - 2);                  GL.End();              }              else              {                  subI1 = progressBarTop;                  subI2 = progressBarBottom;                    x1 = origin.X + component.Position.X;                  x2 = origin.X + component.Position.X + component.Size.width;                  y1 = origin.Y + component.Position.Y;                  y2 = origin.Y + component.Position.Y + 4;                  y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  y4 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();                  GL.Color3((byte)46' (byte)55' (byte)53);                    GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1 + 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2 - component.POfSlider);                  GL.Vertex2(x2 - 2' y4 - 2);                  GL.Vertex2(x1 + 2' y4 - 2);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintSlideBar,The following statement contains a magic number: if (component.Type == ETypeOrientation.Horizontal)              {                  origin = UI.Instance.GetOrigin();                    float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + 4;                  float x3 = origin.X + component.Position.X + component.Size.width - 4;                  float x4 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + component.Size.height;                    GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  progressBarLeft.Paint(x1' y1' x2' y2);                  progressBarRight.Paint(x3' y1' x4' y2);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x2' y1);                  GL.Vertex2(x3' y1);                  GL.Vertex2(x3' y2);                  GL.Vertex2(x2' y2);                  GL.End();              }              else              {                  GL.Enable(EnableCap.Texture2D);                  GL.Color3(1f' 1f' 1f);                  float x1 = origin.X + component.Position.X;                  float x2 = origin.X + component.Position.X + component.Size.width;                  float y1 = origin.Y + component.Position.Y;                  float y2 = origin.Y + component.Position.Y + 4;                  float y3 = origin.Y + component.Position.Y + component.Size.height - 4;                  float y4 = origin.Y + component.Position.Y + component.Size.height;                    progressBarTop.Paint(x1' y1' x2' y2);                  progressBarBottom.Paint(x1' y3' x2' y4);                  GL.Disable(EnableCap.Texture2D);                  GL.Color3((byte)79' (byte)91' (byte)84);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(x1' y2);                  GL.Vertex2(x2' y2);                  GL.Vertex2(x2' y3);                  GL.Vertex2(x1' y3);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintScrollPanel,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintScrollPanel,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintScrollPanel,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropList,The following statement contains a magic number: float x2=origin.X+component.Position.X+4;
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropList,The following statement contains a magic number: float x3=origin.X+component.Position.X+component.Size.width-4;
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropList,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropList,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropList,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropList,The following statement contains a magic number: if(selected != null)  			{                  GL.Color3(0' 0' 0);                  selected.textFont.PosX = (int)(component.Position.X + component.Left + origin.X);                  selected.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 2);                  selected.textFont.Render(true);  			}
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropDown,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropDown,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropDown,The following statement contains a magic number: GL.Color3((byte)79' (byte)91' (byte)84);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropDown,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropDown,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropDown,The following statement contains a magic number: GL.Color3((byte)46' (byte)55' (byte)53);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropListItem,The following statement contains a magic number: if(component.GetStatus()== EButtonStatus.Hover)  			{                  GL.Color3((byte)175' (byte)200' (byte)28);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(origin.X + component.Position.X' origin.Y + component.Position.Y);                  GL.Vertex2(origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y);                  GL.Vertex2(origin.X + component.Position.X + component.Size.width'                             origin.Y+component.Position.Y+component.Size.height);                  GL.Vertex2(origin.X + component.Position.X' origin.Y + component.Position.Y + component.Size.height);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropListItem,The following statement contains a magic number: if(component.GetStatus()== EButtonStatus.Hover)  			{                  GL.Color3((byte)175' (byte)200' (byte)28);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(origin.X + component.Position.X' origin.Y + component.Position.Y);                  GL.Vertex2(origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y);                  GL.Vertex2(origin.X + component.Position.X + component.Size.width'                             origin.Y+component.Position.Y+component.Size.height);                  GL.Vertex2(origin.X + component.Position.X' origin.Y + component.Position.Y + component.Size.height);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropListItem,The following statement contains a magic number: if(component.GetStatus()== EButtonStatus.Hover)  			{                  GL.Color3((byte)175' (byte)200' (byte)28);                  GL.Begin(BeginMode.Quads);                  GL.Vertex2(origin.X + component.Position.X' origin.Y + component.Position.Y);                  GL.Vertex2(origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y);                  GL.Vertex2(origin.X + component.Position.X + component.Size.width'                             origin.Y+component.Position.Y+component.Size.height);                  GL.Vertex2(origin.X + component.Position.X' origin.Y + component.Position.Y + component.Size.height);                  GL.End();              }
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropListItem,The following statement contains a magic number: component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 2);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(40' 40);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(40' 40);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(40' 140);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(40' 140);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(140' 140);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(140' 140);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(140' 40);
Magic Number,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,Prueba,The following statement contains a magic number: GL.Vertex2(140' 40);
Magic Number,AssortedWidgets.Themes,Theme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\Theme.cs,Theme,The following statement contains a magic number: defaultTextFont = new TextFontTexture(new Font("Arial"' 10' FontStyle.Regular));
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: top = 12;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: bottom = 14;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: left = 12;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: right = 12;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpLeft = new DialogBorder(9' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpLeft = new DialogBorder(9' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpLeft = new DialogBorder(9' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpLeft = new DialogBorder(9' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpRight = new DialogBorder((int)(width - 9 - 4)' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpRight = new DialogBorder((int)(width - 9 - 4)' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpRight = new DialogBorder((int)(width - 9 - 4)' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpRight = new DialogBorder((int)(width - 9 - 4)' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUpRight = new DialogBorder((int)(width - 9 - 4)' 7' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUp = new DialogBorder(13' 7' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUp = new DialogBorder(13' 7' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUp = new DialogBorder(13' 7' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderUp = new DialogBorder(13' 7' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderLeft = new DialogBorder(9' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderLeft = new DialogBorder(9' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderLeft = new DialogBorder(9' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderLeft = new DialogBorder(9' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderRight = new DialogBorder((int)(width - 13)' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderRight = new DialogBorder((int)(width - 13)' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderRight = new DialogBorder((int)(width - 13)' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderRight = new DialogBorder((int)(width - 13)' 11' 4' height - 27);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomLeft = new DialogBorder(9' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomLeft = new DialogBorder(9' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomLeft = new DialogBorder(9' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomLeft = new DialogBorder(9' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottom = new DialogBorder(13' (int)(height - 27)' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottom = new DialogBorder(13' (int)(height - 27)' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottom = new DialogBorder(13' (int)(height - 27)' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottom = new DialogBorder(13' (int)(height - 27)' width - 26' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomRight = new DialogBorder((int)(width - 13)' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomRight = new DialogBorder((int)(width - 13)' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomRight = new DialogBorder((int)(width - 13)' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: borderBottomRight = new DialogBorder((int)(width - 13)' (int)(height - 27)' 4' 4);
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: dialogBorders[2] = borderUp;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: dialogBorders[3] = borderLeft;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: dialogBorders[4] = borderRight;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: dialogBorders[5] = borderBottomLeft;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: dialogBorders[6] = borderBottom;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Dialog,The following statement contains a magic number: dialogBorders[7] = borderBottomRight;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: tittleBar.Size.height = 20;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderUpRight.Position.X = (int)Size.width - 13;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderUp.Size.width = Size.width - 26;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderLeft.Size.height = Size.height - 27;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderRight.Position.X = (int)Size.width - 13;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderRight.Size.height = Size.height - 27;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderBottomLeft.Position.Y = (int)Size.height - 15;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderBottom.Position.Y = (int)Size.height - 15;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderBottom.Size.width = Size.width - 26;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderBottomRight.Position.X = (int)Size.width - 13;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: borderBottomRight.Position.Y = (int)Size.height - 15;
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: contentPosition = new Position((int)left' (int)(top + tittleBar.Size.height + 2));
Magic Number,AssortedWidgets.Widgets,Dialog,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,Pack,The following statement contains a magic number: contentSize = new Size(Size.width - left - right' Size.height - top - bottom - 2 - tittleBar.Size.height);
Magic Number,AssortedWidgets.Widgets,DialogTittleBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,DialogTittleBar,The following statement contains a magic number: Left = 10;
Magic Number,AssortedWidgets.Widgets,DialogTittleBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\dialogs.cs,DialogTittleBar,The following statement contains a magic number: Right = 10;
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,DropList,The following statement contains a magic number: Spacer = 2;
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,DropList,The following statement contains a magic number: Left = 4;
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,DropList,The following statement contains a magic number: Right = 4;
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,DropList,The following statement contains a magic number: Top = 4;
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,DropList,The following statement contains a magic number: Bottom = 4;
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,DropList,The following statement contains a magic number: button.Position.X = (int)(Size.width - 18);
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,DropList,The following statement contains a magic number: button.Position.Y = 2;
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,GetPreferedSize,The following statement contains a magic number: return new Size(miniSize + 23' 20);
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,GetPreferedSize,The following statement contains a magic number: return new Size(miniSize + 23' 20);
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,Pack,The following statement contains a magic number: button.Position.X = (int)(Size.width - 18);
Magic Number,AssortedWidgets.Widgets,DropList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,Pack,The following statement contains a magic number: button.Position.Y = 2;
Magic Number,AssortedWidgets.Widgets,DropListButton,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,GetPreferedSize,The following statement contains a magic number: return new Size(15'15);
Magic Number,AssortedWidgets.Widgets,DropListButton,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\drop_list.cs,GetPreferedSize,The following statement contains a magic number: return new Size(15'15);
Magic Number,AssortedWidgets.Widgets,Label,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Label.cs,Label,The following statement contains a magic number: Top = 4;
Magic Number,AssortedWidgets.Widgets,Label,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Label.cs,Label,The following statement contains a magic number: Right = 10;
Magic Number,AssortedWidgets.Widgets,Label,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Label.cs,Label,The following statement contains a magic number: Left = 10;
Magic Number,AssortedWidgets.Widgets,Label,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Label.cs,Label,The following statement contains a magic number: Bottom = 4;
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: Size = new Size(23' 10);
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: Size = new Size(23' 10);
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: Size.width += 10;
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: Size.height = 20;
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: Position.X = 100;
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: Position.Y = 100;
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: menuList.Position.X = -9;
Magic Number,AssortedWidgets.Widgets,Menu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Menu,The following statement contains a magic number: menuList.Position.Y = 25;
Magic Number,AssortedWidgets.Widgets,MenuBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuBar,The following statement contains a magic number: rightSpacer = 45;
Magic Number,AssortedWidgets.Widgets,MenuBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuBar,The following statement contains a magic number: topSpacer = 5;
Magic Number,AssortedWidgets.Widgets,MenuBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Init,The following statement contains a magic number: Init(width' 30' 5);
Magic Number,AssortedWidgets.Widgets,MenuBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,Init,The following statement contains a magic number: Init(width' 30' 5);
Magic Number,AssortedWidgets.Widgets,MenuItemButton,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemButton,The following statement contains a magic number: Left = 24;
Magic Number,AssortedWidgets.Widgets,MenuItemButton,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemButton,The following statement contains a magic number: Top = 2;
Magic Number,AssortedWidgets.Widgets,MenuItemButton,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemButton,The following statement contains a magic number: Bottom = 2;
Magic Number,AssortedWidgets.Widgets,MenuItemButton,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemButton,The following statement contains a magic number: Right = 2;
Magic Number,AssortedWidgets.Widgets,MenuItemSeparator,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSeparator,The following statement contains a magic number: Size.width = 10;
Magic Number,AssortedWidgets.Widgets,MenuItemSeparator,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSeparator,The following statement contains a magic number: Size.height = 3;
Magic Number,AssortedWidgets.Widgets,MenuItemSubMenu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSubMenu,The following statement contains a magic number: Left = 24;
Magic Number,AssortedWidgets.Widgets,MenuItemSubMenu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSubMenu,The following statement contains a magic number: Top = 2;
Magic Number,AssortedWidgets.Widgets,MenuItemSubMenu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSubMenu,The following statement contains a magic number: Bottom = 4;
Magic Number,AssortedWidgets.Widgets,MenuItemSubMenu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSubMenu,The following statement contains a magic number: Right = 2;
Magic Number,AssortedWidgets.Widgets,MenuItemSubMenu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSubMenu,The following statement contains a magic number: menuList.Position.X = 232 - 9;
Magic Number,AssortedWidgets.Widgets,MenuItemSubMenu,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuItemSubMenu,The following statement contains a magic number: menuList.Position.X = 232 - 9;
Magic Number,AssortedWidgets.Widgets,MenuList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuList,The following statement contains a magic number: minimizeSize = 232;
Magic Number,AssortedWidgets.Widgets,MenuList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuList,The following statement contains a magic number: spacer = 2;
Magic Number,AssortedWidgets.Widgets,MenuList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuList,The following statement contains a magic number: top = 6;
Magic Number,AssortedWidgets.Widgets,MenuList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuList,The following statement contains a magic number: left = 9;
Magic Number,AssortedWidgets.Widgets,MenuList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuList,The following statement contains a magic number: right = 9;
Magic Number,AssortedWidgets.Widgets,MenuList,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Menus.cs,MenuList,The following statement contains a magic number: bottom = 16;
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,Panel,The following statement contains a magic number: left = 2;
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,Panel,The following statement contains a magic number: right = 2;
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,Panel,The following statement contains a magic number: top = 2;
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,Panel,The following statement contains a magic number: bottom = 2;
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,Panel,The following statement contains a magic number: Size.width = 50;
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,Panel,The following statement contains a magic number: Size.height = 50;
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,GetPreferedSize,The following statement contains a magic number: return new Size(10' 10);
Magic Number,AssortedWidgets.Widgets,Panel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Panel.cs,GetPreferedSize,The following statement contains a magic number: return new Size(10' 10);
Magic Number,AssortedWidgets.Widgets,ProgressBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\ProgressBar.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,ProgressBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\ProgressBar.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,ProgressBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\ProgressBar.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,ProgressBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\ProgressBar.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,ProgressBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\ProgressBar.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  POfSlider = (uint)(Value_ * (Size.width - 4));              }              else if (Type == ETypeOrientation.Vertical)              {                  POfSlider = (uint)(Value_ * Size.height);              }
Magic Number,AssortedWidgets.Widgets,ScrollPanel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Scrolls.cs,GetPreferedSize,The following statement contains a magic number: return new Size(60' 60);
Magic Number,AssortedWidgets.Widgets,ScrollPanel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Scrolls.cs,GetPreferedSize,The following statement contains a magic number: return new Size(60' 60);
Magic Number,AssortedWidgets.Widgets,ScrollPanel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Scrolls.cs,Pack,The following statement contains a magic number: scissorWidth = Size.width - 2;
Magic Number,AssortedWidgets.Widgets,ScrollPanel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Scrolls.cs,Pack,The following statement contains a magic number: scissorHeight = Size.height - 2;
Magic Number,AssortedWidgets.Widgets,ScrollPanel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Scrolls.cs,Paint,The following statement contains a magic number: Position sPosition = new Position(2'2);
Magic Number,AssortedWidgets.Widgets,ScrollPanel,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Scrolls.cs,Paint,The following statement contains a magic number: Position sPosition = new Position(2'2);
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,SlideBar,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Horizontal);                  HorizontalStyle = EElementStyle.Stretch;                  VerticalStyle = EElementStyle.Fit;                  Size.width = 10;                  Size.height = 20;                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value + 2);                  Slider_.Position.Y = 2;                  Slider_.SetSlideBar(this);              }              else              {                  Slider_ = new SlideBarSlider(ETypeOrientation.Vertical);                  HorizontalStyle = EElementStyle.Fit;                  VerticalStyle = EElementStyle.Stretch;                  Size.width = 20;                  Size.height = 10;                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value + 2);                  Slider_.SetSlideBar(this);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,GetPreferedSize,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  return new Size(10' 20);              }              else              {                  return new Size(20' 10);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBar,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,Pack,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Slider_.Size.width = (uint)Math.Max((Size.width - 4) * 0.1f' 4);                  Slider_.Size.height = 16;                  Slider_.Position.X = (int)(((Size.width - 4) - Slider_.Size.width) * Value_ + 2);                  Slider_.Position.Y = 2;              }              else if (Type == ETypeOrientation.Vertical)              {                  Slider_.Size.width = 16;                  Slider_.Size.height = (uint)Math.Max((Size.height - 4) * 0.1f' 4);                  Slider_.Position.X = 2;                  Slider_.Position.Y = (int)(((Size.height - 4) - Slider_.Size.height) * Value_ + 2);              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,SlideBarSlider,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\sliders.cs,DragMoved,The following statement contains a magic number: if (Type == ETypeOrientation.Horizontal)              {                  Position.X += offsetX;                  if (Position.X < 2)                  {                      Position.X = 2;                  }                  else if (Position.X > (int)(parent.Size.width - 2 - Size.width))                  {                      Position.X = (int)(parent.Size.width - 2 - Size.width);                  }                  m = (float)((Position.X - 2) / (float)(parent.Size.width - 4 - Size.width));                  parent.SetPercent(Math.Min(1.0f' m));              }              else              {                  Position.Y += offsetY;                  if (Position.Y < 2)                  {                      Position.Y = 2;                  }                  else if (Position.Y > (int)parent.Size.height - 2 - Size.height)                  {                      Position.Y = (int)(parent.Size.height - 2 - Size.height);                  }                  m = (float)((Position.Y - 2) / (float)(parent.Size.height - 4 - Size.height));                  parent.SetPercent(Math.Min(1.0f' m));              }
Magic Number,AssortedWidgets.Widgets,Spacer,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Spacer.cs,GetPreferedSize,The following statement contains a magic number: return new Size(2' 2);
Magic Number,AssortedWidgets.Widgets,Spacer,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Widgets\Spacer.cs,GetPreferedSize,The following statement contains a magic number: return new Size(2' 2);
Duplicate Code,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,OrderComponents,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 31)' (52' 74))
Missing Default,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,UpdateLayout,The following switch statement is missing a default case: switch (comp.LayoutProperty)                  {                      case EArea.North:                          {                              north.Add(comp);                              iStyle1 = (int)northHStyle;                              iStyle2 = (int)(((IElement)comp).HorizontalStyle);                              northHStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              iStyle1 = (int)northVStyle;                              iStyle2 = (int)(((IElement)comp).VerticalStyle);                              northVStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              break;                          }                      case EArea.South:                          {                              south.Add(comp);                              iStyle1 = (int)southHStyle;                              iStyle2 = (int)(((IElement)comp).HorizontalStyle);                              southHStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              iStyle1 = (int)southVStyle;                              iStyle2 = (int)(((IElement)comp).VerticalStyle);                              southVStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              break;                          }                      case EArea.West:                          {                              west.Add(comp);                              iStyle1 = (int)westHStyle;                              iStyle2 = (int)(((IElement)comp).HorizontalStyle);                              westHStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              iStyle1 = (int)westVStyle;                              iStyle2 = (int)(((IElement)comp).VerticalStyle);                              westVStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              break;                          }                      case EArea.East:                          {                              east.Add(comp);                              iStyle1 = (int)eastHStyle;                              iStyle2 = (int)(((IElement)comp).HorizontalStyle);                              eastHStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              iStyle1 = (int)eastVStyle;                              iStyle2 = (int)(((IElement)comp).VerticalStyle);                              eastVStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              break;                          }                      case EArea.Center:                          {                              center.Add(comp);                              iStyle1 = (int)centerHStyle;                              iStyle2 = (int)(((IElement)comp).HorizontalStyle);                              centerHStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              iStyle1 = (int)centerVStyle;                              iStyle2 = (int)(((IElement)comp).VerticalStyle);                              centerVStyle = (EElementStyle)Math.Max(iStyle1' iStyle2);                              break;                          }                  }
Missing Default,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,OrderComponents,The following switch statement is missing a default case: switch (HAlignment)                      {                          case EHorizontalAlignment.HLeft:                              {                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                  uint averageWidth = 0;                                  if (strechSegment > 0)                                  {                                      averageWidth = (uint)(widthAvailable / strechSegment);                                  }                                    int tempX = origin.X;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).HorizontalStyle == EElementStyle.Fit)                                      {                                          comp.Position.X = tempX;                                          comp.Size.width = perfectSize.width;                                          tempX += (int)(Spacer + perfectSize.width);                                      }                                      else if (((IElement)comp).HorizontalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.X = tempX;                                          comp.Size.width = averageWidth;                                          tempX += (int)(Spacer + averageWidth);                                      }                                  }                                  break;                              }                          case EHorizontalAlignment.HRight:                              {                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                  uint averageWidth = 0;                                  if (strechSegment > 0)                                  {                                      averageWidth = (uint)(widthAvailable / strechSegment);                                  }                                    int tempX = (int)(origin.X + area.width);                                    for (int i = list.Count - 1; i >= 0; --i)                                  {                                      Component iter = list[i];                                      Size perfectSize = iter.GetPreferedSize();                                      if (((IElement)iter).HorizontalStyle == EElementStyle.Fit)                                      {                                          tempX -= (int)perfectSize.width;                                          iter.Position.X = tempX;                                          iter.Size.width = perfectSize.width;                                          tempX -= (int)Spacer;                                      }                                      else if (((IElement)iter).HorizontalStyle == EElementStyle.Stretch)                                      {                                          tempX -= (int)averageWidth;                                          iter.Position.X = tempX;                                          iter.Size.width = averageWidth;                                          tempX -= (int)Spacer;                                      }                                  }                                  break;                              }                          case EHorizontalAlignment.HCenter:                              {                                  bool isStretch = false;                                  int strechSegment = 0;                                  uint widthTakenUp = 0;                                  foreach (Component ele in list)                                  {                                      if (((IElement)ele).HorizontalStyle == EElementStyle.Stretch)                                      {                                          ++strechSegment;                                          isStretch = true;                                      }                                      else                                      {                                          Size perfectSize = ele.GetPreferedSize();                                          widthTakenUp += perfectSize.width;                                      }                                  }                                    if (isStretch)                                  {                                      uint widthAvailable = (uint)(area.width - Spacer * (list.Count - 1) - widthTakenUp);                                      uint averageWidth = (uint)(widthAvailable / strechSegment);                                      int tempX = origin.X;                                        for (int iter = 0; iter < list.Count - 1; ++iter)                                      {                                          Component comp = list[iter];                                            Size perfectSize = comp.GetPreferedSize();                                          if (((IElement)comp).HorizontalStyle == EElementStyle.Fit)                                          {                                              comp.Position.X = tempX;                                              comp.Size.width = perfectSize.width;                                              tempX += (int)(Spacer + perfectSize.width);                                          }                                          else if (((IElement)comp).HorizontalStyle == EElementStyle.Stretch)                                          {                                              comp.Position.X = tempX;                                              comp.Size.width = averageWidth;                                              tempX += (int)(Spacer + averageWidth);                                          }                                      }                                  }                                  else                                  {                                      widthTakenUp += (uint)(Spacer * (list.Count - 1));                                      int tempX = (int)(origin.X + area.width * 0.5f - widthTakenUp * 0.5f);                                        foreach (Component comp in list)                                      {                                          Size perfectSize = comp.GetPreferedSize();                                          comp.Position.X = tempX;                                          comp.Size.width = perfectSize.width;                                          tempX += (int)(Spacer + perfectSize.width);                                      }                                  }                                  break;                              }                      }
Missing Default,AssortedWidgets.Layouts,BorderLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\BorderLayout.cs,OrderComponents,The following switch statement is missing a default case: switch (VAlignment)                      {                          case EVerticalAlignment.VTop:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                          case EVerticalAlignment.VBottom:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = (int)(tempY + area.height - perfectSize.height);                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                          case EVerticalAlignment.VCenter:                              {                                  int tempY = origin.Y;                                  foreach (Component comp in list)                                  {                                      Size perfectSize = comp.GetPreferedSize();                                      if (((IElement)comp).VerticalStyle == EElementStyle.Stretch)                                      {                                          comp.Position.Y = tempY;                                          comp.Size.height = area.height;                                      }                                      else if (((IElement)comp).VerticalStyle == EElementStyle.Fit)                                      {                                          comp.Position.Y = (int)(tempY + area.height * 0.5 - perfectSize.height * 0.5);                                          comp.Size.height = perfectSize.height;                                      }                                  }                                  break;                              }                      }
Missing Default,AssortedWidgets.Layouts,GirdLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\GirdLayout.cs,OrderComponent,The following switch statement is missing a default case: switch (compAlignment.HAlignment)                      {                          case EHAlignment.HLeft:                              {                                  compAlignment.component.Position.X = origin.X;                                  break;                              }                          case EHAlignment.HCenter:                              {                                  compAlignment.component.Position.X = (int)(origin.X + (area.width - compAlignment.width) * 0.5f);                                  break;                              }                          case EHAlignment.HRight:                              {                                  compAlignment.component.Position.X = (int)(origin.X + (area.width - compAlignment.width));                                  break;                              }                      }
Missing Default,AssortedWidgets.Layouts,GirdLayout,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Layouts\GirdLayout.cs,OrderComponent,The following switch statement is missing a default case: switch (compAlignment.VAlignment)                      {                          case EVAlignment.VTop:                              {                                  compAlignment.component.Position.Y = origin.Y;                                  break;                              }                          case EVAlignment.VCenter:                              {                                  compAlignment.component.Position.Y = (int)(origin.Y + (area.height - compAlignment.height) * 0.5f);                                  break;                              }                          case EVAlignment.VBottom:                              {                                  compAlignment.component.Position.Y = (int)(origin.Y + (area.height - compAlignment.height));                                  break;                              }                      }
Missing Default,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintRadioButton,The following switch statement is missing a default case: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Missing Default,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenu,The following switch statement is missing a default case: switch (component.GetStatus)                  {                      case EStatus.Hover:                          // flotar                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              x2 = component.Position.X + component.Size.width;                              y2 = component.Position.Y + component.Size.height;                                GL.Disable(EnableCap.Texture2D);                              GL.Color3((byte)44' (byte)55' (byte)55);                              GL.Begin(BeginMode.Quads);                              GL.Vertex2(x1 + 6' y1);                              GL.Vertex2(x2 - 6' y1);                              GL.Vertex2(x2 - 6' y2);                              GL.Vertex2(x1 + 6' y2);                              GL.End();                              GL.Enable(EnableCap.Texture2D);                              GL.Color3((byte)255' (byte)255' (byte)255);                              menuLeft.Paint(x1' y1' x1 + 6' y2);                              menuRight.Paint(x2 - 6' y1' x2' y2);                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Normal:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)150' (byte)155' (byte)161);                              break;                          }                          case EStatus.Pressed:                          {                              x1 = component.Position.X;                              y1 = component.Position.Y;                              GL.Color3((byte)250' (byte)250' (byte)250);                              break;                          }                      }
Missing Default,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemButton,The following switch statement is missing a default case: switch (component.GetStatus())              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          break;                      }                          ;                  case EStatus.Pressed:                      {                          GL.Color3((byte)180' (byte)180' (byte)180);                          break;                      }                          ;                  case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          break;                      }                          ;              }
Missing Default,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintMenuItemSubMenu,The following switch statement is missing a default case: switch (component.GetStatus)              {                  case EStatus.Normal:                      {                          GL.Color3((byte)255' (byte)255' (byte)255);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                      case EStatus.Pressed:                      {                          GL.Color3((byte)200' (byte)200' (byte)200);                          break;                      }                      case EStatus.Hover:                      {                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)176' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y);                          GL.Vertex2(component.Position.X + origin.X + component.Size.width' origin.Y + component.Position.Y + component.Size.height);                          GL.Vertex2(component.Position.X + origin.X' origin.Y + component.Position.Y + component.Size.height);                          GL.End();                          GL.Color3((byte)88' (byte)101' (byte)9);                          GL.Enable(EnableCap.Texture2D);                          GL.Color3((byte)255' (byte)255' (byte)255);                          if (component.IsExpand)                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 12' component.Position.Y + origin.Y + 14);                          }                          else                          {                              menuItemSubMenuArrow.Paint(origin.X + component.Position.X + component.Size.width - 22' component.Position.Y + origin.Y + 5' origin.X + component.Position.X + component.Size.width - 17' component.Position.Y + origin.Y + 14);                          }                          break;                      }                  }
Missing Default,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintButton,The following switch statement is missing a default case: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                          break;                      }                          ;                    case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                          ;                    case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                          break;                      }                  }
Missing Default,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintCheckButton,The following switch statement is missing a default case: switch (component.GetStatus())              {                  case EButtonStatus.Normal:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3((byte)137' (byte)155' (byte)145);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Hover:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonHoverLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonHoverRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)175' (byte)200' (byte)28);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                        case EButtonStatus.Pressed:                      {                          GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          buttonNormalLeft.Paint(origin.X + component.Position.X' origin.Y + component.Position.Y' origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          buttonNormalRight.Paint(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y' origin.X + component.Position.X + component.Size.width' origin.Y + component.Position.Y + 19);                          GL.Disable(EnableCap.Texture2D);                          GL.Color3((byte)55' (byte)67' (byte)65);                          GL.Begin(BeginMode.Quads);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y);                          GL.Vertex2(origin.X + component.Position.X + component.Size.width - 4' origin.Y + component.Position.Y + 19);                          GL.Vertex2(origin.X + component.Position.X + 4' origin.Y + component.Position.Y + 19);                          GL.End();                          GL.Color3(0' 0' 0);                            component.textFont.PosX = (int)(component.Position.X + component.Left + origin.X + 15);                          component.textFont.PosY = (int)(component.Top + origin.Y + component.Position.Y - 4);                          component.textFont.Render(true);                            GL.Enable(EnableCap.Texture2D);                          GL.Color3(1f' 1f' 1f);                          checkStatus.Paint(origin.X + component.Position.X + component.Left' origin.Y + component.Position.Y + component.Top' origin.X + component.Position.X + component.Left + 11' origin.Y + component.Position.Y + component.Top + 11);                          break;                      }                  }
Missing Default,AssortedWidgets.Themes,DefaultTheme,C:\repos\diydrones_MissionPlanner\ExtLibs\CsAssortedWidgets\Themes\DefaultTheme.cs,PaintDropListButton,The following switch statement is missing a default case: switch(component.GetStatus())  			{  			case EButtonStatus.Normal:  				{  					button=scrollBarVerticalBottomNormal;  					break;  				}  			case EButtonStatus.Hover:  				{  					button=scrollBarVerticalBottomHover;  					break;  				}  			case EButtonStatus.Pressed:  				{  					button=scrollBarVerticalBottomNormal;  					break;  				}  			}
