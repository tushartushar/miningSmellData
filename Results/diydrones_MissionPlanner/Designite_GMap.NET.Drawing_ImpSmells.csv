Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,Polygons_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,Routes_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,Markers_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,ForceUpdate,Cyclomatic complexity of the method is 8
Complex Method,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,Cyclomatic complexity of the method is 16
Complex Method,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,Cyclomatic complexity of the method is 11
Complex Method,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,Cyclomatic complexity of the method is 10
Long Parameter List,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The method has 7 parameters. Parameters: g' pen' h' v' width' height' radius
Long Statement,GMap.NET.WindowsForms,GMapImageProxy,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapImage.cs,ApplyColorMatrix,The length of the statement  "                  g.DrawImage(original' new Rectangle(0' 0' original.Width' original.Height)' 0' 0' original.Width' original.Height' GraphicsUnit.Pixel' attributes); " is 147.
Long Statement,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The length of the statement  "                  //if(m.IsVisible && (m.DisableRegionCheck || Control.Core.currentRegion.Contains(m.LocalPosition.X' m.LocalPosition.Y)))" is 120.
Long Statement,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The length of the statement  "                     if(!string.IsNullOrEmpty(m.ToolTipText) && (m.ToolTipMode == MarkerTooltipMode.Always || (m.ToolTipMode == MarkerTooltipMode.OnMouseOver && m.IsMouseOver)))" is 156.
Long Statement,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The length of the statement  "                           g.DrawLine(Stroke' midxstart' midystart' midxstart + length * (float)Math.Cos(leftangle)' midystart + length * (float)Math.Sin(leftangle)); " is 139.
Long Statement,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The length of the statement  "                           g.DrawLine(Stroke' midxstart' midystart' midxstart + length * (float)Math.Cos(rightangle)' midystart + length * (float)Math.Sin(rightangle)); " is 141.
Long Statement,GMap.NET.WindowsForms,GMapToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapToolTip.cs,OnRender,The length of the statement  "         System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width' st.Height + TextPadding.Height); " is 187.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The length of the statement  "         System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width' st.Height + TextPadding.Height); " is 187.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The length of the statement  "            objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner " is 127.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The length of the statement  "         System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width * 2' st.Height + TextPadding.Height); " is 191.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The length of the statement  "         g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X + Radius / 2' rect.Y + rect.Height - Radius / 2); " is 127.
Complex Conditional,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The conditional expression  "r.IsInside(Control.Position) ||                          viewarea.Contains(r.Points[0]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.2)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.4)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.6)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.8)])"  is complex.
Complex Conditional,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The conditional expression  "!string.IsNullOrEmpty(m.ToolTipText) && (m.ToolTipMode == MarkerTooltipMode.Always || (m.ToolTipMode == MarkerTooltipMode.OnMouseOver && m.IsMouseOver))"  is complex.
Complex Conditional,GMap.NET.WindowsForms,GMapPolygon,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapPolygon.cs,IsInside,The conditional expression  "p1.Lat < p.Lat && p2.Lat >= p.Lat || p2.Lat < p.Lat && p1.Lat >= p.Lat"  is complex.
Magic Number,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The following statement contains a magic number: r.IsInside(Control.Position) ||                          viewarea.Contains(r.Points[0]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.2)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.4)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.6)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.8)])
Magic Number,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The following statement contains a magic number: r.IsInside(Control.Position) ||                          viewarea.Contains(r.Points[0]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.2)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.4)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.6)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.8)])
Magic Number,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The following statement contains a magic number: r.IsInside(Control.Position) ||                          viewarea.Contains(r.Points[0]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.2)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.4)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.6)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.8)])
Magic Number,GMap.NET.WindowsForms,GMapOverlay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The following statement contains a magic number: r.IsInside(Control.Position) ||                          viewarea.Contains(r.Points[0]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.2)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.4)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.6)]) ||                          viewarea.Contains(r.Points[(int) (r.Points.Count*0.8)])
Magic Number,GMap.NET.WindowsForms,GMapPolygon,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapPolygon.cs,OnRender,The following statement contains a magic number: maxx > ((1 << 16) - 1) || maxy > ((1 << 16) - 1)
Magic Number,GMap.NET.WindowsForms,GMapPolygon,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapPolygon.cs,OnRender,The following statement contains a magic number: maxx > ((1 << 16) - 1) || maxy > ((1 << 16) - 1)
Magic Number,GMap.NET.WindowsForms,GMapPolygon,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapPolygon.cs,OnRender,The following statement contains a magic number: graphicsPath.PointCount > 1000
Magic Number,GMap.NET.WindowsForms,GMapPolygon,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapPolygon.cs,GMapPolygon,The following statement contains a magic number: DefaultStroke.Width = 5;
Magic Number,GMap.NET.WindowsForms,GMapPolygon,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapPolygon.cs,IsInside,The following statement contains a magic number: count < 3
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: graphicsPath.PointCount > 400
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: double deg2rad = Math.PI / 180.0;
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: double r = Math.Sqrt(Math.Pow(polx' 2) + Math.Pow(poly' 2));
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: double r = Math.Sqrt(Math.Pow(polx' 2) + Math.Pow(poly' 2));
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: r <= 20
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: float midx = polx / 2;
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: float midy = poly / 2;
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: double leftangle = angle + 210 * deg2rad;
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: double rightangle = angle - 210 * deg2rad;
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,OnRender,The following statement contains a magic number: float length = 15;
Magic Number,GMap.NET.WindowsForms,GMapRoute,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapRoute.cs,GMapRoute,The following statement contains a magic number: DefaultStroke.Width = 5;
Magic Number,GMap.NET.WindowsForms,GMapToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: DefaultStroke.Width = 2;
Magic Number,GMap.NET.WindowsForms,GMapToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.Offset = new Point(14' -44);
Magic Number,GMap.NET.WindowsForms,GMapToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.Offset = new Point(14' -44);
Magic Number,GMap.NET.WindowsForms,GMapToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapToolTip.cs,OnRender,The following statement contains a magic number: g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X' rect.Y + rect.Height / 2);
Magic Number,GMap.NET.WindowsForms,GMapToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.TextPadding = Extensions.GetStruct<Size>(info' "TextPadding"' new Size(10' 10));
Magic Number,GMap.NET.WindowsForms,GMapToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.TextPadding = Extensions.GetStruct<Size>(info' "TextPadding"' new Size(10' 10));
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p1.Offset(0' -10);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p2.Offset(0' 10);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p3.Offset(-10' 0);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p4.Offset(10' 0);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow.ToBitmap();                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small.ToBitmap();                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow.ToBitmap();                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow.ToBitmap();                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small.ToBitmap();                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow.ToBitmap();                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow.ToBitmap();                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small.ToBitmap();                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow.ToBitmap();                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow.ToBitmap();                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small.ToBitmap();                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow.ToBitmap();                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow.ToBitmap();                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small.ToBitmap();                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow.ToBitmap();                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,GMarkerGoogle,The following statement contains a magic number: Offset = new Point(-Size.Width / 2' -Size.Height);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,OnRender,The following statement contains a magic number: Math.Abs(LocalPosition.X) > 100000 || Math.Abs(LocalPosition.Y) > 100000
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,OnRender,The following statement contains a magic number: Math.Abs(LocalPosition.X) > 100000 || Math.Abs(LocalPosition.Y) > 100000
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,GMapBaloonToolTip,The following statement contains a magic number: DefaultStroke.Width = 3;
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,GMapBaloonToolTip,The following statement contains a magic number: this.Radius = Extensions.GetStruct<float>(info' "Radius"' 10f);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddLine(h + radius' v' h + width - (radius * 2)' v);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddLine(h' v + height - (radius * 2)' h' v + radius);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The following statement contains a magic number: System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width * 2' st.Height + TextPadding.Height);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The following statement contains a magic number: g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X + Radius / 2' rect.Y + rect.Height - Radius / 2);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The following statement contains a magic number: g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X + Radius / 2' rect.Y + rect.Height - Radius / 2);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,GMapRoundedToolTip,The following statement contains a magic number: this.Radius = Extensions.GetStruct<float>(info' "Radius"' 10f);
Missing Default,GMap.NET.WindowsForms.Markers,GMarkerGoogle,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GMap.NET.Drawing\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following switch statement is missing a default case: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow.ToBitmap();                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small.ToBitmap();                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow.ToBitmap();                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow.ToBitmap();                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
