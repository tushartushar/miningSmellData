Implementation smell,Namespace,Class,File,Method,Description
Long Method,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyBurntKermitTheme,The method has 123 lines of code.
Long Method,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The method has 151 lines of code.
Long Method,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The method has 216 lines of code.
Long Method,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method has 217 lines of code.
Long Method,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The method has 1161 lines of code.
Long Method,SikRadio,Config,C:\repos\diydrones_MissionPlanner\SikRadio\Config.cs,InitializeComponent,The method has 160 lines of code.
Complex Method,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddNewLinesToText,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getFirmware,Cyclomatic complexity of the method is 12
Complex Method,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,Cyclomatic complexity of the method is 19
Complex Method,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,Cyclomatic complexity of the method is 18
Long Parameter List,MissionPlanner.Arduino,Chip,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\IArduinoComms.cs,Chip,The method has 5 parameters. Parameters: nm' s1' s2' s3' size
Long Parameter List,MissionPlanner.Comms,NativeMethods,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,FormatMessage,The method has 7 parameters. Parameters: dwFlags' lpSource' dwMessageId' dwLanguageId' lpBuffer' nSize' arguments
Long Parameter List,MissionPlanner.Comms,NativeMethods,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' securityAttrs' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Identifier,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,,The length of the parameter maximumSingleLineTooltipLength is 30.
Long Statement,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyBurntKermitTheme,The length of the statement  "                    //but.BGGradBot = Color.FromArgb(255 - (int)(PrimeColor.R * 0.27)' 255 - (int)(PrimeColor.G * 0.14)' 255 - (int)(PrimeColor.B * 0.79)); " is 135.
Long Statement,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyBurntKermitTheme,The length of the statement  "                    //but.ForeColor = Color.FromArgb(0x40' 0x57' 0x04); //Color.FromArgb(255 - (int)(PrimeColor.R * 0.7)' 255 - (int)(PrimeColor.G * 0.8)' 255 - (int)(PrimeColor.B * 0.1)); " is 168.
Long Statement,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getFirmware,The length of the statement  "                return Download.getFilefromNet("http://files.rfdesign.com.au/Files/firmware/RFDSiK%20V1.9%20rfd900u.ihx"' firmwarefile); " is 120.
Long Statement,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getFirmware,The length of the statement  "                return Download.getFilefromNet("http://files.rfdesign.com.au/Files/firmware/RFDSiK%20V1.9%20rfd900p.ihx"' firmwarefile); " is 120.
Long Statement,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Sikradio)); " is 128.
Long Statement,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The length of the statement  "            this.linkLabel_mavlink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel_mavlink_LinkClicked); " is 132.
Long Statement,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The length of the statement  "            this.linkLabel_lowlatency.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel_lowlatency_LinkClicked); " is 138.
Long Statement,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The length of the statement  "                CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 122.
Long Statement,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The length of the statement  "                CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 122.
Long Statement,SikRadio,Config,C:\repos\diydrones_MissionPlanner\SikRadio\Config.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Config)); " is 126.
Long Statement,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The length of the statement  "            this.zedGraphControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 152.
Long Statement,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Terminal)); " is 128.
Long Statement,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The length of the statement  "            this.TXT_terminal.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 148.
Long Statement,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The length of the statement  "            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Complex Conditional,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,checkDevice,The conditional expression  "(id != Board.DEVICE_ID_HM_TRP) && (id != Board.DEVICE_ID_RF50) && (id != Board.DEVICE_ID_RFD900) &&                  (id != Board.DEVICE_ID_RFD900A)"  is complex.
Complex Conditional,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The conditional expression  "board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus"  is complex.
Complex Conditional,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,TXT_terminal_KeyDown,The conditional expression  "e.KeyData == Keys.Up || e.KeyData == Keys.Down || e.KeyData == Keys.Left || e.KeyData == Keys.Right"  is complex.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,Open,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetNiceName,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetName,The method has an empty catch block.
Empty Catch Block,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The method has an empty catch block.
Empty Catch Block,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The method has an empty catch block.
Empty Catch Block,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,iHex_ProgressEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_LogEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,iHex_LogEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_ProgressEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method has an empty catch block.
Empty Catch Block,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method has an empty catch block.
Empty Catch Block,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,BUT_disconnect_Click,The method has an empty catch block.
Empty Catch Block,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The method has an empty catch block.
Empty Catch Block,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The method has an empty catch block.
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: while (a < 50) // 50 tries at 50 ms = 2.5sec              {                  DiscardInBuffer();                  Write(new[] {(byte) '0'' (byte) ' '}' 0' 2);                  a++;                  Thread.Sleep(50);                    log.InfoFormat("connectap btr {0}"' BytesToRead);                  if (BytesToRead >= 2)                  {                      var b1 = (byte) ReadByte();                      var b2 = (byte) ReadByte();                      if (b1 == 0x14 && b2 == 0x10)                      {                          return true;                      }                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: while (a < 50) // 50 tries at 50 ms = 2.5sec              {                  DiscardInBuffer();                  Write(new[] {(byte) '0'' (byte) ' '}' 0' 2);                  a++;                  Thread.Sleep(50);                    log.InfoFormat("connectap btr {0}"' BytesToRead);                  if (BytesToRead >= 2)                  {                      var b1 = (byte) ReadByte();                      var b2 = (byte) ReadByte();                      if (b1 == 0x14 && b2 == 0x10)                      {                          return true;                      }                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: while (a < 50) // 50 tries at 50 ms = 2.5sec              {                  DiscardInBuffer();                  Write(new[] {(byte) '0'' (byte) ' '}' 0' 2);                  a++;                  Thread.Sleep(50);                    log.InfoFormat("connectap btr {0}"' BytesToRead);                  if (BytesToRead >= 2)                  {                      var b1 = (byte) ReadByte();                      var b2 = (byte) ReadByte();                      if (b1 == 0x14 && b2 == 0x10)                      {                          return true;                      }                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: while (a < 50) // 50 tries at 50 ms = 2.5sec              {                  DiscardInBuffer();                  Write(new[] {(byte) '0'' (byte) ' '}' 0' 2);                  a++;                  Thread.Sleep(50);                    log.InfoFormat("connectap btr {0}"' BytesToRead);                  if (BytesToRead >= 2)                  {                      var b1 = (byte) ReadByte();                      var b2 = (byte) ReadByte();                      if (b1 == 0x14 && b2 == 0x10)                      {                          return true;                      }                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: ReadTimeout = 1000;
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: while (BytesToRead < 1)              {                  f++;                  Thread.Sleep(1);                  if (f > 1000)                      return false;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: while (a < 10)              {                  if (BytesToRead >= 2)                  {                      var b1 = (byte) ReadByte();                      var b2 = (byte) ReadByte();                      log.DebugFormat("bytes {0:X} {1:X}"' b1' b2);                        if (b1 == 0x14 && b2 == 0x10)                      {                          return true;                      }                  }                  log.DebugFormat("btr {0}"' BytesToRead);                  Thread.Sleep(10);                  a++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: while (a < 10)              {                  if (BytesToRead >= 2)                  {                      var b1 = (byte) ReadByte();                      var b2 = (byte) ReadByte();                      log.DebugFormat("bytes {0:X} {1:X}"' b1' b2);                        if (b1 == 0x14 && b2 == 0x10)                      {                          return true;                      }                  }                  log.DebugFormat("btr {0}"' BytesToRead);                  Thread.Sleep(10);                  a++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: while (a < 10)              {                  if (BytesToRead >= 2)                  {                      var b1 = (byte) ReadByte();                      var b2 = (byte) ReadByte();                      log.DebugFormat("bytes {0:X} {1:X}"' b1' b2);                        if (b1 == 0x14 && b2 == 0x10)                      {                          return true;                      }                  }                  log.DebugFormat("btr {0}"' BytesToRead);                  Thread.Sleep(10);                  a++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,download,The following statement contains a magic number: byte[] command = {(byte) 't'' (byte) (length >> 8)' (byte) (length & 0xff)' (byte) 'E'' (byte) ' '};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,downloadflash,The following statement contains a magic number: ReadTimeout = 1000;
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,downloadflash,The following statement contains a magic number: byte[] command = {(byte) 't'' (byte) (length >> 8)' (byte) (length & 0xff)' (byte) 'F'' (byte) ' '};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,uploadflash,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += sending;                    byte[] command = {(byte) 'd'' (byte) (sending >> 8)' (byte) (sending & 0xff)' (byte) 'F'};                  Write(command' 0' command.Length);                  log.Info(startfrom + (length - totalleft) + " - " + sending);                  Write(data' startfrom + (length - totalleft)' sending);                  command = new[] {(byte) ' '};                  Write(command' 0' command.Length);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "");                    if (!sync())                  {                      log.Info("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,uploadflash,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += sending;                    byte[] command = {(byte) 'd'' (byte) (sending >> 8)' (byte) (sending & 0xff)' (byte) 'F'};                  Write(command' 0' command.Length);                  log.Info(startfrom + (length - totalleft) + " - " + sending);                  Write(data' startfrom + (length - totalleft)' sending);                  command = new[] {(byte) ' '};                  Write(command' 0' command.Length);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "");                    if (!sync())                  {                      log.Info("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: if (address%2 == 1)              {                  throw new Exception("Address must be an even number");              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: log.Info("Sending address   " + (ushort) (address/2));
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: address /= 2;
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: byte[] command = {(byte) 'U'' (byte) (address & 0xff)' (byte) (address >> 8)' (byte) ' '};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,upload,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += (short) sending;                    byte[] command = {(byte) 'd'' (byte) (sending >> 8)' (byte) (sending & 0xff)' (byte) 'E'};                  Write(command' 0' command.Length);                  log.Info(startfrom + (length - totalleft) + " - " + sending);                  Write(data' startfrom + (length - totalleft)' sending);                  command = new[] {(byte) ' '};                  Write(command' 0' command.Length);                    totalleft -= sending;                    if (!sync())                  {                      log.Info("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: var chr = new byte[5];
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: var count = Read(chr' 0' 5);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: if (chr[0] == 0x14 && chr[4] == 0x10)              {                  sig1 = chr[1];                  sig2 = chr[2];                  sig3 = chr[3];              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: if (chr[0] == 0x14 && chr[4] == 0x10)              {                  sig1 = chr[1];                  sig2 = chr[2];                  sig3 = chr[3];              }
Magic Number,MissionPlanner.Arduino,ArduinoSTK,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: if (chr[0] == 0x14 && chr[4] == 0x10)              {                  sig1 = chr[1];                  sig2 = chr[2];                  sig3 = chr[3];              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: while (a < 5)              {                  byte[] temp = {0x6' 0' 0' 0' 0};                  temp = genstkv2packet(temp);                  a++;                  Thread.Sleep(50);                    try                  {                      if (temp[0] == 6 && temp[1] == 0 && temp.Length == 2)                      {                          return true;                      }                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: while (a < 5)              {                  byte[] temp = {0x6' 0' 0' 0' 0};                  temp = genstkv2packet(temp);                  a++;                  Thread.Sleep(50);                    try                  {                      if (temp[0] == 6 && temp[1] == 0 && temp.Length == 2)                      {                          return true;                      }                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: while (a < 5)              {                  byte[] temp = {0x6' 0' 0' 0' 0};                  temp = genstkv2packet(temp);                  a++;                  Thread.Sleep(50);                    try                  {                      if (temp[0] == 6 && temp[1] == 0 && temp.Length == 2)                      {                          return true;                      }                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: while (a < 5)              {                  byte[] temp = {0x6' 0' 0' 0' 0};                  temp = genstkv2packet(temp);                  a++;                  Thread.Sleep(50);                    try                  {                      if (temp[0] == 6 && temp[1] == 0 && temp.Length == 2)                      {                          return true;                      }                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,download,The following statement contains a magic number: byte[] temp = {0x16' (byte) ((length >> 8) & 0xff)' (byte) ((length >> 0) & 0xff)};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,download,The following statement contains a magic number: Array.Copy(temp' 2' data' 0' length);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,downloadflash,The following statement contains a magic number: byte[] temp = {0x14' (byte) ((length >> 8) & 0xff)' (byte) ((length >> 0) & 0xff)};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,downloadflash,The following statement contains a magic number: Array.Copy(temp' 2' data' 0' length);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += sending;                    // 0x13                              byte[] command = {0x13' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "Uploading Firmware");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += sending;                    // 0x13                              byte[] command = {0x13' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "Uploading Firmware");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += sending;                    // 0x13                              byte[] command = {0x13' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "Uploading Firmware");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += sending;                    // 0x13                              byte[] command = {0x13' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "Uploading Firmware");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: if (address%2 == 1)              {                  throw new Exception("Address must be an even number");              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: log.InfoFormat("Sending address   " + address/2);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: var tempstart = address/2;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: byte[] temp =              {                  0x6' (byte) ((tempstart >> 24) & 0xff)' (byte) ((tempstart >> 16) & 0xff)'                  (byte) ((tempstart >> 8) & 0xff)'                  (byte) ((tempstart >> 0) & 0xff)              };
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: byte[] temp =              {                  0x6' (byte) ((tempstart >> 24) & 0xff)' (byte) ((tempstart >> 16) & 0xff)'                  (byte) ((tempstart >> 8) & 0xff)'                  (byte) ((tempstart >> 0) & 0xff)              };
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: byte[] temp =              {                  0x6' (byte) ((tempstart >> 24) & 0xff)' (byte) ((tempstart >> 16) & 0xff)'                  (byte) ((tempstart >> 8) & 0xff)'                  (byte) ((tempstart >> 0) & 0xff)              };
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += (short) sending;                    // 0x13                              byte[] command = {0x15' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += (short) sending;                    // 0x13                              byte[] command = {0x15' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += (short) sending;                    // 0x13                              byte[] command = {0x15' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: for (var a = 0; a <= loops; a++)              {                  if (totalleft > 0x100)                  {                      sending = 0x100;                  }                  else                  {                      sending = totalleft;                  }                    //startaddress = 256;                  if (sending == 0)                      return true;                    setaddress(startaddress);                  startaddress += (short) sending;                    // 0x13                              byte[] command = {0x15' (byte) (sending >> 8)' (byte) (sending & 0xff)};                    log.InfoFormat(startfrom + (length - totalleft) + " - " + sending);                    Array.Resize(ref command' sending + 10); // sending + head                    Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);                    command = genstkv2packet(command);                    totalleft -= sending;                      if (Progress != null)                      Progress((int) (startaddress/(float) length*100)' "");                    if (command[1] != 0)                  {                      log.InfoFormat("No Sync");                      return false;                  }              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: sig1 = command[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: sig2 = command[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: command = new byte[] {0x1b' 0' 0' 0' 2};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: sig3 = command[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: var data = new byte[300];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[2] = (byte) ((message.Length >> 8) & 0xff);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[2] = (byte) ((message.Length >> 8) & 0xff);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: ck ^= data[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[3] = (byte) (message.Length & 0xff);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: ck ^= data[3];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[4] = 0xe;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: ck ^= data[4];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: var a = 5;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: var temp = new byte[4000];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: var mes = new byte[2] {0x0' 0xC0};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: var a = 7;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: ReadTimeout = 1000;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: while (count < a && a < temp.Length)              {                  //Console.WriteLine("count {0} a {1} mes leng {2}"'count'a'mes.Length);                  try                  {                      temp[count] = (byte) ReadByte();                  }                  catch                  {                      break;                  }                      //Console.Write("{1}"' temp[0]' (char)temp[0]);                    if (temp[0] != 0x1b)                  {                      count = 0;                      continue;                  }                    if (count == 3)                  {                      a = (temp[2] << 8) + temp[3];                      mes = new byte[a];                      a += 5;                  }                    if (count >= 5)                  {                      mes[count - 5] = temp[count];                  }                    count++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: while (count < a && a < temp.Length)              {                  //Console.WriteLine("count {0} a {1} mes leng {2}"'count'a'mes.Length);                  try                  {                      temp[count] = (byte) ReadByte();                  }                  catch                  {                      break;                  }                      //Console.Write("{1}"' temp[0]' (char)temp[0]);                    if (temp[0] != 0x1b)                  {                      count = 0;                      continue;                  }                    if (count == 3)                  {                      a = (temp[2] << 8) + temp[3];                      mes = new byte[a];                      a += 5;                  }                    if (count >= 5)                  {                      mes[count - 5] = temp[count];                  }                    count++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: while (count < a && a < temp.Length)              {                  //Console.WriteLine("count {0} a {1} mes leng {2}"'count'a'mes.Length);                  try                  {                      temp[count] = (byte) ReadByte();                  }                  catch                  {                      break;                  }                      //Console.Write("{1}"' temp[0]' (char)temp[0]);                    if (temp[0] != 0x1b)                  {                      count = 0;                      continue;                  }                    if (count == 3)                  {                      a = (temp[2] << 8) + temp[3];                      mes = new byte[a];                      a += 5;                  }                    if (count >= 5)                  {                      mes[count - 5] = temp[count];                  }                    count++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: while (count < a && a < temp.Length)              {                  //Console.WriteLine("count {0} a {1} mes leng {2}"'count'a'mes.Length);                  try                  {                      temp[count] = (byte) ReadByte();                  }                  catch                  {                      break;                  }                      //Console.Write("{1}"' temp[0]' (char)temp[0]);                    if (temp[0] != 0x1b)                  {                      count = 0;                      continue;                  }                    if (count == 3)                  {                      a = (temp[2] << 8) + temp[3];                      mes = new byte[a];                      a += 5;                  }                    if (count >= 5)                  {                      mes[count - 5] = temp[count];                  }                    count++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: while (count < a && a < temp.Length)              {                  //Console.WriteLine("count {0} a {1} mes leng {2}"'count'a'mes.Length);                  try                  {                      temp[count] = (byte) ReadByte();                  }                  catch                  {                      break;                  }                      //Console.Write("{1}"' temp[0]' (char)temp[0]);                    if (temp[0] != 0x1b)                  {                      count = 0;                      continue;                  }                    if (count == 3)                  {                      a = (temp[2] << 8) + temp[3];                      mes = new byte[a];                      a += 5;                  }                    if (count >= 5)                  {                      mes[count - 5] = temp[count];                  }                    count++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: while (count < a && a < temp.Length)              {                  //Console.WriteLine("count {0} a {1} mes leng {2}"'count'a'mes.Length);                  try                  {                      temp[count] = (byte) ReadByte();                  }                  catch                  {                      break;                  }                      //Console.Write("{1}"' temp[0]' (char)temp[0]);                    if (temp[0] != 0x1b)                  {                      count = 0;                      continue;                  }                    if (count == 3)                  {                      a = (temp[2] << 8) + temp[3];                      mes = new byte[a];                      a += 5;                  }                    if (count >= 5)                  {                      mes[count - 5] = temp[count];                  }                    count++;              }
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,C:\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: while (count < a && a < temp.Length)              {                  //Console.WriteLine("count {0} a {1} mes leng {2}"'count'a'mes.Length);                  try                  {                      temp[count] = (byte) ReadByte();                  }                  catch                  {                      break;                  }                      //Console.Write("{1}"' temp[0]' (char)temp[0]);                    if (temp[0] != 0x1b)                  {                      count = 0;                      continue;                  }                    if (count == 3)                  {                      a = (temp[2] << 8) + temp[3];                      mes = new byte[a];                      a += 5;                  }                    if (count >= 5)                  {                      mes[count - 5] = temp[count];                  }                    count++;              }
Magic Number,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,Open,The following statement contains a magic number: this.WriteTimeout = 500;
Magic Number,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,Open,The following statement contains a magic number: try              {                  // this causes element not found with bluetooth devices.                  if (BaudRate > 115200)                  {                      Console.WriteLine("Doing SerialPortFixer");                      SerialPortFixer.Execute(this.PortName);                      Console.WriteLine("Done SerialPortFixer");                  }              }              catch (Exception ex) { Console.WriteLine(ex.ToString()); }
Magic Number,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetNiceName,The following statement contains a magic number: lock (locker)              {                  log.Info("start GetNiceName " + port);                  portnamenice = "";                    if (comportnamecache.ContainsKey(port))                  {                      log.Info("done GetNiceName cache " + port);                      return comportnamecache[port];                  }                    try                  {                      CallWithTimeout(new Action<string>(GetName)' 1000' port);                  }                  catch                  {                  }                  log.Info("done GetNiceName " + port + " = " + portnamenice);                    comportnamecache[port] = portnamenice;                    return (string)portnamenice.Clone();              }
Magic Number,MissionPlanner.Comms,SerialPort,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,FixBlueToothPortNameBug,The following statement contains a magic number: foreach (var portChar in portName.Substring(3).ToCharArray())  //  Remove "COM"' put the rest in a character array               {                  if (char.IsDigit(portChar))                      newPortName += portChar.ToString(); // Good character' append to portName                   //  else                  //log.WarnFormat("Bad (Non Numeric) character in port name '{0}' - removing"' portName);              }
Magic Number,MissionPlanner.Comms,SerialPortFixer,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,SerialPortFixer,The following statement contains a magic number: SafeFileHandle hFile = NativeMethods.CreateFile(@"\\.\" + portName' dwAccess' 0' IntPtr.Zero' 3' dwFlagsAndAttributes'                                                IntPtr.Zero);
Magic Number,MissionPlanner.Comms,SerialPortFixer,C:\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,SerialPortFixer,The following statement contains a magic number: try              {                  int fileType = NativeMethods.GetFileType(hFile);                  if ((fileType != 2) && (fileType != 0))                  {                      throw new ArgumentException("Invalid Serial Port"' "portName");                  }                  m_Handle = hFile;                  InitializeDcb();              }              catch              {                  hFile.Dispose();                  m_Handle = null;                  throw;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: if (match.Success)              {                  link = match.Groups[2].Value;                  linktext = match.Groups[3].Value;                  text = text.Replace(match.Groups[1].Value' "");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: if (match.Success)              {                  link = match.Groups[2].Value;                  linktext = match.Groups[3].Value;                  text = text.Replace(match.Groups[1].Value' "");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: using (var msgBoxFrm = new Form              {                  FormBorderStyle = FormBorderStyle.FixedDialog'                  ShowInTaskbar = true'                  StartPosition = FormStartPosition.CenterParent'                  Text = caption'                  MaximizeBox = false'                  MinimizeBox = false'                  Width = textSize.Width + 50'                  Height = textSize.Height + 120'                  TopMost = true'                  AutoScaleMode = AutoScaleMode.None'              })              {                    Rectangle screenRectangle = msgBoxFrm.RectangleToScreen(msgBoxFrm.ClientRectangle);                  int titleHeight = screenRectangle.Top - msgBoxFrm.Top;                    var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text                  };                    msgBoxFrm.Controls.Add(lblMessage);                    msgBoxFrm.Width = lblMessage.Right + 50;                    if (link != "" && linktext != "")                  {                      var linklbl = new LinkLabel                      {                          Left = lblMessage.Left'                          Top = lblMessage.Bottom'                          Width = lblMessage.Width'                          Height = 15'                          Text = linktext'                          Tag = link                      };                      linklbl.Click += linklbl_Click;                        msgBoxFrm.Controls.Add(linklbl);                  }                    var actualIcon = getMessageBoxIcon(icon);                    if (actualIcon == null)                  {                      lblMessage.Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN);                  }                  else                  {                      var iconPbox = new PictureBox                      {                          Image = actualIcon.ToBitmap()'                          Location = new Point(FORM_X_MARGIN' FORM_Y_MARGIN)                      };                      msgBoxFrm.Controls.Add(iconPbox);                  }                      AddButtonsToForm(msgBoxFrm' buttons);                    // display even if theme fails                  try                  {                      if (ApplyTheme != null)                          ApplyTheme(msgBoxFrm);                      //ThemeManager.ApplyThemeTo(msgBoxFrm);                  }                  catch                  {                  }                    DialogResult test = msgBoxFrm.ShowDialog();                    answer = _state;              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: if ((t != null))                  titleHeight = 25;
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,System,CustomMessageBox,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Yes"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "No"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,MyButton,The following statement contains a magic number: _ColorNotEnabled = Color.FromArgb(73' 0x2b' 0x3a' 0x03);
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,MyButton,The following statement contains a magic number: _ColorMouseOver = Color.FromArgb(73' 0x2b' 0x3a' 0x03);
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,MyButton,The following statement contains a magic number: _ColorMouseDown = Color.FromArgb(150' 0x2b' 0x3a' 0x03);
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Controls,MyButton,C:\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: try              {                  Graphics gr = pevent.Graphics;                    gr.Clear(this.BackColor);                    gr.SmoothingMode = SmoothingMode.AntiAlias;                    Rectangle outside = new Rectangle(0' 0' this.Width' this.Height);                    LinearGradientBrush linear = new LinearGradientBrush(outside' BGGradTop' BGGradBot' LinearGradientMode.Vertical);                    Pen mypen = new Pen(Outline' 1);                    GraphicsPath outline = new GraphicsPath();                    float wid = this.Height / 3f;                    wid = 1;                    int width = this.Width - 1;                  int height = this.Height - 1;                    // tl                  outline.AddArc(0' 0' wid' wid' 180' 90);                  // top line                  outline.AddLine(wid' 0' width - wid' 0);                  // tr                  outline.AddArc(width - wid' 0' wid' wid' 270' 90);                  // br                  outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);                  // bottom line                  outline.AddLine(wid' height' width - wid' height);                  // bl                  outline.AddArc(0' height - wid' wid' wid' 90' 90);                  // left line                  outline.AddLine(0' height - wid' 0' wid - wid /2);                      gr.FillPath(linear' outline);                    gr.DrawPath(mypen' outline);                    SolidBrush mybrush = new SolidBrush(TextColor);                    if (_mouseover)                  {                      SolidBrush brush = new SolidBrush(ColorMouseOver);                        gr.FillPath(brush' outline);                  }                  if (_mousedown)                  {                      SolidBrush brush = new SolidBrush(ColorMouseDown);                        gr.FillPath(brush' outline);                  }                    if (!this.Enabled)                  {                      SolidBrush brush = new SolidBrush(_ColorNotEnabled);                        gr.FillPath(brush' outline);                  }                      StringFormat stringFormat = new StringFormat();                  stringFormat.Alignment = StringAlignment.Center;                  stringFormat.LineAlignment = StringAlignment.Center;                    string display = this.Text;                  int amppos = display.IndexOf('&');                  if (amppos != -1)                      display = display.Remove(amppos' 1);                    gr.DrawString(display' this.Font' mybrush' outside' stringFormat);              }              catch { }
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,expireCache,The following statement contains a magic number: lock (_lock)              {                  foreach (var downloadStream in _instances.ToArray())                  {                      // only process a uri once                      if (seen.Contains(downloadStream._uri))                          continue;                      seen.Add(downloadStream._uri);                        // total instances with this uri                      var uris = _instances.Where(a => { return a._uri == downloadStream._uri; });                      // total instance with thsi uri and old lastread                      var uridates = _instances.Where(a =>                      {                          return a._uri == downloadStream._uri && a._lastread < DateTime.Now.AddSeconds(-180);                      });                        // check if they are equal and expire                      if (uris.Count() == uridates.Count())                      {                          _cacheChunks.Remove(downloadStream._uri);                          foreach (var uridate in uridates.ToArray())                          {                              _instances.Remove(uridate);                          }                      }                  }              }
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      new System.Net.Security.RemoteCertificateValidationCallback(                          (sender' certificate' chain' policyErrors) => { return true; });                    log.Info(url);                  // Create a request using a URL that can receive a post.                   WebRequest request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse)response).StatusDescription);                  if (((HttpWebResponse)response).StatusCode != HttpStatusCode.OK)                      return false;                    if (File.Exists(saveto))                  {                      DateTime lastfilewrite = new FileInfo(saveto).LastWriteTime;                      DateTime lasthttpmod = ((HttpWebResponse)response).LastModified;                        if (lasthttpmod < lastfilewrite)                      {                          if (((HttpWebResponse)response).ContentLength == new FileInfo(saveto).Length)                          {                              log.Info("got LastModified " + saveto + " " + ((HttpWebResponse)response).LastModified +                                       " vs " + new FileInfo(saveto).LastWriteTime);                              response.Close();                              return true;                          }                      }                  }                    // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    long bytes = response.ContentLength;                  long contlen = bytes;                    byte[] buf1 = new byte[1024];                    if (!Directory.Exists(Path.GetDirectoryName(saveto)))                      Directory.CreateDirectory(Path.GetDirectoryName(saveto));                    FileStream fs = new FileStream(saveto + ".new"' FileMode.Create);                    DateTime dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      log.Debug(saveto + " " + bytes);                      int len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex.ToString());                  return false;              }
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      new System.Net.Security.RemoteCertificateValidationCallback(                          (sender' certificate' chain' policyErrors) => { return true; });                    log.Info(url);                  // Create a request using a URL that can receive a post.                   WebRequest request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse)response).StatusDescription);                  if (((HttpWebResponse)response).StatusCode != HttpStatusCode.OK)                      return false;                    if (File.Exists(saveto))                  {                      DateTime lastfilewrite = new FileInfo(saveto).LastWriteTime;                      DateTime lasthttpmod = ((HttpWebResponse)response).LastModified;                        if (lasthttpmod < lastfilewrite)                      {                          if (((HttpWebResponse)response).ContentLength == new FileInfo(saveto).Length)                          {                              log.Info("got LastModified " + saveto + " " + ((HttpWebResponse)response).LastModified +                                       " vs " + new FileInfo(saveto).LastWriteTime);                              response.Close();                              return true;                          }                      }                  }                    // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    long bytes = response.ContentLength;                  long contlen = bytes;                    byte[] buf1 = new byte[1024];                    if (!Directory.Exists(Path.GetDirectoryName(saveto)))                      Directory.CreateDirectory(Path.GetDirectoryName(saveto));                    FileStream fs = new FileStream(saveto + ".new"' FileMode.Create);                    DateTime dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      log.Debug(saveto + " " + bytes);                      int len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex.ToString());                  return false;              }
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The following statement contains a magic number: webRequest.Timeout = 1200;
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,MissionPlanner.Utilities,ThemeManager,C:\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: foreach (Control ctl in temp.Controls)              {                  if (ctl.GetType() == typeof (MyButton))                  {                      var but = (MyButton) ctl;                      but.BGGradTop = Color.FromArgb(242' 242' 242);                      but.BGGradBot = Color.FromArgb(207' 207' 207);                      but.ForeColor = Color.Black;                      but.TextColor = Color.Black;                      but.Outline = Color.FromArgb(112' 112' 112);                  }                    if (ctl.Controls.Count > 0)                      ApplyNone(ctl' 1);              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,IHex,C:\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: while (!sr.EndOfStream)              {                  var line = sr.ReadLine();                    // every line must start with a :                  if (!line.StartsWith(":"))                      throw new Exception("invalid IntelHex file");                    if (ProgressEvent != null)                      ProgressEvent(sr.BaseStream.Position/(double) sr.BaseStream.Length);                    // parse the record type and data length' assume ihex8                  // ignore the checksum                  var length = Convert.ToByte(line.Substring(1' 2)' 16);                  var address = Convert.ToUInt32(line.Substring(3' 4)' 16);                  var rtype = Convert.ToByte(line.Substring(7' 2)' 16);                    // handle type zero (data) records                  if (rtype == 0)                  {                      var b = new byte[length];                      var hexbytes = line.Substring(9' length*2);                        // convert hex bytes                      for (var i = 0; i < length; i++)                      {                          b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);                      }                        // add for banking address                      address += upperaddress << 16;                        log(string.Format("ihex: 0x{0:X}: {1}\n"' address' length)' 1);                      loadedSize += length;                        // and add to the list of ranges                      insert(address' b);                  }                  else if (rtype == 4 && length == 2 && address == 0)                  {                      bankingDetected = true;                      upperaddress = Convert.ToUInt32(line.Substring(9' 4)' 16);                  }              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,connect_and_sync,The following statement contains a magic number: port.ReadTimeout = 2000;
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,connect_and_sync,The following statement contains a magic number: for (var i = 0; i < 3; i++)              {                  if (cmdSync())                      break;                  log(string.Format("sync({0}) failed\n"' i)' 1);              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,upload_and_verify,The following statement contains a magic number: bytes_to_process *= 2;
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdErase,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdSetAddress,The following statement contains a magic number: if (banking)              {                  send(Code.LOAD_ADDRESS);                  send((byte) (address & 0xff));                  send((byte) ((address >> 8) & 0xff));                  send((byte) ((address >> 16) & 0xff));                  send(Code.EOC);                    log("Bank Programming address " + (address >> 16));              }              else              {                  send(Code.LOAD_ADDRESS);                  send((ushort) address);                  send(Code.EOC);              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdSetAddress,The following statement contains a magic number: if (banking)              {                  send(Code.LOAD_ADDRESS);                  send((byte) (address & 0xff));                  send((byte) ((address >> 8) & 0xff));                  send((byte) ((address >> 16) & 0xff));                  send(Code.EOC);                    log("Bank Programming address " + (address >> 16));              }              else              {                  send(Code.LOAD_ADDRESS);                  send((ushort) address);                  send(Code.EOC);              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdSetAddress,The following statement contains a magic number: if (banking)              {                  send(Code.LOAD_ADDRESS);                  send((byte) (address & 0xff));                  send((byte) ((address >> 8) & 0xff));                  send((byte) ((address >> 16) & 0xff));                  send(Code.EOC);                    log("Bank Programming address " + (address >> 16));              }              else              {                  send(Code.LOAD_ADDRESS);                  send((ushort) address);                  send(Code.EOC);              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,getSync,The following statement contains a magic number: try              {                  Code c;                    c = (Code) recv();                  if (c != Code.INSYNC)                  {                      log(string.Format("got {0:X} when expecting {1:X}\n"' (int) c' (int) Code.INSYNC)' 2);                      throw new Exception("BAD SYNC");                  }                  c = (Code) recv();                  if (c != Code.OK)                  {                      log(string.Format("got {0:X} when expecting {1:X}\n"' (int) c' (int) Code.EOC)' 2);                      throw new Exception("BAD STATUS");                  }              }              catch              {                  log("FAIL: lost synchronisation with the bootloader\n");                  throw new Exception("SYNC LOST");              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,getSync,The following statement contains a magic number: try              {                  Code c;                    c = (Code) recv();                  if (c != Code.INSYNC)                  {                      log(string.Format("got {0:X} when expecting {1:X}\n"' (int) c' (int) Code.INSYNC)' 2);                      throw new Exception("BAD SYNC");                  }                  c = (Code) recv();                  if (c != Code.OK)                  {                      log(string.Format("got {0:X} when expecting {1:X}\n"' (int) c' (int) Code.EOC)' 2);                      throw new Exception("BAD STATUS");                  }              }              catch              {                  log("FAIL: lost synchronisation with the bootloader\n");                  throw new Exception("SYNC LOST");              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,getSync,The following statement contains a magic number: log("in sync\n"' 5);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("send "' 5);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: foreach (var x in b)              {                  log(string.Format(" {0:X}"' x)' 5);              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("\n"' 5);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("send "' 5);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: foreach (var x in b)              {                  log(string.Format(" {0:X}"' x)' 5);              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("\n"' 5);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: while (port.BytesToWrite > 50)              {                  var fred = 1;                  fred++;                  Console.WriteLine("slowdown");              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: while (port.BytesToWrite > 50)              {                  var fred = 1;                  fred++;                  Console.WriteLine("slowdown");              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: var b = new byte[2] {(byte) (data & 0xff)' (byte) (data >> 8)};
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: var b = new byte[2] {(byte) (data & 0xff)' (byte) (data >> 8)};
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("send "' 5);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: foreach (var x in b)              {                  log(string.Format(" {0:X}"' x)' 5);              }
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("\n"' 5);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: port.Write(b' 0' 2);
Magic Number,uploader,Uploader,C:\repos\diydrones_MissionPlanner\Radio\Uploader.cs,recv,The following statement contains a magic number: log(string.Format("recv {0:X}\n"' b)' 5);
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: NETID.DataSource = Enumerable.Range(0' 500).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RNETID.DataSource = Enumerable.Range(0' 500).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: MAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: MAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: MAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RMAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RMAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RMAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: try              {                  uploader_LogEvent("Trying XModem Mode");                  //comPort.BaudRate = 57600;                  comPort.BaudRate = MainV2.comPort.BaseStream.BaudRate;                  comPort.ReadTimeout = 1000;                    Thread.Sleep(2000);                  var tempd = comPort.ReadExisting();                  Console.WriteLine(tempd);                  comPort.Write("U");                  Thread.Sleep(1000);                  var resp1 = Serial_ReadLine(comPort); // echo                  var resp2 = Serial_ReadLine(comPort); // echo 2                  var tempd2 = comPort.ReadExisting(); // posibly bootloader info / use to sync                  // identify                  comPort.Write("i");                  // responce is rfd900....                  var resp3 = Serial_ReadLine(comPort); //echo                  var resp4 = Serial_ReadLine(comPort); // newline                  var resp5 = Serial_ReadLine(comPort); // bootloader info                  uploader_LogEvent(resp5);                  if (resp5.Contains("RFD900"))                  {                      // start upload                      comPort.Write("u");                      var resp6 = Serial_ReadLine(comPort); // echo                      var resp7 = Serial_ReadLine(comPort); // Ready                      if (resp7.Contains("Ready"))                      {                          comPort.ReadTimeout = 3500;                          // responce is C                          var isC = comPort.ReadByte();                          var temp = comPort.ReadExisting();                          if (isC == 'C')                          {                              if (getFirmwareLocal())                              {                                    XModem.LogEvent += uploader_LogEvent;                                  XModem.ProgressEvent += uploader_ProgressEvent;                                  // start file send                                  XModem.Upload(firmwarefile'                                      comPort);                                  XModem.LogEvent -= uploader_LogEvent;                                  XModem.ProgressEvent -= uploader_ProgressEvent;                                  return true;                              }                              return false;                          }                      }                  }              }              catch (Exception ex2)              {                  log.Error(ex2);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: try              {                  uploader_LogEvent("Trying XModem Mode");                  //comPort.BaudRate = 57600;                  comPort.BaudRate = MainV2.comPort.BaseStream.BaudRate;                  comPort.ReadTimeout = 1000;                    Thread.Sleep(2000);                  var tempd = comPort.ReadExisting();                  Console.WriteLine(tempd);                  comPort.Write("U");                  Thread.Sleep(1000);                  var resp1 = Serial_ReadLine(comPort); // echo                  var resp2 = Serial_ReadLine(comPort); // echo 2                  var tempd2 = comPort.ReadExisting(); // posibly bootloader info / use to sync                  // identify                  comPort.Write("i");                  // responce is rfd900....                  var resp3 = Serial_ReadLine(comPort); //echo                  var resp4 = Serial_ReadLine(comPort); // newline                  var resp5 = Serial_ReadLine(comPort); // bootloader info                  uploader_LogEvent(resp5);                  if (resp5.Contains("RFD900"))                  {                      // start upload                      comPort.Write("u");                      var resp6 = Serial_ReadLine(comPort); // echo                      var resp7 = Serial_ReadLine(comPort); // Ready                      if (resp7.Contains("Ready"))                      {                          comPort.ReadTimeout = 3500;                          // responce is C                          var isC = comPort.ReadByte();                          var temp = comPort.ReadExisting();                          if (isC == 'C')                          {                              if (getFirmwareLocal())                              {                                    XModem.LogEvent += uploader_LogEvent;                                  XModem.ProgressEvent += uploader_ProgressEvent;                                  // start file send                                  XModem.Upload(firmwarefile'                                      comPort);                                  XModem.LogEvent -= uploader_LogEvent;                                  XModem.ProgressEvent -= uploader_ProgressEvent;                                  return true;                              }                              return false;                          }                      }                  }              }              catch (Exception ex2)              {                  log.Error(ex2);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: try              {                  uploader_LogEvent("Trying XModem Mode");                  //comPort.BaudRate = 57600;                  comPort.BaudRate = MainV2.comPort.BaseStream.BaudRate;                  comPort.ReadTimeout = 1000;                    Thread.Sleep(2000);                  var tempd = comPort.ReadExisting();                  Console.WriteLine(tempd);                  comPort.Write("U");                  Thread.Sleep(1000);                  var resp1 = Serial_ReadLine(comPort); // echo                  var resp2 = Serial_ReadLine(comPort); // echo 2                  var tempd2 = comPort.ReadExisting(); // posibly bootloader info / use to sync                  // identify                  comPort.Write("i");                  // responce is rfd900....                  var resp3 = Serial_ReadLine(comPort); //echo                  var resp4 = Serial_ReadLine(comPort); // newline                  var resp5 = Serial_ReadLine(comPort); // bootloader info                  uploader_LogEvent(resp5);                  if (resp5.Contains("RFD900"))                  {                      // start upload                      comPort.Write("u");                      var resp6 = Serial_ReadLine(comPort); // echo                      var resp7 = Serial_ReadLine(comPort); // Ready                      if (resp7.Contains("Ready"))                      {                          comPort.ReadTimeout = 3500;                          // responce is C                          var isC = comPort.ReadByte();                          var temp = comPort.ReadExisting();                          if (isC == 'C')                          {                              if (getFirmwareLocal())                              {                                    XModem.LogEvent += uploader_LogEvent;                                  XModem.ProgressEvent += uploader_ProgressEvent;                                  // start file send                                  XModem.Upload(firmwarefile'                                      comPort);                                  XModem.LogEvent -= uploader_LogEvent;                                  XModem.ProgressEvent -= uploader_ProgressEvent;                                  return true;                              }                              return false;                          }                      }                  }              }              catch (Exception ex2)              {                  log.Error(ex2);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: try              {                  uploader_LogEvent("Trying XModem Mode");                  //comPort.BaudRate = 57600;                  comPort.BaudRate = MainV2.comPort.BaseStream.BaudRate;                  comPort.ReadTimeout = 1000;                    Thread.Sleep(2000);                  var tempd = comPort.ReadExisting();                  Console.WriteLine(tempd);                  comPort.Write("U");                  Thread.Sleep(1000);                  var resp1 = Serial_ReadLine(comPort); // echo                  var resp2 = Serial_ReadLine(comPort); // echo 2                  var tempd2 = comPort.ReadExisting(); // posibly bootloader info / use to sync                  // identify                  comPort.Write("i");                  // responce is rfd900....                  var resp3 = Serial_ReadLine(comPort); //echo                  var resp4 = Serial_ReadLine(comPort); // newline                  var resp5 = Serial_ReadLine(comPort); // bootloader info                  uploader_LogEvent(resp5);                  if (resp5.Contains("RFD900"))                  {                      // start upload                      comPort.Write("u");                      var resp6 = Serial_ReadLine(comPort); // echo                      var resp7 = Serial_ReadLine(comPort); // Ready                      if (resp7.Contains("Ready"))                      {                          comPort.ReadTimeout = 3500;                          // responce is C                          var isC = comPort.ReadByte();                          var temp = comPort.ReadExisting();                          if (isC == 'C')                          {                              if (getFirmwareLocal())                              {                                    XModem.LogEvent += uploader_LogEvent;                                  XModem.ProgressEvent += uploader_ProgressEvent;                                  // start file send                                  XModem.Upload(firmwarefile'                                      comPort);                                  XModem.LogEvent -= uploader_LogEvent;                                  XModem.ProgressEvent -= uploader_ProgressEvent;                                  return true;                              }                              return false;                          }                      }                  }              }              catch (Exception ex2)              {                  log.Error(ex2);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: if (MainV2.comPort.BaseStream.IsOpen)              {                  try                  {                      getTelemPortWithRadio(ref comPort);                        uploader.PROG_MULTI_MAX = 64;                  }                  catch (Exception ex)                  {                      CustomMessageBox.Show("Error " + ex);                  }              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: try              {                  comPort.PortName = MainV2.comPortName;                  comPort.BaudRate = 115200;                    comPort.Open();              }              catch              {                  CustomMessageBox.Show("Invalid ComPort or in use");                  return;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: try              {                  if (upload_xmodem(comPort))                  {                      comPort.Close();                      return;                  }                    comPort.BaudRate = 115200;                    uploader_ProgressEvent(0);                  uploader_LogEvent("Trying Bootloader Mode");                    uploader.port = comPort;                  uploader.connect_and_sync();                    uploader.ProgressEvent += uploader_ProgressEvent;                  uploader.LogEvent += uploader_LogEvent;                    uploader_LogEvent("In Bootloader Mode");                  bootloadermode = true;              }              catch (Exception ex1)              {                  log.Error(ex1);                    // cleanup bootloader mode fail' and try firmware mode                  comPort.Close();                  if (MainV2.comPort.BaseStream.IsOpen)                  {                      // default baud... guess                      comPort.BaudRate = 57600;                  }                  else                  {                      comPort.BaudRate = MainV2.comPort.BaseStream.BaudRate;                  }                  try                  {                      comPort.Open();                  }                  catch                  {                      CustomMessageBox.Show("Error opening port"' "Error");                      return;                  }                    uploader.ProgressEvent += uploader_ProgressEvent;                  uploader.LogEvent += uploader_LogEvent;                    uploader_LogEvent("Trying Firmware Mode");                  bootloadermode = false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: try              {                  if (upload_xmodem(comPort))                  {                      comPort.Close();                      return;                  }                    comPort.BaudRate = 115200;                    uploader_ProgressEvent(0);                  uploader_LogEvent("Trying Bootloader Mode");                    uploader.port = comPort;                  uploader.connect_and_sync();                    uploader.ProgressEvent += uploader_ProgressEvent;                  uploader.LogEvent += uploader_LogEvent;                    uploader_LogEvent("In Bootloader Mode");                  bootloadermode = true;              }              catch (Exception ex1)              {                  log.Error(ex1);                    // cleanup bootloader mode fail' and try firmware mode                  comPort.Close();                  if (MainV2.comPort.BaseStream.IsOpen)                  {                      // default baud... guess                      comPort.BaudRate = 57600;                  }                  else                  {                      comPort.BaudRate = MainV2.comPort.BaseStream.BaudRate;                  }                  try                  {                      comPort.Open();                  }                  catch                  {                      CustomMessageBox.Show("Error opening port"' "Error");                      return;                  }                    uploader.ProgressEvent += uploader_ProgressEvent;                  uploader.LogEvent += uploader_LogEvent;                    uploader_LogEvent("Trying Firmware Mode");                  bootloadermode = false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: if (bootloadermode || doConnect(comPort))              {                  // put into bootloader mode/update mode                  if (!bootloadermode)                  {                      try                      {                          comPort.Write("AT&UPDATE\r\n");                          var left = comPort.ReadExisting();                          log.Info(left);                          Sleep(700);                          comPort.BaudRate = 115200;                      }                      catch                      {                      }                        if (upload_xmodem(comPort))                      {                          comPort.Close();                          return;                      }                        comPort.BaudRate = 115200;                  }                    try                  {                      // force sync after changing baudrate                      uploader.connect_and_sync();                  }                  catch                  {                      CustomMessageBox.Show("Failed to sync with Radio");                      goto exit;                  }                    var device = Uploader.Board.FAILED;                  var freq = Uploader.Frequency.FAILED;                    // get the device type and frequency in the bootloader                  uploader.getDevice(ref device' ref freq);                    // get firmware for this device                  if (getFirmware(device' custom))                  {                      // load the hex                      try                      {                          iHex.load(firmwarefile);                      }                      catch                      {                          CustomMessageBox.Show("Bad Firmware File");                          goto exit;                      }                        // upload the hex and verify                      try                      {                          uploader.upload(comPort' iHex);                      }                      catch (Exception ex)                      {                          CustomMessageBox.Show("Upload Failed " + ex.Message);                      }                  }                  else                  {                      CustomMessageBox.Show("Failed to download new firmware");                  }              }              else              {                  CustomMessageBox.Show("Failed to identify Radio");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: if (bootloadermode || doConnect(comPort))              {                  // put into bootloader mode/update mode                  if (!bootloadermode)                  {                      try                      {                          comPort.Write("AT&UPDATE\r\n");                          var left = comPort.ReadExisting();                          log.Info(left);                          Sleep(700);                          comPort.BaudRate = 115200;                      }                      catch                      {                      }                        if (upload_xmodem(comPort))                      {                          comPort.Close();                          return;                      }                        comPort.BaudRate = 115200;                  }                    try                  {                      // force sync after changing baudrate                      uploader.connect_and_sync();                  }                  catch                  {                      CustomMessageBox.Show("Failed to sync with Radio");                      goto exit;                  }                    var device = Uploader.Board.FAILED;                  var freq = Uploader.Frequency.FAILED;                    // get the device type and frequency in the bootloader                  uploader.getDevice(ref device' ref freq);                    // get firmware for this device                  if (getFirmware(device' custom))                  {                      // load the hex                      try                      {                          iHex.load(firmwarefile);                      }                      catch                      {                          CustomMessageBox.Show("Bad Firmware File");                          goto exit;                      }                        // upload the hex and verify                      try                      {                          uploader.upload(comPort' iHex);                      }                      catch (Exception ex)                      {                          CustomMessageBox.Show("Upload Failed " + ex.Message);                      }                  }                  else                  {                      CustomMessageBox.Show("Failed to download new firmware");                  }              }              else              {                  CustomMessageBox.Show("Failed to identify Radio");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: if (bootloadermode || doConnect(comPort))              {                  // put into bootloader mode/update mode                  if (!bootloadermode)                  {                      try                      {                          comPort.Write("AT&UPDATE\r\n");                          var left = comPort.ReadExisting();                          log.Info(left);                          Sleep(700);                          comPort.BaudRate = 115200;                      }                      catch                      {                      }                        if (upload_xmodem(comPort))                      {                          comPort.Close();                          return;                      }                        comPort.BaudRate = 115200;                  }                    try                  {                      // force sync after changing baudrate                      uploader.connect_and_sync();                  }                  catch                  {                      CustomMessageBox.Show("Failed to sync with Radio");                      goto exit;                  }                    var device = Uploader.Board.FAILED;                  var freq = Uploader.Frequency.FAILED;                    // get the device type and frequency in the bootloader                  uploader.getDevice(ref device' ref freq);                    // get firmware for this device                  if (getFirmware(device' custom))                  {                      // load the hex                      try                      {                          iHex.load(firmwarefile);                      }                      catch                      {                          CustomMessageBox.Show("Bad Firmware File");                          goto exit;                      }                        // upload the hex and verify                      try                      {                          uploader.upload(comPort' iHex);                      }                      catch (Exception ex)                      {                          CustomMessageBox.Show("Upload Failed " + ex.Message);                      }                  }                  else                  {                      CustomMessageBox.Show("Failed to download new firmware");                  }              }              else              {                  CustomMessageBox.Show("Failed to identify Radio");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,iHex_ProgressEvent,The following statement contains a magic number: try              {                  Progressbar.Value = (int) (completed*100);                  Application.DoEvents();              }              catch              {              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_LogEvent,The following statement contains a magic number: try              {                  if (level == 0)                  {                      Console.Write(message);                      lbl_status.Text = message;                      log.Info(message);                      Application.DoEvents();                  }                  else if (level < 5) // 5 = byte data                  {                      log.Debug(message);                  }              }              catch              {              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_ProgressEvent,The following statement contains a magic number: try              {                  Progressbar.Value = (int)Math.Min (completed*100'100);                  Application.DoEvents();              }              catch              {              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_ProgressEvent,The following statement contains a magic number: try              {                  Progressbar.Value = (int)Math.Min (completed*100'100);                  Application.DoEvents();              }              catch              {              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: try              {                  if (MainV2.comPort.BaseStream.IsOpen)                  {                      getTelemPortWithRadio(ref comPort);                  }                  else                  {                      comPort.PortName = MainV2.comPortName;                      comPort.BaudRate = MainV2.comPortBaud;                  }                    comPort.ReadTimeout = 4000;                    comPort.Open();              }              catch              {                  CustomMessageBox.Show("Invalid ComPort or in use");                  return;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: if (doConnect(comPort))              {                  // cleanup                  doCommand(comPort' "AT&T");                    comPort.DiscardInBuffer();                    lbl_status.Text = "Doing Command";                      if (RTI.Text != "")                  {                      // remote                      var answer = doCommand(comPort' "RTI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  if (values[1] == "ENCRYPTION_LEVEL")                                                  {                                                      // set this on the local radio as well.                                                      doCommand(comPort' "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                      // both radios should now be using the default key                                                  }                                                  else                                                  {                                                      CustomMessageBox.Show("Set Command error");                                                  }                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "RTS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        Sleep(100);                  }                    comPort.DiscardInBuffer();                  {                      //local                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split(new[] {'\n'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(':'' '=');                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      if (controls[0].GetType() == typeof (CheckBox))                                      {                                          var value = ((CheckBox) controls[0]).Checked ? "1" : "0";                                            if (value != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + value + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is TextBox)                                      {                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          if (((ComboBox) controls[0]).SelectedValue.ToString() != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + ((ComboBox) controls[0]).SelectedValue +                                                  "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                      else if (controls[0] is ComboBox)                                      {                                          if (controls[0].Text != values[2].Trim())                                          {                                              var cmdanswer = doCommand(comPort'                                                  "ATS" + values[0].Trim().TrimStart('S') + "=" + controls[0].Text + "\r");                                                if (cmdanswer.Contains("OK"))                                              {                                              }                                              else                                              {                                                  CustomMessageBox.Show("Set Command error");                                              }                                          }                                      }                                  }                              }                          }                      }                        // set encryption keys at the same time' so if we are enabled we dont lose comms.                      // we have set encryption to on for both radios' they will be using the default key atm                      if (RENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);                      }                      if (ENCRYPTION_LEVEL.Checked)                      {                          doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);                      }                          if (RTI.Text != "")                      {                          // write it                          doCommand(comPort' "RT&W");                            // return to normal mode                          doCommand(comPort' "RTZ");                      }                        // write it                      doCommand(comPort' "AT&W");                          // return to normal mode                      doCommand(comPort' "ATZ");                  }                    lbl_status.Text = "Done";              }              else              {                  // return to normal mode                  doCommand(comPort' "ATZ");                    lbl_status.Text = "Fail";                  CustomMessageBox.Show("Failed to enter command mode");              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getTelemPortWithRadio,The following statement contains a magic number: comPort.ReadTimeout = 4000;
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getTelemPortWithRadio,The following statement contains a magic number: comPort.ReadTimeout = 4000;
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (MainV2.comPort.BaseStream.IsOpen)                  {                      getTelemPortWithRadio(ref comPort);                  }                  else                  {                      comPort.PortName = MainV2.comPortName;                      comPort.BaudRate = MainV2.comPortBaud;                  }                    comPort.ReadTimeout = 4000;                    comPort.Open();              }              catch              {                  CustomMessageBox.Show("Invalid ComPort or in use");                  return;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: try              {                  if (doConnect(comPort))                  {                      // cleanup                      doCommand(comPort' "AT&T");                        comPort.DiscardInBuffer();                        lbl_status.Text = "Doing Command ATI & RTI";                        ATI.Text = doCommand(comPort' "ATI");                        NumberStyles style = NumberStyles.Any;                        var freqstring = doCommand(comPort' "ATI3").Trim();                        if(freqstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var freq =                          (Uploader.Frequency)                              Enum.Parse(typeof (Uploader.Frequency)'                                  int.Parse(freqstring.ToLower().Replace("x"' "")' style).ToString());                        ATI3.Text = freq.ToString();                        style = NumberStyles.Any;                        var boardstring = doCommand(comPort' "ATI2").Trim();                        if (boardstring.ToLower().Contains('x'))                          style = NumberStyles.AllowHexSpecifier;                        var board =                          (Uploader.Board)                              Enum.Parse(typeof (Uploader.Board)'                                  int.Parse(boardstring.ToLower().Replace("x"' "")' style).ToString());                        ATI2.Text = board.ToString();                        // 8 and 9                      if (freq == Uploader.Frequency.FREQ_915)                      {                          MIN_FREQ.DataSource = Range(895000' 1000' 935000);                          RMIN_FREQ.DataSource = Range(895000' 1000' 935000);                            MAX_FREQ.DataSource = Range(895000' 1000' 935000);                          RMAX_FREQ.DataSource = Range(895000' 1000' 935000);                      }                      else if (freq == Uploader.Frequency.FREQ_433)                      {                          MIN_FREQ.DataSource = Range(414000' 50' 460000);                          RMIN_FREQ.DataSource = Range(414000' 50' 460000);                            MAX_FREQ.DataSource = Range(414000' 50' 460000);                          RMAX_FREQ.DataSource = Range(414000' 50' 460000);                      }                      else if (freq == Uploader.Frequency.FREQ_868)                      {                          MIN_FREQ.DataSource = Range(849000' 1000' 889000);                          RMIN_FREQ.DataSource = Range(849000' 1000' 889000);                            MAX_FREQ.DataSource = Range(849000' 1000' 889000);                          RMAX_FREQ.DataSource = Range(849000' 1000' 889000);                      }                        if (board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus)                      {                          TXPOWER.DataSource = Range(1' 1' 30);                          RTXPOWER.DataSource = Range(1' 1' 30);                      }                        txt_aeskey.Text = doCommand(comPort' "AT&E?").Trim();                        RSSI.Text = doCommand(comPort' "ATI7").Trim();                        lbl_status.Text = "Doing Command ATI5";                        var answer = doCommand(comPort' "ATI5"' true);                        var items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '='}' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxLocal.Controls.Find(values[1].Trim()' true);                                    if (controls.Length > 0)                                  {                                      controls[0].Enabled = true;                                        if (controls[0] is CheckBox)                                      {                                          ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                      }                                      else if (controls[0] is TextBox)                                      {                                          ((TextBox) controls[0]).Text = values[2].Trim();                                      }                                      else if (controls[0].Name.Contains("MAVLINK")) //                                      {                                          var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                          ((ComboBox) controls[0]).Text = ans.ToString();                                      }                                      else if (controls[0] is ComboBox)                                      {                                          ((ComboBox) controls[0]).Text = values[2].Trim();                                      }                                  }                              }                          }                      }                        // remote                      foreach (Control ctl in groupBoxRemote.Controls)                      {                          if (ctl.Name != "RSSI")                              ctl.ResetText();                      }                        comPort.DiscardInBuffer();                        RTI.Text = doCommand(comPort' "RTI");                        try                      {                          var resp = doCommand(comPort' "RTI2");                          if (resp.Trim() != "")                              RTI2.Text =                                  ((Uploader.Board)Enum.Parse(typeof(Uploader.Board)' resp)).ToString();                      }                      catch                      {                      }                        txt_Raeskey.Text = doCommand(comPort' "RT&E?").Trim();                        lbl_status.Text = "Doing Command RTI5";                        answer = doCommand(comPort' "RTI5"' true);                        items = answer.Split('\n');                        foreach (var item in items)                      {                          //if (item.StartsWith("S"))                          {                              var values = item.Split(new char[] { ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                                if (values.Length == 3)                              {                                  values[1] = values[1].Replace("/"' "_");                                    var controls = groupBoxRemote.Controls.Find("R" + values[1].Trim()' true);                                    if (controls.Length == 0)                                      continue;                                    controls[0].Enabled = true;                                    if (controls[0] is CheckBox)                                  {                                      ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";                                  }                                  else if (controls[0] is TextBox)                                  {                                      ((TextBox) controls[0]).Text = values[2].Trim();                                  }                                  else if (controls[0].Name.Contains("MAVLINK")) //                                  {                                      var ans = Enum.Parse(typeof (mavlink_option)' values[2].Trim());                                      ((ComboBox) controls[0]).Text = ans.ToString();                                  }                                  else if (controls[0] is ComboBox)                                  {                                      ((ComboBox) controls[0]).Text = values[2].Trim();                                  }                              }                              else                              {                                  /*                                  if (item.Contains("S15"))                                  {                                      answer = doCommand(comPort' "RTS15?");                                      int rts15 = 0;                                      if (int.TryParse(answer' out rts15))                                      {                                          RS15.Enabled = true;                                          RS15.Text = rts15.ToString();                                      }                                  }                                  */                                  log.Info("Odd config line :" + item);                              }                          }                      }                        // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Done";                  }                  else                  {                      // off hook                      doCommand(comPort' "ATO");                        lbl_status.Text = "Fail";                      CustomMessageBox.Show("Failed to enter command mode");                  }                    comPort.Close();                    BUT_Syncoptions.Enabled = true;                    BUT_savesettings.Enabled = true;              }              catch (Exception ex)              {                  try                  {                      if (comPort != null)                          comPort.Close();                  }                  catch                  {                  }                  lbl_status.Text = "Error";                  CustomMessageBox.Show("Error during read " + ex);              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doCommand,The following statement contains a magic number: comPort.ReadTimeout = 1000;
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doCommand,The following statement contains a magic number: if (cmdecho.Contains(cmd))              {                  var value = "";                    if (multiLineResponce)                  {                      var deadline = DateTime.Now.AddMilliseconds(1000);                      while (comPort.BytesToRead > 0 || DateTime.Now < deadline)                      {                          try                          {                              value = value + Serial_ReadLine(comPort);                          }                          catch                          {                              value = value + comPort.ReadExisting();                          }                      }                  }                  else                  {                      value = Serial_ReadLine(comPort);                        if (value == "" && level == 0)                      {                          return doCommand(comPort' cmd' multiLineResponce' 1);                      }                  }                    log.Info(value.Replace('\0'' ' '));                    return value;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: try              {                  Console.WriteLine("doConnect");                    var trys = 1;                    // setup a known enviroment                  comPort.Write("ATO\r\n");                    retry:                    // wait                  Sleep(1500' comPort);                  comPort.DiscardInBuffer();                  // send config string                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(1500' comPort);                  // check for config response "OK"                  log.Info("Connect btr " + comPort.BytesToRead + " baud " + comPort.BaudRate);                  // allow time for data/response                    if (comPort.BytesToRead == 0 && trys <= 3)                  {                      trys++;                      log.Info("doConnect retry");                      goto retry;                  }                    var buffer = new byte[20];                  var len = comPort.Read(buffer' 0' buffer.Length);                  var conn = Encoding.ASCII.GetString(buffer' 0' len);                  log.Info("Connect first response " + conn.Replace('\0'' ' ') + " " + conn.Length);                  if (conn.Contains("OK"))                  {                      //return true;                  }                  else                  {                      // cleanup incase we are already in cmd mode                      comPort.Write("\r\n");                  }                    doCommand(comPort' "AT&T");                    var version = doCommand(comPort' "ATI");                    log.Info("Connect Version: " + version.Trim() + "\n");                    var regex = new Regex(@"SiK\s+(.*)\s+on\s+(.*)");                    if (regex.IsMatch(version))                  {                      return true;                  }                    return false;              }              catch              {                  return false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: try              {                  Console.WriteLine("doConnect");                    var trys = 1;                    // setup a known enviroment                  comPort.Write("ATO\r\n");                    retry:                    // wait                  Sleep(1500' comPort);                  comPort.DiscardInBuffer();                  // send config string                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(1500' comPort);                  // check for config response "OK"                  log.Info("Connect btr " + comPort.BytesToRead + " baud " + comPort.BaudRate);                  // allow time for data/response                    if (comPort.BytesToRead == 0 && trys <= 3)                  {                      trys++;                      log.Info("doConnect retry");                      goto retry;                  }                    var buffer = new byte[20];                  var len = comPort.Read(buffer' 0' buffer.Length);                  var conn = Encoding.ASCII.GetString(buffer' 0' len);                  log.Info("Connect first response " + conn.Replace('\0'' ' ') + " " + conn.Length);                  if (conn.Contains("OK"))                  {                      //return true;                  }                  else                  {                      // cleanup incase we are already in cmd mode                      comPort.Write("\r\n");                  }                    doCommand(comPort' "AT&T");                    var version = doCommand(comPort' "ATI");                    log.Info("Connect Version: " + version.Trim() + "\n");                    var regex = new Regex(@"SiK\s+(.*)\s+on\s+(.*)");                    if (regex.IsMatch(version))                  {                      return true;                  }                    return false;              }              catch              {                  return false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: try              {                  Console.WriteLine("doConnect");                    var trys = 1;                    // setup a known enviroment                  comPort.Write("ATO\r\n");                    retry:                    // wait                  Sleep(1500' comPort);                  comPort.DiscardInBuffer();                  // send config string                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(1500' comPort);                  // check for config response "OK"                  log.Info("Connect btr " + comPort.BytesToRead + " baud " + comPort.BaudRate);                  // allow time for data/response                    if (comPort.BytesToRead == 0 && trys <= 3)                  {                      trys++;                      log.Info("doConnect retry");                      goto retry;                  }                    var buffer = new byte[20];                  var len = comPort.Read(buffer' 0' buffer.Length);                  var conn = Encoding.ASCII.GetString(buffer' 0' len);                  log.Info("Connect first response " + conn.Replace('\0'' ' ') + " " + conn.Length);                  if (conn.Contains("OK"))                  {                      //return true;                  }                  else                  {                      // cleanup incase we are already in cmd mode                      comPort.Write("\r\n");                  }                    doCommand(comPort' "AT&T");                    var version = doCommand(comPort' "ATI");                    log.Info("Connect Version: " + version.Trim() + "\n");                    var regex = new Regex(@"SiK\s+(.*)\s+on\s+(.*)");                    if (regex.IsMatch(version))                  {                      return true;                  }                    return false;              }              catch              {                  return false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: try              {                  Console.WriteLine("doConnect");                    var trys = 1;                    // setup a known enviroment                  comPort.Write("ATO\r\n");                    retry:                    // wait                  Sleep(1500' comPort);                  comPort.DiscardInBuffer();                  // send config string                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(1500' comPort);                  // check for config response "OK"                  log.Info("Connect btr " + comPort.BytesToRead + " baud " + comPort.BaudRate);                  // allow time for data/response                    if (comPort.BytesToRead == 0 && trys <= 3)                  {                      trys++;                      log.Info("doConnect retry");                      goto retry;                  }                    var buffer = new byte[20];                  var len = comPort.Read(buffer' 0' buffer.Length);                  var conn = Encoding.ASCII.GetString(buffer' 0' len);                  log.Info("Connect first response " + conn.Replace('\0'' ' ') + " " + conn.Length);                  if (conn.Contains("OK"))                  {                      //return true;                  }                  else                  {                      // cleanup incase we are already in cmd mode                      comPort.Write("\r\n");                  }                    doCommand(comPort' "AT&T");                    var version = doCommand(comPort' "ATI");                    log.Info("Connect Version: " + version.Trim() + "\n");                    var regex = new Regex(@"SiK\s+(.*)\s+on\s+(.*)");                    if (regex.IsMatch(version))                  {                      return true;                  }                    return false;              }              catch              {                  return false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: try              {                  Console.WriteLine("doConnect");                    var trys = 1;                    // setup a known enviroment                  comPort.Write("ATO\r\n");                    retry:                    // wait                  Sleep(1500' comPort);                  comPort.DiscardInBuffer();                  // send config string                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(1500' comPort);                  // check for config response "OK"                  log.Info("Connect btr " + comPort.BytesToRead + " baud " + comPort.BaudRate);                  // allow time for data/response                    if (comPort.BytesToRead == 0 && trys <= 3)                  {                      trys++;                      log.Info("doConnect retry");                      goto retry;                  }                    var buffer = new byte[20];                  var len = comPort.Read(buffer' 0' buffer.Length);                  var conn = Encoding.ASCII.GetString(buffer' 0' len);                  log.Info("Connect first response " + conn.Replace('\0'' ' ') + " " + conn.Length);                  if (conn.Contains("OK"))                  {                      //return true;                  }                  else                  {                      // cleanup incase we are already in cmd mode                      comPort.Write("\r\n");                  }                    doCommand(comPort' "AT&T");                    var version = doCommand(comPort' "ATI");                    log.Info("Connect Version: " + version.Trim() + "\n");                    var regex = new Regex(@"SiK\s+(.*)\s+on\s+(.*)");                    if (regex.IsMatch(version))                  {                      return true;                  }                    return false;              }              catch              {                  return false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: try              {                  Console.WriteLine("doConnect");                    var trys = 1;                    // setup a known enviroment                  comPort.Write("ATO\r\n");                    retry:                    // wait                  Sleep(1500' comPort);                  comPort.DiscardInBuffer();                  // send config string                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(200' comPort);                  comPort.Write("+");                  Sleep(1500' comPort);                  // check for config response "OK"                  log.Info("Connect btr " + comPort.BytesToRead + " baud " + comPort.BaudRate);                  // allow time for data/response                    if (comPort.BytesToRead == 0 && trys <= 3)                  {                      trys++;                      log.Info("doConnect retry");                      goto retry;                  }                    var buffer = new byte[20];                  var len = comPort.Read(buffer' 0' buffer.Length);                  var conn = Encoding.ASCII.GetString(buffer' 0' len);                  log.Info("Connect first response " + conn.Replace('\0'' ' ') + " " + conn.Length);                  if (conn.Contains("OK"))                  {                      //return true;                  }                  else                  {                      // cleanup incase we are already in cmd mode                      comPort.Write("\r\n");                  }                    doCommand(comPort' "AT&T");                    var version = doCommand(comPort' "ATI");                    log.Info("Connect Version: " + version.Trim() + "\n");                    var regex = new Regex(@"SiK\s+(.*)\s+on\s+(.*)");                    if (regex.IsMatch(version))                  {                      return true;                  }                    return false;              }              catch              {                  return false;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_resettodefault_Click,The following statement contains a magic number: try              {                  comPort.PortName = MainV2.comPortName;                  comPort.BaudRate = MainV2.comPortBaud;                    comPort.ReadTimeout = 4000;                    comPort.Open();              }              catch              {                  CustomMessageBox.Show("Invalid ComPort or in use");                  return;              }
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_mavlink_LinkClicked,The following statement contains a magic number: MAX_WINDOW.Text = 131.ToString();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_mavlink_LinkClicked,The following statement contains a magic number: RMAX_WINDOW.Text = 131.ToString();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: MAVLINK.SelectedValue = 2;
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: MAX_WINDOW.Text = 33.ToString();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: RMAVLINK.SelectedValue = 2;
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: RMAX_WINDOW.Text = 33.ToString();
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(781' 433);
Magic Number,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(781' 433);
Magic Number,MissionPlanner,Common,C:\repos\diydrones_MissionPlanner\SikRadio\Common.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      (sender' certificate' chain' policyErrors) => { return true; };                    log.Info("Get " + url);                    // Create a request using a URL that can receive a post.                   var request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  var response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse) response).StatusDescription);                  if (((HttpWebResponse) response).StatusCode != HttpStatusCode.OK)                      return false;                  // Get the stream containing content returned by the server.                  var dataStream = response.GetResponseStream();                    var bytes = response.ContentLength;                  var contlen = bytes;                    var buf1 = new byte[1024];                    var fs = new FileStream(saveto + ".new"' FileMode.Create);                    var dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      Application.DoEvents();                      log.Debug(saveto + " " + bytes);                      var len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    log.Info("Done " + saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex);                  return false;              }
Magic Number,MissionPlanner,Common,C:\repos\diydrones_MissionPlanner\SikRadio\Common.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      (sender' certificate' chain' policyErrors) => { return true; };                    log.Info("Get " + url);                    // Create a request using a URL that can receive a post.                   var request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  var response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse) response).StatusDescription);                  if (((HttpWebResponse) response).StatusCode != HttpStatusCode.OK)                      return false;                  // Get the stream containing content returned by the server.                  var dataStream = response.GetResponseStream();                    var bytes = response.ContentLength;                  var contlen = bytes;                    var buf1 = new byte[1024];                    var fs = new FileStream(saveto + ".new"' FileMode.Create);                    var dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      Application.DoEvents();                      log.Debug(saveto + " " + bytes);                      var len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    log.Info("Done " + saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex);                  return false;              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: UInt16[] crc_list = new UInt16[128];
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: for (index = 0; index < size; index++)              {                  crc = (UInt16)((crc >> 8) | (crc << 8));                  crc ^= data[index];                  crc ^= (UInt16)((crc & 0xff) >> 4);                  crc ^= (UInt16)(crc << 12);                  crc ^= (UInt16)((crc & 0xff) << 5);                  crc_list[index] = crc;              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: for (index = 0; index < size; index++)              {                  crc = (UInt16)((crc >> 8) | (crc << 8));                  crc ^= data[index];                  crc ^= (UInt16)((crc & 0xff) >> 4);                  crc ^= (UInt16)(crc << 12);                  crc ^= (UInt16)((crc & 0xff) << 5);                  crc_list[index] = crc;              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: for (index = 0; index < size; index++)              {                  crc = (UInt16)((crc >> 8) | (crc << 8));                  crc ^= data[index];                  crc ^= (UInt16)((crc & 0xff) >> 4);                  crc ^= (UInt16)(crc << 12);                  crc ^= (UInt16)((crc & 0xff) << 5);                  crc_list[index] = crc;              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: for (index = 0; index < size; index++)              {                  crc = (UInt16)((crc >> 8) | (crc << 8));                  crc ^= data[index];                  crc ^= (UInt16)((crc & 0xff) >> 4);                  crc ^= (UInt16)(crc << 12);                  crc ^= (UInt16)((crc & 0xff) << 5);                  crc_list[index] = crc;              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: for (index = 0; index < size; index++)              {                  crc = (UInt16)((crc >> 8) | (crc << 8));                  crc ^= data[index];                  crc ^= (UInt16)((crc & 0xff) >> 4);                  crc ^= (UInt16)(crc << 12);                  crc ^= (UInt16)((crc & 0xff) << 5);                  crc_list[index] = crc;              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: byte[] packet = new byte[133];
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: byte[] bits = new byte[128];
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[1] = (byte)(bNumber % 256);
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[2] = (byte)(255 - (bNumber % 256));
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[2] = (byte)(255 - (bNumber % 256));
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[2] = (byte)(255 - (bNumber % 256));
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: if (bytesRead == bits.Length)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);              }              else if (bytesRead > 0)              {                  CRC = CRC_calc(bits' 128);                  System.Buffer.BlockCopy(bits' 0' packet' 3' 128);                  packet[131] = (byte)(CRC >> 8);                  packet[132] = (byte)(CRC);                  Serial.Write(packet' 0' packet.Length);                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }              else if (bytesRead == 0)              {                  Serial.Write("" + EOT);                  CustomMessageBox.Show("Firmware upgraded successfully."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,Upload,The following statement contains a magic number: using (var fs = new FileStream(firmwarebin' FileMode.Open))              {                  var len = (int)fs.Length;                  len = (len % 128) == 0 ? len / 128 : (len / 128) + 1;                  var startlen = len;                    int a = 1;                  while (len > 0)                  {                      if (LogEvent != null)                          LogEvent("Uploading block " + a + "/" + startlen);                        SendBlock(fs' comPort' a);                      // responce ACK                      var ack = comPort.ReadByte();                      while (ack == 'C')                          ack = comPort.ReadByte();                        if (ack == ACK)                      {                          len--;                          a++;                            if (ProgressEvent != null)                              ProgressEvent(len / startlen);                      }                      else if (ack == NAK)                      {                          CustomMessageBox.Show("Corrupted packet. Please power cycle and try again.\r\n"' "Warning"'                              MessageBoxButtons.OK' MessageBoxIcon.Warning);                          len = 0;                      }                  }              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,Upload,The following statement contains a magic number: using (var fs = new FileStream(firmwarebin' FileMode.Open))              {                  var len = (int)fs.Length;                  len = (len % 128) == 0 ? len / 128 : (len / 128) + 1;                  var startlen = len;                    int a = 1;                  while (len > 0)                  {                      if (LogEvent != null)                          LogEvent("Uploading block " + a + "/" + startlen);                        SendBlock(fs' comPort' a);                      // responce ACK                      var ack = comPort.ReadByte();                      while (ack == 'C')                          ack = comPort.ReadByte();                        if (ack == ACK)                      {                          len--;                          a++;                            if (ProgressEvent != null)                              ProgressEvent(len / startlen);                      }                      else if (ack == NAK)                      {                          CustomMessageBox.Show("Corrupted packet. Please power cycle and try again.\r\n"' "Warning"'                              MessageBoxButtons.OK' MessageBoxIcon.Warning);                          len = 0;                      }                  }              }
Magic Number,MissionPlanner.Radio,XModem,C:\repos\diydrones_MissionPlanner\Radio\XModem.cs,Upload,The following statement contains a magic number: using (var fs = new FileStream(firmwarebin' FileMode.Open))              {                  var len = (int)fs.Length;                  len = (len % 128) == 0 ? len / 128 : (len / 128) + 1;                  var startlen = len;                    int a = 1;                  while (len > 0)                  {                      if (LogEvent != null)                          LogEvent("Uploading block " + a + "/" + startlen);                        SendBlock(fs' comPort' a);                      // responce ACK                      var ack = comPort.ReadByte();                      while (ack == 'C')                          ack = comPort.ReadByte();                        if (ack == ACK)                      {                          len--;                          a++;                            if (ProgressEvent != null)                              ProgressEvent(len / startlen);                      }                      else if (ack == NAK)                      {                          CustomMessageBox.Show("Corrupted packet. Please power cycle and try again.\r\n"' "Warning"'                              MessageBoxButtons.OK' MessageBoxIcon.Warning);                          len = 0;                      }                  }              }
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: if (MainV2.comPort.BaseStream != null && MainV2.comPort.BaseStream.IsOpen)              {                  MainV2.comPort.BaseStream.WriteLine("ABCDEFGHIJKLMNOPQRSTUVWXYZ");                    if (MainV2.comPort.BaseStream.BytesToRead < 50)                      return;                    var line = MainV2.comPort.BaseStream.ReadLine();                    /*  L/R RSSI: 12/0  L/R noise: 17/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0  L/R RSSI: 12/0  L/R noise: 16/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0                   */                    var rssi = new Regex(@"RSSI: ([0-9]+)/([0-9]+)\s+L/R noise: ([0-9]+)/([0-9]+)");                    var match = rssi.Match(line);                    if (match.Success)                  {                      var time = (Environment.TickCount - tickStart)/1000.0;                        plotdatarssil.Add(time' double.Parse(match.Groups[1].Value));                      plotdatarssir.Add(time' double.Parse(match.Groups[2].Value));                      plotdatanoicel.Add(time' double.Parse(match.Groups[3].Value));                      plotdatanoicer.Add(time' double.Parse(match.Groups[4].Value));                          // Make sure the Y axis is rescaled to accommodate actual data                      zedGraphControl1.AxisChange();                        // Force a redraw                        zedGraphControl1.Invalidate();                        if (Terminal.sw != null)                      {                          Terminal.sw.Write(line);                          Terminal.sw.Flush();                      }                  }              }
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: if (MainV2.comPort.BaseStream != null && MainV2.comPort.BaseStream.IsOpen)              {                  MainV2.comPort.BaseStream.WriteLine("ABCDEFGHIJKLMNOPQRSTUVWXYZ");                    if (MainV2.comPort.BaseStream.BytesToRead < 50)                      return;                    var line = MainV2.comPort.BaseStream.ReadLine();                    /*  L/R RSSI: 12/0  L/R noise: 17/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0  L/R RSSI: 12/0  L/R noise: 16/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0                   */                    var rssi = new Regex(@"RSSI: ([0-9]+)/([0-9]+)\s+L/R noise: ([0-9]+)/([0-9]+)");                    var match = rssi.Match(line);                    if (match.Success)                  {                      var time = (Environment.TickCount - tickStart)/1000.0;                        plotdatarssil.Add(time' double.Parse(match.Groups[1].Value));                      plotdatarssir.Add(time' double.Parse(match.Groups[2].Value));                      plotdatanoicel.Add(time' double.Parse(match.Groups[3].Value));                      plotdatanoicer.Add(time' double.Parse(match.Groups[4].Value));                          // Make sure the Y axis is rescaled to accommodate actual data                      zedGraphControl1.AxisChange();                        // Force a redraw                        zedGraphControl1.Invalidate();                        if (Terminal.sw != null)                      {                          Terminal.sw.Write(line);                          Terminal.sw.Flush();                      }                  }              }
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: if (MainV2.comPort.BaseStream != null && MainV2.comPort.BaseStream.IsOpen)              {                  MainV2.comPort.BaseStream.WriteLine("ABCDEFGHIJKLMNOPQRSTUVWXYZ");                    if (MainV2.comPort.BaseStream.BytesToRead < 50)                      return;                    var line = MainV2.comPort.BaseStream.ReadLine();                    /*  L/R RSSI: 12/0  L/R noise: 17/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0  L/R RSSI: 12/0  L/R noise: 16/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0                   */                    var rssi = new Regex(@"RSSI: ([0-9]+)/([0-9]+)\s+L/R noise: ([0-9]+)/([0-9]+)");                    var match = rssi.Match(line);                    if (match.Success)                  {                      var time = (Environment.TickCount - tickStart)/1000.0;                        plotdatarssil.Add(time' double.Parse(match.Groups[1].Value));                      plotdatarssir.Add(time' double.Parse(match.Groups[2].Value));                      plotdatanoicel.Add(time' double.Parse(match.Groups[3].Value));                      plotdatanoicer.Add(time' double.Parse(match.Groups[4].Value));                          // Make sure the Y axis is rescaled to accommodate actual data                      zedGraphControl1.AxisChange();                        // Force a redraw                        zedGraphControl1.Invalidate();                        if (Terminal.sw != null)                      {                          Terminal.sw.Write(line);                          Terminal.sw.Flush();                      }                  }              }
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: if (MainV2.comPort.BaseStream != null && MainV2.comPort.BaseStream.IsOpen)              {                  MainV2.comPort.BaseStream.WriteLine("ABCDEFGHIJKLMNOPQRSTUVWXYZ");                    if (MainV2.comPort.BaseStream.BytesToRead < 50)                      return;                    var line = MainV2.comPort.BaseStream.ReadLine();                    /*  L/R RSSI: 12/0  L/R noise: 17/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0  L/R RSSI: 12/0  L/R noise: 16/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0                   */                    var rssi = new Regex(@"RSSI: ([0-9]+)/([0-9]+)\s+L/R noise: ([0-9]+)/([0-9]+)");                    var match = rssi.Match(line);                    if (match.Success)                  {                      var time = (Environment.TickCount - tickStart)/1000.0;                        plotdatarssil.Add(time' double.Parse(match.Groups[1].Value));                      plotdatarssir.Add(time' double.Parse(match.Groups[2].Value));                      plotdatanoicel.Add(time' double.Parse(match.Groups[3].Value));                      plotdatanoicer.Add(time' double.Parse(match.Groups[4].Value));                          // Make sure the Y axis is rescaled to accommodate actual data                      zedGraphControl1.AxisChange();                        // Force a redraw                        zedGraphControl1.Invalidate();                        if (Terminal.sw != null)                      {                          Terminal.sw.Write(line);                          Terminal.sw.Flush();                      }                  }              }
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: if (MainV2.comPort.BaseStream != null && MainV2.comPort.BaseStream.IsOpen)              {                  MainV2.comPort.BaseStream.WriteLine("ABCDEFGHIJKLMNOPQRSTUVWXYZ");                    if (MainV2.comPort.BaseStream.BytesToRead < 50)                      return;                    var line = MainV2.comPort.BaseStream.ReadLine();                    /*  L/R RSSI: 12/0  L/R noise: 17/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0  L/R RSSI: 12/0  L/R noise: 16/0 pkts: 0  txe=0 rxe=0 stx=0 srx=0 ecc=0/0 temp=61 dco=0                   */                    var rssi = new Regex(@"RSSI: ([0-9]+)/([0-9]+)\s+L/R noise: ([0-9]+)/([0-9]+)");                    var match = rssi.Match(line);                    if (match.Success)                  {                      var time = (Environment.TickCount - tickStart)/1000.0;                        plotdatarssil.Add(time' double.Parse(match.Groups[1].Value));                      plotdatarssir.Add(time' double.Parse(match.Groups[2].Value));                      plotdatanoicel.Add(time' double.Parse(match.Groups[3].Value));                      plotdatanoicer.Add(time' double.Parse(match.Groups[4].Value));                          // Make sure the Y axis is rescaled to accommodate actual data                      zedGraphControl1.AxisChange();                        // Force a redraw                        zedGraphControl1.Invalidate();                        if (Terminal.sw != null)                      {                          Terminal.sw.Write(line);                          Terminal.sw.Flush();                      }                  }              }
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Location = new System.Drawing.Point(4' 33);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Location = new System.Drawing.Point(4' 33);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Size = new System.Drawing.Size(485' 353);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Size = new System.Drawing.Size(485' 353);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Location = new System.Drawing.Point(250' 4);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Location = new System.Drawing.Point(250' 4);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.TabIndex = 2;
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Location = new System.Drawing.Point(169' 4);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Location = new System.Drawing.Point(169' 4);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(492' 386);
Magic Number,SikRadio,Rssi,C:\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(492' 386);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: try              {                  if (comPort.IsOpen)                      comPort.Close();                    comPort.ReadBufferSize = 1024*1024;                    comPort.PortName = MainV2.comPort.BaseStream.PortName;                    comPort.Open();                    comPort.toggleDTR();                    var t11 = new Thread(delegate()                  {                      threadrun = true;                        var start = DateTime.Now;                        while ((DateTime.Now - start).TotalMilliseconds < 2000)                      {                          try                          {                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                              return;                          }                      }                      try                      {                          comPort.Write("\n\n\n");                      }                      catch                      {                          return;                      }                      while (threadrun)                      {                          try                          {                              Thread.Sleep(10);                              if (!comPort.IsOpen)                                  break;                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                          }                      }                        comPort.DtrEnable = false;                        try                      {                          //if (sw != null)                          //  sw.Close();                      }                      catch                      {                      }                        if (threadrun == false)                      {                          comPort.Close();                      }                      Console.WriteLine("Comport thread close");                  });                  t11.IsBackground = true;                  t11.Name = "Terminal serial thread";                  t11.Start();                    // doesnt seem to work on mac                  //comPort.DataReceived += new SerialDataReceivedEventHandler(comPort_DataReceived);                    TXT_terminal.AppendText("Opened com port\r\n");              }              catch (Exception)              {                  TXT_terminal.AppendText("Cant open serial port\r\n");                  return;              }
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: try              {                  if (comPort.IsOpen)                      comPort.Close();                    comPort.ReadBufferSize = 1024*1024;                    comPort.PortName = MainV2.comPort.BaseStream.PortName;                    comPort.Open();                    comPort.toggleDTR();                    var t11 = new Thread(delegate()                  {                      threadrun = true;                        var start = DateTime.Now;                        while ((DateTime.Now - start).TotalMilliseconds < 2000)                      {                          try                          {                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                              return;                          }                      }                      try                      {                          comPort.Write("\n\n\n");                      }                      catch                      {                          return;                      }                      while (threadrun)                      {                          try                          {                              Thread.Sleep(10);                              if (!comPort.IsOpen)                                  break;                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                          }                      }                        comPort.DtrEnable = false;                        try                      {                          //if (sw != null)                          //  sw.Close();                      }                      catch                      {                      }                        if (threadrun == false)                      {                          comPort.Close();                      }                      Console.WriteLine("Comport thread close");                  });                  t11.IsBackground = true;                  t11.Name = "Terminal serial thread";                  t11.Start();                    // doesnt seem to work on mac                  //comPort.DataReceived += new SerialDataReceivedEventHandler(comPort_DataReceived);                    TXT_terminal.AppendText("Opened com port\r\n");              }              catch (Exception)              {                  TXT_terminal.AppendText("Cant open serial port\r\n");                  return;              }
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: try              {                  if (comPort.IsOpen)                      comPort.Close();                    comPort.ReadBufferSize = 1024*1024;                    comPort.PortName = MainV2.comPort.BaseStream.PortName;                    comPort.Open();                    comPort.toggleDTR();                    var t11 = new Thread(delegate()                  {                      threadrun = true;                        var start = DateTime.Now;                        while ((DateTime.Now - start).TotalMilliseconds < 2000)                      {                          try                          {                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                              return;                          }                      }                      try                      {                          comPort.Write("\n\n\n");                      }                      catch                      {                          return;                      }                      while (threadrun)                      {                          try                          {                              Thread.Sleep(10);                              if (!comPort.IsOpen)                                  break;                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                          }                      }                        comPort.DtrEnable = false;                        try                      {                          //if (sw != null)                          //  sw.Close();                      }                      catch                      {                      }                        if (threadrun == false)                      {                          comPort.Close();                      }                      Console.WriteLine("Comport thread close");                  });                  t11.IsBackground = true;                  t11.Name = "Terminal serial thread";                  t11.Start();                    // doesnt seem to work on mac                  //comPort.DataReceived += new SerialDataReceivedEventHandler(comPort_DataReceived);                    TXT_terminal.AppendText("Opened com port\r\n");              }              catch (Exception)              {                  TXT_terminal.AppendText("Cant open serial port\r\n");                  return;              }
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: try              {                  if (comPort.IsOpen)                      comPort.Close();                    comPort.ReadBufferSize = 1024*1024;                    comPort.PortName = MainV2.comPort.BaseStream.PortName;                    comPort.Open();                    comPort.toggleDTR();                    var t11 = new Thread(delegate()                  {                      threadrun = true;                        var start = DateTime.Now;                        while ((DateTime.Now - start).TotalMilliseconds < 2000)                      {                          try                          {                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                              return;                          }                      }                      try                      {                          comPort.Write("\n\n\n");                      }                      catch                      {                          return;                      }                      while (threadrun)                      {                          try                          {                              Thread.Sleep(10);                              if (!comPort.IsOpen)                                  break;                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                          }                      }                        comPort.DtrEnable = false;                        try                      {                          //if (sw != null)                          //  sw.Close();                      }                      catch                      {                      }                        if (threadrun == false)                      {                          comPort.Close();                      }                      Console.WriteLine("Comport thread close");                  });                  t11.IsBackground = true;                  t11.Name = "Terminal serial thread";                  t11.Start();                    // doesnt seem to work on mac                  //comPort.DataReceived += new SerialDataReceivedEventHandler(comPort_DataReceived);                    TXT_terminal.AppendText("Opened com port\r\n");              }              catch (Exception)              {                  TXT_terminal.AppendText("Cant open serial port\r\n");                  return;              }
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_FormClosing,The following statement contains a magic number: Thread.Sleep(400);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.TXT_terminal.Size = new System.Drawing.Size(630' 469);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.TXT_terminal.Size = new System.Drawing.Size(630' 469);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(632' 0);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(117' 466);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(117' 466);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 2;
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(752' 469);
Magic Number,SikRadio,Terminal,C:\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(752' 469);
Duplicate Code,MissionPlanner,Sikradio,C:\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method contains a code clone-set at the following line numbers (starting from the method definition): ((129' 148)' (198' 217))
