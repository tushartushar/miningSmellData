Implementation smell,Namespace,Class,File,Method,Description
Long Method,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The method has 102 lines of code.
Long Method,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyBurntKermitTheme,The method has 123 lines of code.
Long Method,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The method has 151 lines of code.
Long Method,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The method has 216 lines of code.
Long Method,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method has 217 lines of code.
Long Method,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The method has 1161 lines of code.
Long Method,SikRadio,Config,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Config.cs,InitializeComponent,The method has 160 lines of code.
Complex Method,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddNewLinesToText,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,Cyclomatic complexity of the method is 10
Complex Method,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyBurntKermitTheme,Cyclomatic complexity of the method is 19
Complex Method,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getFirmware,Cyclomatic complexity of the method is 12
Complex Method,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,Cyclomatic complexity of the method is 34
Complex Method,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,Cyclomatic complexity of the method is 26
Long Parameter List,MissionPlanner.Arduino,Chip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\IArduinoComms.cs,Chip,The method has 5 parameters. Parameters: nm' s1' s2' s3' size
Long Parameter List,MissionPlanner.Comms,NativeMethods,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,FormatMessage,The method has 7 parameters. Parameters: dwFlags' lpSource' dwMessageId' dwLanguageId' lpBuffer' nSize' arguments
Long Parameter List,MissionPlanner.Comms,NativeMethods,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' securityAttrs' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,Show,The method has 6 parameters. Parameters: text' caption' buttons' icon' YesText' NoText
Long Parameter List,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The method has 6 parameters. Parameters: text' caption' buttons' icon' YesText' NoText
Long Identifier,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,,The length of the parameter maximumSingleLineTooltipLength is 30.
Long Statement,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyBurntKermitTheme,The length of the statement  "                    //but.BGGradBot = Color.FromArgb(255 - (int)(PrimeColor.R * 0.27)' 255 - (int)(PrimeColor.G * 0.14)' 255 - (int)(PrimeColor.B * 0.79)); " is 135.
Long Statement,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyBurntKermitTheme,The length of the statement  "                    //but.ForeColor = Color.FromArgb(0x40' 0x57' 0x04); //Color.FromArgb(255 - (int)(PrimeColor.R * 0.7)' 255 - (int)(PrimeColor.G * 0.8)' 255 - (int)(PrimeColor.B * 0.1)); " is 168.
Long Statement,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getFirmware,The length of the statement  "                return Download.getFilefromNet("http://files.rfdesign.com.au/Files/firmware/RFDSiK%20V1.9%20rfd900u.ihx"' firmwarefile); " is 120.
Long Statement,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getFirmware,The length of the statement  "                return Download.getFilefromNet("http://files.rfdesign.com.au/Files/firmware/RFDSiK%20V1.9%20rfd900p.ihx"' firmwarefile); " is 120.
Long Statement,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Sikradio)); " is 128.
Long Statement,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The length of the statement  "            this.linkLabel_mavlink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel_mavlink_LinkClicked); " is 132.
Long Statement,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The length of the statement  "            this.linkLabel_lowlatency.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel_lowlatency_LinkClicked); " is 138.
Long Statement,SikRadio,Config,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Config.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Config)); " is 126.
Long Statement,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The length of the statement  "            this.zedGraphControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 152.
Long Statement,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Terminal)); " is 128.
Long Statement,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The length of the statement  "            this.TXT_terminal.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 148.
Long Statement,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The length of the statement  "            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Complex Conditional,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,checkDevice,The conditional expression  "(id != Board.DEVICE_ID_HM_TRP) && (id != Board.DEVICE_ID_RF50) && (id != Board.DEVICE_ID_RFD900) &&                  (id != Board.DEVICE_ID_RFD900A)"  is complex.
Complex Conditional,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The conditional expression  "board == Uploader.Board.DEVICE_ID_RFD900 ||                          board == Uploader.Board.DEVICE_ID_RFD900A                          || board == Uploader.Board.DEVICE_ID_RFD900P ||                          board == Uploader.Board.DEVICE_ID_RFD900U ||                          board == Uploader.Board.DEVICE_ID_RFD900Plus"  is complex.
Complex Conditional,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,TXT_terminal_KeyDown,The conditional expression  "e.KeyData == Keys.Up || e.KeyData == Keys.Down || e.KeyData == Keys.Left || e.KeyData == Keys.Right"  is complex.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,Open,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetPortNames,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetNiceName,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetName,The method has an empty catch block.
Empty Catch Block,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,iHex_ProgressEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_LogEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,iHex_LogEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_ProgressEvent,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method has an empty catch block.
Empty Catch Block,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,BUT_disconnect_Click,The method has an empty catch block.
Empty Catch Block,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The method has an empty catch block.
Empty Catch Block,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The method has an empty catch block.
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: Write(new[] {(byte) '0'' (byte) ' '}' 0' 2);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: BytesToRead >= 2
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,connectAP,The following statement contains a magic number: a < 50
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: ReadTimeout = 1000;
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: f > 1000
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: BytesToRead >= 2
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,sync,The following statement contains a magic number: a < 10
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,download,The following statement contains a magic number: byte[] command = {(byte) 't'' (byte) (length >> 8)' (byte) (length & 0xff)' (byte) 'E'' (byte) ' '};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,downloadflash,The following statement contains a magic number: ReadTimeout = 1000;
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,downloadflash,The following statement contains a magic number: byte[] command = {(byte) 't'' (byte) (length >> 8)' (byte) (length & 0xff)' (byte) 'F'' (byte) ' '};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,uploadflash,The following statement contains a magic number: byte[] command = {(byte) 'd'' (byte) (sending >> 8)' (byte) (sending & 0xff)' (byte) 'F'};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,uploadflash,The following statement contains a magic number: Progress((int) (startaddress/(float) length*100)' "");
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: address%2 == 1
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: log.Info("Sending address   " + (ushort) (address/2));
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: address /= 2;
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,setaddress,The following statement contains a magic number: byte[] command = {(byte) 'U'' (byte) (address & 0xff)' (byte) (address >> 8)' (byte) ' '};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,upload,The following statement contains a magic number: byte[] command = {(byte) 'd'' (byte) (sending >> 8)' (byte) (sending & 0xff)' (byte) 'E'};
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: var chr = new byte[5];
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: var count = Read(chr' 0' 5);
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: sig2 = chr[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: sig3 = chr[3];
Magic Number,MissionPlanner.Arduino,ArduinoSTK,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTK.cs,getChipType,The following statement contains a magic number: chr[0] == 0x14 && chr[4] == 0x10
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,Open,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: temp[0] == 6 && temp[1] == 0 && temp.Length == 2
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: temp[0] == 6 && temp[1] == 0 && temp.Length == 2
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,connectAP,The following statement contains a magic number: a < 5
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,download,The following statement contains a magic number: byte[] temp = {0x16' (byte) ((length >> 8) & 0xff)' (byte) ((length >> 0) & 0xff)};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,download,The following statement contains a magic number: Array.Copy(temp' 2' data' 0' length);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,downloadflash,The following statement contains a magic number: byte[] temp = {0x14' (byte) ((length >> 8) & 0xff)' (byte) ((length >> 0) & 0xff)};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,downloadflash,The following statement contains a magic number: Array.Copy(temp' 2' data' 0' length);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: byte[] command = {0x13' (byte) (sending >> 8)' (byte) (sending & 0xff)};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: Array.Resize(ref command' sending + 10);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,uploadflash,The following statement contains a magic number: Progress((int) (startaddress/(float) length*100)' "Uploading Firmware");
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: address%2 == 1
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: log.InfoFormat("Sending address   " + address/2);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: var tempstart = address/2;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: byte[] temp =              {                  0x6' (byte) ((tempstart >> 24) & 0xff)' (byte) ((tempstart >> 16) & 0xff)'                  (byte) ((tempstart >> 8) & 0xff)'                  (byte) ((tempstart >> 0) & 0xff)              };
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: byte[] temp =              {                  0x6' (byte) ((tempstart >> 24) & 0xff)' (byte) ((tempstart >> 16) & 0xff)'                  (byte) ((tempstart >> 8) & 0xff)'                  (byte) ((tempstart >> 0) & 0xff)              };
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,setaddress,The following statement contains a magic number: byte[] temp =              {                  0x6' (byte) ((tempstart >> 24) & 0xff)' (byte) ((tempstart >> 16) & 0xff)'                  (byte) ((tempstart >> 8) & 0xff)'                  (byte) ((tempstart >> 0) & 0xff)              };
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: byte[] command = {0x15' (byte) (sending >> 8)' (byte) (sending & 0xff)};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: Array.Resize(ref command' sending + 10);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: Array.Copy(data' startfrom + (length - totalleft)' command' 10' sending);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,upload,The following statement contains a magic number: Progress((int) (startaddress/(float) length*100)' "");
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: sig1 = command[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: sig2 = command[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: command = new byte[] {0x1b' 0' 0' 0' 2};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,getChipType,The following statement contains a magic number: sig3 = command[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: var data = new byte[300];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[2] = (byte) ((message.Length >> 8) & 0xff);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[2] = (byte) ((message.Length >> 8) & 0xff);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: ck ^= data[2];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[3] = (byte) (message.Length & 0xff);
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: ck ^= data[3];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: data[4] = 0xe;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: ck ^= data[4];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,genstkv2packet,The following statement contains a magic number: var a = 5;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: var temp = new byte[4000];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: var mes = new byte[2] {0x0' 0xC0};
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: var a = 7;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: ReadTimeout = 1000;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: a = (temp[2] << 8) + temp[3];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: a = (temp[2] << 8) + temp[3];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: a = (temp[2] << 8) + temp[3];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: a += 5;
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: count == 3
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: mes[count - 5] = temp[count];
Magic Number,MissionPlanner.Arduino,ArduinoSTKv2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Arduino\ArduinoSTKv2.cs,readpacket,The following statement contains a magic number: count >= 5
Magic Number,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,Open,The following statement contains a magic number: WriteTimeout = 500;
Magic Number,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,Open,The following statement contains a magic number: BaudRate > 115200
Magic Number,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,toggleDTR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,GetNiceName,The following statement contains a magic number: CallWithTimeout(GetName' 1000' port);
Magic Number,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,FixBlueToothPortNameBug,The following statement contains a magic number: portName.Substring(3).Take(3)
Magic Number,MissionPlanner.Comms,SerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,FixBlueToothPortNameBug,The following statement contains a magic number: portName.Substring(3).Take(3)
Magic Number,MissionPlanner.Comms,SerialPortFixer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,SerialPortFixer,The following statement contains a magic number: var hFile = NativeMethods.CreateFile(@"\\.\" + portName' dwAccess' 0' IntPtr.Zero' 3' dwFlagsAndAttributes'                  IntPtr.Zero);
Magic Number,MissionPlanner.Comms,SerialPortFixer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Comms\CommsSerialPort.cs,SerialPortFixer,The following statement contains a magic number: fileType != 2 && fileType != 0
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: link = match.Groups[2].Value;
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: linktext = match.Groups[3].Value;
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text'                      AutoSize = true                  };
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text'                      AutoSize = true                  };
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text'                      AutoSize = true                  };
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: var lblMessage = new Label                  {                      Left = 58'                      Top = 15'                      Width = textSize.Width + 10'                      Height = textSize.Height + 10'                      Text = text'                      AutoSize = true                  };
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: msgBoxFrm.Width = lblMessage.Right + 50;
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,ShowUI,The following statement contains a magic number: msgBoxFrm.Width = Math.Max(msgBoxFrm.Width' linklbl.Right + 16);
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: titleHeight = 25;
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.MsgBox,CustomMessageBox,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\CustomMessageBox.cs,AddButtonsToForm,The following statement contains a magic number: switch (buttons)              {                  case MessageBoxButtons.OK:                      var but = new MyButton                                    {                                        Size = new Size(75' 23)'                                        Text = "OK"'                                        Left = msgBoxFrm.Width - 100 - FORM_X_MARGIN'                                        Top = msgBoxFrm.Height - 40 - FORM_Y_MARGIN - titleHeight                                    };                        but.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(but);                      msgBoxFrm.AcceptButton = but;                      break;                    case MessageBoxButtons.YesNo:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butyes = new MyButton                      {                          Size = new Size(75' 23)'                          Text = YesText'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butyes.Click += delegate { _state = DialogResult.Yes; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butyes);                      msgBoxFrm.AcceptButton = butyes;                        var butno = new MyButton                      {                          Size = new Size(75' 23)'                          Text = NoText'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butno.Click += delegate { _state = DialogResult.No; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butno);                      msgBoxFrm.CancelButton = butno;                      break;                    case MessageBoxButtons.OKCancel:                        if (msgBoxFrm.Width < (75 * 2 + FORM_X_MARGIN * 3))                          msgBoxFrm.Width = (75 * 2 + FORM_X_MARGIN * 3);                        var butok = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "OK"'                          Left = msgBoxFrm.Width - 75 * 2 - FORM_X_MARGIN * 2'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butok.Click += delegate { _state = DialogResult.OK; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butok);                      msgBoxFrm.AcceptButton = butok;                        var butcancel = new MyButton                      {                          Size = new Size(75' 23)'                          Text = "Cancel"'                          Left = msgBoxFrm.Width - 75 - FORM_X_MARGIN'                          Top = msgBoxFrm.Height - 23 - FORM_Y_MARGIN - titleHeight                      };                        butcancel.Click += delegate { _state = DialogResult.Cancel; msgBoxFrm.Close(); };                      msgBoxFrm.Controls.Add(butcancel);                      msgBoxFrm.CancelButton = butcancel;                      break;                    default:                      throw new NotImplementedException("Only MessageBoxButtons.OK and YesNo supported at this time");              }
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,MyButton,The following statement contains a magic number: _ColorNotEnabled = Color.FromArgb(73' 0x2b' 0x3a' 0x03);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,MyButton,The following statement contains a magic number: _ColorMouseOver = Color.FromArgb(73' 0x2b' 0x3a' 0x03);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,MyButton,The following statement contains a magic number: _ColorMouseDown = Color.FromArgb(150' 0x2b' 0x3a' 0x03);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: float wid = this.Height / 3f;
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddArc(0' 0' wid' wid' 180' 90);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddArc(0' 0' wid' wid' 180' 90);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddArc(width - wid' 0' wid' wid' 270' 90);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddArc(width - wid' 0' wid' wid' 270' 90);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddArc(width - wid' height - wid' wid' wid' 0' 90);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddArc(0' height - wid' wid' wid' 90' 90);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddArc(0' height - wid' wid' wid' 90' 90);
Magic Number,MissionPlanner.Controls,MyButton,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Controls\MyButton.cs,OnPaint,The following statement contains a magic number: outline.AddLine(0' height - wid' 0' wid - wid / 2);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,expireCache,The following statement contains a magic number: var uridates = _instances.Where(a =>                      {                          return a._uri == downloadStream._uri && a._lastread < DateTime.Now.AddSeconds(-180);                      });
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize = 1024 * 2;
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize = 1024 * 2;
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize < 1024 * 2
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize < 1024 * 2
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,GetChunk,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: request.Timeout = 10000;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: byte[] buf1 = new byte[1024];
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: var percent = ((got / (float)contlen) * 100.0f);
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The following statement contains a magic number: webRequest.Timeout = 10000;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: chunkSize = 1024 * 1024 * 10;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: chunkSize = 1024 * 1024 * 10;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: chunkSize = 1024 * 1024 * 10;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: status?.Invoke(100' "Complete");
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,formatTimeSpan,The following statement contains a magic number: timeleft.TotalSeconds >= 60
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.BGGradTop = Color.FromArgb(242' 242' 242);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.BGGradTop = Color.FromArgb(242' 242' 242);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.BGGradTop = Color.FromArgb(242' 242' 242);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.BGGradBot = Color.FromArgb(207' 207' 207);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.BGGradBot = Color.FromArgb(207' 207' 207);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.BGGradBot = Color.FromArgb(207' 207' 207);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.Outline = Color.FromArgb(112' 112' 112);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.Outline = Color.FromArgb(112' 112' 112);
Magic Number,MissionPlanner.Utilities,ThemeManager,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\ThemeManager.cs,ApplyNone,The following statement contains a magic number: but.Outline = Color.FromArgb(112' 112' 112);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var length = Convert.ToByte(line.Substring(1' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var length = Convert.ToByte(line.Substring(1' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var address = Convert.ToUInt32(line.Substring(3' 4)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var address = Convert.ToUInt32(line.Substring(3' 4)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var address = Convert.ToUInt32(line.Substring(3' 4)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var rtype = Convert.ToByte(line.Substring(7' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var rtype = Convert.ToByte(line.Substring(7' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var rtype = Convert.ToByte(line.Substring(7' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var hexbytes = line.Substring(9' length*2);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: var hexbytes = line.Substring(9' length*2);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: b[i] = Convert.ToByte(hexbytes.Substring(i*2' 2)' 16);
Magic Number,uploader,IHex,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\IHex.cs,load,The following statement contains a magic number: address += upperaddress << 16;
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,connect_and_sync,The following statement contains a magic number: port.ReadTimeout = 2000;
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,connect_and_sync,The following statement contains a magic number: i < 3
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,upload_and_verify,The following statement contains a magic number: bytes_to_process *= 2;
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdErase,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdSetAddress,The following statement contains a magic number: send((byte) ((address >> 8) & 0xff));
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdSetAddress,The following statement contains a magic number: send((byte) ((address >> 16) & 0xff));
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,cmdSetAddress,The following statement contains a magic number: log("Bank Programming address " + (address >> 16));
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,getSync,The following statement contains a magic number: log(string.Format("got {0:X} when expecting {1:X}\n"' (int) c' (int) Code.INSYNC)' 2);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,getSync,The following statement contains a magic number: log(string.Format("got {0:X} when expecting {1:X}\n"' (int) c' (int) Code.EOC)' 2);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,getSync,The following statement contains a magic number: log("in sync\n"' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("send "' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log(string.Format(" {0:X}"' x)' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("\n"' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("send "' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log(string.Format(" {0:X}"' x)' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("\n"' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: port.BytesToWrite > 50
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: port.BytesToWrite > 50
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: var b = new byte[2] {(byte) (data & 0xff)' (byte) (data >> 8)};
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: var b = new byte[2] {(byte) (data & 0xff)' (byte) (data >> 8)};
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("send "' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log(string.Format(" {0:X}"' x)' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: log("\n"' 5);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,send,The following statement contains a magic number: port.Write(b' 0' 2);
Magic Number,uploader,Uploader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Uploader.cs,recv,The following statement contains a magic number: log(string.Format("recv {0:X}\n"' b)' 5);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: NETID.DataSource = Enumerable.Range(0' 500).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RNETID.DataSource = Enumerable.Range(0' 500).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: MAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: MAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: MAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RMAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RMAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,Sikradio,The following statement contains a magic number: RMAX_WINDOW.DataSource = Enumerable.Range(33' 131 - 32).ToArray();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: comPort.ReadTimeout = 1000;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,upload_xmodem,The following statement contains a magic number: comPort.ReadTimeout = 3500;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: uploader.PROG_MULTI_MAX = 64;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: comPort.BaudRate = 115200;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: comPort.BaudRate = 115200;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: Sleep(700);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: comPort.BaudRate = 115200;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,UploadFW,The following statement contains a magic number: comPort.BaudRate = 115200;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,iHex_ProgressEvent,The following statement contains a magic number: Progressbar.Value = (int) (completed*100);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_ProgressEvent,The following statement contains a magic number: Progressbar.Value = (int)Math.Min (completed*100'100);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,uploader_ProgressEvent,The following statement contains a magic number: Progressbar.Value = (int)Math.Min (completed*100'100);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: comPort.ReadTimeout = 4000;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: Sleep(100);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: value != values[2].Trim()
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: values.Length == 3
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: doCommand(comPort' "RT&E=" + txt_Raeskey.Text.PadRight(32' '0')' true);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_savesettings_Click,The following statement contains a magic number: doCommand(comPort' "AT&E=" + txt_aeskey.Text.PadRight(32' '0')' true);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getTelemPortWithRadio,The following statement contains a magic number: comPort.ReadTimeout = 4000;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,getTelemPortWithRadio,The following statement contains a magic number: comPort.ReadTimeout = 4000;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: comPort.ReadTimeout = 4000;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: MIN_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: MIN_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: MIN_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: RMIN_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: RMIN_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: RMIN_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: MAX_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: MAX_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: MAX_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: RMAX_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: RMAX_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: RMAX_FREQ.DataSource = Range(895000' 1000' 935000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: TXPOWER.DataSource = Range(1' 1' 30);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: RTXPOWER.DataSource = Range(1' 1' 30);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The following statement contains a magic number: ((CheckBox) controls[0]).Checked = values[2].Trim() == "1";
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doCommand,The following statement contains a magic number: comPort.ReadTimeout = 1000;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doCommand,The following statement contains a magic number: var deadline = DateTime.Now.AddMilliseconds(1000);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: Sleep(1500' comPort);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: Sleep(200' comPort);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: Sleep(200' comPort);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: Sleep(1500' comPort);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: comPort.BytesToRead == 0 && trys <= 3
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,doConnect,The following statement contains a magic number: var buffer = new byte[20];
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_resettodefault_Click,The following statement contains a magic number: comPort.ReadTimeout = 4000;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_mavlink_LinkClicked,The following statement contains a magic number: MAX_WINDOW.Text = 131.ToString();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_mavlink_LinkClicked,The following statement contains a magic number: RMAX_WINDOW.Text = 131.ToString();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: MAVLINK.SelectedValue = 2;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: MAX_WINDOW.Text = 33.ToString();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: RMAVLINK.SelectedValue = 2;
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,linkLabel_lowlatency_LinkClicked,The following statement contains a magic number: RMAX_WINDOW.Text = 33.ToString();
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(781' 433);
Magic Number,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(781' 433);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: UInt16[] crc_list = new UInt16[128];
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: crc = (UInt16)((crc >> 8) | (crc << 8));
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: crc = (UInt16)((crc >> 8) | (crc << 8));
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: crc ^= (UInt16)((crc & 0xff) >> 4);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: crc ^= (UInt16)(crc << 12);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,CRC_calc,The following statement contains a magic number: crc ^= (UInt16)((crc & 0xff) << 5);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: byte[] packet = new byte[133];
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: byte[] bits = new byte[128];
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[1] = (byte)(bNumber % 256);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[2] = (byte)(255 - (bNumber % 256));
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[2] = (byte)(255 - (bNumber % 256));
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[2] = (byte)(255 - (bNumber % 256));
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: CRC = CRC_calc(bits' 128);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: System.Buffer.BlockCopy(bits' 0' packet' 3' 128);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: System.Buffer.BlockCopy(bits' 0' packet' 3' 128);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[131] = (byte)(CRC >> 8);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[131] = (byte)(CRC >> 8);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,SendBlock,The following statement contains a magic number: packet[132] = (byte)(CRC);
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,Upload,The following statement contains a magic number: len = (len % 128) == 0 ? len / 128 : (len / 128) + 1;
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,Upload,The following statement contains a magic number: len = (len % 128) == 0 ? len / 128 : (len / 128) + 1;
Magic Number,MissionPlanner.Radio,XModem,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\XModem.cs,Upload,The following statement contains a magic number: len = (len % 128) == 0 ? len / 128 : (len / 128) + 1;
Magic Number,MissionPlanner,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Common.cs,getFilefromNet,The following statement contains a magic number: request.Timeout = 10000;
Magic Number,MissionPlanner,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Common.cs,getFilefromNet,The following statement contains a magic number: var buf1 = new byte[1024];
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: MainV2.comPort.BaseStream.BytesToRead < 50
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: var time = (Environment.TickCount - tickStart)/1000.0;
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: plotdatarssir.Add(time' double.Parse(match.Groups[2].Value));
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: plotdatanoicel.Add(time' double.Parse(match.Groups[3].Value));
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,timer1_Tick,The following statement contains a magic number: plotdatanoicer.Add(time' double.Parse(match.Groups[4].Value));
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Location = new System.Drawing.Point(4' 33);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Location = new System.Drawing.Point(4' 33);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Size = new System.Drawing.Size(485' 353);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.zedGraphControl1.Size = new System.Drawing.Size(485' 353);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Location = new System.Drawing.Point(250' 4);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Location = new System.Drawing.Point(250' 4);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_disconnect.TabIndex = 2;
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Location = new System.Drawing.Point(169' 4);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Location = new System.Drawing.Point(169' 4);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.BUT_connect.Size = new System.Drawing.Size(75' 23);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(492' 386);
Magic Number,SikRadio,Rssi,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Rssi.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(492' 386);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: comPort.ReadBufferSize = 1024*1024;
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: comPort.ReadBufferSize = 1024*1024;
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: var t11 = new Thread(delegate()                  {                      threadrun = true;                        var start = DateTime.Now;                        while ((DateTime.Now - start).TotalMilliseconds < 2000)                      {                          try                          {                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                              return;                          }                      }                      try                      {                          comPort.Write("\n\n\n");                      }                      catch                      {                          return;                      }                      while (threadrun)                      {                          try                          {                              Thread.Sleep(10);                              if (!comPort.IsOpen)                                  break;                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                          }                      }                        comPort.DtrEnable = false;                        try                      {                          //if (sw != null)                          //  sw.Close();                      }                      catch                      {                      }                        if (threadrun == false)                      {                          comPort.Close();                      }                      Console.WriteLine("Comport thread close");                  });
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_Load,The following statement contains a magic number: var t11 = new Thread(delegate()                  {                      threadrun = true;                        var start = DateTime.Now;                        while ((DateTime.Now - start).TotalMilliseconds < 2000)                      {                          try                          {                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                              return;                          }                      }                      try                      {                          comPort.Write("\n\n\n");                      }                      catch                      {                          return;                      }                      while (threadrun)                      {                          try                          {                              Thread.Sleep(10);                              if (!comPort.IsOpen)                                  break;                              if (comPort.BytesToRead > 0)                              {                                  comPort_DataReceived(null' null);                              }                          }                          catch                          {                          }                      }                        comPort.DtrEnable = false;                        try                      {                          //if (sw != null)                          //  sw.Close();                      }                      catch                      {                      }                        if (threadrun == false)                      {                          comPort.Close();                      }                      Console.WriteLine("Comport thread close");                  });
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,Terminal_FormClosing,The following statement contains a magic number: Thread.Sleep(400);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.TXT_terminal.Font = new System.Drawing.Font("Courier New"' 10F' System.Drawing.FontStyle.Bold);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.TXT_terminal.Size = new System.Drawing.Size(630' 469);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.TXT_terminal.Size = new System.Drawing.Size(630' 469);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(632' 0);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(117' 466);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(117' 466);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 2;
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(752' 469);
Magic Number,SikRadio,Terminal,D:\research\architectureSmells\repos\diydrones_MissionPlanner\SikRadio\Terminal.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(752' 469);
Duplicate Code,MissionPlanner.Radio,Sikradio,D:\research\architectureSmells\repos\diydrones_MissionPlanner\Radio\Sikradio.cs,BUT_getcurrent_Click,The method contains a code clone-set at the following line numbers (starting from the method definition): ((129' 148)' (198' 217))
