Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_getPacket,Cyclomatic complexity of the method is 10
Complex Method,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,Cyclomatic complexity of the method is 15
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,CreateFile,The method has 7 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,WriteFile,The method has 5 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,WriteFile,The method has 5 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,ReadFile,The method has 5 parameters.
Long Parameter List,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,ReadFile,The method has 5 parameters.
Long Statement,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,GetCoordinates,The length of the statement  "		if ((responsePacket.mPacketId == (short)GarminLinkProtocol1ID.Pid_Position_Data) && (responsePacket.mPacketType == Pid_Application_Layer)) { " is 140.
Long Statement,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_getPacket,The length of the statement  "		DeviceIoControl (gHandle' IOCTL_ASYNC_IN' IntPtr.Zero' 0' theTempBuffer' (uint)ASYNC_DATA_SIZE' ref theBytesReturned' IntPtr.Zero); " is 131.
Long Statement,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The length of the statement  "		IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE)); " is 161.
Long Statement,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The length of the statement  "		if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) { " is 144.
Long Statement,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The length of the statement  "		SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData); " is 129.
Long Statement,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The length of the statement  "		gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero); " is 224.
Long Statement,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The length of the statement  "		DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero); " is 152.
Long Statement,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,DevicePresent,The length of the statement  "	IntPtr theDevInfo = SetupDiGetClassDevs (ref g' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE)); " is 152.
Long Statement,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,DevicePresent,The length of the statement  "	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref g' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) " is 133.
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_sendPacket,The following statement contains a magic number: Marshal.Copy (packet.mData' 0' new IntPtr (tmpPtr.ToInt64 () + 12)' packet.mDataSize);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_marshalPacket,The following statement contains a magic number: if (bytesInPtr - offset < 12)  	return new Packet ();  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_marshalPacket,The following statement contains a magic number: ret.mReserved2 = Marshal.ReadInt16 (ptrPacket' offset + 2);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_marshalPacket,The following statement contains a magic number: ret.mPacketId = Marshal.ReadInt16 (ptrPacket' offset + 4);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_marshalPacket,The following statement contains a magic number: ret.mReserved3 = Marshal.ReadInt16 (ptrPacket' offset + 6);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_marshalPacket,The following statement contains a magic number: ret.mDataSize = Marshal.ReadInt32 (ptrPacket' offset + 8);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_marshalPacket,The following statement contains a magic number: for (int i = 0; i < ret.mDataSize; i++)  	ret.mData [i] = Marshal.ReadByte (ptrPacket' offset + 12 + i);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_marshalPacket,The following statement contains a magic number: ret.mData [i] = Marshal.ReadByte (ptrPacket' offset + 12 + i);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: try {  	// Used to capture how many bytes are returned by system calls  	UInt32 theBytesReturned = 0;  	// SetupAPI32.DLL Data Structures  	SP_DEVICE_INTERFACE_DETAIL_DATA theDevDetailData = new SP_DEVICE_INTERFACE_DETAIL_DATA ();  	SP_DEVINFO_DATA theDevInfoData = new SP_DEVINFO_DATA ();  	theDevInfoData.cbSize = Marshal.SizeOf (theDevInfoData);  	IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE));  	SP_DEVICE_INTERFACE_DATA theInterfaceData = new SP_DEVICE_INTERFACE_DATA ();  	theInterfaceData.cbSize = Marshal.SizeOf (theInterfaceData);  	// Check for a Garmin Device  	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) {  		gHandle = null;  		return false;  	}  	// Get the device's file path  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' IntPtr.Zero' 0' ref theBytesReturned' IntPtr.Zero);  	if (theBytesReturned <= 0) {  		gHandle = null;  		return false;  	}  	IntPtr tmpBuffer = Marshal.AllocHGlobal ((int)theBytesReturned);  	if (IntPtr.Size == 4)  		Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  	else  		Marshal.WriteInt32 (tmpBuffer' 8);  	theDevDetailData.cbSize = Marshal.SizeOf (theDevDetailData);  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData);  	IntPtr pDevicePathName = new IntPtr (tmpBuffer.ToInt64 () + 4);  	String devicePathName = Marshal.PtrToStringAuto (pDevicePathName);  	// Create a handle to the device  	gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero);  	// Get the driver's asynchronous packet size  	if (tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  	tmpBuffer = Marshal.AllocHGlobal (Marshal.SizeOf (gUSBPacketSize));  	DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero);  	switch (theBytesReturned) {  	case 2:  		gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  		break;  	case 4:  		gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  		break;  	case 8:  		gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  		break;  	}  	if (!tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  } catch {  	return false;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: try {  	// Used to capture how many bytes are returned by system calls  	UInt32 theBytesReturned = 0;  	// SetupAPI32.DLL Data Structures  	SP_DEVICE_INTERFACE_DETAIL_DATA theDevDetailData = new SP_DEVICE_INTERFACE_DETAIL_DATA ();  	SP_DEVINFO_DATA theDevInfoData = new SP_DEVINFO_DATA ();  	theDevInfoData.cbSize = Marshal.SizeOf (theDevInfoData);  	IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE));  	SP_DEVICE_INTERFACE_DATA theInterfaceData = new SP_DEVICE_INTERFACE_DATA ();  	theInterfaceData.cbSize = Marshal.SizeOf (theInterfaceData);  	// Check for a Garmin Device  	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) {  		gHandle = null;  		return false;  	}  	// Get the device's file path  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' IntPtr.Zero' 0' ref theBytesReturned' IntPtr.Zero);  	if (theBytesReturned <= 0) {  		gHandle = null;  		return false;  	}  	IntPtr tmpBuffer = Marshal.AllocHGlobal ((int)theBytesReturned);  	if (IntPtr.Size == 4)  		Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  	else  		Marshal.WriteInt32 (tmpBuffer' 8);  	theDevDetailData.cbSize = Marshal.SizeOf (theDevDetailData);  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData);  	IntPtr pDevicePathName = new IntPtr (tmpBuffer.ToInt64 () + 4);  	String devicePathName = Marshal.PtrToStringAuto (pDevicePathName);  	// Create a handle to the device  	gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero);  	// Get the driver's asynchronous packet size  	if (tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  	tmpBuffer = Marshal.AllocHGlobal (Marshal.SizeOf (gUSBPacketSize));  	DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero);  	switch (theBytesReturned) {  	case 2:  		gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  		break;  	case 4:  		gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  		break;  	case 8:  		gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  		break;  	}  	if (!tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  } catch {  	return false;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: try {  	// Used to capture how many bytes are returned by system calls  	UInt32 theBytesReturned = 0;  	// SetupAPI32.DLL Data Structures  	SP_DEVICE_INTERFACE_DETAIL_DATA theDevDetailData = new SP_DEVICE_INTERFACE_DETAIL_DATA ();  	SP_DEVINFO_DATA theDevInfoData = new SP_DEVINFO_DATA ();  	theDevInfoData.cbSize = Marshal.SizeOf (theDevInfoData);  	IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE));  	SP_DEVICE_INTERFACE_DATA theInterfaceData = new SP_DEVICE_INTERFACE_DATA ();  	theInterfaceData.cbSize = Marshal.SizeOf (theInterfaceData);  	// Check for a Garmin Device  	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) {  		gHandle = null;  		return false;  	}  	// Get the device's file path  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' IntPtr.Zero' 0' ref theBytesReturned' IntPtr.Zero);  	if (theBytesReturned <= 0) {  		gHandle = null;  		return false;  	}  	IntPtr tmpBuffer = Marshal.AllocHGlobal ((int)theBytesReturned);  	if (IntPtr.Size == 4)  		Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  	else  		Marshal.WriteInt32 (tmpBuffer' 8);  	theDevDetailData.cbSize = Marshal.SizeOf (theDevDetailData);  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData);  	IntPtr pDevicePathName = new IntPtr (tmpBuffer.ToInt64 () + 4);  	String devicePathName = Marshal.PtrToStringAuto (pDevicePathName);  	// Create a handle to the device  	gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero);  	// Get the driver's asynchronous packet size  	if (tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  	tmpBuffer = Marshal.AllocHGlobal (Marshal.SizeOf (gUSBPacketSize));  	DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero);  	switch (theBytesReturned) {  	case 2:  		gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  		break;  	case 4:  		gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  		break;  	case 8:  		gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  		break;  	}  	if (!tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  } catch {  	return false;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: try {  	// Used to capture how many bytes are returned by system calls  	UInt32 theBytesReturned = 0;  	// SetupAPI32.DLL Data Structures  	SP_DEVICE_INTERFACE_DETAIL_DATA theDevDetailData = new SP_DEVICE_INTERFACE_DETAIL_DATA ();  	SP_DEVINFO_DATA theDevInfoData = new SP_DEVINFO_DATA ();  	theDevInfoData.cbSize = Marshal.SizeOf (theDevInfoData);  	IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE));  	SP_DEVICE_INTERFACE_DATA theInterfaceData = new SP_DEVICE_INTERFACE_DATA ();  	theInterfaceData.cbSize = Marshal.SizeOf (theInterfaceData);  	// Check for a Garmin Device  	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) {  		gHandle = null;  		return false;  	}  	// Get the device's file path  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' IntPtr.Zero' 0' ref theBytesReturned' IntPtr.Zero);  	if (theBytesReturned <= 0) {  		gHandle = null;  		return false;  	}  	IntPtr tmpBuffer = Marshal.AllocHGlobal ((int)theBytesReturned);  	if (IntPtr.Size == 4)  		Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  	else  		Marshal.WriteInt32 (tmpBuffer' 8);  	theDevDetailData.cbSize = Marshal.SizeOf (theDevDetailData);  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData);  	IntPtr pDevicePathName = new IntPtr (tmpBuffer.ToInt64 () + 4);  	String devicePathName = Marshal.PtrToStringAuto (pDevicePathName);  	// Create a handle to the device  	gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero);  	// Get the driver's asynchronous packet size  	if (tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  	tmpBuffer = Marshal.AllocHGlobal (Marshal.SizeOf (gUSBPacketSize));  	DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero);  	switch (theBytesReturned) {  	case 2:  		gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  		break;  	case 4:  		gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  		break;  	case 8:  		gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  		break;  	}  	if (!tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  } catch {  	return false;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: try {  	// Used to capture how many bytes are returned by system calls  	UInt32 theBytesReturned = 0;  	// SetupAPI32.DLL Data Structures  	SP_DEVICE_INTERFACE_DETAIL_DATA theDevDetailData = new SP_DEVICE_INTERFACE_DETAIL_DATA ();  	SP_DEVINFO_DATA theDevInfoData = new SP_DEVINFO_DATA ();  	theDevInfoData.cbSize = Marshal.SizeOf (theDevInfoData);  	IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE));  	SP_DEVICE_INTERFACE_DATA theInterfaceData = new SP_DEVICE_INTERFACE_DATA ();  	theInterfaceData.cbSize = Marshal.SizeOf (theInterfaceData);  	// Check for a Garmin Device  	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) {  		gHandle = null;  		return false;  	}  	// Get the device's file path  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' IntPtr.Zero' 0' ref theBytesReturned' IntPtr.Zero);  	if (theBytesReturned <= 0) {  		gHandle = null;  		return false;  	}  	IntPtr tmpBuffer = Marshal.AllocHGlobal ((int)theBytesReturned);  	if (IntPtr.Size == 4)  		Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  	else  		Marshal.WriteInt32 (tmpBuffer' 8);  	theDevDetailData.cbSize = Marshal.SizeOf (theDevDetailData);  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData);  	IntPtr pDevicePathName = new IntPtr (tmpBuffer.ToInt64 () + 4);  	String devicePathName = Marshal.PtrToStringAuto (pDevicePathName);  	// Create a handle to the device  	gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero);  	// Get the driver's asynchronous packet size  	if (tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  	tmpBuffer = Marshal.AllocHGlobal (Marshal.SizeOf (gUSBPacketSize));  	DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero);  	switch (theBytesReturned) {  	case 2:  		gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  		break;  	case 4:  		gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  		break;  	case 8:  		gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  		break;  	}  	if (!tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  } catch {  	return false;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: try {  	// Used to capture how many bytes are returned by system calls  	UInt32 theBytesReturned = 0;  	// SetupAPI32.DLL Data Structures  	SP_DEVICE_INTERFACE_DETAIL_DATA theDevDetailData = new SP_DEVICE_INTERFACE_DETAIL_DATA ();  	SP_DEVINFO_DATA theDevInfoData = new SP_DEVINFO_DATA ();  	theDevInfoData.cbSize = Marshal.SizeOf (theDevInfoData);  	IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE));  	SP_DEVICE_INTERFACE_DATA theInterfaceData = new SP_DEVICE_INTERFACE_DATA ();  	theInterfaceData.cbSize = Marshal.SizeOf (theInterfaceData);  	// Check for a Garmin Device  	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) {  		gHandle = null;  		return false;  	}  	// Get the device's file path  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' IntPtr.Zero' 0' ref theBytesReturned' IntPtr.Zero);  	if (theBytesReturned <= 0) {  		gHandle = null;  		return false;  	}  	IntPtr tmpBuffer = Marshal.AllocHGlobal ((int)theBytesReturned);  	if (IntPtr.Size == 4)  		Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  	else  		Marshal.WriteInt32 (tmpBuffer' 8);  	theDevDetailData.cbSize = Marshal.SizeOf (theDevDetailData);  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData);  	IntPtr pDevicePathName = new IntPtr (tmpBuffer.ToInt64 () + 4);  	String devicePathName = Marshal.PtrToStringAuto (pDevicePathName);  	// Create a handle to the device  	gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero);  	// Get the driver's asynchronous packet size  	if (tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  	tmpBuffer = Marshal.AllocHGlobal (Marshal.SizeOf (gUSBPacketSize));  	DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero);  	switch (theBytesReturned) {  	case 2:  		gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  		break;  	case 4:  		gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  		break;  	case 8:  		gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  		break;  	}  	if (!tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  } catch {  	return false;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: try {  	// Used to capture how many bytes are returned by system calls  	UInt32 theBytesReturned = 0;  	// SetupAPI32.DLL Data Structures  	SP_DEVICE_INTERFACE_DETAIL_DATA theDevDetailData = new SP_DEVICE_INTERFACE_DETAIL_DATA ();  	SP_DEVINFO_DATA theDevInfoData = new SP_DEVINFO_DATA ();  	theDevInfoData.cbSize = Marshal.SizeOf (theDevInfoData);  	IntPtr theDevInfo = SetupDiGetClassDevs (ref DeviceGuid' IntPtr.Zero' IntPtr.Zero' (int)(DiGetClassFlags.DIGCF_PRESENT | DiGetClassFlags.DIGCF_DEVICEINTERFACE));  	SP_DEVICE_INTERFACE_DATA theInterfaceData = new SP_DEVICE_INTERFACE_DATA ();  	theInterfaceData.cbSize = Marshal.SizeOf (theInterfaceData);  	// Check for a Garmin Device  	if (!SetupDiEnumDeviceInterfaces (theDevInfo' IntPtr.Zero' ref DeviceGuid' 0' ref theInterfaceData) && GetLastError () == ERROR_NO_MORE_ITEMS) {  		gHandle = null;  		return false;  	}  	// Get the device's file path  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' IntPtr.Zero' 0' ref theBytesReturned' IntPtr.Zero);  	if (theBytesReturned <= 0) {  		gHandle = null;  		return false;  	}  	IntPtr tmpBuffer = Marshal.AllocHGlobal ((int)theBytesReturned);  	if (IntPtr.Size == 4)  		Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  	else  		Marshal.WriteInt32 (tmpBuffer' 8);  	theDevDetailData.cbSize = Marshal.SizeOf (theDevDetailData);  	SetupDiGetDeviceInterfaceDetail (theDevInfo' ref theInterfaceData' tmpBuffer' theBytesReturned' IntPtr.Zero' ref theDevInfoData);  	IntPtr pDevicePathName = new IntPtr (tmpBuffer.ToInt64 () + 4);  	String devicePathName = Marshal.PtrToStringAuto (pDevicePathName);  	// Create a handle to the device  	gHandle = CreateFile (devicePathName' ((UInt32)(GenericAccessRights.GenericRead | GenericAccessRights.GenericWrite))' 0' IntPtr.Zero' (UInt32)FileCreationDisposition.OpenExisting' (UInt32)FileAttributes.Normal' IntPtr.Zero);  	// Get the driver's asynchronous packet size  	if (tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  	tmpBuffer = Marshal.AllocHGlobal (Marshal.SizeOf (gUSBPacketSize));  	DeviceIoControl (gHandle' IOCTL_USB_PACKET_SIZE' IntPtr.Zero' 0' tmpBuffer' (UInt32)Marshal.SizeOf (gUSBPacketSize)' ref theBytesReturned' IntPtr.Zero);  	switch (theBytesReturned) {  	case 2:  		gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  		break;  	case 4:  		gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  		break;  	case 8:  		gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  		break;  	}  	if (!tmpBuffer.Equals (IntPtr.Zero))  		Marshal.FreeHGlobal (tmpBuffer);  } catch {  	return false;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: if (IntPtr.Size == 4)  	Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  else  	Marshal.WriteInt32 (tmpBuffer' 8);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: if (IntPtr.Size == 4)  	Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  else  	Marshal.WriteInt32 (tmpBuffer' 8);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: if (IntPtr.Size == 4)  	Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  else  	Marshal.WriteInt32 (tmpBuffer' 8);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: Marshal.WriteInt32 (tmpBuffer' 4 + Marshal.SystemDefaultCharSize);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: Marshal.WriteInt32 (tmpBuffer' 8);  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: switch (theBytesReturned) {  case 2:  	gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  	break;  case 4:  	gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  	break;  case 8:  	gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  	break;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: switch (theBytesReturned) {  case 2:  	gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  	break;  case 4:  	gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  	break;  case 8:  	gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  	break;  }  
Magic Number,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following statement contains a magic number: switch (theBytesReturned) {  case 2:  	gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  	break;  case 4:  	gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  	break;  case 8:  	gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  	break;  }  
Magic Number,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,CTL_CODE,The following statement contains a magic number: return (UInt32)(((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method));  
Magic Number,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,CTL_CODE,The following statement contains a magic number: return (UInt32)(((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method));  
Magic Number,TrackerHomeGPS,Device,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GenericDevice.cs,CTL_CODE,The following statement contains a magic number: return (UInt32)(((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method));  
Magic Number,TrackerHomeGPS,GPSPosition,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GPSDevice.cs,LatRad,The following statement contains a magic number: return Lat * (Math.PI / 180.0);  
Magic Number,TrackerHomeGPS,GPSPosition,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GPSDevice.cs,LngRad,The following statement contains a magic number: return Lng * (Math.PI / 180.0);  
Missing Default,TrackerHomeGPS,GarminUSBGPS,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\TrackerHome\GarminInterface.cs,_obtainDeviceHandle,The following switch statement is missing a default case: switch (theBytesReturned) {  case 2:  	gUSBPacketSize = Marshal.ReadInt16 (tmpBuffer);  	break;  case 4:  	gUSBPacketSize = Marshal.ReadInt32 (tmpBuffer);  	break;  case 8:  	gUSBPacketSize = Marshal.ReadInt64 (tmpBuffer);  	break;  }  
