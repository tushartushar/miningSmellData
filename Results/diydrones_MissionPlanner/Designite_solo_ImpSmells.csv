Implementation smell,Namespace,Class,File,Method,Description
Long Statement,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,GetLogNames,The length of the statement  "                    Regex lsregex = new Regex(@"^[drwx-]+\s+[0-9]+\s+[^\s]+\s+[^\s]+\s+([0-9]+)\s+[^\s]+\s+[^\s]+\s+[^\s]+\s+([^\*\s]+).*$"' RegexOptions.Multiline); " is 145.
Long Statement,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,getFirmwareUrl,The length of the statement  "                var version1 = new Version(int.Parse(ans1["major"].ToString())' int.Parse(ans1["minor"].ToString())' int.Parse(ans1["patch"].ToString())' suf1); " is 144.
Long Statement,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,getFirmwareUrl,The length of the statement  "                var version2 = new Version(int.Parse(ans2["major"].ToString())' int.Parse(ans2["minor"].ToString())' int.Parse(ans2["patch"].ToString())' suf2); " is 144.
Long Statement,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,getFirmwareUrl,The length of the statement  "                var version = new Version(int.Parse(item["major"].ToString())' int.Parse(item["minor"].ToString())' int.Parse(item["patch"].ToString())); " is 137.
Long Statement,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,getFirmwareUrl,The length of the statement  "                Console.WriteLine(item["description"] + " " + item["file"] + " " + item["md5"] + " " + item["channel"] +" "+ item["product"] + " " + version); " is 142.
Complex Conditional,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash,The conditional expression  "(is_solo_alive && solo) ||(is_controller_alive && !solo)"  is complex.
Magic Number,solo,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0 && args[0] == "flash")              {                  if (args[1] == "solo")                      Solo.flash(args[2]' ""' true);                  else if (args[1] == "controller")                      Solo.flash(args[2]' ""' false);                  else                      Console.WriteLine("invalid command  solo flash solo firmware.gz");                  return;              }
Magic Number,solo,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0 && args[0] == "flash")              {                  if (args[1] == "solo")                      Solo.flash(args[2]' ""' true);                  else if (args[1] == "controller")                      Solo.flash(args[2]' ""' false);                  else                      Console.WriteLine("invalid command  solo flash solo firmware.gz");                  return;              }
Magic Number,solo,Program,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Program.cs,Main,The following statement contains a magic number: while (!file.IsCompleted)              {                  System.Threading.Thread.Sleep(1000);              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,GetLogNames,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var cmd = client.CreateCommand("ls -al /log/dataflash");                      cmd.Execute();                        Regex lsregex = new Regex(@"^[drwx-]+\s+[0-9]+\s+[^\s]+\s+[^\s]+\s+([0-9]+)\s+[^\s]+\s+[^\s]+\s+[^\s]+\s+([^\*\s]+).*$"' RegexOptions.Multiline);                        var matches = lsregex.Matches(cmd.Result);                        foreach (Match match in matches)                      {                          var size = match.Groups[1].Value;                          var name = match.Groups[2].Value;                          if (name.ToLower().EndsWith(".bin"))                              ans.Add(name);                      }                        /*                      var files = cmd.Result.Split(new char[] {'\n'' '\r'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var file in files)                      {                          if(file.ToLower().EndsWith(".bin"))                              ans.Add(file);                      }                      */                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,GetLogNames,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var cmd = client.CreateCommand("ls -al /log/dataflash");                      cmd.Execute();                        Regex lsregex = new Regex(@"^[drwx-]+\s+[0-9]+\s+[^\s]+\s+[^\s]+\s+([0-9]+)\s+[^\s]+\s+[^\s]+\s+[^\s]+\s+([^\*\s]+).*$"' RegexOptions.Multiline);                        var matches = lsregex.Matches(cmd.Result);                        foreach (Match match in matches)                      {                          var size = match.Groups[1].Value;                          var name = match.Groups[2].Value;                          if (name.ToLower().EndsWith(".bin"))                              ans.Add(name);                      }                        /*                      var files = cmd.Result.Split(new char[] {'\n'' '\r'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var file in files)                      {                          if(file.ToLower().EndsWith(".bin"))                              ans.Add(file);                      }                      */                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,GetLogNames,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var cmd = client.CreateCommand("ls -al /log/dataflash");                      cmd.Execute();                        Regex lsregex = new Regex(@"^[drwx-]+\s+[0-9]+\s+[^\s]+\s+[^\s]+\s+([0-9]+)\s+[^\s]+\s+[^\s]+\s+[^\s]+\s+([^\*\s]+).*$"' RegexOptions.Multiline);                        var matches = lsregex.Matches(cmd.Result);                        foreach (Match match in matches)                      {                          var size = match.Groups[1].Value;                          var name = match.Groups[2].Value;                          if (name.ToLower().EndsWith(".bin"))                              ans.Add(name);                      }                        /*                      var files = cmd.Result.Split(new char[] {'\n'' '\r'}' StringSplitOptions.RemoveEmptyEntries);                        foreach (var file in files)                      {                          if(file.ToLower().EndsWith(".bin"))                              ans.Add(file);                      }                      */                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,DownloadDFLog,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Downloading += ScpClient_Downloading;                            scpClient.Download("/log/dataflash/" + source' new FileInfo(destination));                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,DownloadDFLog,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Downloading += ScpClient_Downloading;                            scpClient.Download("/log/dataflash/" + source' new FileInfo(destination));                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,ScpClient_Downloading,The following statement contains a magic number: Console.WriteLine("{0} - {1} {2}"'e.Filename'e.Downloaded' (e.Downloaded/(double)e.Size)*100);
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash_px4,The following statement contains a magic number: if (is_solo_alive)              {                  using (SshClient client = new SshClient(Solo.soloip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        var retcode = client.RunCommand("rm -rf /firmware/loaded");                                            using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            scpClient.Upload(new FileInfo(firmware_file)' "/firmware/" + Path.GetFileName(firmware_file));                      }                        var st = client.CreateShellStream("bash"' 80' 24' 800' 600' 1024*8);                        // wait for bash prompt                      while (!st.DataAvailable)                          System.Threading.Thread.Sleep(200);                        st.WriteLine("loadPixhawk.py; exit;");                      st.Flush();                        StringBuilder output = new StringBuilder();                        while (client.IsConnected)                      {                          var line = st.Read();                          Console.Write(line);                          output.Append(line);                          System.Threading.Thread.Sleep(100);                            if (output.ToString().Contains("logout"))                              break;                      }                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash,The following statement contains a magic number: if ((is_solo_alive && solo) ||(is_controller_alive && !solo))              {                  Console.WriteLine("About to connect "+ ip);                  using (SshClient client = new SshClient(ip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        Console.WriteLine("run update-prepare");                      var retcode = client.RunCommand("sololink_config --update-prepare sololink");                        if (retcode.ExitStatus != 0)                      {                          Console.WriteLine("run cleanup");                          client.RunCommand("rm -rf /log/updates && mkdir -p /log/updates");                      }                        using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            if (firmware_md5 == "")                          {                              using (var md5 = MD5.Create())                              using (var fs = File.OpenRead(firmware_file))                              {                                  var hash = md5.ComputeHash(fs);                                    File.WriteAllText(firmware_file + ".md5"'                                      ByteArrayToString(hash) + "  " + Path.GetFileName(firmware_file) + "\n");                              }                                firmware_md5 = firmware_file + ".md5";                          }                            Console.WriteLine("upload firmware");                          scpClient.Upload(new FileInfo(firmware_file)' "/log/updates/" + Path.GetFileName(firmware_file));                          scpClient.Upload(new FileInfo(firmware_md5)' "/log/updates/" + Path.GetFileName(firmware_md5));                      }                        if (clean)                      {                          retcode = client.RunCommand("sololink_config --update-apply sololink --reset");                      }                      else                      {                          Console.WriteLine("update-apply");                          retcode = client.RunCommand("sololink_config --update-apply sololink");                      }                        if (retcode.ExitStatus != 0)                      {                          if (clean)                          {                              retcode =                                  client.RunCommand(                                      "touch /log/updates/UPDATE && touch /log/updates/RESETSETTINGS && shutdown -r now");                          }                          else                          {                              Console.WriteLine("reboot");                              retcode = client.RunCommand("touch /log/updates/UPDATE && shutdown -r now");                          }                      }                        client.Disconnect();                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,flash,The following statement contains a magic number: if ((is_solo_alive && solo) ||(is_controller_alive && !solo))              {                  Console.WriteLine("About to connect "+ ip);                  using (SshClient client = new SshClient(ip' 22' Solo.username' Solo.password))                  {                      client.KeepAliveInterval = TimeSpan.FromSeconds(5);                      client.Connect();                        if (!client.IsConnected)                          throw new Exception("Failed to connect ssh");                        Console.WriteLine("run update-prepare");                      var retcode = client.RunCommand("sololink_config --update-prepare sololink");                        if (retcode.ExitStatus != 0)                      {                          Console.WriteLine("run cleanup");                          client.RunCommand("rm -rf /log/updates && mkdir -p /log/updates");                      }                        using (ScpClient scpClient = new ScpClient(client.ConnectionInfo))                      {                          scpClient.Connect();                            if (!scpClient.IsConnected)                              throw new Exception("Failed to connect scp");                            if (firmware_md5 == "")                          {                              using (var md5 = MD5.Create())                              using (var fs = File.OpenRead(firmware_file))                              {                                  var hash = md5.ComputeHash(fs);                                    File.WriteAllText(firmware_file + ".md5"'                                      ByteArrayToString(hash) + "  " + Path.GetFileName(firmware_file) + "\n");                              }                                firmware_md5 = firmware_file + ".md5";                          }                            Console.WriteLine("upload firmware");                          scpClient.Upload(new FileInfo(firmware_file)' "/log/updates/" + Path.GetFileName(firmware_file));                          scpClient.Upload(new FileInfo(firmware_md5)' "/log/updates/" + Path.GetFileName(firmware_md5));                      }                        if (clean)                      {                          retcode = client.RunCommand("sololink_config --update-apply sololink --reset");                      }                      else                      {                          Console.WriteLine("update-apply");                          retcode = client.RunCommand("sololink_config --update-apply sololink");                      }                        if (retcode.ExitStatus != 0)                      {                          if (clean)                          {                              retcode =                                  client.RunCommand(                                      "touch /log/updates/UPDATE && touch /log/updates/RESETSETTINGS && shutdown -r now");                          }                          else                          {                              Console.WriteLine("reboot");                              retcode = client.RunCommand("touch /log/updates/UPDATE && shutdown -r now");                          }                      }                        client.Disconnect();                  }              }              else              {                  throw new Exception("Solo is not responding to pings");              }
Magic Number,solo,Solo,C:\repos\diydrones_MissionPlanner\ExtLibs\solo\Solo.cs,Ping,The following statement contains a magic number: try              {                  using (var p = new Ping())                  {                      var options = new PingOptions();                      options.DontFragment = true;                      var data = "MissionPlanner";                      var buffer = Encoding.ASCII.GetBytes(data);                      var timeout = 2000;                      var reply = p.Send(ip' timeout' buffer' options);                      if (reply.Status == IPStatus.Success)                          return true;                      return false;                  }              }              catch              {                  return false;              }
