Implementation smell,Namespace,Class,File,Method,Description
Long Method,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The method has 992 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The method has 176 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The method has 168 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The method has 212 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The method has 119 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The method has 127 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWP,The method has 121 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The method has 139 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The method has 604 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getInfoFromStream,The method has 170 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The method has 156 lines of code.
Long Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The method has 112 lines of code.
Long Method,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The method has 110 lines of code.
Long Method,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,ProcessButtonEvent,The method has 242 lines of code.
Long Method,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The method has 162 lines of code.
Long Method,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdBurstReadFile,The method has 116 lines of code.
Long Method,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdListDirectory,The method has 119 lines of code.
Complex Method,MissionPlanner.ArduPilot,mav_mission,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\mav_mission.cs,upload,Cyclomatic complexity of the method is 9
Complex Method,MissionPlanner.Utilities,Fence,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Fence.cs,LocationToFence,Cyclomatic complexity of the method is 9
Complex Method,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,Cyclomatic complexity of the method is 9
Complex Method,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,mainloop,Cyclomatic complexity of the method is 10
Complex Method,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,Cyclomatic complexity of the method is 123
Complex Method,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,Cyclomatic complexity of the method is 14
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,Cyclomatic complexity of the method is 20
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,Cyclomatic complexity of the method is 17
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,Cyclomatic complexity of the method is 13
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,Cyclomatic complexity of the method is 12
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,Cyclomatic complexity of the method is 18
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,Cyclomatic complexity of the method is 37
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWP,Cyclomatic complexity of the method is 15
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,DebugPacket,Cyclomatic complexity of the method is 13
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPTotal,Cyclomatic complexity of the method is 11
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,Cyclomatic complexity of the method is 19
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,Cyclomatic complexity of the method is 14
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,Cyclomatic complexity of the method is 9
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,Cyclomatic complexity of the method is 103
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getInfoFromStream,Cyclomatic complexity of the method is 36
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getVersion,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,Cyclomatic complexity of the method is 24
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLogEntry,Cyclomatic complexity of the method is 9
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getRallyPoint,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,Cyclomatic complexity of the method is 16
Complex Method,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setAPType,Cyclomatic complexity of the method is 15
Complex Method,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,getMovingAxis,Cyclomatic complexity of the method is 10
Complex Method,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,Cyclomatic complexity of the method is 31
Complex Method,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,ProcessButtonEvent,Cyclomatic complexity of the method is 19
Complex Method,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,Cyclomatic complexity of the method is 37
Long Parameter List,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,angle_input,The method has 6 parameters. Parameters: rev' radio_in' radio_min' radio_max' angle_min' angle_max
Long Parameter List,MissionPlanner.Utilities,directionState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Proximity.cs,Add,The method has 5 parameters. Parameters: id' orientation' distance' received' age
Long Parameter List,MissionPlanner.Utilities,data,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Proximity.cs,data,The method has 5 parameters. Parameters: id' orientation' distance' received' age
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,device_op,The method has 9 parameters. Parameters: sysid' compid' bustype' name' bus' address' regstart' count' writebytes
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The method has 6 parameters. Parameters: messageType' indata' sysid' compid' forcemavlink2' forcesigning
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The method has 5 parameters. Parameters: sysid' compid' paramname' value' force
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The method has 5 parameters. Parameters: sysid' compid' name' index' requireresponce
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doMotorTest,The method has 5 parameters. Parameters: motor' thr_type' throttle' timeout' motorcount
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The method has 9 parameters. Parameters: actionid' p1' p2' p3' p4' p5' p6' p7' requireack
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The method has 12 parameters. Parameters: sysid' compid' actionid' p1' p2' p3' p4' p5' p6' p7' requireack' uicallback
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendSerialControl,The method has 5 parameters. Parameters: port' timeoutms' data' baudrate' close
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendRCOverride,The method has 10 parameters. Parameters: sysid' compid' rc1' rc2' rc3' rc4' rc5' rc6' rc7' rc8
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendManualControl,The method has 7 parameters. Parameters: sysid' compid' x' y' z' r' buttons
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,InjectGpsData,The method has 5 parameters. Parameters: sysid' compid' data' length' rtcm_message
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The method has 7 parameters. Parameters: loc' index' frame' current' autocontinue' use_int' mission_type
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The method has 9 parameters. Parameters: sysid' compid' loc' index' frame' current' autocontinue' use_int' mission_type
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The method has 15 parameters. Parameters: sysid' compid' pos' vel' acc' yaw' frame' lat' lng' alt' vx' vy' vz' yawangle' yawrate
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setMountControl,The method has 6 parameters. Parameters: sysid' compid' pa' pb' pc' islatlng
Long Parameter List,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setRallyPoint,The method has 6 parameters. Parameters: index' plla' break_alt' land_dir_cd' flags' rallypointcount
Long Parameter List,MissionPlanner,PacketInspector<T>,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\PacketInspector.cs,Add,The method has 5 parameters. Parameters: sysid' compid' msgid' message' size
Long Parameter List,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Expo,The method has 5 parameters. Parameters: input' expo' min' max' mid
Long Parameter List,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,map,The method has 5 parameters. Parameters: x' in_min' in_max' out_min' out_max
Long Identifier,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The length of the parameter MAVLINK_SET_POS_TYPE_MASK_POS_IGNORE is 36.
Long Identifier,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The length of the parameter MAVLINK_SET_POS_TYPE_MASK_ALT_IGNORE is 36.
Long Identifier,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The length of the parameter MAVLINK_SET_POS_TYPE_MASK_VEL_IGNORE is 36.
Long Identifier,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The length of the parameter MAVLINK_SET_POS_TYPE_MASK_ACC_IGNORE is 36.
Long Identifier,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The length of the parameter MAVLINK_SET_POS_TYPE_MASK_FORCE is 31.
Long Identifier,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The length of the parameter MAVLINK_SET_POS_TYPE_MASK_YAW_IGNORE is 36.
Long Statement,MissionPlanner.ArduPilot,APFirmware,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\APFirmware.cs,GetBoardID,The length of the statement  "                var vidandusbdesc = Manifest.Firmware.Where(a => a.Usbid.Any(b => b.ToLower().Contains(lookfor.ToLower())) && a.BoardId != 0); " is 126.
Long Statement,MissionPlanner.ArduPilot,mav_mission,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\mav_mission.cs,upload,The length of the statement  "                    MAVLink.MAV_MISSION_RESULT ans = port.setWP(temp' (ushort)(uploadwpno)' (MAVLink.MAV_FRAME)temp.frame' 0' 1' use_int' type); " is 124.
Long Statement,MissionPlanner.ArduPilot,mav_mission,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\mav_mission.cs,upload,The length of the statement  "                        // the ans is received via mission_ack' so we dont know for certain what our current request is for. as we may have lost the mission_request " is 140.
Long Statement,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The length of the statement  "            //Console.WriteLine("pitch " + pitchangle.ToString("0.000") + " yaw " + yawangle.ToString("0.000") + " dist" + dist.ToString("0.000")); " is 135.
Long Statement,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The length of the statement  "            //Console.WriteLine("Wn_error = {0}\nWe_error = {1}\nWn_fgo =    {2}\nWe_fgo =  {3}\nWind_dir =    {4}\nWind_vel =    {5}\n"'Wn_error'We_error'Wn_fgo'We_fgo'wind_dir'wind_vel); " is 176.
Long Statement,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The length of the statement  "            //Console.WriteLine("wind_dir: {0} wind_vel: {1}    as {4} yaw {5} pitch {6} gs {7} cog {8}"' wind_dir' wind_vel' Wn_fgo' We_fgo ' airspeed'yaw'pitch'groundspeed'groundcourse); " is 176.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The length of the statement  "                        //Console.WriteLine("gen linkid {0}' time {1} {2} {3} {4} {5} {6} {7}"' sig[0]' sig[1]' sig[2]' sig[3]' sig[4]' sig[5]' sig[6]' timestamp); " is 139.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The length of the statement  "            if ((MAVlist[sysid' compid].cs.capabilities & (uint)MAV_PROTOCOL_CAPABILITY.PARAM_FLOAT) > 0 || MAVlist[sysid' compid].apname == MAV_AUTOPILOT.ARDUPILOTMEGA) " is 157.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The length of the statement  "                req.param_value = new MAVLinkParam(paramname' value' (MAV_PARAM_TYPE)MAVlist[sysid' compid].param_types[paramname]).float_value; " is 128.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.PARAM_VALUE && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 132.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The length of the statement  "                            MAVlist[sysid' compid].param[st] = new MAVLinkParam(st' BitConverter.GetBytes(par.param_value)' MAV_PARAM_TYPE.REAL32' (MAV_PARAM_TYPE) par.param_type); " is 152.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The length of the statement  "                            MAVlist[sysid' compid].param[st] = new MAVLinkParam(st' BitConverter.GetBytes(par.param_value)' (MAV_PARAM_TYPE)par.param_type' (MAV_PARAM_TYPE)par.param_type); " is 160.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The length of the statement  "                    if (buffer.msgid == (byte)MAVLINK_MSG_ID.PARAM_VALUE && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 131.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The length of the statement  "                        if ((MAVlist[sysid' compid].cs.capabilities & (uint)MAV_PROTOCOL_CAPABILITY.PARAM_FLOAT) > 0 || MAVlist[sysid'compid].apname == MAV_AUTOPILOT.ARDUPILOTMEGA) " is 156.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The length of the statement  "                            newparamlist[paramID] = new MAVLinkParam(paramID' BitConverter.GetBytes(par.param_value)' MAV_PARAM_TYPE.REAL32' (MAV_PARAM_TYPE)par.param_type); " is 145.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The length of the statement  "                            newparamlist[paramID] = new MAVLinkParam(paramID' BitConverter.GetBytes(par.param_value)' (MAV_PARAM_TYPE)par.param_type' (MAV_PARAM_TYPE)par.param_type); " is 154.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The length of the statement  "                    if (buffer.msgid == (byte)MAVLINK_MSG_ID.PARAM_VALUE && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 131.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The length of the statement  "                            MAVlist[sysid' compid].param[st] = new MAVLinkParam(st' BitConverter.GetBytes(par.param_value)' MAV_PARAM_TYPE.REAL32' (MAV_PARAM_TYPE) par.param_type); " is 152.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The length of the statement  "                            MAVlist[sysid' compid].param[st] = new MAVLinkParam(st' BitConverter.GetBytes(par.param_value)' (MAV_PARAM_TYPE)par.param_type' (MAV_PARAM_TYPE)par.param_type); " is 160.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPCurrent,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.MISSION_CURRENT && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 136.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.COMMAND_ACK && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 132.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWPCount,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.MISSION_COUNT && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 134.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHomePosition,The length of the statement  "                        var loc = new Locationwp().Set(home.latitude / 1.0e7' home.longitude / 1.0e7' home.altitude / 1000.0' (byte)MAV_CMD.WAYPOINT); " is 126.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,DebugPacket,The length of the statement  "                        textoutput = textoutput + delimeter + "sig " + sig + delimeter + "Len" + delimeter + datin.Length + delimeter +"crc16" + delimeter+ datin.crc16 + "\r\n"; " is 153.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPTotal,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.MISSION_REQUEST && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 136.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The length of the statement  "                    if (buffer.msgid == (byte)MAVLINK_MSG_ID.MISSION_ACK && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 131.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The length of the statement  "                    else if (buffer.msgid == (byte)MAVLINK_MSG_ID.MISSION_REQUEST && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 140.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setGuidedModeWP,The length of the statement  "                log.InfoFormat("setGuidedModeWP {0}:{1} lat {2} lng {3} alt {4}"' sysid' compid' gotohere.lat' gotohere.lng' gotohere.alt); " is 123.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The length of the statement  "            // check message length size vs table (mavlink1 explicit size check | mavlink2 allow all' undersize 0 trimmed' and oversize unknown extension) " is 142.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The length of the statement  "            //check if sig was included in packet' and we are not ignoring the signature (signing isnt checked else we wont enable signing) " is 127.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The length of the statement  "                        //Console.WriteLine("rec linkid {0}' time {1} {2} {3} {4} {5} {6} {7}"' message.sig[0]' message.sig[1]' message.sig[2]' message.sig[3]' message.sig[4]' message.sig[5]' message.sig[6]' message.sigTimestamp); " is 206.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The length of the statement  "                        // RFD900X radios with MultiPoint firmware present themselves with the same sysid as the aircraft that they are connected to' and with a fixed component id of 68 " is 161.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The length of the statement  "                    // set seens sysid's based on hb packet - this will hide 3dr radio packets ( which send a RADIO_STATUS' but not a HEARTBEAT ) " is 125.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The length of the statement  "                        // gymbals etc are a child/slave to the main sysid' this displays the children messages under the current displayed vehicle " is 123.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getInfoFromStream,The length of the statement  "                //Console.WriteLine("WP # {7} cmd {8} p1 {0} p2 {1} p3 {2} p4 {3} x {4} y {5} z {6}"' wp.param1' wp.param2' wp.param3' wp.param4' wp.x' wp.y' wp.z' wp.seq' wp.command); " is 168.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getInfoFromStream,The length of the statement  "                //Console.WriteLine("WP INT # {7} cmd {8} p1 {0} p2 {1} p3 {2} p4 {3} x {4} y {5} z {6}"' wp.param1' wp.param2' wp.param3' wp.param4' wp.x' wp.y' wp.z' wp.seq' wp.command); " is 172.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getInfoFromStream,The length of the statement  "                //Console.WriteLine("SET_POSITION_TARGET_GLOBAL_INT x {0} y {1} z {2} frame {3}"' setpos.lat_int/1e7' setpos.lon_int/1e7' setpos.alt' setpos.coordinate_frame); " is 159.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getInfoFromStream,The length of the statement  "                if (MAVlist[sysid' compid].apname == MAV_AUTOPILOT.ARDUPILOTMEGA && buffer.compid != (byte)MAV_COMPONENT.MAV_COMP_ID_UDP_BRIDGE) " is 128.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getVersion,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.AUTOPILOT_VERSION && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 138.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getFencePoint,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.FENCE_POINT && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 132.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.LOG_DATA && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 129.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.LOG_DATA && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 129.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLogEntry,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.LOG_ENTRY && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 130.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLogEntry,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.LOG_DATA && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 129.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getRallyPoint,The length of the statement  "                    if (buffer.msgid == (byte) MAVLINK_MSG_ID.RALLY_POINT && buffer.sysid == req.target_system && buffer.compid == req.target_component) " is 132.
Long Statement,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The length of the statement  "                    streamfncache[_logplaybackfile.BaseStream] = new Tuple<string' long>(((FileStream)_logplaybackfile.BaseStream).Name.ToLower()' logplaybackfile.BaseStream.Length); " is 162.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                        //g.channel_roll.set_pwm(BOOL_TO_SIGN(g.reverse_elevons) * (BOOL_TO_SIGN(g.reverse_ch2_elevon) * int(ch2_temp - elevon2_trim) - BOOL_TO_SIGN(g.reverse_ch1_elevon) * int(ch1_temp - elevon1_trim)) / 2 + 1500); " is 207.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                        //g.channel_pitch.set_pwm(                                 (BOOL_TO_SIGN(g.reverse_ch2_elevon) * int(ch2_temp - elevon2_trim) + BOOL_TO_SIGN(g.reverse_ch1_elevon) * int(ch1_temp - elevon1_trim)) / 2 + 1500); " is 207.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(9) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech9 = pickchannel(9' JoyChannels[9].axis' JoyChannels[9].reverse' JoyChannels[9].expo); " is 168.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(10) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech10 = pickchannel(10' JoyChannels[10].axis' JoyChannels[10].reverse' JoyChannels[10].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(11) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech11 = pickchannel(11' JoyChannels[11].axis' JoyChannels[11].reverse' JoyChannels[11].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(12) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech12 = pickchannel(12' JoyChannels[12].axis' JoyChannels[12].reverse' JoyChannels[12].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(13) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech13 = pickchannel(13' JoyChannels[13].axis' JoyChannels[13].reverse' JoyChannels[13].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(14) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech14 = pickchannel(14' JoyChannels[14].axis' JoyChannels[14].reverse' JoyChannels[14].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(15) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech15 = pickchannel(15' JoyChannels[15].axis' JoyChannels[15].reverse' JoyChannels[15].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(16) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech16 = pickchannel(16' JoyChannels[16].axis' JoyChannels[16].reverse' JoyChannels[16].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(17) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech17 = pickchannel(17' JoyChannels[17].axis' JoyChannels[17].reverse' JoyChannels[17].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    if (getJoystickAxis(18) != Joystick.joystickaxis.None) Interface.MAV.cs.rcoverridech18 = pickchannel(18' JoyChannels[18].axis' JoyChannels[18].reverse' JoyChannels[18].expo); " is 174.
Long Statement,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The length of the statement  "                    //Console.WriteLine("{0} {1} {2} {3}"' Interface.MAV.cs.rcoverridech1' Interface.MAV.cs.rcoverridech2' Interface.MAV.cs.rcoverridech3' Interface.MAV.cs.rcoverridech4); " is 167.
Complex Conditional,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,FindLineIntersection,The conditional expression  "(r < 0 || r > 1) || (s < 0 || s > 1)"  is complex.
Complex Conditional,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The conditional expression  "oldmode != mode && Speech != null && Speech.speechEnable &&                                      parent?.parent?.MAV?.cs == this &&                                      Settings.Instance.GetBoolean("speechmodeenabled")"  is complex.
Complex Conditional,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The conditional expression  "oldwp != wpno && Speech != null && Speech.speechEnable && parent != null &&                                  parent.parent.MAV.cs == this &&                                  Settings.Instance.GetBoolean("speechwaypointenabled")"  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The conditional expression  "messageType == (byte) MAVLINK_MSG_ID.MISSION_REQUEST_LIST ||                      messageType == (byte) MAVLINK_MSG_ID.MISSION_REQUEST_PARTIAL_LIST ||                      messageType == (byte) MAVLINK_MSG_ID.MISSION_REQUEST ||                      messageType == (byte) MAVLINK_MSG_ID.PARAM_REQUEST_LIST ||                      messageType == (byte) MAVLINK_MSG_ID.PARAM_REQUEST_READ ||                      messageType == (byte) MAVLINK_MSG_ID.RALLY_FETCH_POINT ||                      messageType == (byte) MAVLINK_MSG_ID.FENCE_FETCH_POINT"  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The conditional expression  "buffer[0] >= 0x20 && buffer[0] <= 127 || buffer[0] == '\n' || buffer[0] == '\r'"  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The conditional expression  "buffer.Length >= 5 && (sysid == gcssysid || sysid == 253) && logreadmode"  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The conditional expression  "(message.header == 'U' || message.header == 0xfe || message.header == 0xfd) &&                      buffer.Length >= message.payloadlength"  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The conditional expression  "(msgid == (byte) MAVLINK_MSG_ID.RADIO_STATUS || msgid == (byte) MAVLINK_MSG_ID.RADIO)                              && (message.compid == 68) &&                              (message.sysid == 63)"  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The conditional expression  "(msgid == (byte) MAVLINK_MSG_ID.RADIO_STATUS || msgid == (byte) MAVLINK_MSG_ID.RADIO)                              && (message.compid == 68) && (message.sysid != 63)"  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The conditional expression  "Speech != null &&                                  Speech.IsReady &&                                  Settings.Instance["speechenable"] != null &&                                  Settings.Instance["speechenable"].ToString() == "True""  is complex.
Complex Conditional,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The conditional expression  "true && ((BaseStream != null && BaseStream.IsOpen) || logreadmode)"  is complex.
Complex Conditional,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdBurstReadFile,The conditional expression  "ftphead.offset > size || ftphead.size > size || ftphead.offset + ftphead.size > size ||                     answer.Length == 0 && ftphead.offset > 0 && size < 239"  is complex.
Empty Catch Block,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,speechConversion,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,Stop,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,mainloop,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,RequestCallback,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,RequestCallback,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,RequestCallback,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,RequestCallback,The method has an empty catch block.
Empty Catch Block,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The method has an empty catch block.
Empty Catch Block,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The method has an empty catch block.
Empty Catch Block,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The method has an empty catch block.
Empty Catch Block,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,GetNameandUnit,The method has an empty catch block.
Empty Catch Block,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,Close,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getAppVersion,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,stopall,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,DebugPacket,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,DebugPacket,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The method has an empty catch block.
Empty Catch Block,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,loadconfig,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,loadconfig,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Comms,MAVLinkSerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkSerialPort.cs,mainloop,The method has an empty catch block.
Magic Number,MissionPlanner.ArduPilot,APFirmware,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\APFirmware.cs,GetBoardID,The following statement contains a magic number: var lookfor = String.Format("0x{0}/0x{1}"' match.Groups[1].Value' match.Groups[2].Value);
Magic Number,MissionPlanner.ArduPilot,APFirmware,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\APFirmware.cs,GetOptions,The following statement contains a magic number: var lookfor = String.Format("0x{0}/0x{1}"' match.Groups[1].Value' match.Groups[2].Value);
Magic Number,MissionPlanner.ArduPilot,APFirmware,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\APFirmware.cs,test,The following statement contains a magic number: var bid = Manifest.Firmware.Where(a => a.BoardId == 9)                  .Where(a => a.MavFirmwareVersionType == "OFFICIAL");
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,Common,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Common.cs,getModesList,The following statement contains a magic number: var temp = new List<KeyValuePair<int' string>>()                  {                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_MANUAL << 16' "Manual")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ACRO << 16' "Acro")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_STABILIZED << 16'                          "Stabalized")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_RATTITUDE << 16'                          "Rattitude")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_ALTCTL << 16'                          "Altitude Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_POSCTL << 16'                          "Position Control")'                      new KeyValuePair<int' string>((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_OFFBOARD << 16'                          "Offboard Control")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_READY << 24' "Auto: Ready")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_TAKEOFF << 24' "Auto: Takeoff")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LOITER << 24' "Loiter")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_MISSION << 24' "Auto")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_RTL << 24' "RTL")'                      new KeyValuePair<int' string>(                          ((int) PX4_CUSTOM_MAIN_MODE.PX4_CUSTOM_MAIN_MODE_AUTO << 16) +                          (int) PX4_CUSTOM_SUB_MODE_AUTO.PX4_CUSTOM_SUB_MODE_AUTO_LAND << 24' "Auto: Landing")                  };
Magic Number,MissionPlanner.ArduPilot,mav_mission,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\mav_mission.cs,download,The following statement contains a magic number: progress?.Invoke((a * 100) / cmdcount' "Getting WP " + a);
Magic Number,MissionPlanner.ArduPilot,mav_mission,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\mav_mission.cs,download,The following statement contains a magic number: progress?.Invoke(100' "Done");
Magic Number,MissionPlanner.ArduPilot,mav_mission,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\mav_mission.cs,upload,The following statement contains a magic number: progress?.Invoke(((a*100) / commandlist.Count)' "Uploading WP " + a);
Magic Number,MissionPlanner.Utilities,Camera,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Camera.cs,CameraInfo,The following statement contains a magic number: new Timer((a) => { mav.parent.UnSubscribeToPacketType(sub); }' sub' 10000' Timeout.Infinite);
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,The following statement contains a magic number: channel == 2
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,The following statement contains a magic number: channel == 3
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,The following statement contains a magic number: channel == 4
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,The following statement contains a magic number: channel == 5
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,The following statement contains a magic number: channel == 6
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,The following statement contains a magic number: channel == 7
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,channelpwm,The following statement contains a magic number: channel == 8
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ConvertPwmtoAngle,The following statement contains a magic number: switch (axis)              {                  case GimbalPoint.axis.roll:                      pwmvalue = channelpwm(rollchannel);                      float minr = (float) comPort.MAV.param["RC" + rollchannel + "_MIN"];                      float maxr = (float) comPort.MAV.param["RC" + rollchannel + "_MAX"];                      float minroll = (float) comPort.MAV.param["MNT_ANGMIN_ROL"];                      float maxroll = (float) comPort.MAV.param["MNT_ANGMAX_ROL"];                      float revr = (float) comPort.MAV.param["RC" + rollchannel + "_REV"];                        return angle_input(revr != 1' pwmvalue' minr' maxr' minroll' maxroll)/100.0;                    case GimbalPoint.axis.pitch:                      pwmvalue = channelpwm(pitchchannel);                      float minp = (float) comPort.MAV.param["RC" + pitchchannel + "_MIN"];                      float maxp = (float) comPort.MAV.param["RC" + pitchchannel + "_MAX"];                      float minpitch = (float) comPort.MAV.param["MNT_ANGMIN_TIL"];                      float maxpitch = (float) comPort.MAV.param["MNT_ANGMAX_TIL"];                      float revp = (float) comPort.MAV.param["RC" + pitchchannel + "_REV"];                          return angle_input(revp != 1' pwmvalue' minp' maxp' minpitch' maxpitch)/100.0;                    case GimbalPoint.axis.yaw:                      pwmvalue = channelpwm(yawchannel);                      float miny = (float) comPort.MAV.param["RC" + yawchannel + "_MIN"];                      float maxy = (float) comPort.MAV.param["RC" + yawchannel + "_MAX"];                      float minyaw = (float) comPort.MAV.param["MNT_ANGMIN_PAN"];                      float maxyaw = (float) comPort.MAV.param["MNT_ANGMAX_PAN"];                      float revy = (float) comPort.MAV.param["RC" + yawchannel + "_REV"];                        return angle_input(revy != 1' pwmvalue' miny' maxy' minyaw' maxyaw)/100.0;              }
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ConvertPwmtoAngle,The following statement contains a magic number: switch (axis)              {                  case GimbalPoint.axis.roll:                      pwmvalue = channelpwm(rollchannel);                      float minr = (float) comPort.MAV.param["RC" + rollchannel + "_MIN"];                      float maxr = (float) comPort.MAV.param["RC" + rollchannel + "_MAX"];                      float minroll = (float) comPort.MAV.param["MNT_ANGMIN_ROL"];                      float maxroll = (float) comPort.MAV.param["MNT_ANGMAX_ROL"];                      float revr = (float) comPort.MAV.param["RC" + rollchannel + "_REV"];                        return angle_input(revr != 1' pwmvalue' minr' maxr' minroll' maxroll)/100.0;                    case GimbalPoint.axis.pitch:                      pwmvalue = channelpwm(pitchchannel);                      float minp = (float) comPort.MAV.param["RC" + pitchchannel + "_MIN"];                      float maxp = (float) comPort.MAV.param["RC" + pitchchannel + "_MAX"];                      float minpitch = (float) comPort.MAV.param["MNT_ANGMIN_TIL"];                      float maxpitch = (float) comPort.MAV.param["MNT_ANGMAX_TIL"];                      float revp = (float) comPort.MAV.param["RC" + pitchchannel + "_REV"];                          return angle_input(revp != 1' pwmvalue' minp' maxp' minpitch' maxpitch)/100.0;                    case GimbalPoint.axis.yaw:                      pwmvalue = channelpwm(yawchannel);                      float miny = (float) comPort.MAV.param["RC" + yawchannel + "_MIN"];                      float maxy = (float) comPort.MAV.param["RC" + yawchannel + "_MAX"];                      float minyaw = (float) comPort.MAV.param["MNT_ANGMIN_PAN"];                      float maxyaw = (float) comPort.MAV.param["MNT_ANGMAX_PAN"];                      float revy = (float) comPort.MAV.param["RC" + yawchannel + "_REV"];                        return angle_input(revy != 1' pwmvalue' miny' maxy' minyaw' maxyaw)/100.0;              }
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ConvertPwmtoAngle,The following statement contains a magic number: switch (axis)              {                  case GimbalPoint.axis.roll:                      pwmvalue = channelpwm(rollchannel);                      float minr = (float) comPort.MAV.param["RC" + rollchannel + "_MIN"];                      float maxr = (float) comPort.MAV.param["RC" + rollchannel + "_MAX"];                      float minroll = (float) comPort.MAV.param["MNT_ANGMIN_ROL"];                      float maxroll = (float) comPort.MAV.param["MNT_ANGMAX_ROL"];                      float revr = (float) comPort.MAV.param["RC" + rollchannel + "_REV"];                        return angle_input(revr != 1' pwmvalue' minr' maxr' minroll' maxroll)/100.0;                    case GimbalPoint.axis.pitch:                      pwmvalue = channelpwm(pitchchannel);                      float minp = (float) comPort.MAV.param["RC" + pitchchannel + "_MIN"];                      float maxp = (float) comPort.MAV.param["RC" + pitchchannel + "_MAX"];                      float minpitch = (float) comPort.MAV.param["MNT_ANGMIN_TIL"];                      float maxpitch = (float) comPort.MAV.param["MNT_ANGMAX_TIL"];                      float revp = (float) comPort.MAV.param["RC" + pitchchannel + "_REV"];                          return angle_input(revp != 1' pwmvalue' minp' maxp' minpitch' maxpitch)/100.0;                    case GimbalPoint.axis.yaw:                      pwmvalue = channelpwm(yawchannel);                      float miny = (float) comPort.MAV.param["RC" + yawchannel + "_MIN"];                      float maxy = (float) comPort.MAV.param["RC" + yawchannel + "_MAX"];                      float minyaw = (float) comPort.MAV.param["MNT_ANGMIN_PAN"];                      float maxyaw = (float) comPort.MAV.param["MNT_ANGMAX_PAN"];                      float revy = (float) comPort.MAV.param["RC" + yawchannel + "_REV"];                        return angle_input(revy != 1' pwmvalue' miny' maxy' minyaw' maxyaw)/100.0;              }
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: yawangle = comPort.MAVlist[comPort.sysidcurrent' 67].cs.yaw;
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: rollangle = comPort.MAVlist[comPort.sysidcurrent' 67].cs.roll;
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: pitchangle = comPort.MAVlist[comPort.sysidcurrent' 67].cs.pitch;
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: (double) comPort.MAV.param["MNT_TYPE"] == 4
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: Math.Abs(rollangle) > 180 || yawangle == 0 && pitchangle == 0
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: int distout = 10;
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: PointLatLngAlt newposdist2 = currentlocation.newpos(yawangle + comPort.MAV.cs.yaw' distout + 50);
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: double distflat = Math.Tan((90 + pitchangle)*MathHelper.deg2rad)*(comPort.MAV.cs.altasl);
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: var newpoint = FindLineIntersection(start1: new Point(0' comPort.MAV.cs.altasl)'                      new Point((float) distflat' 0)'                      new Point((float) distout' (float) newposdist.Alt)'                      new Point((float) distout + 50' (float) newposdist2.Alt));
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: distout += 50;
Magic Number,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ProjectPoint,The following statement contains a magic number: distout < 1000
Magic Number,MissionPlanner.Utilities,OpticalFlow,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\OpticalFlow.cs,SetGrayscalePalette,The following statement contains a magic number: _palette.Entries[i] = Color.FromArgb(255' i' i' i);
Magic Number,MissionPlanner.Utilities,OpticalFlow,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\OpticalFlow.cs,SetGrayscalePalette,The following statement contains a magic number: i < 256
Magic Number,MissionPlanner.Utilities,Proximity,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Proximity.cs,messageReceived,The following statement contains a magic number: _dS.Add(dist.id' (MAV_SENSOR_ORIENTATION)dist.orientation' dist.current_distance' DateTime.Now' 3);
Magic Number,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,Start,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,Start,The following statement contains a magic number: Range(5760' 10' 100)
Magic Number,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,Start,The following statement contains a magic number: Range(5760' 10' 100)
Magic Number,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,Start,The following statement contains a magic number: Range(5760' 10' 100)
Magic Number,MissionPlanner.Utilities,StreamCombiner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\StreamCombiner.cs,mainloop,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,CurrentState,The following statement contains a magic number: rateattitudebackup = 4;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,CurrentState,The following statement contains a magic number: ratepositionbackup = 2;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,CurrentState,The following statement contains a magic number: ratestatusbackup = 2;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,CurrentState,The following statement contains a magic number: ratesensorsbackup = 2;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,CurrentState,The following statement contains a magic number: ratercbackup = 2;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,ResetInternals,The following statement contains a magic number: _mode = 99999;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: (DateTime.Now - MAV.lastvalidpacket).TotalSeconds > 10
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: linkqualitygcs = 100;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: linkqualitygcs > 100
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: (ch3percent > 12 || _groundspeed > 3.0) && armed
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: (ch3percent > 12 || _groundspeed > 3.0) && armed
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: lastdata = DateTime.Now.AddSeconds(30);
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: !(lastdata.AddSeconds(8) > DateTime.Now) && mavinterface.BaseStream != null &&                          mavinterface.BaseStream.IsOpen
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,UpdateCurrentSettings,The following statement contains a magic number: DateTime.Now > lastupdate.AddMilliseconds(50) || updatenow
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The following statement contains a magic number: var Kw = 0.010;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The following statement contains a magic number: var wind_dir = Math.Atan2(We_fgo' Wn_fgo) * (180 / Math.PI);
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The following statement contains a magic number: var wind_vel = Math.Sqrt(Math.Pow(We_fgo' 2) + Math.Pow(Wn_fgo' 2));
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The following statement contains a magic number: var wind_vel = Math.Sqrt(Math.Pow(We_fgo' 2) + Math.Pow(Wn_fgo' 2));
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The following statement contains a magic number: wind_dir = (wind_dir + 360) % 360;
Magic Number,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,dowindcalc,The following statement contains a magic number: wind_dir = (wind_dir + 360) % 360;
Magic Number,MissionPlanner,Mavlink_Sensors,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,ConvertValuetoBitmaskOffset,The following statement contains a magic number: a < sizeof(int) * 8
Magic Number,MissionPlanner,Mavlink_Sensors,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,ToString,The following statement contains a magic number: return Convert.ToString(Value' 2);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: BaseStream.ReadBufferSize = 16*1024;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: BaseStream.ReadBufferSize = 16*1024;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: var countDown = new Timer {Interval = 1000' AutoReset = false};
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: buffer.Length == 0 && BaseStream is SerialPort && start.AddSeconds(20) < DateTime.Now
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: var mostseenlist = hbhistory.GroupBy(s => MAVList.GetID(s.sysid' s.compid))                              .OrderByDescending(s => s.Count()).Where(s => s.Count() >= 2);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: seentimes >= 2 && msg.compid == 1 || seentimes >= 4
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: seentimes >= 2 && msg.compid == 1 || seentimes >= 4
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: Array.Resize(ref temp' 50);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,OpenBg,The following statement contains a magic number: frmProgressReporter.UpdateProgressAndStatus(100' Strings.Done);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,device_op,The following statement contains a magic number: var sub = SubscribeToPacketType(MAVLINK_MSG_ID.DEVICE_OP_READ_REPLY' (m) =>              {                  var mtype = (MAVLINK_MSG_ID)m.msgid;                  if (mtype == MAVLINK_MSG_ID.DEVICE_OP_READ_REPLY)                  {                      var msg = (mavlink_device_op_read_reply_t)m.data;                      if (msg.result != 0)                          log.InfoFormat(name + " Operation {0} failed: {1}"' msg.request_id' msg.result);                      else                          log.InfoFormat(name + " Operation {0} OK: {1} bytes"' msg.request_id' msg.count);                      for (var i = 0; i < msg.count; i++)                      {                          var reg = i + msg.regstart;                          log.InfoFormat("{0'2:X}:{1'2:X} "' reg' msg.data[i]);                          if ((i + 1) % 16 == 0)                              Console.WriteLine();                          if (msg.count % 16 != 0)                              Console.WriteLine();                      }                        buffer = msg.data.Take(msg.count).ToArray();                      responce = true;                  }                  return true;              });
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,device_op,The following statement contains a magic number: var sub = SubscribeToPacketType(MAVLINK_MSG_ID.DEVICE_OP_READ_REPLY' (m) =>              {                  var mtype = (MAVLINK_MSG_ID)m.msgid;                  if (mtype == MAVLINK_MSG_ID.DEVICE_OP_READ_REPLY)                  {                      var msg = (mavlink_device_op_read_reply_t)m.data;                      if (msg.result != 0)                          log.InfoFormat(name + " Operation {0} failed: {1}"' msg.request_id' msg.result);                      else                          log.InfoFormat(name + " Operation {0} OK: {1} bytes"' msg.request_id' msg.count);                      for (var i = 0; i < msg.count; i++)                      {                          var reg = i + msg.regstart;                          log.InfoFormat("{0'2:X}:{1'2:X} "' reg' msg.data[i]);                          if ((i + 1) % 16 == 0)                              Console.WriteLine();                          if (msg.count % 16 != 0)                              Console.WriteLine();                      }                        buffer = msg.data.Take(msg.count).ToArray();                      responce = true;                  }                  return true;              });
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,device_op,The following statement contains a magic number: var write = new mavlink_device_op_write_t()                  {                      target_system = (byte)sysid'                      target_component = (byte)compid'                      request_id = request_id++'                      bustype = (byte)bustype'                      bus = bus'                      busname = name.MakeBytesSize(40)'                      address = address'                      regstart = regstart'                      count = (byte)writebytes.Length'                      data = writebytes.MakeSize(128)                  };
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,device_op,The following statement contains a magic number: var write = new mavlink_device_op_write_t()                  {                      target_system = (byte)sysid'                      target_component = (byte)compid'                      request_id = request_id++'                      bustype = (byte)bustype'                      bus = bus'                      busname = name.MakeBytesSize(40)'                      address = address'                      regstart = regstart'                      count = (byte)writebytes.Length'                      data = writebytes.MakeSize(128)                  };
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHeartBeat,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHeartBeat,The following statement contains a magic number: DateTime.Now > start.AddMilliseconds(2200) || readcount > 200
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHeartBeat,The following statement contains a magic number: DateTime.Now > start.AddMilliseconds(2200) || readcount > 200
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: packet = new byte[data.Length + 6 + 2];
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: packet = new byte[data.Length + 6 + 2];
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: packet[2] = (byte) packetcount;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: packet[3] = gcssysid;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: packet[4] = (byte) MAV_COMPONENT.MAV_COMP_ID_MISSIONPLANNER;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: packet[5] = (byte)messageType;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: i = 6;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: ushort checksum = MavlinkCRC.crc_calculate(packet' packet[1] + 6);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: byte ck_b = (byte) (checksum >> 8);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: !MAVlist[sysid' compid].mavlinkv2 && messageType < 256 && !forcemavlink2
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: byte[] datearray =                                  BitConverter.GetBytes(                                      (UInt64) ((DateTime.UtcNow - new DateTime(1970' 1' 1)).TotalMilliseconds*1000));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,generatePacket,The following statement contains a magic number: byte[] datearray =                                  BitConverter.GetBytes(                                      (UInt64) ((DateTime.UtcNow - new DateTime(1970' 1' 1)).TotalMilliseconds*1000));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setupSigning,The following statement contains a magic number: Array.Resize(ref shauser' 32);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setupSigning,The following statement contains a magic number: sign.initial_timestamp = (UInt64) ((DateTime.UtcNow - new DateTime(2015' 1' 1)).TotalMilliseconds*100);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setupSigning,The following statement contains a magic number: sign.initial_timestamp = (UInt64) ((DateTime.UtcNow - new DateTime(2015' 1' 1)).TotalMilliseconds*100);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The following statement contains a magic number: Array.Resize(ref temp' 16);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The following statement contains a magic number: !(start.AddMilliseconds(700) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setParam,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: log.InfoFormat("Get Param whole list retry {0} got {1} 75%={2} count {3}"' retry'                              indexsreceived.Count' ((param_total / 4) * 3)' param_total);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: log.InfoFormat("Get Param whole list retry {0} got {1} 75%={2} count {3}"' retry'                              indexsreceived.Count' ((param_total / 4) * 3)' param_total);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: retry < 2 && indexsreceived.Count < ((param_total/4) * 3)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: retry < 2 && indexsreceived.Count < ((param_total/4) * 3)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: retry < 2 && indexsreceived.Count < ((param_total/4) * 3)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: Array.Resize(ref req2.param_id' 16);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: queued >= 10
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: lastonebyone.AddMilliseconds(600) < DateTime.Now
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: !(start.AddMilliseconds(4000) > DateTime.Now) && !logreadmode
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: log.Info("Already got " + (par.param_index) + " '" + paramID + "' " + (indexsreceived.Count * 100) / param_total);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: this.frmProgressReporter.UpdateProgressAndStatus(                                      (indexsreceived.Count * 100) / param_total' "Already Got param " + paramID);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: par.param_index != 65535
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: this.frmProgressReporter.UpdateProgressAndStatus((indexsreceived.Count*100)/param_total'Strings.Gotparam + paramID);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getParamList,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The following statement contains a magic number: Array.Resize(ref req.param_id' 16);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The following statement contains a magic number: !(start.AddMilliseconds(700) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetParam,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,stopall,The following statement contains a magic number: req.req_message_rate = 10;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,stopall,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,stopall,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPCurrent,The following statement contains a magic number: int retrys = 5;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPCurrent,The following statement contains a magic number: !(start.AddMilliseconds(2000) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPCurrent,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doReboot,The following statement contains a magic number: param1 = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doARM,The following statement contains a magic number: const float magic_force_arm_value = 2989.0f;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doARM,The following statement contains a magic number: const float magic_force_disarm_value = 21196.0f;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The following statement contains a magic number: int timeout = 2000;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The following statement contains a magic number: DateTime.Now > GUI.AddMilliseconds(100)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,doCommand,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendAck,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendSerialControl,The following statement contains a magic number: ctl.data = new byte[70];
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendSerialControl,The following statement contains a magic number: int packets = (data.Length/70) + 1;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendSerialControl,The following statement contains a magic number: byte n = (byte) Math.Min(70' len);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,SendSerialControl,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following statement contains a magic number: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,hzratecheck,The following statement contains a magic number: pps > hzrate - 1 && pps < hzrate + 0.1
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWPCount,The following statement contains a magic number: int retrys = 6;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWPCount,The following statement contains a magic number: !(start.AddMilliseconds(700) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWPCount,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHomePosition,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHomePosition,The following statement contains a magic number: !(start.AddMilliseconds(700) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHomePosition,The following statement contains a magic number: var loc = new Locationwp().Set(home.latitude / 1.0e7' home.longitude / 1.0e7' home.altitude / 1000.0' (byte)MAV_CMD.WAYPOINT);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHomePosition,The following statement contains a magic number: var loc = new Locationwp().Set(home.latitude / 1.0e7' home.longitude / 1.0e7' home.altitude / 1000.0' (byte)MAV_CMD.WAYPOINT);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHomePosition,The following statement contains a magic number: var loc = new Locationwp().Set(home.latitude / 1.0e7' home.longitude / 1.0e7' home.altitude / 1000.0' (byte)MAV_CMD.WAYPOINT);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getHomePosition,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWP,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWP,The following statement contains a magic number: int retrys = 5;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWP,The following statement contains a magic number: !(start.AddMilliseconds(2500) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getWP,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,DebugPacket,The following statement contains a magic number: datin.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPTotal,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPTotal,The following statement contains a magic number: !(start.AddMilliseconds(700) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWPTotal,The following statement contains a magic number: buffer.Length > 9
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,InjectGpsData,The following statement contains a magic number: var msglen = 180;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,InjectGpsData,The following statement contains a magic number: length > msglen * 4
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,InjectGpsData,The following statement contains a magic number: nopackets = 4;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,InjectGpsData,The following statement contains a magic number: nopackets >= 4
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,InjectGpsData,The following statement contains a magic number: gps.flags += (byte)((inject_seq_no & 0x1f) << 3);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: int retrys = 10;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: !(start.AddMilliseconds(450) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: req.current == 2
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: int retrys = 10;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: !(start.AddMilliseconds(450) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: req.current == 2
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getRequestedWPNo,The following statement contains a magic number: !(start.AddMilliseconds(1500) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getRequestedWPNo,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setNextWPTargetAlt,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setGuidedModeWP,The following statement contains a magic number: MAV_MISSION_RESULT ans = setWP(sysid' compid' gotohere' 0' MAV_FRAME.GLOBAL_RELATIVE_ALT' (byte)2);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setNewWPAlt,The following statement contains a magic number: MAV_MISSION_RESULT ans = setWP(gotohere' 0' MAV_FRAME.GLOBAL_RELATIVE_ALT' (byte)3);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_POS_IGNORE = ((1 << 0) | (1 << 1) | (1 << 2));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_ALT_IGNORE = ((0 << 0) | (0 << 1) | (1 << 2));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_VEL_IGNORE = ((1 << 3) | (1 << 4) | (1 << 5));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_VEL_IGNORE = ((1 << 3) | (1 << 4) | (1 << 5));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_VEL_IGNORE = ((1 << 3) | (1 << 4) | (1 << 5));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_ACC_IGNORE = ((1 << 6) | (1 << 7) | (1 << 8));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_ACC_IGNORE = ((1 << 6) | (1 << 7) | (1 << 8));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_ACC_IGNORE = ((1 << 6) | (1 << 7) | (1 << 8));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_FORCE = ((1 << 9));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_YAW_IGNORE = ((1 << 10) | (1 << 11));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: const ushort MAVLINK_SET_POS_TYPE_MASK_YAW_IGNORE = ((1 << 10) | (1 << 11));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: mavlink_set_position_target_global_int_t target = new mavlink_set_position_target_global_int_t()              {                  target_system = sysid'                  target_component = compid'                  alt = (float)alt'                  lat_int = (int)(lat * 1e7)'                  lon_int = (int)(lng * 1e7)'                  coordinate_frame = (byte)frame'                  vx = (float)vx'                  vy = (float)vy'                  vz = (float)vz'                  yaw = (float)yawangle'                  yaw_rate = (float)yawrate              };
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: mavlink_set_position_target_global_int_t target = new mavlink_set_position_target_global_int_t()              {                  target_system = sysid'                  target_component = compid'                  alt = (float)alt'                  lat_int = (int)(lat * 1e7)'                  lon_int = (int)(lng * 1e7)'                  coordinate_frame = (byte)frame'                  vx = (float)vx'                  vy = (float)vy'                  vz = (float)vz'                  yaw = (float)yawangle'                  yaw_rate = (float)yawrate              };
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: MAVlist[sysid' compid].GuidedMode.x = (int)(lat*1e7);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setPositionTargetGlobalInt,The following statement contains a magic number: MAVlist[sysid' compid].GuidedMode.y = (int)(lng * 1e7);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setMountConfigure,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setMountControl,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setMode,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: byte[] buffer = new byte[MAVLINK_MAX_PACKET_LEN + 25];
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: readcount > 300
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: buildplaintxtline.Length > 3
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: buffer[0] >= 0x20 && buffer[0] <= 127 || buffer[0] == '\n' || buffer[0] == '\r'
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: (buffer[2] & MAVLINK_IFLAG_SIGNED) > 0
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: count == 299
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: Console.Write(                      "bps {0} loss {1} left {2} mem {3} mav2 {4} sign {5} mav1 {6} mav2 {7} signed {8}      \n"' _bps1'                      MAV.synclost' btr'                      GC.GetTotalMemory(false) / 1024 / 1024.0' MAV.mavlinkv2' MAV.signing' _mavlink1count'                      _mavlink2count' _mavlink2signed);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: Console.Write(                      "bps {0} loss {1} left {2} mem {3} mav2 {4} sign {5} mav1 {6} mav2 {7} signed {8}      \n"' _bps1'                      MAV.synclost' btr'                      GC.GetTotalMemory(false) / 1024 / 1024.0' MAV.mavlinkv2' MAV.signing' _mavlink1count'                      _mavlink2count' _mavlink2signed);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: buffer.Length > 5 && msginfo.name != null
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: (message.crc16 >> 8) != (crc >> 8) ||                  (message.crc16 & 0xff) != (crc & 0xff)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: (message.crc16 >> 8) != (crc >> 8) ||                  (message.crc16 & 0xff) != (crc & 0xff)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: signit.TransformFinalBlock(message.buffer' 0' message.Length - MAVLINK_SIGNATURE_BLOCK_LEN + 7);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: Array.Resize(ref ctx' 6);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: ctx[i] != message.sig[7 + i]
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: buffer.Length >= 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: buffer.Length >= 5 && (sysid == gcssysid || sysid == 253) && logreadmode
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: buffer.Length >= 5 && (sysid == gcssysid || sysid == 253) && logreadmode
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: MAVlist[sysid' compid].packetslost = (MAVlist[sysid' compid].packetslost * 0.8f);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: MAVlist[sysid' compid].packetsnotlost = (MAVlist[sysid' compid].packetsnotlost * 0.8f);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: !logreadmode && MAVlist[sysid' compid].packetlosttimer.AddSeconds(5) < DateTime.Now
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: MAVlist[sysid' compid].packetspersecond[msgid] = (((1000 /                                                                          ((DateTime.Now -                                                                            MAVlist[sysid' compid]                                                                                .packetspersecondbuild[msgid])                                                                              .TotalMilliseconds) +                                                                          MAVlist[sysid' compid].packetspersecond[                                                                              msgid]) / 2));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: MAVlist[sysid' compid].packetspersecond[msgid] = (((1000 /                                                                          ((DateTime.Now -                                                                            MAVlist[sysid' compid]                                                                                .packetspersecondbuild[msgid])                                                                              .TotalMilliseconds) +                                                                          MAVlist[sysid' compid].packetspersecond[                                                                              msgid]) / 2));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: (msgid == (byte) MAVLINK_MSG_ID.RADIO_STATUS || msgid == (byte) MAVLINK_MSG_ID.RADIO)                              && (message.compid == 68) &&                              (message.sysid == 63)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: (msgid == (byte) MAVLINK_MSG_ID.RADIO_STATUS || msgid == (byte) MAVLINK_MSG_ID.RADIO)                              && (message.compid == 68) &&                              (message.sysid == 63)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: (msgid == (byte) MAVLINK_MSG_ID.RADIO_STATUS || msgid == (byte) MAVLINK_MSG_ID.RADIO)                              && (message.compid == 68) && (message.sysid != 63)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: (msgid == (byte) MAVLINK_MSG_ID.RADIO_STATUS || msgid == (byte) MAVLINK_MSG_ID.RADIO)                              && (message.compid == 68) && (message.sysid != 63)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: UpdateADSBPlanePosition(this' new adsb.PointLatLngAltHdg(adsb.lat / 1e7' adsb.lon / 1e7'                                          adsb.altitude / 1000.0' adsb.heading * 0.01f' adsb.hor_velocity * 0.01f' id'                                          DateTime.Now)                                      {CallSign = ASCIIEncoding.ASCII.GetString(adsb.callsign)' Raw = adsb}                                  );
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: UpdateADSBPlanePosition(this' new adsb.PointLatLngAltHdg(adsb.lat / 1e7' adsb.lon / 1e7'                                          adsb.altitude / 1000.0' adsb.heading * 0.01f' adsb.hor_velocity * 0.01f' id'                                          DateTime.Now)                                      {CallSign = ASCIIEncoding.ASCII.GetString(adsb.callsign)' Raw = adsb}                                  );
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: UpdateADSBPlanePosition(this' new adsb.PointLatLngAltHdg(adsb.lat / 1e7' adsb.lon / 1e7'                                          adsb.altitude / 1000.0' adsb.heading * 0.01f' adsb.hor_velocity * 0.01f' id'                                          DateTime.Now)                                      {CallSign = ASCIIEncoding.ASCII.GetString(adsb.callsign)' Raw = adsb}                                  );
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: UpdateADSBPlanePosition(this' new adsb.PointLatLngAltHdg(adsb.lat / 1e7' adsb.lon / 1e7'                                          adsb.altitude / 1000.0' adsb.heading * 0.01f' adsb.hor_velocity * 0.01f' id'                                          DateTime.Now)                                      {CallSign = ASCIIEncoding.ASCII.GetString(adsb.callsign)' Raw = adsb}                                  );
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: UpdateADSBPlanePosition(this' new adsb.PointLatLngAltHdg(adsb.lat / 1e7' adsb.lon / 1e7'                                          adsb.altitude / 1000.0' adsb.heading * 0.01f' adsb.hor_velocity * 0.01f' id'                                          DateTime.Now)                                      {CallSign = ASCIIEncoding.ASCII.GetString(adsb.callsign)' Raw = adsb}                                  );
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: MAVlist[sysid' compid].cs.version.Major > 0 || MAVlist[sysid' compid].cs.version.Minor >= 4
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: lastparamset != DateTime.MinValue && lastparamset.AddSeconds(10) < DateTime.Now
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: byte[] datearray =                                      BitConverter.GetBytes(                                          (UInt64) ((DateTime.UtcNow - new DateTime(1970' 1' 1)).TotalMilliseconds *                                                    1000));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: byte[] datearray =                                      BitConverter.GetBytes(                                          (UInt64) ((DateTime.UtcNow - new DateTime(1970' 1' 1)).TotalMilliseconds *                                                    1000));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readPacket,The following statement contains a magic number: byte[] buf = new byte[1024];
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getVersion,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getVersion,The following statement contains a magic number: !(start.AddMilliseconds(500) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getVersion,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getFencePoint,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getFencePoint,The following statement contains a magic number: !(start.AddMilliseconds(700) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getFencePoint,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: !(start.AddMilliseconds(3000) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: set[(data.ofs/90).ToString()] = 1;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: data.count < 90 || data.count == 0
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: log.Info("count total " + ((totallength)/90 + 1));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: totallength == ms.Length && set.Count >= ((totallength) / 90 + 1)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: uint bytereq = 90;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: bytereq += 90;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: req.ofs = (uint) (a*90);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: log.Info("req missing " + req.ofs + " bytes " + req.count + " got " + set.Count + "/" +                                       ((totallength)/90 + 1));
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: a < ((totallength)/90 + 1)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: !(start.AddMilliseconds(500) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: set[(data.ofs/90).ToString()] = 1;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: set.ContainsKey(((data.ofs/90) + 1).ToString())
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: data.count < 90 || data.count == 0
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLogEntry,The following statement contains a magic number: int retrys = 4;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLogEntry,The following statement contains a magic number: !(start.AddMilliseconds(5000) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLogEntry,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getRallyPoint,The following statement contains a magic number: int retrys = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getRallyPoint,The following statement contains a magic number: !(start.AddMilliseconds(700) > DateTime.Now)
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,getRallyPoint,The following statement contains a magic number: buffer.Length > 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setFencePoint,The following statement contains a magic number: int retry = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setFencePoint,The following statement contains a magic number: newfp.GetDistance(plla) < 5
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setRallyPoint,The following statement contains a magic number: int retry = 3;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: byte[] datearray = new byte[8];
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: DateTime date1 = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: logplaybackfile.BaseStream.Seek(-8' SeekOrigin.Current);
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: datearray[7] == 254 || datearray[7] == 253
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: datearray[7] == 254 || datearray[7] == 253
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: datearray[7] == 254 || datearray[7] == 253
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: datearray[7] == 254 || datearray[7] == 253
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: int length = 5;
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: switch (a)                  {                      case 0:                          byte0 = tempb;                          if (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX)                          {                              log.DebugFormat("logread - lost sync byte {0} pos {1}"' byte0'                                  logplaybackfile.BaseStream.Position);                              // seek to next valid                              do                              {                                  byte0 = logplaybackfile.ReadByte();                              }                              while (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX);                              a = 1;                              continue;                          }                          break;                      case 1:                          byte1 = tempb;                          // handle length                          {                              int headerlength = byte0 == MAVLINK_STX ? 9 : 5;                              int headerlengthstx = headerlength + 1;                                length = byte1 + headerlengthstx + 2; // header + 2 checksum                          }                          break;                      case 2:                          byte2 = tempb;                          // handle signing and mavlink2                          if (byte0 == MAVLINK_STX)                          {                              if ((byte2 & MAVLINK_IFLAG_SIGNED) > 0)                                  length += MAVLINK_SIGNATURE_BLOCK_LEN;                          }                          // handle rest                          {                              temp = new byte[length];                              temp[0] = byte0;                              temp[1] = byte1;                              temp[2] = byte2;                                var readto = a + 1;                              var readlength = length - (a + 1);                              logplaybackfile.Read(temp' readto' readlength);                              a = length;                          }                          break;                  }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: switch (a)                  {                      case 0:                          byte0 = tempb;                          if (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX)                          {                              log.DebugFormat("logread - lost sync byte {0} pos {1}"' byte0'                                  logplaybackfile.BaseStream.Position);                              // seek to next valid                              do                              {                                  byte0 = logplaybackfile.ReadByte();                              }                              while (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX);                              a = 1;                              continue;                          }                          break;                      case 1:                          byte1 = tempb;                          // handle length                          {                              int headerlength = byte0 == MAVLINK_STX ? 9 : 5;                              int headerlengthstx = headerlength + 1;                                length = byte1 + headerlengthstx + 2; // header + 2 checksum                          }                          break;                      case 2:                          byte2 = tempb;                          // handle signing and mavlink2                          if (byte0 == MAVLINK_STX)                          {                              if ((byte2 & MAVLINK_IFLAG_SIGNED) > 0)                                  length += MAVLINK_SIGNATURE_BLOCK_LEN;                          }                          // handle rest                          {                              temp = new byte[length];                              temp[0] = byte0;                              temp[1] = byte1;                              temp[2] = byte2;                                var readto = a + 1;                              var readlength = length - (a + 1);                              logplaybackfile.Read(temp' readto' readlength);                              a = length;                          }                          break;                  }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: switch (a)                  {                      case 0:                          byte0 = tempb;                          if (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX)                          {                              log.DebugFormat("logread - lost sync byte {0} pos {1}"' byte0'                                  logplaybackfile.BaseStream.Position);                              // seek to next valid                              do                              {                                  byte0 = logplaybackfile.ReadByte();                              }                              while (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX);                              a = 1;                              continue;                          }                          break;                      case 1:                          byte1 = tempb;                          // handle length                          {                              int headerlength = byte0 == MAVLINK_STX ? 9 : 5;                              int headerlengthstx = headerlength + 1;                                length = byte1 + headerlengthstx + 2; // header + 2 checksum                          }                          break;                      case 2:                          byte2 = tempb;                          // handle signing and mavlink2                          if (byte0 == MAVLINK_STX)                          {                              if ((byte2 & MAVLINK_IFLAG_SIGNED) > 0)                                  length += MAVLINK_SIGNATURE_BLOCK_LEN;                          }                          // handle rest                          {                              temp = new byte[length];                              temp[0] = byte0;                              temp[1] = byte1;                              temp[2] = byte2;                                var readto = a + 1;                              var readlength = length - (a + 1);                              logplaybackfile.Read(temp' readto' readlength);                              a = length;                          }                          break;                  }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: switch (a)                  {                      case 0:                          byte0 = tempb;                          if (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX)                          {                              log.DebugFormat("logread - lost sync byte {0} pos {1}"' byte0'                                  logplaybackfile.BaseStream.Position);                              // seek to next valid                              do                              {                                  byte0 = logplaybackfile.ReadByte();                              }                              while (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX);                              a = 1;                              continue;                          }                          break;                      case 1:                          byte1 = tempb;                          // handle length                          {                              int headerlength = byte0 == MAVLINK_STX ? 9 : 5;                              int headerlengthstx = headerlength + 1;                                length = byte1 + headerlengthstx + 2; // header + 2 checksum                          }                          break;                      case 2:                          byte2 = tempb;                          // handle signing and mavlink2                          if (byte0 == MAVLINK_STX)                          {                              if ((byte2 & MAVLINK_IFLAG_SIGNED) > 0)                                  length += MAVLINK_SIGNATURE_BLOCK_LEN;                          }                          // handle rest                          {                              temp = new byte[length];                              temp[0] = byte0;                              temp[1] = byte1;                              temp[2] = byte2;                                var readto = a + 1;                              var readlength = length - (a + 1);                              logplaybackfile.Read(temp' readto' readlength);                              a = length;                          }                          break;                  }
Magic Number,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following statement contains a magic number: switch (a)                  {                      case 0:                          byte0 = tempb;                          if (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX)                          {                              log.DebugFormat("logread - lost sync byte {0} pos {1}"' byte0'                                  logplaybackfile.BaseStream.Position);                              // seek to next valid                              do                              {                                  byte0 = logplaybackfile.ReadByte();                              }                              while (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX);                              a = 1;                              continue;                          }                          break;                      case 1:                          byte1 = tempb;                          // handle length                          {                              int headerlength = byte0 == MAVLINK_STX ? 9 : 5;                              int headerlengthstx = headerlength + 1;                                length = byte1 + headerlengthstx + 2; // header + 2 checksum                          }                          break;                      case 2:                          byte2 = tempb;                          // handle signing and mavlink2                          if (byte0 == MAVLINK_STX)                          {                              if ((byte2 & MAVLINK_IFLAG_SIGNED) > 0)                                  length += MAVLINK_SIGNATURE_BLOCK_LEN;                          }                          // handle rest                          {                              temp = new byte[length];                              temp[0] = byte0;                              temp[1] = byte1;                              temp[2] = byte2;                                var readto = a + 1;                              var readlength = length - (a + 1);                              logplaybackfile.Read(temp' readto' readlength);                              a = length;                          }                          break;                  }
Magic Number,MissionPlanner,MAVState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVState.cs,MAVState,The following statement contains a magic number: sendlinkid = (byte)(new Random().Next(256));
Magic Number,MissionPlanner,MAVState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVState.cs,MAVState,The following statement contains a magic number: sysid != 255 && !(compid == 0 && sysid == 0)
Magic Number,MissionPlanner,MAVState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVState.cs,addPacket,The following statement contains a magic number: packets[msg.msgid].Count > 5
Magic Number,MissionPlanner,PacketInspector<T>,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\PacketInspector.cs,SeenRate,The following statement contains a magic number: var start = end.AddSeconds(-3);
Magic Number,MissionPlanner,PacketInspector<T>,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\PacketInspector.cs,SeenBps,The following statement contains a magic number: var start = end.AddSeconds(-3);
Magic Number,MissionPlanner,PacketInspector<T>,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\PacketInspector.cs,GetID,The following statement contains a magic number: return sysid * 256u + compid;
Magic Number,MissionPlanner,PacketInspector<T>,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\PacketInspector.cs,GetFromID,The following statement contains a magic number: return ((byte)(id >> 8)' (byte)(id & 0xff));
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,loadconfig,The following statement contains a magic number: Array.Resize(ref JoyChannels' 20);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,getMovingAxis,The following statement contains a magic number: System.Threading.Thread.Sleep(300);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,getMovingAxis,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,getMovingAxis,The following statement contains a magic number: start.AddSeconds(10) > DateTime.Now
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,getPressedButton,The following statement contains a magic number: System.Threading.Thread.Sleep(500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,getPressedButton,The following statement contains a magic number: start.AddSeconds(10) > DateTime.Now
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: int angle = pov/100;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: hat1 += 500;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: angle > 270 || angle < 90
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: angle > 270 || angle < 90
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: hat1 -= 500;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: angle > 90 && angle < 270
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: angle > 90 && angle < 270
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: hat2 += 500;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: angle > 0 && angle < 180
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: hat2 -= 500;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: angle > 180 && angle < 360
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: angle > 180 && angle < 360
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: short pitch = pickchannel(2' JoyChannels[2].axis' false' JoyChannels[2].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: short pitch = pickchannel(2' JoyChannels[2].axis' false' JoyChannels[2].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: short pitch = pickchannel(2' JoyChannels[2].axis' false' JoyChannels[2].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech1 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[1].reverse)*((int) (pitch - 1500) - (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech1 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[1].reverse)*((int) (pitch - 1500) - (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech1 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[1].reverse)*((int) (pitch - 1500) - (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech1 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[1].reverse)*((int) (pitch - 1500) - (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech2 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[2].reverse)*((int) (pitch - 1500) + (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech2 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[2].reverse)*((int) (pitch - 1500) + (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech2 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[2].reverse)*((int) (pitch - 1500) + (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech2 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[2].reverse)*((int) (pitch - 1500) + (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech2 =                                  (short)                                      (BOOL_TO_SIGN(JoyChannels[2].reverse)*((int) (pitch - 1500) + (int) (roll - 1500))/2 +                                       1500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(2) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech3 = pickchannel(3' JoyChannels[3].axis' JoyChannels[3].reverse'                              JoyChannels[3].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech3 = pickchannel(3' JoyChannels[3].axis' JoyChannels[3].reverse'                              JoyChannels[3].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech3 = pickchannel(3' JoyChannels[3].axis' JoyChannels[3].reverse'                              JoyChannels[3].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech3 = pickchannel(3' JoyChannels[3].axis' JoyChannels[3].reverse'                              JoyChannels[3].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(3) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech4 = pickchannel(4' JoyChannels[4].axis' JoyChannels[4].reverse'                              JoyChannels[4].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech4 = pickchannel(4' JoyChannels[4].axis' JoyChannels[4].reverse'                              JoyChannels[4].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech4 = pickchannel(4' JoyChannels[4].axis' JoyChannels[4].reverse'                              JoyChannels[4].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech4 = pickchannel(4' JoyChannels[4].axis' JoyChannels[4].reverse'                              JoyChannels[4].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(4) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech5 = pickchannel(5' JoyChannels[5].axis' JoyChannels[5].reverse'                              JoyChannels[5].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech5 = pickchannel(5' JoyChannels[5].axis' JoyChannels[5].reverse'                              JoyChannels[5].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech5 = pickchannel(5' JoyChannels[5].axis' JoyChannels[5].reverse'                              JoyChannels[5].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech5 = pickchannel(5' JoyChannels[5].axis' JoyChannels[5].reverse'                              JoyChannels[5].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(5) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech6 = pickchannel(6' JoyChannels[6].axis' JoyChannels[6].reverse'                              JoyChannels[6].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech6 = pickchannel(6' JoyChannels[6].axis' JoyChannels[6].reverse'                              JoyChannels[6].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech6 = pickchannel(6' JoyChannels[6].axis' JoyChannels[6].reverse'                              JoyChannels[6].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech6 = pickchannel(6' JoyChannels[6].axis' JoyChannels[6].reverse'                              JoyChannels[6].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(6) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech7 = pickchannel(7' JoyChannels[7].axis' JoyChannels[7].reverse'                              JoyChannels[7].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech7 = pickchannel(7' JoyChannels[7].axis' JoyChannels[7].reverse'                              JoyChannels[7].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech7 = pickchannel(7' JoyChannels[7].axis' JoyChannels[7].reverse'                              JoyChannels[7].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech7 = pickchannel(7' JoyChannels[7].axis' JoyChannels[7].reverse'                              JoyChannels[7].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(7) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech8 = pickchannel(8' JoyChannels[8].axis' JoyChannels[8].reverse'                              JoyChannels[8].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech8 = pickchannel(8' JoyChannels[8].axis' JoyChannels[8].reverse'                              JoyChannels[8].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech8 = pickchannel(8' JoyChannels[8].axis' JoyChannels[8].reverse'                              JoyChannels[8].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech8 = pickchannel(8' JoyChannels[8].axis' JoyChannels[8].reverse'                              JoyChannels[8].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(8) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech9 = pickchannel(9' JoyChannels[9].axis' JoyChannels[9].reverse' JoyChannels[9].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech9 = pickchannel(9' JoyChannels[9].axis' JoyChannels[9].reverse' JoyChannels[9].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech9 = pickchannel(9' JoyChannels[9].axis' JoyChannels[9].reverse' JoyChannels[9].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech9 = pickchannel(9' JoyChannels[9].axis' JoyChannels[9].reverse' JoyChannels[9].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(9) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech10 = pickchannel(10' JoyChannels[10].axis' JoyChannels[10].reverse' JoyChannels[10].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech10 = pickchannel(10' JoyChannels[10].axis' JoyChannels[10].reverse' JoyChannels[10].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech10 = pickchannel(10' JoyChannels[10].axis' JoyChannels[10].reverse' JoyChannels[10].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech10 = pickchannel(10' JoyChannels[10].axis' JoyChannels[10].reverse' JoyChannels[10].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(10) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech11 = pickchannel(11' JoyChannels[11].axis' JoyChannels[11].reverse' JoyChannels[11].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech11 = pickchannel(11' JoyChannels[11].axis' JoyChannels[11].reverse' JoyChannels[11].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech11 = pickchannel(11' JoyChannels[11].axis' JoyChannels[11].reverse' JoyChannels[11].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech11 = pickchannel(11' JoyChannels[11].axis' JoyChannels[11].reverse' JoyChannels[11].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(11) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech12 = pickchannel(12' JoyChannels[12].axis' JoyChannels[12].reverse' JoyChannels[12].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech12 = pickchannel(12' JoyChannels[12].axis' JoyChannels[12].reverse' JoyChannels[12].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech12 = pickchannel(12' JoyChannels[12].axis' JoyChannels[12].reverse' JoyChannels[12].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech12 = pickchannel(12' JoyChannels[12].axis' JoyChannels[12].reverse' JoyChannels[12].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(12) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech13 = pickchannel(13' JoyChannels[13].axis' JoyChannels[13].reverse' JoyChannels[13].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech13 = pickchannel(13' JoyChannels[13].axis' JoyChannels[13].reverse' JoyChannels[13].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech13 = pickchannel(13' JoyChannels[13].axis' JoyChannels[13].reverse' JoyChannels[13].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech13 = pickchannel(13' JoyChannels[13].axis' JoyChannels[13].reverse' JoyChannels[13].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(13) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech14 = pickchannel(14' JoyChannels[14].axis' JoyChannels[14].reverse' JoyChannels[14].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech14 = pickchannel(14' JoyChannels[14].axis' JoyChannels[14].reverse' JoyChannels[14].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech14 = pickchannel(14' JoyChannels[14].axis' JoyChannels[14].reverse' JoyChannels[14].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech14 = pickchannel(14' JoyChannels[14].axis' JoyChannels[14].reverse' JoyChannels[14].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(14) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech15 = pickchannel(15' JoyChannels[15].axis' JoyChannels[15].reverse' JoyChannels[15].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech15 = pickchannel(15' JoyChannels[15].axis' JoyChannels[15].reverse' JoyChannels[15].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech15 = pickchannel(15' JoyChannels[15].axis' JoyChannels[15].reverse' JoyChannels[15].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech15 = pickchannel(15' JoyChannels[15].axis' JoyChannels[15].reverse' JoyChannels[15].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(15) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech16 = pickchannel(16' JoyChannels[16].axis' JoyChannels[16].reverse' JoyChannels[16].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech16 = pickchannel(16' JoyChannels[16].axis' JoyChannels[16].reverse' JoyChannels[16].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech16 = pickchannel(16' JoyChannels[16].axis' JoyChannels[16].reverse' JoyChannels[16].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech16 = pickchannel(16' JoyChannels[16].axis' JoyChannels[16].reverse' JoyChannels[16].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(16) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech17 = pickchannel(17' JoyChannels[17].axis' JoyChannels[17].reverse' JoyChannels[17].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech17 = pickchannel(17' JoyChannels[17].axis' JoyChannels[17].reverse' JoyChannels[17].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech17 = pickchannel(17' JoyChannels[17].axis' JoyChannels[17].reverse' JoyChannels[17].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech17 = pickchannel(17' JoyChannels[17].axis' JoyChannels[17].reverse' JoyChannels[17].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(17) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech18 = pickchannel(18' JoyChannels[18].axis' JoyChannels[18].reverse' JoyChannels[18].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech18 = pickchannel(18' JoyChannels[18].axis' JoyChannels[18].reverse' JoyChannels[18].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech18 = pickchannel(18' JoyChannels[18].axis' JoyChannels[18].reverse' JoyChannels[18].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: Interface.MAV.cs.rcoverridech18 = pickchannel(18' JoyChannels[18].axis' JoyChannels[18].reverse' JoyChannels[18].expo);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,mainloop,The following statement contains a magic number: getJoystickAxis(18) != Joystick.joystickaxis.None
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,clearRCOverride,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,clearRCOverride,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,clearRCOverride,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,clearRCOverride,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,clearRCOverride,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,ProcessButtonEvent,The following statement contains a magic number: switch (but.function)                  {                      case buttonfunction.ChangeMode:                          string mode = but.mode;                          if (mode != null)                          {                              _context.Send(delegate                              {                                  try                                  {                                      Interface.setMode(mode);                                  }                                  catch                                  {                                      CustomMessageBox.Show("Failed to change Modes");                                  }                              }' null);                          }                          break;                      case buttonfunction.Mount_Mode:                          _context.Send( delegate                          {                              try                              {                                  Interface.setParam("MNT_MODE"' but.p1);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to change mount mode");                              }                          }' null);                            break;                        case buttonfunction.Arm:                          _context.Send( delegate                          {                              try                              {                                  Interface.doARM(true);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Arm");                              }                          }' null);                          break;                      case buttonfunction.TakeOff:                          _context.Send( delegate                          {                              try                              {                                  Interface.setMode("Guided");                                  if (Interface.MAV.cs.firmware == Firmwares.ArduCopter2)                                  {                                      Interface.doCommand(MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 2);                                  }                                  else                                  {                                      Interface.doCommand(MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 20);                                  }                              }                              catch                              {                                  CustomMessageBox.Show("Failed to takeoff");                              }                          }' null);                          break;                      case buttonfunction.Disarm:                          _context.Send( delegate                          {                              try                              {                                  Interface.doARM(false);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Disarm");                              }                          }' null);                          break;                      case buttonfunction.Do_Set_Relay:                          _context.Send( delegate                          {                              try                              {                                  int number = (int) but.p1;                                  int state = buttondown == true ? 1 : 0;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_RELAY' number' state' 0' 0' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_SET_RELAY");                              }                          }' null);                          break;                      case buttonfunction.Digicam_Control:                          Interface.setDigicamControl(true);                          break;                      case buttonfunction.Do_Repeat_Relay:                          _context.Send( delegate                          {                              try                              {                                  int relaynumber = (int) but.p1;                                  int repeat = (int) but.p2;                                  int time = (int) but.p3;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_REPEAT_RELAY' relaynumber' repeat' time' 0'                                      0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_REPEAT_RELAY");                              }                          }' null);                          break;                      case buttonfunction.Do_Set_Servo:                          _context.Send( delegate                          {                              try                              {                                  int channel = (int) but.p1;                                  int pwm = (int) but.p2;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_SERVO' channel' pwm' 0' 0' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_SET_SERVO");                              }                          }' null);                          break;                      case buttonfunction.Do_Repeat_Servo:                          _context.Send( delegate                          {                              try                              {                                  int channelno = (int) but.p1;                                  int pwmvalue = (int) but.p2;                                  int repeattime = (int) but.p3;                                  int delay_ms = (int) but.p4;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_REPEAT_SERVO' channelno' pwmvalue'                                      repeattime' delay_ms' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_REPEAT_SERVO");                              }                          }' null);                          break;                      case buttonfunction.Toggle_Pan_Stab:                          _context.Send( delegate                          {                              try                              {                                  float current = (float) Interface.MAV.param["MNT_STAB_PAN"];                                  float newvalue = (current > 0) ? 0 : 1;                                  Interface.setParam("MNT_STAB_PAN"' newvalue);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Toggle_Pan_Stab");                              }                          }' null);                          break;                      case buttonfunction.Gimbal_pnt_track:                          _context.Send( delegate                          {                              try                              {                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_ROI' 0' 0' 0' 0'                                      Interface.MAV.cs.gimballat' Interface.MAV.cs.gimballng'                                      (float) Interface.MAV.cs.GimbalPoint.Alt);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Gimbal_pnt_track");                              }                          }' null);                          break;                      case buttonfunction.Mount_Control_0:                          _context.Send( delegate                          {                              try                              {                                  Interface.setMountControl(0' 0' 0' false);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Mount_Control_0");                              }                          }' null);                          break;                      case buttonfunction.Button_axis0:                          _context.Send( delegate                          {                              try                              {                                  int pwmmin = (int) but.p1;                                  int pwmmax = (int) but.p2;                                    if (buttondown)                                      custom0 = pwmmax;                                  else                                      custom0 = pwmmin;                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Button_axis0");                              }                          }' null);                          break;                      case buttonfunction.Button_axis1:                          _context.Send( delegate                          {                              try                              {                                  int pwmmin = (int) but.p1;                                  int pwmmax = (int) but.p2;                                    if (buttondown)                                      custom1 = pwmmax;                                  else                                      custom1 = pwmmin;                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Button_axis1");                              }                          }' null);                          break;                  }
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,ProcessButtonEvent,The following statement contains a magic number: switch (but.function)                  {                      case buttonfunction.ChangeMode:                          string mode = but.mode;                          if (mode != null)                          {                              _context.Send(delegate                              {                                  try                                  {                                      Interface.setMode(mode);                                  }                                  catch                                  {                                      CustomMessageBox.Show("Failed to change Modes");                                  }                              }' null);                          }                          break;                      case buttonfunction.Mount_Mode:                          _context.Send( delegate                          {                              try                              {                                  Interface.setParam("MNT_MODE"' but.p1);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to change mount mode");                              }                          }' null);                            break;                        case buttonfunction.Arm:                          _context.Send( delegate                          {                              try                              {                                  Interface.doARM(true);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Arm");                              }                          }' null);                          break;                      case buttonfunction.TakeOff:                          _context.Send( delegate                          {                              try                              {                                  Interface.setMode("Guided");                                  if (Interface.MAV.cs.firmware == Firmwares.ArduCopter2)                                  {                                      Interface.doCommand(MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 2);                                  }                                  else                                  {                                      Interface.doCommand(MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 20);                                  }                              }                              catch                              {                                  CustomMessageBox.Show("Failed to takeoff");                              }                          }' null);                          break;                      case buttonfunction.Disarm:                          _context.Send( delegate                          {                              try                              {                                  Interface.doARM(false);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Disarm");                              }                          }' null);                          break;                      case buttonfunction.Do_Set_Relay:                          _context.Send( delegate                          {                              try                              {                                  int number = (int) but.p1;                                  int state = buttondown == true ? 1 : 0;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_RELAY' number' state' 0' 0' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_SET_RELAY");                              }                          }' null);                          break;                      case buttonfunction.Digicam_Control:                          Interface.setDigicamControl(true);                          break;                      case buttonfunction.Do_Repeat_Relay:                          _context.Send( delegate                          {                              try                              {                                  int relaynumber = (int) but.p1;                                  int repeat = (int) but.p2;                                  int time = (int) but.p3;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_REPEAT_RELAY' relaynumber' repeat' time' 0'                                      0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_REPEAT_RELAY");                              }                          }' null);                          break;                      case buttonfunction.Do_Set_Servo:                          _context.Send( delegate                          {                              try                              {                                  int channel = (int) but.p1;                                  int pwm = (int) but.p2;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_SERVO' channel' pwm' 0' 0' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_SET_SERVO");                              }                          }' null);                          break;                      case buttonfunction.Do_Repeat_Servo:                          _context.Send( delegate                          {                              try                              {                                  int channelno = (int) but.p1;                                  int pwmvalue = (int) but.p2;                                  int repeattime = (int) but.p3;                                  int delay_ms = (int) but.p4;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_REPEAT_SERVO' channelno' pwmvalue'                                      repeattime' delay_ms' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_REPEAT_SERVO");                              }                          }' null);                          break;                      case buttonfunction.Toggle_Pan_Stab:                          _context.Send( delegate                          {                              try                              {                                  float current = (float) Interface.MAV.param["MNT_STAB_PAN"];                                  float newvalue = (current > 0) ? 0 : 1;                                  Interface.setParam("MNT_STAB_PAN"' newvalue);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Toggle_Pan_Stab");                              }                          }' null);                          break;                      case buttonfunction.Gimbal_pnt_track:                          _context.Send( delegate                          {                              try                              {                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_ROI' 0' 0' 0' 0'                                      Interface.MAV.cs.gimballat' Interface.MAV.cs.gimballng'                                      (float) Interface.MAV.cs.GimbalPoint.Alt);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Gimbal_pnt_track");                              }                          }' null);                          break;                      case buttonfunction.Mount_Control_0:                          _context.Send( delegate                          {                              try                              {                                  Interface.setMountControl(0' 0' 0' false);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Mount_Control_0");                              }                          }' null);                          break;                      case buttonfunction.Button_axis0:                          _context.Send( delegate                          {                              try                              {                                  int pwmmin = (int) but.p1;                                  int pwmmax = (int) but.p2;                                    if (buttondown)                                      custom0 = pwmmax;                                  else                                      custom0 = pwmmin;                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Button_axis0");                              }                          }' null);                          break;                      case buttonfunction.Button_axis1:                          _context.Send( delegate                          {                              try                              {                                  int pwmmin = (int) but.p1;                                  int pwmmax = (int) but.p2;                                    if (buttondown)                                      custom1 = pwmmax;                                  else                                      custom1 = pwmmin;                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Button_axis1");                              }                          }' null);                          break;                  }
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: min = -1000;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: max = 1000;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: trim = (min + max)/2;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: chan == 3
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: switch (axis)              {                  case joystickaxis.None:                      working = ushort.MaxValue/2;                      break;                  case joystickaxis.Pass:                      working = (int) (((float) (trim - min)/range)*ushort.MaxValue);                      break;                  case joystickaxis.ARx:                      working = state.ARx;                      break;                    case joystickaxis.ARy:                      working = state.ARy;                      break;                    case joystickaxis.ARz:                      working = state.ARz;                      break;                    case joystickaxis.AX:                      working = state.AX;                      break;                    case joystickaxis.AY:                      working = state.AY;                      break;                    case joystickaxis.AZ:                      working = state.AZ;                      break;                    case joystickaxis.FRx:                      working = state.FRx;                      break;                    case joystickaxis.FRy:                      working = state.FRy;                      break;                    case joystickaxis.FRz:                      working = state.FRz;                      break;                    case joystickaxis.FX:                      working = state.FX;                      break;                    case joystickaxis.FY:                      working = state.FY;                      break;                    case joystickaxis.FZ:                      working = state.FZ;                      break;                    case joystickaxis.Rx:                      working = state.Rx;                      break;                    case joystickaxis.Ry:                      working = state.Ry;                      break;                    case joystickaxis.Rz:                      working = state.Rz;                      break;                    case joystickaxis.VRx:                      working = state.VRx;                      break;                    case joystickaxis.VRy:                      working = state.VRy;                      break;                    case joystickaxis.VRz:                      working = state.VRz;                      break;                    case joystickaxis.VX:                      working = state.VX;                      break;                    case joystickaxis.VY:                      working = state.VY;                      break;                    case joystickaxis.VZ:                      working = state.VZ;                      break;                    case joystickaxis.X:                      working = state.X;                      break;                    case joystickaxis.Y:                      working = state.Y;                      break;                    case joystickaxis.Z:                      working = state.Z;                      break;                    case joystickaxis.Slider1:                      int[] slider = state.GetSlider();                      working = slider[0];                      break;                    case joystickaxis.Slider2:                      int[] slider1 = state.GetSlider();                      working = slider1[1];                      break;                    case joystickaxis.Hatud1:                      hat1 = (int) Constrain(hat1' 0' 65535);                      working = hat1;                      break;                    case joystickaxis.Hatlr2:                      hat2 = (int) Constrain(hat2' 0' 65535);                      working = hat2;                      break;                    case joystickaxis.Custom1:                      working = (int)(((float)(custom0 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;                    case joystickaxis.Custom2:                      working = (int)(((float)(custom1 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;              }
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: switch (axis)              {                  case joystickaxis.None:                      working = ushort.MaxValue/2;                      break;                  case joystickaxis.Pass:                      working = (int) (((float) (trim - min)/range)*ushort.MaxValue);                      break;                  case joystickaxis.ARx:                      working = state.ARx;                      break;                    case joystickaxis.ARy:                      working = state.ARy;                      break;                    case joystickaxis.ARz:                      working = state.ARz;                      break;                    case joystickaxis.AX:                      working = state.AX;                      break;                    case joystickaxis.AY:                      working = state.AY;                      break;                    case joystickaxis.AZ:                      working = state.AZ;                      break;                    case joystickaxis.FRx:                      working = state.FRx;                      break;                    case joystickaxis.FRy:                      working = state.FRy;                      break;                    case joystickaxis.FRz:                      working = state.FRz;                      break;                    case joystickaxis.FX:                      working = state.FX;                      break;                    case joystickaxis.FY:                      working = state.FY;                      break;                    case joystickaxis.FZ:                      working = state.FZ;                      break;                    case joystickaxis.Rx:                      working = state.Rx;                      break;                    case joystickaxis.Ry:                      working = state.Ry;                      break;                    case joystickaxis.Rz:                      working = state.Rz;                      break;                    case joystickaxis.VRx:                      working = state.VRx;                      break;                    case joystickaxis.VRy:                      working = state.VRy;                      break;                    case joystickaxis.VRz:                      working = state.VRz;                      break;                    case joystickaxis.VX:                      working = state.VX;                      break;                    case joystickaxis.VY:                      working = state.VY;                      break;                    case joystickaxis.VZ:                      working = state.VZ;                      break;                    case joystickaxis.X:                      working = state.X;                      break;                    case joystickaxis.Y:                      working = state.Y;                      break;                    case joystickaxis.Z:                      working = state.Z;                      break;                    case joystickaxis.Slider1:                      int[] slider = state.GetSlider();                      working = slider[0];                      break;                    case joystickaxis.Slider2:                      int[] slider1 = state.GetSlider();                      working = slider1[1];                      break;                    case joystickaxis.Hatud1:                      hat1 = (int) Constrain(hat1' 0' 65535);                      working = hat1;                      break;                    case joystickaxis.Hatlr2:                      hat2 = (int) Constrain(hat2' 0' 65535);                      working = hat2;                      break;                    case joystickaxis.Custom1:                      working = (int)(((float)(custom0 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;                    case joystickaxis.Custom2:                      working = (int)(((float)(custom1 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;              }
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: switch (axis)              {                  case joystickaxis.None:                      working = ushort.MaxValue/2;                      break;                  case joystickaxis.Pass:                      working = (int) (((float) (trim - min)/range)*ushort.MaxValue);                      break;                  case joystickaxis.ARx:                      working = state.ARx;                      break;                    case joystickaxis.ARy:                      working = state.ARy;                      break;                    case joystickaxis.ARz:                      working = state.ARz;                      break;                    case joystickaxis.AX:                      working = state.AX;                      break;                    case joystickaxis.AY:                      working = state.AY;                      break;                    case joystickaxis.AZ:                      working = state.AZ;                      break;                    case joystickaxis.FRx:                      working = state.FRx;                      break;                    case joystickaxis.FRy:                      working = state.FRy;                      break;                    case joystickaxis.FRz:                      working = state.FRz;                      break;                    case joystickaxis.FX:                      working = state.FX;                      break;                    case joystickaxis.FY:                      working = state.FY;                      break;                    case joystickaxis.FZ:                      working = state.FZ;                      break;                    case joystickaxis.Rx:                      working = state.Rx;                      break;                    case joystickaxis.Ry:                      working = state.Ry;                      break;                    case joystickaxis.Rz:                      working = state.Rz;                      break;                    case joystickaxis.VRx:                      working = state.VRx;                      break;                    case joystickaxis.VRy:                      working = state.VRy;                      break;                    case joystickaxis.VRz:                      working = state.VRz;                      break;                    case joystickaxis.VX:                      working = state.VX;                      break;                    case joystickaxis.VY:                      working = state.VY;                      break;                    case joystickaxis.VZ:                      working = state.VZ;                      break;                    case joystickaxis.X:                      working = state.X;                      break;                    case joystickaxis.Y:                      working = state.Y;                      break;                    case joystickaxis.Z:                      working = state.Z;                      break;                    case joystickaxis.Slider1:                      int[] slider = state.GetSlider();                      working = slider[0];                      break;                    case joystickaxis.Slider2:                      int[] slider1 = state.GetSlider();                      working = slider1[1];                      break;                    case joystickaxis.Hatud1:                      hat1 = (int) Constrain(hat1' 0' 65535);                      working = hat1;                      break;                    case joystickaxis.Hatlr2:                      hat2 = (int) Constrain(hat2' 0' 65535);                      working = hat2;                      break;                    case joystickaxis.Custom1:                      working = (int)(((float)(custom0 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;                    case joystickaxis.Custom2:                      working = (int)(((float)(custom1 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;              }
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: switch (axis)              {                  case joystickaxis.None:                      working = ushort.MaxValue/2;                      break;                  case joystickaxis.Pass:                      working = (int) (((float) (trim - min)/range)*ushort.MaxValue);                      break;                  case joystickaxis.ARx:                      working = state.ARx;                      break;                    case joystickaxis.ARy:                      working = state.ARy;                      break;                    case joystickaxis.ARz:                      working = state.ARz;                      break;                    case joystickaxis.AX:                      working = state.AX;                      break;                    case joystickaxis.AY:                      working = state.AY;                      break;                    case joystickaxis.AZ:                      working = state.AZ;                      break;                    case joystickaxis.FRx:                      working = state.FRx;                      break;                    case joystickaxis.FRy:                      working = state.FRy;                      break;                    case joystickaxis.FRz:                      working = state.FRz;                      break;                    case joystickaxis.FX:                      working = state.FX;                      break;                    case joystickaxis.FY:                      working = state.FY;                      break;                    case joystickaxis.FZ:                      working = state.FZ;                      break;                    case joystickaxis.Rx:                      working = state.Rx;                      break;                    case joystickaxis.Ry:                      working = state.Ry;                      break;                    case joystickaxis.Rz:                      working = state.Rz;                      break;                    case joystickaxis.VRx:                      working = state.VRx;                      break;                    case joystickaxis.VRy:                      working = state.VRy;                      break;                    case joystickaxis.VRz:                      working = state.VRz;                      break;                    case joystickaxis.VX:                      working = state.VX;                      break;                    case joystickaxis.VY:                      working = state.VY;                      break;                    case joystickaxis.VZ:                      working = state.VZ;                      break;                    case joystickaxis.X:                      working = state.X;                      break;                    case joystickaxis.Y:                      working = state.Y;                      break;                    case joystickaxis.Z:                      working = state.Z;                      break;                    case joystickaxis.Slider1:                      int[] slider = state.GetSlider();                      working = slider[0];                      break;                    case joystickaxis.Slider2:                      int[] slider1 = state.GetSlider();                      working = slider1[1];                      break;                    case joystickaxis.Hatud1:                      hat1 = (int) Constrain(hat1' 0' 65535);                      working = hat1;                      break;                    case joystickaxis.Hatlr2:                      hat2 = (int) Constrain(hat2' 0' 65535);                      working = hat2;                      break;                    case joystickaxis.Custom1:                      working = (int)(((float)(custom0 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;                    case joystickaxis.Custom2:                      working = (int)(((float)(custom1 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;              }
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: switch (axis)              {                  case joystickaxis.None:                      working = ushort.MaxValue/2;                      break;                  case joystickaxis.Pass:                      working = (int) (((float) (trim - min)/range)*ushort.MaxValue);                      break;                  case joystickaxis.ARx:                      working = state.ARx;                      break;                    case joystickaxis.ARy:                      working = state.ARy;                      break;                    case joystickaxis.ARz:                      working = state.ARz;                      break;                    case joystickaxis.AX:                      working = state.AX;                      break;                    case joystickaxis.AY:                      working = state.AY;                      break;                    case joystickaxis.AZ:                      working = state.AZ;                      break;                    case joystickaxis.FRx:                      working = state.FRx;                      break;                    case joystickaxis.FRy:                      working = state.FRy;                      break;                    case joystickaxis.FRz:                      working = state.FRz;                      break;                    case joystickaxis.FX:                      working = state.FX;                      break;                    case joystickaxis.FY:                      working = state.FY;                      break;                    case joystickaxis.FZ:                      working = state.FZ;                      break;                    case joystickaxis.Rx:                      working = state.Rx;                      break;                    case joystickaxis.Ry:                      working = state.Ry;                      break;                    case joystickaxis.Rz:                      working = state.Rz;                      break;                    case joystickaxis.VRx:                      working = state.VRx;                      break;                    case joystickaxis.VRy:                      working = state.VRy;                      break;                    case joystickaxis.VRz:                      working = state.VRz;                      break;                    case joystickaxis.VX:                      working = state.VX;                      break;                    case joystickaxis.VY:                      working = state.VY;                      break;                    case joystickaxis.VZ:                      working = state.VZ;                      break;                    case joystickaxis.X:                      working = state.X;                      break;                    case joystickaxis.Y:                      working = state.Y;                      break;                    case joystickaxis.Z:                      working = state.Z;                      break;                    case joystickaxis.Slider1:                      int[] slider = state.GetSlider();                      working = slider[0];                      break;                    case joystickaxis.Slider2:                      int[] slider1 = state.GetSlider();                      working = slider1[1];                      break;                    case joystickaxis.Hatud1:                      hat1 = (int) Constrain(hat1' 0' 65535);                      working = hat1;                      break;                    case joystickaxis.Hatlr2:                      hat2 = (int) Constrain(hat2' 0' 65535);                      working = hat2;                      break;                    case joystickaxis.Custom1:                      working = (int)(((float)(custom0 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;                    case joystickaxis.Custom2:                      working = (int)(((float)(custom1 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;              }
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: working = (int)map(working' 0' 65535' -500' 500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: working = (int)map(working' 0' 65535' -500' 500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following statement contains a magic number: working = (int)map(working' 0' 65535' -500' 500);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Expo,The following statement contains a magic number: double expomult = expo/100.0;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Expo,The following statement contains a magic number: double linearpwm = map(input' 0' 500' mid' max);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Expo,The following statement contains a magic number: double expomid = (max - mid)/2;
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Expo,The following statement contains a magic number: factor = 250 - (input - 250);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Expo,The following statement contains a magic number: factor = 250 - (input - 250);
Magic Number,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,Expo,The following statement contains a magic number: input > 250
Magic Number,MissionPlanner.Mavlink,MAVAuthKeys,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVAuthKeys.cs,AddKey,The following statement contains a magic number: Array.Resize(ref shauser' 32);
Magic Number,MissionPlanner.Mavlink,MAVList,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVList.cs,GetID,The following statement contains a magic number: return  sysid*256 + compid;
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,test,The following statement contains a magic number: st.Length < 1024 * 1024 * 1
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,test,The following statement contains a magic number: st.Length < 1024 * 1024 * 1
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdBurstReadFile,The following statement contains a magic number: var sub = _mavint.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.FILE_TRANSFER_PROTOCOL' message =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return true;                 }                 var msg = (MAVLink.mavlink_file_transfer_protocol_t) message.data;                 FTPPayloadHeader ftphead = msg.payload;                 //log.Debug(ftphead);                 //Console.WriteLine(ftphead);                 // error at far end                 if (ftphead.opcode == FTPOpcode.kRspNak)                 {                     var errorcode = (FTPErrorCode) ftphead.data[0];                     if (errorcode == FTPErrorCode.kErrFailErrno)                     {                         var _ftp_errno = (errno) ftphead.data[1];                         log.Error(ftphead.req_opcode + " " + errorcode + " " + _ftp_errno);                         timeout.Retries = 0;                     }                     else                     {                         log.Error(ftphead.req_opcode + " " + errorcode);                     }                      if (errorcode == FTPErrorCode.kErrEOF)                         timeout.Complete = true;                     return true;                 }                  // not for us or bad seq no - we get multiple packets to one request' so seq_no can be ignored here                 if (payload.opcode != ftphead.req_opcode /*|| payload.seq_number + 1 != ftphead.seq_number*/)                     return true;                 // only ack's                 if (ftphead.opcode != FTPOpcode.kRspAck)                     return true;                 // reject bad packets                 if (ftphead.offset > size || ftphead.size > size || ftphead.offset + ftphead.size > size ||                     answer.Length == 0 && ftphead.offset > 0 && size < 239)                     return true;                 // we have lost data - use retry after timeout                 if (answer.Position != ftphead.offset)                 {                     seq_no = (ushort)(ftphead.seq_number + 1);                     payload.seq_number = seq_no;                     fileTransferProtocol.payload = payload;                     timeout.RetriesCurrent = 0;                     return true;                 }                  // got a valid segment' so reset retrys                 timeout.RetriesCurrent = 0;                 timeout.ResetTimeout();                  chunkSortedList[ftphead.offset] = ftphead.offset + ftphead.size;                  answer.Seek(ftphead.offset' SeekOrigin.Begin);                 answer.Write(ftphead.data' 0' ftphead.size);                 timeout.ResetTimeout();                 //log.Debug(ftphead);                 seq_no = (ushort) (ftphead.seq_number + 1);                 // if rerequest needed                 payload.offset = ftphead.offset + ftphead.size;                 payload.seq_number = seq_no;                 fileTransferProtocol.payload = payload;                 // ignore the burst read first response                 if(ftphead.size > 0)                     Progress?.Invoke((int)((float)payload.offset / size * 100.0));                 if (ftphead.offset + ftphead.size >= size)                 {                     log.InfoFormat("Done {0} {1} "' ftphead.burst_complete' ftphead.offset + ftphead.size);                     timeout.Complete = true;                     return true;                 }                  if (ftphead.burst_complete == 1)                 {                     log.InfoFormat("next burst {0} {1} "' ftphead.burst_complete' ftphead.offset + ftphead.size);                     log.Debug(payload);                     _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                 }                  return true;             });
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdBurstReadFile,The following statement contains a magic number: var sub = _mavint.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.FILE_TRANSFER_PROTOCOL' message =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return true;                 }                 var msg = (MAVLink.mavlink_file_transfer_protocol_t) message.data;                 FTPPayloadHeader ftphead = msg.payload;                 //log.Debug(ftphead);                 //Console.WriteLine(ftphead);                 // error at far end                 if (ftphead.opcode == FTPOpcode.kRspNak)                 {                     var errorcode = (FTPErrorCode) ftphead.data[0];                     if (errorcode == FTPErrorCode.kErrFailErrno)                     {                         var _ftp_errno = (errno) ftphead.data[1];                         log.Error(ftphead.req_opcode + " " + errorcode + " " + _ftp_errno);                         timeout.Retries = 0;                     }                     else                     {                         log.Error(ftphead.req_opcode + " " + errorcode);                     }                      if (errorcode == FTPErrorCode.kErrEOF)                         timeout.Complete = true;                     return true;                 }                  // not for us or bad seq no - we get multiple packets to one request' so seq_no can be ignored here                 if (payload.opcode != ftphead.req_opcode /*|| payload.seq_number + 1 != ftphead.seq_number*/)                     return true;                 // only ack's                 if (ftphead.opcode != FTPOpcode.kRspAck)                     return true;                 // reject bad packets                 if (ftphead.offset > size || ftphead.size > size || ftphead.offset + ftphead.size > size ||                     answer.Length == 0 && ftphead.offset > 0 && size < 239)                     return true;                 // we have lost data - use retry after timeout                 if (answer.Position != ftphead.offset)                 {                     seq_no = (ushort)(ftphead.seq_number + 1);                     payload.seq_number = seq_no;                     fileTransferProtocol.payload = payload;                     timeout.RetriesCurrent = 0;                     return true;                 }                  // got a valid segment' so reset retrys                 timeout.RetriesCurrent = 0;                 timeout.ResetTimeout();                  chunkSortedList[ftphead.offset] = ftphead.offset + ftphead.size;                  answer.Seek(ftphead.offset' SeekOrigin.Begin);                 answer.Write(ftphead.data' 0' ftphead.size);                 timeout.ResetTimeout();                 //log.Debug(ftphead);                 seq_no = (ushort) (ftphead.seq_number + 1);                 // if rerequest needed                 payload.offset = ftphead.offset + ftphead.size;                 payload.seq_number = seq_no;                 fileTransferProtocol.payload = payload;                 // ignore the burst read first response                 if(ftphead.size > 0)                     Progress?.Invoke((int)((float)payload.offset / size * 100.0));                 if (ftphead.offset + ftphead.size >= size)                 {                     log.InfoFormat("Done {0} {1} "' ftphead.burst_complete' ftphead.offset + ftphead.size);                     timeout.Complete = true;                     return true;                 }                  if (ftphead.burst_complete == 1)                 {                     log.InfoFormat("next burst {0} {1} "' ftphead.burst_complete' ftphead.offset + ftphead.size);                     log.Debug(payload);                     _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                 }                  return true;             });
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdBurstReadFile,The following statement contains a magic number: var sub = _mavint.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.FILE_TRANSFER_PROTOCOL' message =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return true;                 }                 var msg = (MAVLink.mavlink_file_transfer_protocol_t) message.data;                 FTPPayloadHeader ftphead = msg.payload;                 //log.Debug(ftphead);                 //Console.WriteLine(ftphead);                 // error at far end                 if (ftphead.opcode == FTPOpcode.kRspNak)                 {                     var errorcode = (FTPErrorCode) ftphead.data[0];                     if (errorcode == FTPErrorCode.kErrFailErrno)                     {                         var _ftp_errno = (errno) ftphead.data[1];                         log.Error(ftphead.req_opcode + " " + errorcode + " " + _ftp_errno);                         timeout.Retries = 0;                     }                     else                     {                         log.Error(ftphead.req_opcode + " " + errorcode);                     }                      if (errorcode == FTPErrorCode.kErrEOF)                         timeout.Complete = true;                     return true;                 }                  // not for us or bad seq no - we get multiple packets to one request' so seq_no can be ignored here                 if (payload.opcode != ftphead.req_opcode /*|| payload.seq_number + 1 != ftphead.seq_number*/)                     return true;                 // only ack's                 if (ftphead.opcode != FTPOpcode.kRspAck)                     return true;                 // reject bad packets                 if (ftphead.offset > size || ftphead.size > size || ftphead.offset + ftphead.size > size ||                     answer.Length == 0 && ftphead.offset > 0 && size < 239)                     return true;                 // we have lost data - use retry after timeout                 if (answer.Position != ftphead.offset)                 {                     seq_no = (ushort)(ftphead.seq_number + 1);                     payload.seq_number = seq_no;                     fileTransferProtocol.payload = payload;                     timeout.RetriesCurrent = 0;                     return true;                 }                  // got a valid segment' so reset retrys                 timeout.RetriesCurrent = 0;                 timeout.ResetTimeout();                  chunkSortedList[ftphead.offset] = ftphead.offset + ftphead.size;                  answer.Seek(ftphead.offset' SeekOrigin.Begin);                 answer.Write(ftphead.data' 0' ftphead.size);                 timeout.ResetTimeout();                 //log.Debug(ftphead);                 seq_no = (ushort) (ftphead.seq_number + 1);                 // if rerequest needed                 payload.offset = ftphead.offset + ftphead.size;                 payload.seq_number = seq_no;                 fileTransferProtocol.payload = payload;                 // ignore the burst read first response                 if(ftphead.size > 0)                     Progress?.Invoke((int)((float)payload.offset / size * 100.0));                 if (ftphead.offset + ftphead.size >= size)                 {                     log.InfoFormat("Done {0} {1} "' ftphead.burst_complete' ftphead.offset + ftphead.size);                     timeout.Complete = true;                     return true;                 }                  if (ftphead.burst_complete == 1)                 {                     log.InfoFormat("next burst {0} {1} "' ftphead.burst_complete' ftphead.offset + ftphead.size);                     log.Debug(payload);                     _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                 }                  return true;             });
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdBurstReadFile,The following statement contains a magic number: timeout.WorkToDo = () =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return;                 }                 _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);             };
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdCalcFileCRC32,The following statement contains a magic number: var timeout = new RetryTimeout(3' 30000);
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdCalcFileCRC32,The following statement contains a magic number: var timeout = new RetryTimeout(3' 30000);
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdCalcFileCRC32,The following statement contains a magic number: timeout.WorkToDo = () =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return;                 }                 _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);             };
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,crc_crc32,The following statement contains a magic number: crc = crc32_table[(crc ^ buf[i]) & 0xff] ^ (crc >> 8);
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdListDirectory,The following statement contains a magic number: var timeout = new RetryTimeout(5);
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdReadFile,The following statement contains a magic number: sub = _mavint.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.FILE_TRANSFER_PROTOCOL' message =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return true;                 }                 var msg = (MAVLink.mavlink_file_transfer_protocol_t) message.data;                 FTPPayloadHeader ftphead = msg.payload;                 // error at far end                 if (ftphead.opcode == FTPOpcode.kRspNak)                 {                     var errorcode = (FTPErrorCode) ftphead.data[0];                     if (errorcode == FTPErrorCode.kErrFailErrno)                     {                         var _ftp_errno = (errno) ftphead.data[1];                         log.Error(ftphead.req_opcode + " " + errorcode + " " + _ftp_errno);                         timeout.Retries = 0;                     }                     else                     {                         log.Error(ftphead.req_opcode + " " + errorcode);                     }                      return true;                 }                  // not for us or bad seq no                 if (payload.opcode != ftphead.req_opcode || payload.seq_number + 1 != ftphead.seq_number)                     return true;                 // only ack's                 if (ftphead.opcode != FTPOpcode.kRspAck)                     return true;                 // log.Debug(ftphead.req_opcode + " " + file + " " + ftphead.size + " " + ftphead.offset);                 // we have lost data - use retry after timeout                 if (answer.Position != ftphead.offset)                 {                     timeout.RetriesCurrent = 0;                     return true;                 }                 // got a valid segment' so reset retrys                 timeout.RetriesCurrent = 0;                 timeout.ResetTimeout();                  answer.Seek(ftphead.offset' SeekOrigin.Begin);                 answer.Write(ftphead.data' 0' ftphead.size);                 Progress?.Invoke((int)((float)payload.offset / size * 100.0));                 if (ftphead.offset + ftphead.size >= size)                 {                     timeout.Complete = true;                     return true;                 }                  payload.offset = ftphead.offset + ftphead.size;                 payload.seq_number = seq_no++;                 fileTransferProtocol.payload = payload;                 _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                 return true;             });
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdReadFile,The following statement contains a magic number: sub = _mavint.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.FILE_TRANSFER_PROTOCOL' message =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return true;                 }                 var msg = (MAVLink.mavlink_file_transfer_protocol_t) message.data;                 FTPPayloadHeader ftphead = msg.payload;                 // error at far end                 if (ftphead.opcode == FTPOpcode.kRspNak)                 {                     var errorcode = (FTPErrorCode) ftphead.data[0];                     if (errorcode == FTPErrorCode.kErrFailErrno)                     {                         var _ftp_errno = (errno) ftphead.data[1];                         log.Error(ftphead.req_opcode + " " + errorcode + " " + _ftp_errno);                         timeout.Retries = 0;                     }                     else                     {                         log.Error(ftphead.req_opcode + " " + errorcode);                     }                      return true;                 }                  // not for us or bad seq no                 if (payload.opcode != ftphead.req_opcode || payload.seq_number + 1 != ftphead.seq_number)                     return true;                 // only ack's                 if (ftphead.opcode != FTPOpcode.kRspAck)                     return true;                 // log.Debug(ftphead.req_opcode + " " + file + " " + ftphead.size + " " + ftphead.offset);                 // we have lost data - use retry after timeout                 if (answer.Position != ftphead.offset)                 {                     timeout.RetriesCurrent = 0;                     return true;                 }                 // got a valid segment' so reset retrys                 timeout.RetriesCurrent = 0;                 timeout.ResetTimeout();                  answer.Seek(ftphead.offset' SeekOrigin.Begin);                 answer.Write(ftphead.data' 0' ftphead.size);                 Progress?.Invoke((int)((float)payload.offset / size * 100.0));                 if (ftphead.offset + ftphead.size >= size)                 {                     timeout.Complete = true;                     return true;                 }                  payload.offset = ftphead.offset + ftphead.size;                 payload.seq_number = seq_no++;                 fileTransferProtocol.payload = payload;                 _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                 return true;             });
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdReadFile,The following statement contains a magic number: timeout.WorkToDo = () =>             {                 if (cancel != null && cancel.IsCancellationRequested)                 {                     timeout.RetriesCurrent = 999;                     return;                 }                 _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);             };
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdWriteFile,The following statement contains a magic number: sub = _mavint.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.FILE_TRANSFER_PROTOCOL' message =>                 {                     Console.WriteLine("G " + DateTime.Now.ToString("O"));                     if (cancel != null && cancel.IsCancellationRequested)                     {                         timeout.RetriesCurrent = 999;                         return true;                     }                     var msg = (MAVLink.mavlink_file_transfer_protocol_t) message.data;                     FTPPayloadHeader ftphead = msg.payload;                     // error at far end                     if (ftphead.opcode == FTPOpcode.kRspNak)                     {                         var errorcode = (FTPErrorCode) ftphead.data[0];                         if (errorcode == FTPErrorCode.kErrFailErrno)                         {                             var _ftp_errno = (errno) ftphead.data[1];                             log.Error(ftphead.req_opcode + " " + errorcode + " " + _ftp_errno);                             timeout.Retries = 0;                         }                         else                         {                             log.Error(ftphead.req_opcode + " " + errorcode);                         }                          return true;                     }                      // not for us or bad seq no                     if (payload.opcode != ftphead.req_opcode || payload.seq_number + 1 != ftphead.seq_number)                         return true;                     // only ack's                     if (ftphead.opcode != FTPOpcode.kRspAck)                         return true;                     if (stream.Position >= size)                     {                         timeout.Complete = true;                         return true;                     }                      // send next                     payload.offset = (uint32_t) stream.Position;                     bytes_read = stream.Read(payload.data' 0' payload.data.Length);                     Array.Resize(ref payload.data' bytes_read);                     payload.size = (uint8_t) bytes_read;                     payload.seq_number = seq_no++;                     fileTransferProtocol.payload = payload;                     _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                     Progress?.Invoke((int)((float)payload.offset / size * 100.0));                     timeout.ResetTimeout();                     Console.WriteLine("S " + DateTime.Now.ToString("O"));                     return true;                 });
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdWriteFile,The following statement contains a magic number: sub = _mavint.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.FILE_TRANSFER_PROTOCOL' message =>                 {                     Console.WriteLine("G " + DateTime.Now.ToString("O"));                     if (cancel != null && cancel.IsCancellationRequested)                     {                         timeout.RetriesCurrent = 999;                         return true;                     }                     var msg = (MAVLink.mavlink_file_transfer_protocol_t) message.data;                     FTPPayloadHeader ftphead = msg.payload;                     // error at far end                     if (ftphead.opcode == FTPOpcode.kRspNak)                     {                         var errorcode = (FTPErrorCode) ftphead.data[0];                         if (errorcode == FTPErrorCode.kErrFailErrno)                         {                             var _ftp_errno = (errno) ftphead.data[1];                             log.Error(ftphead.req_opcode + " " + errorcode + " " + _ftp_errno);                             timeout.Retries = 0;                         }                         else                         {                             log.Error(ftphead.req_opcode + " " + errorcode);                         }                          return true;                     }                      // not for us or bad seq no                     if (payload.opcode != ftphead.req_opcode || payload.seq_number + 1 != ftphead.seq_number)                         return true;                     // only ack's                     if (ftphead.opcode != FTPOpcode.kRspAck)                         return true;                     if (stream.Position >= size)                     {                         timeout.Complete = true;                         return true;                     }                      // send next                     payload.offset = (uint32_t) stream.Position;                     bytes_read = stream.Read(payload.data' 0' payload.data.Length);                     Array.Resize(ref payload.data' bytes_read);                     payload.size = (uint8_t) bytes_read;                     payload.seq_number = seq_no++;                     fileTransferProtocol.payload = payload;                     _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                     Progress?.Invoke((int)((float)payload.offset / size * 100.0));                     timeout.ResetTimeout();                     Console.WriteLine("S " + DateTime.Now.ToString("O"));                     return true;                 });
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdWriteFile,The following statement contains a magic number: payload.data = new byte[239];
Magic Number,MissionPlanner.ArduPilot.Mavlink,MAVFtp,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,kCmdWriteFile,The following statement contains a magic number: timeout.WorkToDo = () =>                 {                     if (cancel != null && cancel.IsCancellationRequested)                     {                         timeout.RetriesCurrent = 999;                         return;                     }                     _mavint.sendPacket(fileTransferProtocol' _sysid' _compid);                 };
Magic Number,MissionPlanner.ArduPilot.Mavlink,RetryTimeout,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVFtp.cs,DoWork,The following statement contains a magic number: return Task.Run<bool>(() =>             {                 Complete = false;                 for (RetriesCurrent = 0; RetriesCurrent < Retries; RetriesCurrent++)                 {                     log.InfoFormat("Retry {0} - {1}"' RetriesCurrent'                         TimeOutDateTime.ToString("yyyy-MM-ddTHH:mm:ss.fff"));                     WorkToDo();                     TimeOutDateTime = DateTime.Now.AddMilliseconds(TimeoutMS);                     while (DateTime.Now < TimeOutDateTime)                     {                         if (Complete)                             return true;                         Thread.Sleep(100);                         log.Debug("TimeOutDateTime " + TimeOutDateTime.ToString("yyyy-MM-ddTHH:mm:ss.fff"));                     }                 }                  return false;             }).Result;
Magic Number,MissionPlanner.Comms,MAVLinkSerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkSerialPort.cs,mainloop,The following statement contains a magic number: System.Threading.Thread.Sleep(5);
Magic Number,MissionPlanner.Comms,MAVLinkSerialPort,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkSerialPort.cs,Open,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Duplicate Code,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setWP,The method contains a code clone-set at the following line numbers (starting from the method definition): ((70' 107)' (112' 149))
Duplicate Code,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,GetLog,The method contains a code clone-set at the following line numbers (starting from the method definition): ((47' 85)' (135' 173))
Missing Default,MissionPlanner.Utilities,GimbalPoint,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\GimbalPoint.cs,ConvertPwmtoAngle,The following switch statement is missing a default case: switch (axis)              {                  case GimbalPoint.axis.roll:                      pwmvalue = channelpwm(rollchannel);                      float minr = (float) comPort.MAV.param["RC" + rollchannel + "_MIN"];                      float maxr = (float) comPort.MAV.param["RC" + rollchannel + "_MAX"];                      float minroll = (float) comPort.MAV.param["MNT_ANGMIN_ROL"];                      float maxroll = (float) comPort.MAV.param["MNT_ANGMAX_ROL"];                      float revr = (float) comPort.MAV.param["RC" + rollchannel + "_REV"];                        return angle_input(revr != 1' pwmvalue' minr' maxr' minroll' maxroll)/100.0;                    case GimbalPoint.axis.pitch:                      pwmvalue = channelpwm(pitchchannel);                      float minp = (float) comPort.MAV.param["RC" + pitchchannel + "_MIN"];                      float maxp = (float) comPort.MAV.param["RC" + pitchchannel + "_MAX"];                      float minpitch = (float) comPort.MAV.param["MNT_ANGMIN_TIL"];                      float maxpitch = (float) comPort.MAV.param["MNT_ANGMAX_TIL"];                      float revp = (float) comPort.MAV.param["RC" + pitchchannel + "_REV"];                          return angle_input(revp != 1' pwmvalue' minp' maxp' minpitch' maxpitch)/100.0;                    case GimbalPoint.axis.yaw:                      pwmvalue = channelpwm(yawchannel);                      float miny = (float) comPort.MAV.param["RC" + yawchannel + "_MIN"];                      float maxy = (float) comPort.MAV.param["RC" + yawchannel + "_MAX"];                      float minyaw = (float) comPort.MAV.param["MNT_ANGMIN_PAN"];                      float maxyaw = (float) comPort.MAV.param["MNT_ANGMAX_PAN"];                      float revy = (float) comPort.MAV.param["RC" + yawchannel + "_REV"];                        return angle_input(revy != 1' pwmvalue' miny' maxy' minyaw' maxyaw)/100.0;              }
Missing Default,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The following switch statement is missing a default case: switch (mavLinkMessage.msgid)                  {                      case (uint) MAVLink.MAVLINK_MSG_ID.RC_CHANNELS_SCALED:                            // hil mavlink 0.9                      {                          var hil = mavLinkMessage.ToStructure<MAVLink.mavlink_rc_channels_scaled_t>();                            hilch1 = hil.chan1_scaled;                          hilch2 = hil.chan2_scaled;                          hilch3 = hil.chan3_scaled;                          hilch4 = hil.chan4_scaled;                          hilch5 = hil.chan5_scaled;                          hilch6 = hil.chan6_scaled;                          hilch7 = hil.chan7_scaled;                          hilch8 = hil.chan8_scaled;                            // Console.WriteLine("RC_CHANNELS_SCALED Packet");                      }                            break;                          case (uint) MAVLink.MAVLINK_MSG_ID.LOCAL_POSITION_NED:                          {                          var lpned = mavLinkMessage.ToStructure<MAVLink.mavlink_local_position_ned_t>();                            var loc = HomeLocation.gps_offset(lpned.y' lpned.x);                            //lat = loc.Lat;                          //lng = loc.Lng;                          //alt = (float)(loc.Alt + lpned.z);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.POSITION_TARGET_GLOBAL_INT:                          {                          var postraget = mavLinkMessage.ToStructure<MAVLink.mavlink_position_target_global_int_t>();                            if (postraget.coordinate_frame == (byte) MAVLink.MAV_FRAME.GLOBAL_INT)                              TargetLocation = new PointLatLngAlt(postraget.lat_int / 1e7' postraget.lon_int / 1e7'                                  postraget.alt'                                  postraget.type_mask.ToString());                            if (postraget.coordinate_frame == (byte) MAVLink.MAV_FRAME.GLOBAL_RELATIVE_ALT)                              TargetLocation = new PointLatLngAlt(postraget.lat_int / 1e7' postraget.lon_int / 1e7'                                  postraget.alt + HomeAlt'                                  postraget.type_mask.ToString());                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.AUTOPILOT_VERSION:                          {                          var version = mavLinkMessage.ToStructure<MAVLink.mavlink_autopilot_version_t>();                          //#define FIRMWARE_VERSION 3'4'0'FIRMWARE_VERSION_TYPE_DEV                          //		flight_sw_version	0x03040000	uint                            var main = (byte) (version.flight_sw_version >> 24);                          var sub = (byte) ((version.flight_sw_version >> 16) & 0xff);                          var rev = (byte) ((version.flight_sw_version >> 8) & 0xff);                          var type =                              (MAVLink.FIRMWARE_VERSION_TYPE) (version.flight_sw_version & 0xff);                            this.version = new Version(main' sub' rev' (int) type);                            try                          {                              capabilities = (uint) (MAVLink.MAV_PROTOCOL_CAPABILITY) version.capabilities;                              var test = (MAVLink.MAV_PROTOCOL_CAPABILITY) version.capabilities;                                Console.WriteLine(test);                          }                          catch                          {                          }                            Serial.print("Flight SW Version: ");                          Serial.println(version.flight_sw_version);                          Serial.print("Middleware SW: ");                          Serial.println(version.middleware_sw_version);                          Serial.print("OS Custom: ");                          Serial.println(version.os_custom_version);                          Serial.print("OS SW: ");                          Serial.println(version.os_sw_version);                          Serial.print("board_version: ");                          Serial.println(version.board_version);                          Serial.print("Vendor ID: ");                          Serial.println(version.vendor_id);                          Serial.print("Product ID: ");                          Serial.println(version.product_id);                          Serial.print("Board Version: ");                          Serial.println(version.board_version);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.FENCE_STATUS:                          {                          var fence = mavLinkMessage.ToStructure<MAVLink.mavlink_fence_status_t>();                            if (fence.breach_status != (byte) MAVLink.FENCE_BREACH.NONE)                          {                              // fence breached                              messageHigh = "Fence Breach";                              messageHighTime = DateTime.Now;                          }                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.HIGH_LATENCY:                          {                          var highlatency = mavLinkMessage.ToStructure<MAVLink.mavlink_high_latency_t>();                            landed = highlatency.landed_state == 1;                            if ((highlatency.base_mode & (byte) MAVLink.MAV_MODE_FLAG.CUSTOM_MODE_ENABLED) != 0)                          {                              var modelist = Common.getModesList(firmware);                                if (modelist != null)                              {                                  var found = false;                                    foreach (var pair in modelist)                                      if (pair.Key == highlatency.custom_mode)                                      {                                          mode = pair.Value;                                          _mode = highlatency.custom_mode;                                          found = true;                                          break;                                      }                                    if (!found)                                      log.Warn("Mode not found bm:" + highlatency.base_mode + " cm:" +                                               highlatency.custom_mode);                              }                          }                            roll = highlatency.roll / 100f;                          pitch = highlatency.pitch / 100f;                          yaw = highlatency.heading / 100f;                          ch3percent = highlatency.throttle;                          lat = highlatency.latitude / 1e7;                          lng = highlatency.longitude / 1e7;                          altasl = highlatency.altitude_amsl;                          alt = highlatency.altitude_sp;                          airspeed = highlatency.airspeed;                          targetairspeed = highlatency.airspeed_sp;                          groundspeed = highlatency.groundspeed;                          climbrate = highlatency.climb_rate;                          satcount = highlatency.gps_nsat;                          gpsstatus = highlatency.gps_fix_type;                          battery_remaining = highlatency.battery_remaining;                          press_temp = highlatency.temperature;                          raw_temp = highlatency.temperature_air;                          failsafe = highlatency.failsafe > 0;                          wpno = highlatency.wp_num;                          wp_dist = highlatency.wp_distance;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.HIL_CONTROLS:                            // hil mavlink 0.9 and 1.0                      {                          var hil = mavLinkMessage.ToStructure<MAVLink.mavlink_hil_controls_t>();                            hilch1 = (int) (hil.roll_ailerons * 10000);                          hilch2 = (int) (hil.pitch_elevator * 10000);                          hilch3 = (int) (hil.throttle * 10000);                          hilch4 = (int) (hil.yaw_rudder * 10000);                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.HIL_CONTROLS);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.OPTICAL_FLOW:                          {                          var optflow = mavLinkMessage.ToStructure<MAVLink.mavlink_optical_flow_t>();                            opt_m_x = optflow.flow_comp_m_x;                          opt_m_y = optflow.flow_comp_m_y;                          opt_x = optflow.flow_x;                          opt_y = optflow.flow_y;                          opt_qua = optflow.quality;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.MOUNT_STATUS:                          {                          var status = mavLinkMessage.ToStructure<MAVLink.mavlink_mount_status_t>();                            campointa = status.pointing_a / 100.0f;                          campointb = status.pointing_b / 100.0f;                          campointc = status.pointing_c / 100.0f;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.VIBRATION:                          {                          var vibe = mavLinkMessage.ToStructure<MAVLink.mavlink_vibration_t>();                            vibeclip0 = vibe.clipping_0;                          vibeclip1 = vibe.clipping_1;                          vibeclip2 = vibe.clipping_2;                          vibex = vibe.vibration_x;                          vibey = vibe.vibration_y;                          vibez = vibe.vibration_z;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.AIRSPEED_AUTOCAL:                          {                          var asac = mavLinkMessage.ToStructure<MAVLink.mavlink_airspeed_autocal_t>();                            asratio = asac.ratio;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SYSTEM_TIME:                          {                          var systime = mavLinkMessage.ToStructure<MAVLink.mavlink_system_time_t>();                            var date1 = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                          try                          {                              date1 = date1.AddMilliseconds(systime.time_unix_usec / 1000);                                gpstime = date1;                          }                          catch                          {                          }                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.HWSTATUS:                          {                          var hwstatus = mavLinkMessage.ToStructure<MAVLink.mavlink_hwstatus_t>();                            hwvoltage = hwstatus.Vcc / 1000.0f;                          i2cerrors = hwstatus.I2Cerr;                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.HWSTATUS);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.EKF_STATUS_REPORT:                        {                          var ekfstatusm = mavLinkMessage.ToStructure<MAVLink.mavlink_ekf_status_report_t>();                            // > 1' between 0-1 typical > 1 = reject measurement - red                          // 0.5 > amber                            ekfvelv = ekfstatusm.velocity_variance;                          ekfcompv = ekfstatusm.compass_variance;                          ekfposhor = ekfstatusm.pos_horiz_variance;                          ekfposvert = ekfstatusm.pos_vert_variance;                          ekfteralt = ekfstatusm.terrain_alt_variance;                            ekfflags = ekfstatusm.flags;                            ekfstatus =                              Math.Max(ekfvelv'                                  Math.Max(ekfcompv' Math.Max(ekfposhor' Math.Max(ekfposvert' ekfteralt))));                            if (ekfvelv >= 1)                          {                              messageHigh = Strings.ERROR + " " + Strings.velocity_variance;                              messageHighTime = DateTime.Now;                          }                            if (ekfcompv >= 1)                          {                              messageHigh = Strings.ERROR + " " + Strings.compass_variance;                              messageHighTime = DateTime.Now;                          }                            if (ekfposhor >= 1)                          {                              messageHigh = Strings.ERROR + " " + Strings.pos_horiz_variance;                              messageHighTime = DateTime.Now;                          }                            if (ekfposvert >= 1)                          {                              messageHigh = Strings.ERROR + " " + Strings.pos_vert_variance;                              messageHighTime = DateTime.Now;                          }                            if (ekfteralt >= 1)                          {                              messageHigh = Strings.ERROR + " " + Strings.terrain_alt_variance;                              messageHighTime = DateTime.Now;                          }                            for (var a = 1; a <= (int) MAVLink.EKF_STATUS_FLAGS.EKF_PRED_POS_HORIZ_ABS; a = a << 1)                          {                              var currentbit = ekfstatusm.flags & a;                              if (currentbit == 0)                              {                                  var currentflag =                                      (MAVLink.EKF_STATUS_FLAGS)                                      Enum.Parse(typeof(MAVLink.EKF_STATUS_FLAGS)' a.ToString());                                    switch (currentflag)                                  {                                      case MAVLink.EKF_STATUS_FLAGS.EKF_ATTITUDE: // step 1                                      case MAVLink.EKF_STATUS_FLAGS.EKF_VELOCITY_HORIZ: // with pos                                          if (gpsstatus > 0) // we have gps and dont have vel_hoz                                              ekfstatus = 1;                                          break;                                      case MAVLink.EKF_STATUS_FLAGS.EKF_VELOCITY_VERT: // with pos                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_POS_HORIZ_REL: // optical flow                                      case MAVLink.EKF_STATUS_FLAGS.EKF_POS_HORIZ_ABS: // step 1                                      case MAVLink.EKF_STATUS_FLAGS.EKF_POS_VERT_ABS: // step 1                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_POS_VERT_AGL: //  range finder                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_CONST_POS_MODE:  // never true when absolute - non gps                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_PRED_POS_HORIZ_REL: // optical flow                                      case MAVLink.EKF_STATUS_FLAGS.EKF_PRED_POS_HORIZ_ABS: // ekf has origin - post arm                                          //messageHigh = Strings.ERROR + " " + currentflag.ToString().Replace("_"' " ");                                          //messageHighTime = DateTime.Now;                                          break;                                  }                              }                          }                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.RANGEFINDER:                        {                          var sonar = mavLinkMessage.ToStructure<MAVLink.mavlink_rangefinder_t>();                            sonarrange = sonar.distance;                          sonarvoltage = sonar.voltage;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.DISTANCE_SENSOR:                        {                          var sonar = mavLinkMessage.ToStructure<MAVLink.mavlink_distance_sensor_t>();                          if (sonar.id == 0)                              rangefinder1 = sonar.current_distance;                          else if (sonar.id == 1)                              rangefinder2 = sonar.current_distance;                          else if (sonar.id == 2) rangefinder3 = sonar.current_distance;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.POWER_STATUS:                        {                          var power = mavLinkMessage.ToStructure<MAVLink.mavlink_power_status_t>();                            boardvoltage = power.Vcc;                          servovoltage = power.Vservo;                            try                          {                              voltageflag = (uint) (MAVLink.MAV_POWER_STATUS) power.flags;                          }                          catch                          {                          }                      }                              break;                      case (uint) MAVLink.MAVLINK_MSG_ID.WIND:                        {                          var wind = mavLinkMessage.ToStructure<MAVLink.mavlink_wind_t>();                            gotwind = true;                            wind_dir = (wind.direction + 360) % 360;                          wind_vel = wind.speed * multiplierspeed;                      }                              break;                      case (uint) MAVLink.MAVLINK_MSG_ID.HEARTBEAT:                        {                          var hb = mavLinkMessage.ToStructure<MAVLink.mavlink_heartbeat_t>();                            if (hb.type == (byte) MAVLink.MAV_TYPE.GCS)                          {                              // skip gcs hb's                              // only happens on log playback - and shouldnt get them here                          }                          else                          {                              armed = (hb.base_mode & (byte) MAVLink.MAV_MODE_FLAG.SAFETY_ARMED) ==                                      (byte) MAVLink.MAV_MODE_FLAG.SAFETY_ARMED;                                // saftey switch                              if (armed && sensors_enabled.motor_control == false && sensors_enabled.seen)                              {                                  messageHigh = "(SAFE)";                                  messageHighTime = DateTime.Now;                              }                                // for future use                              landed = hb.system_status == (byte) MAVLink.MAV_STATE.STANDBY;                                failsafe = hb.system_status == (byte) MAVLink.MAV_STATE.CRITICAL;                                var oldmode = mode;                                if ((hb.base_mode & (byte) MAVLink.MAV_MODE_FLAG.CUSTOM_MODE_ENABLED) != 0)                                  // prevent running thsi unless we have to                                  if (_mode != hb.custom_mode)                                  {                                      var modelist = Common.getModesList(firmware);                                        if (modelist != null)                                      {                                          var found = false;                                            foreach (var pair in modelist)                                              if (pair.Key == hb.custom_mode)                                              {                                                  mode = pair.Value;                                                  _mode = hb.custom_mode;                                                  found = true;                                                  break;                                              }                                            if (!found)                                              log.Warn("Mode not found bm:" + hb.base_mode + " cm:" + hb.custom_mode);                                      }                                        _mode = hb.custom_mode;                                  }                                try                              {                                  if (oldmode != mode && Speech != null && Speech.speechEnable &&                                      parent?.parent?.MAV?.cs == this &&                                      Settings.Instance.GetBoolean("speechmodeenabled"))                                      Speech.SpeakAsync(Common.speechConversion(parent'                                          "" + Settings.Instance["speechmode"]));                              }                              catch (Exception ex)                              {                                  log.Error(ex);                              }                          }                      }                              break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SYS_STATUS:                        {                          var sysstatus = mavLinkMessage.ToStructure<MAVLink.mavlink_sys_status_t>();                            load = sysstatus.load / 10.0f;                            battery_voltage = sysstatus.voltage_battery / 1000.0f;                          battery_remaining = sysstatus.battery_remaining;                          current = sysstatus.current_battery / 100.0f;                            packetdropremote = sysstatus.drop_rate_comm;                            //sysstatus.errors_comm;                          errors_count1 = sysstatus.errors_count1;                          errors_count2 = sysstatus.errors_count2;                          errors_count3 = sysstatus.errors_count3;                          errors_count4 = sysstatus.errors_count4;                            if (errors_count1 > 0 || errors_count2 > 0)                          {                              messageHigh = "InternalError " + Enum.GetName(typeof(AP_InternalError.error_t)'                                                (errors_count1 + (errors_count2 << 16)));                          }                            sensors_enabled.Value = sysstatus.onboard_control_sensors_enabled;                          sensors_health.Value = sysstatus.onboard_control_sensors_health;                          sensors_present.Value = sysstatus.onboard_control_sensors_present;                            terrainactive = sensors_health.terrain && sensors_enabled.terrain && sensors_present.terrain;                            if (!sensors_health.gps && sensors_enabled.gps && sensors_present.gps)                          {                              messageHigh = Strings.BadGPSHealth;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.gyro && sensors_enabled.gyro && sensors_present.gyro)                          {                              messageHigh = Strings.BadGyroHealth;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.accelerometer && sensors_enabled.accelerometer &&                                   sensors_present.accelerometer)                          {                              messageHigh = Strings.BadAccelHealth;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.compass && sensors_enabled.compass && sensors_present.compass)                          {                              messageHigh = Strings.BadCompassHealth;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.barometer && sensors_enabled.barometer && sensors_present.barometer)                          {                              messageHigh = Strings.BadBaroHealth;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.LASER_POSITION && sensors_enabled.LASER_POSITION &&                                   sensors_present.LASER_POSITION)                          {                              messageHigh = Strings.BadLiDARHealth;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.optical_flow && sensors_enabled.optical_flow &&                                   sensors_present.optical_flow)                          {                              messageHigh = Strings.BadOptFlowHealth;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.VISION_POSITION && sensors_enabled.VISION_POSITION &&                                   sensors_present.VISION_POSITION)                          {                              messageHigh = Strings.Bad_Vision_Position;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.terrain && sensors_enabled.terrain && sensors_present.terrain)                          {                              messageHigh = Strings.BadorNoTerrainData;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.geofence && sensors_enabled.geofence &&                                   sensors_present.geofence)                          {                              messageHigh = Strings.GeofenceBreach;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.ahrs && sensors_enabled.ahrs && sensors_present.ahrs)                          {                              messageHigh = Strings.BadAHRS;                              messageHighTime = DateTime.Now;                          }                          else if (!sensors_health.rc_receiver && sensors_enabled.rc_receiver &&                                   sensors_present.rc_receiver)                          {                              var reporterror = true;                              if (Settings.Instance["norcreceiver"] != null)                                  reporterror = !bool.Parse(Settings.Instance["norcreceiver"]);                              if (reporterror)                              {                                  messageHigh = Strings.NORCReceiver;                                  messageHighTime = DateTime.Now;                              }                          }                          else if (!sensors_health.logging && sensors_enabled.logging && sensors_present.logging)                          {                              messageHigh = Strings.BadLogging;                              messageHighTime = DateTime.Now;                          }                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.EXTENDED_SYS_STATE:                        {                          var extsysstatus = mavLinkMessage.ToStructure<MAVLink.mavlink_extended_sys_state_t>();                            vtol_state = extsysstatus.vtol_state;                          landed_state = extsysstatus.landed_state;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.BATTERY2:                        {                          var bat = mavLinkMessage.ToStructure<MAVLink.mavlink_battery2_t>();                          _battery_voltage2 = bat.voltage / 1000.0f;                          current2 = bat.current_battery / 100.0f;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.BATTERY_STATUS:                        {                          var bats = mavLinkMessage.ToStructure<MAVLink.mavlink_battery_status_t>();                            if (bats.id == 0)                          {                              if (bats.voltages[0] != ushort.MaxValue)                              {                                  battery_cell1 = bats.voltages[0] / 1000.0;                                  if (bats.voltages[1] != ushort.MaxValue) battery_cell2 = bats.voltages[1] / 1000.0;                                  else battery_cell2 = 0.0;                                  if (bats.voltages[2] != ushort.MaxValue) battery_cell3 = bats.voltages[2] / 1000.0;                                  else battery_cell3 = 0.0;                                  if (bats.voltages[3] != ushort.MaxValue) battery_cell4 = bats.voltages[3] / 1000.0;                                  else battery_cell4 = 0.0;                                  if (bats.voltages[4] != ushort.MaxValue) battery_cell5 = bats.voltages[4] / 1000.0;                                  else battery_cell5 = 0.0;                                  if (bats.voltages[5] != ushort.MaxValue) battery_cell6 = bats.voltages[5] / 1000.0;                                  else battery_cell6 = 0.0;                              }                                battery_usedmah = bats.current_consumed;                              battery_remaining = bats.battery_remaining;                              _current = bats.current_battery / 100.0f;                              if (bats.temperature != short.MaxValue)                                  battery_temp = bats.temperature / 100.0;                          }                          else if (bats.id == 1)                          {                              battery_usedmah2 = bats.current_consumed;                              battery_remaining2 = bats.battery_remaining;                              _current2 = bats.current_battery / 100.0f;                          }                          else if (bats.id == 2)                          {                              battery_usedmah3 = bats.current_consumed;                              battery_remaining3 = bats.battery_remaining;                              battery_voltage3 = bats.voltages.Sum(a => a != ushort.MaxValue ? a / 1000.0 : 0);                              current3 = bats.current_battery / 100.0f;                          }                          else if (bats.id == 3)                          {                              battery_usedmah4 = bats.current_consumed;                              battery_remaining4 = bats.battery_remaining;                              battery_voltage4 = bats.voltages.Sum(a => a != ushort.MaxValue ? a / 1000.0 : 0);                              current4 = bats.current_battery / 100.0f;                          }                          else if (bats.id == 4)                          {                              battery_usedmah5 = bats.current_consumed;                              battery_remaining5 = bats.battery_remaining;                              battery_voltage5 = bats.voltages.Sum(a => a != ushort.MaxValue ? a / 1000.0 : 0);                              current5 = bats.current_battery / 100.0f;                          }                          else if (bats.id == 5)                          {                              battery_usedmah6 = bats.current_consumed;                              battery_remaining6 = bats.battery_remaining;                              battery_voltage6 = bats.voltages.Sum(a => a != ushort.MaxValue ? a / 1000.0 : 0);                              current6 = bats.current_battery / 100.0f;                          }                          else if (bats.id == 6)                          {                              battery_usedmah7 = bats.current_consumed;                              battery_remaining7 = bats.battery_remaining;                              battery_voltage7 = bats.voltages.Sum(a => a != ushort.MaxValue ? a / 1000.0 : 0);                              current7 = bats.current_battery / 100.0f;                          }                          else if (bats.id == 7)                          {                              battery_usedmah8 = bats.current_consumed;                              battery_remaining8 = bats.battery_remaining;                              battery_voltage8 = bats.voltages.Sum(a => a != ushort.MaxValue ? a / 1000.0 : 0);                              current8 = bats.current_battery / 100.0f;                          }                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SCALED_PRESSURE:                        {                          var pres = mavLinkMessage.ToStructure<MAVLink.mavlink_scaled_pressure_t>();                          press_abs = pres.press_abs;                          press_temp = pres.temperature;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SCALED_PRESSURE2:                        {                          var pres = mavLinkMessage.ToStructure<MAVLink.mavlink_scaled_pressure2_t>();                          press_abs2 = pres.press_abs;                          press_temp2 = pres.temperature;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.TERRAIN_REPORT:                        {                          var terrainrep = mavLinkMessage.ToStructure<MAVLink.mavlink_terrain_report_t>();                          ter_curalt = terrainrep.current_height;                          ter_alt = terrainrep.terrain_height;                          ter_load = terrainrep.loaded;                          ter_pend = terrainrep.pending;                          ter_space = terrainrep.spacing;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SENSOR_OFFSETS:                        {                          var sensofs = mavLinkMessage.ToStructure<MAVLink.mavlink_sensor_offsets_t>();                            mag_ofs_x = sensofs.mag_ofs_x;                          mag_ofs_y = sensofs.mag_ofs_y;                          mag_ofs_z = sensofs.mag_ofs_z;                          mag_declination = sensofs.mag_declination;                            raw_press = sensofs.raw_press;                          raw_temp = sensofs.raw_temp;                            gyro_cal_x = sensofs.gyro_cal_x;                          gyro_cal_y = sensofs.gyro_cal_y;                          gyro_cal_z = sensofs.gyro_cal_z;                            accel_cal_x = sensofs.accel_cal_x;                          accel_cal_y = sensofs.accel_cal_y;                          accel_cal_z = sensofs.accel_cal_z;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.ATTITUDE:                          {                          var att = mavLinkMessage.ToStructure<MAVLink.mavlink_attitude_t>();                            roll = (float) (att.roll * MathHelper.rad2deg);                          pitch = (float) (att.pitch * MathHelper.rad2deg);                          yaw = (float) (att.yaw * MathHelper.rad2deg);                            //Console.WriteLine(MAV.sysid + " " +roll + " " + pitch + " " + yaw);                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.ATTITUDE);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.GLOBAL_POSITION_INT:                        {                          var loc = mavLinkMessage.ToStructure<MAVLink.mavlink_global_position_int_t>();                            // the new arhs deadreckoning may send 0 alt and 0 long. check for and undo                            alt = loc.relative_alt / 1000.0f;                            useLocation = true;                          if (loc.lat == 0 && loc.lon == 0)                          {                              useLocation = false;                          }                          else                          {                              lat = loc.lat / 10000000.0;                              lng = loc.lon / 10000000.0;                                altasl = loc.alt / 1000.0f;                                vx = loc.vx * 0.01;                              vy = loc.vy * 0.01;                              vz = loc.vz * 0.01;                          }                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.GPS_RAW_INT:                        {                          var gps = mavLinkMessage.ToStructure<MAVLink.mavlink_gps_raw_int_t>();                            if (!useLocation)                          {                              lat = gps.lat * 1.0e-7;                              lng = gps.lon * 1.0e-7;                                altasl = gps.alt / 1000.0f;                              // alt = gps.alt; // using vfr as includes baro calc                          }                            gpsstatus = gps.fix_type;                          //                    Console.WriteLine("gpsfix {0}"'gpsstatus);                            if (gps.eph != ushort.MaxValue)                              gpshdop = (float) Math.Round(gps.eph / 100.0' 2);                            if (gps.satellites_visible != byte.MaxValue)                              satcount = gps.satellites_visible;                            if (gps.vel != ushort.MaxValue)                              groundspeed = gps.vel * 1.0e-2f;                            if (groundspeed > 0.5 && gps.cog != ushort.MaxValue)                              groundcourse = gps.cog * 1.0e-2f;                            if (mavLinkMessage.ismavlink2)                          {                              gpsh_acc = gps.h_acc / 1000.0f;                              gpsv_acc = gps.v_acc / 1000.0f;                              gpsvel_acc = gps.vel_acc / 1000.0f;                              gpshdg_acc = gps.hdg_acc / 1e5f;                          }                          else                          {                              gpsh_acc = -1;                              gpsv_acc = -1;                              gpsvel_acc = -1;                              gpshdg_acc = -1;                          }                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.GPS_RAW);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.GPS2_RAW:                        {                          var gps = mavLinkMessage.ToStructure<MAVLink.mavlink_gps2_raw_t>();                            lat2 = gps.lat * 1.0e-7;                          lng2 = gps.lon * 1.0e-7;                          altasl2 = gps.alt / 1000.0f;                            gpsstatus2 = gps.fix_type;                          gpshdop2 = (float) Math.Round(gps.eph / 100.0' 2);                            satcount2 = gps.satellites_visible;                            groundspeed2 = gps.vel * 1.0e-2f;                          groundcourse2 = gps.cog * 1.0e-2f;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.GPS_STATUS:                        {                          var gps = mavLinkMessage.ToStructure<MAVLink.mavlink_gps_status_t>();                          satcount = gps.satellites_visible;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.RADIO:                        {                          var radio = mavLinkMessage.ToStructure<MAVLink.mavlink_radio_t>();                          rssi = radio.rssi;                          remrssi = radio.remrssi;                          txbuffer = radio.txbuf;                          rxerrors = radio.rxerrors;                          noise = radio.noise;                          remnoise = radio.remnoise;                          fixedp = radio.@fixed;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.RADIO_STATUS:                        {                          var radio = mavLinkMessage.ToStructure<MAVLink.mavlink_radio_status_t>();                          rssi = radio.rssi;                          remrssi = radio.remrssi;                          txbuffer = radio.txbuf;                          rxerrors = radio.rxerrors;                          noise = radio.noise;                          remnoise = radio.remnoise;                          fixedp = radio.@fixed;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.MISSION_CURRENT:                        {                          var wpcur = mavLinkMessage.ToStructure<MAVLink.mavlink_mission_current_t>();                            var oldwp = (int) wpno;                            wpno = wpcur.seq;                            if (mode.ToLower() == "auto" && wpno != 0) lastautowp = (int) wpno;                          try                          {                              if (oldwp != wpno && Speech != null && Speech.speechEnable && parent != null &&                                  parent.parent.MAV.cs == this &&                                  Settings.Instance.GetBoolean("speechwaypointenabled"))                                  Speech.SpeakAsync(Common.speechConversion(parent'                                      "" + Settings.Instance["speechwaypoint"]));                          }                          catch (Exception ex)                          {                              log.Error(ex);                          }                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.WAYPOINT_CURRENT);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.NAV_CONTROLLER_OUTPUT:                          {                          var nav = mavLinkMessage.ToStructure<MAVLink.mavlink_nav_controller_output_t>();                            nav_roll = nav.nav_roll;                          nav_pitch = nav.nav_pitch;                          nav_bearing = nav.nav_bearing;                          target_bearing = nav.target_bearing;                          wp_dist = nav.wp_dist;                          alt_error = nav.alt_error;                          aspd_error = nav.aspd_error / 100.0f;                          xtrack_error = nav.xtrack_error;                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.NAV_CONTROLLER_OUTPUT);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.RPM:                          {                          var rpm = mavLinkMessage.ToStructure<MAVLink.mavlink_rpm_t>();                            rpm1 = rpm.rpm1;                          rpm2 = rpm.rpm2;                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.NAV_CONTROLLER_OUTPUT);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.RC_CHANNELS_RAW:                        {                          var rcin = mavLinkMessage.ToStructure<MAVLink.mavlink_rc_channels_raw_t>();                            ch1in = rcin.chan1_raw;                          ch2in = rcin.chan2_raw;                          ch3in = rcin.chan3_raw;                          ch4in = rcin.chan4_raw;                          ch5in = rcin.chan5_raw;                          ch6in = rcin.chan6_raw;                          ch7in = rcin.chan7_raw;                          ch8in = rcin.chan8_raw;                            //percent                          rxrssi = (int) (rcin.rssi / 255.0 * 100.0);                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.RC_CHANNELS_RAW);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.RC_CHANNELS:                        {                          var rcin = mavLinkMessage.ToStructure<MAVLink.mavlink_rc_channels_t>();                            ch1in = rcin.chan1_raw;                          ch2in = rcin.chan2_raw;                          ch3in = rcin.chan3_raw;                          ch4in = rcin.chan4_raw;                          ch5in = rcin.chan5_raw;                          ch6in = rcin.chan6_raw;                          ch7in = rcin.chan7_raw;                          ch8in = rcin.chan8_raw;                            ch9in = rcin.chan9_raw;                          ch10in = rcin.chan10_raw;                          ch11in = rcin.chan11_raw;                          ch12in = rcin.chan12_raw;                          ch13in = rcin.chan13_raw;                          ch14in = rcin.chan14_raw;                          ch15in = rcin.chan15_raw;                          ch16in = rcin.chan16_raw;                            //percent                          rxrssi = (int) (rcin.rssi / 255.0 * 100.0);                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.RC_CHANNELS_RAW);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.ESC_TELEMETRY_1_TO_4:                        {                          var esc = mavLinkMessage.ToStructure<MAVLink.mavlink_esc_telemetry_1_to_4_t>();                          esc1_volt = esc.voltage[0] / 100.0f;                          esc1_curr = esc.current[0] / 100.0f;                          esc1_rpm = esc.rpm[0];                          esc1_temp = esc.temperature[0];                            esc2_volt = esc.voltage[1] / 100.0f;                          esc2_curr = esc.current[1] / 100.0f;                          esc2_rpm = esc.rpm[1];                          esc2_temp = esc.temperature[1];                            esc3_volt = esc.voltage[2] / 100.0f;                          esc3_curr = esc.current[2] / 100.0f;                          esc3_rpm = esc.rpm[2];                          esc3_temp = esc.temperature[2];                            esc4_volt = esc.voltage[3] / 100.0f;                          esc4_curr = esc.current[3] / 100.0f;                          esc4_rpm = esc.rpm[3];                          esc4_temp = esc.temperature[3];                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.ESC_TELEMETRY_5_TO_8:                        {                          var esc = mavLinkMessage.ToStructure<MAVLink.mavlink_esc_telemetry_5_to_8_t>();                          esc5_volt = esc.voltage[0] / 100.0f;                          esc5_curr = esc.current[0] / 100.0f;                          esc5_rpm = esc.rpm[0];                          esc5_temp = esc.temperature[0];                            esc6_volt = esc.voltage[1] / 100.0f;                          esc6_curr = esc.current[1] / 100.0f;                          esc6_rpm = esc.rpm[1];                          esc6_temp = esc.temperature[1];                            esc7_volt = esc.voltage[2] / 100.0f;                          esc7_curr = esc.current[2] / 100.0f;                          esc7_rpm = esc.rpm[2];                          esc7_temp = esc.temperature[2];                            esc8_volt = esc.voltage[3] / 100.0f;                          esc8_curr = esc.current[3] / 100.0f;                          esc8_rpm = esc.rpm[3];                          esc8_temp = esc.temperature[3];                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SERVO_OUTPUT_RAW:                        {                          var servoout = mavLinkMessage.ToStructure<MAVLink.mavlink_servo_output_raw_t>();                            ch1out = servoout.servo1_raw;                          ch2out = servoout.servo2_raw;                          ch3out = servoout.servo3_raw;                          ch4out = servoout.servo4_raw;                          ch5out = servoout.servo5_raw;                          ch6out = servoout.servo6_raw;                          ch7out = servoout.servo7_raw;                          ch8out = servoout.servo8_raw;                            // mavlink2 extension                          ch9out = servoout.servo9_raw;                          ch10out = servoout.servo10_raw;                          ch11out = servoout.servo11_raw;                          ch12out = servoout.servo12_raw;                          ch13out = servoout.servo13_raw;                          ch14out = servoout.servo14_raw;                          ch15out = servoout.servo15_raw;                          ch16out = servoout.servo16_raw;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.RAW_IMU:                        {                          var imu = mavLinkMessage.ToStructure<MAVLink.mavlink_raw_imu_t>();                            gx = imu.xgyro;                          gy = imu.ygyro;                          gz = imu.zgyro;                            ax = imu.xacc;                          ay = imu.yacc;                          az = imu.zacc;                            mx = imu.xmag;                          my = imu.ymag;                          mz = imu.zmag;                            var timesec = imu.time_usec * 1.0e-6;                            var deltawall = (DateTime.Now - lastimutime).TotalSeconds;                            var deltaimu = timesec - imutime;                            //Console.WriteLine( + " " + deltawall + " " + deltaimu + " " + System.Threading.Thread.CurrentThread.Name);                          if (deltaimu > 0 && deltaimu < 10)                          {                              speedup = (float) (speedup * 0.95 + deltaimu / deltawall * 0.05);                                imutime = timesec;                              lastimutime = DateTime.Now;                          }                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.RAW_IMU);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SCALED_IMU:                        {                          var imu = mavLinkMessage.ToStructure<MAVLink.mavlink_scaled_imu_t>();                            gx = imu.xgyro;                          gy = imu.ygyro;                          gz = imu.zgyro;                            ax = imu.xacc;                          ay = imu.yacc;                          az = imu.zacc;                            mx = imu.xmag;                          my = imu.ymag;                          mz = imu.zmag;                            //MAVLink.packets[(byte)MAVLink.MSG_NAMES.RAW_IMU);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SCALED_IMU2:                        {                          var imu2 = mavLinkMessage.ToStructure<MAVLink.mavlink_scaled_imu2_t>();                            gx2 = imu2.xgyro;                          gy2 = imu2.ygyro;                          gz2 = imu2.zgyro;                            ax2 = imu2.xacc;                          ay2 = imu2.yacc;                          az2 = imu2.zacc;                            mx2 = imu2.xmag;                          my2 = imu2.ymag;                          mz2 = imu2.zmag;                      }                              break;                      case (uint) MAVLink.MAVLINK_MSG_ID.SCALED_IMU3:                        {                          var imu3 = mavLinkMessage.ToStructure<MAVLink.mavlink_scaled_imu3_t>();                            gx3 = imu3.xgyro;                          gy3 = imu3.ygyro;                          gz3 = imu3.zgyro;                            ax3 = imu3.xacc;                          ay3 = imu3.yacc;                          az3 = imu3.zacc;                            mx3 = imu3.xmag;                          my3 = imu3.ymag;                          mz3 = imu3.zmag;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.PID_TUNING:                        {                          var pid = mavLinkMessage.ToStructure<MAVLink.mavlink_pid_tuning_t>();                            //todo: currently only deals with single axis at once                            pidff = pid.FF;                          pidP = pid.P;                          pidI = pid.I;                          pidD = pid.D;                          pidaxis = pid.axis;                          piddesired = pid.desired;                          pidachieved = pid.achieved;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.VFR_HUD:                        {                          var vfr = mavLinkMessage.ToStructure<MAVLink.mavlink_vfr_hud_t>();                            groundspeed = vfr.groundspeed;                            airspeed = vfr.airspeed;                            //alt = vfr.alt; // this might include baro                            ch3percent = vfr.throttle;                            if (sensors_present.revthrottle && sensors_enabled.revthrottle && sensors_health.revthrottle)                              if (ch3percent > 0)                                  ch3percent *= -1;                            //Console.WriteLine(alt);                            //climbrate = vfr.climb;                            // heading = vfr.heading;                              //MAVLink.packets[(byte)MAVLink.MSG_NAMES.VFR_HUD);                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.MEMINFO:                        {                          var mem = mavLinkMessage.ToStructure<MAVLink.mavlink_meminfo_t>();                          freemem = mem.freemem;                          brklevel = mem.brkval;                      }                            break;                      case (uint) MAVLink.MAVLINK_MSG_ID.AOA_SSA:                        {                          var aoa_ssa = mavLinkMessage.ToStructure<MAVLink.mavlink_aoa_ssa_t>();                            AOA = aoa_ssa.AOA;                          SSA = aoa_ssa.SSA;                      }                          break;                  }
Missing Default,MissionPlanner,CurrentState,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\CurrentState.cs,Parent_OnPacketReceived,The following switch statement is missing a default case: switch (currentflag)                                  {                                      case MAVLink.EKF_STATUS_FLAGS.EKF_ATTITUDE: // step 1                                      case MAVLink.EKF_STATUS_FLAGS.EKF_VELOCITY_HORIZ: // with pos                                          if (gpsstatus > 0) // we have gps and dont have vel_hoz                                              ekfstatus = 1;                                          break;                                      case MAVLink.EKF_STATUS_FLAGS.EKF_VELOCITY_VERT: // with pos                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_POS_HORIZ_REL: // optical flow                                      case MAVLink.EKF_STATUS_FLAGS.EKF_POS_HORIZ_ABS: // step 1                                      case MAVLink.EKF_STATUS_FLAGS.EKF_POS_VERT_ABS: // step 1                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_POS_VERT_AGL: //  range finder                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_CONST_POS_MODE:  // never true when absolute - non gps                                      //case MAVLink.EKF_STATUS_FLAGS.EKF_PRED_POS_HORIZ_REL: // optical flow                                      case MAVLink.EKF_STATUS_FLAGS.EKF_PRED_POS_HORIZ_ABS: // ekf has origin - post arm                                          //messageHigh = Strings.ERROR + " " + currentflag.ToString().Replace("_"' " ");                                          //messageHighTime = DateTime.Now;                                          break;                                  }
Missing Default,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,requestDatastream,The following switch statement is missing a default case: switch (id)              {                  case MAV_DATA_STREAM.ALL:                        break;                  case MAV_DATA_STREAM.EXTENDED_STATUS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.SYS_STATUS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.SYS_STATUS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.SYS_STATUS];                      }                      if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA1:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.ATTITUDE))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.ATTITUDE] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.ATTITUDE];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA2:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.VFR_HUD))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.VFR_HUD] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.VFR_HUD];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.EXTRA3:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.AHRS))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.AHRS] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.AHRS];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.POSITION:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.GLOBAL_POSITION_INT];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_CONTROLLER:                      if (MAVlist[sysid' compid]                          .packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_SCALED];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RAW_SENSORS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RAW_IMU))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RAW_IMU] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RAW_IMU];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;                  case MAV_DATA_STREAM.RC_CHANNELS:                      if (MAVlist[sysid' compid].packetspersecondbuild.ContainsKey((byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW))                      {                          if (MAVlist[sysid' compid].packetspersecondbuild[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW] <                              DateTime.Now.AddSeconds(-2))                              break;                          pps = MAVlist[sysid' compid].packetspersecond[(byte) MAVLINK_MSG_ID.RC_CHANNELS_RAW];                      }                        if (hzratecheck(pps' hzrate))                      {                          return;                      }                      break;              }
Missing Default,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,readlogPacketMavlink,The following switch statement is missing a default case: switch (a)                  {                      case 0:                          byte0 = tempb;                          if (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX)                          {                              log.DebugFormat("logread - lost sync byte {0} pos {1}"' byte0'                                  logplaybackfile.BaseStream.Position);                              // seek to next valid                              do                              {                                  byte0 = logplaybackfile.ReadByte();                              }                              while (byte0 != 'U' && byte0 != MAVLINK_STX_MAVLINK1 && byte0 != MAVLINK_STX);                              a = 1;                              continue;                          }                          break;                      case 1:                          byte1 = tempb;                          // handle length                          {                              int headerlength = byte0 == MAVLINK_STX ? 9 : 5;                              int headerlengthstx = headerlength + 1;                                length = byte1 + headerlengthstx + 2; // header + 2 checksum                          }                          break;                      case 2:                          byte2 = tempb;                          // handle signing and mavlink2                          if (byte0 == MAVLINK_STX)                          {                              if ((byte2 & MAVLINK_IFLAG_SIGNED) > 0)                                  length += MAVLINK_SIGNATURE_BLOCK_LEN;                          }                          // handle rest                          {                              temp = new byte[length];                              temp[0] = byte0;                              temp[1] = byte1;                              temp[2] = byte2;                                var readto = a + 1;                              var readlength = length - (a + 1);                              logplaybackfile.Read(temp' readto' readlength);                              a = length;                          }                          break;                  }
Missing Default,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setAPType,The following switch statement is missing a default case: switch (MAVlist[sysid' compid].aptype)                      {                          case MAV_TYPE.FIXED_WING:                              MAVlist[sysid' compid].cs.firmware = Firmwares.ArduPlane;                              break;                      }
Missing Default,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setAPType,The following switch statement is missing a default case: switch (MAVlist[sysid' compid].aptype)                      {                          case MAV_TYPE.FIXED_WING:                              MAVlist[sysid' compid].cs.firmware = Firmwares.Ateryx;                              break;                      }
Missing Default,MissionPlanner,MAVLinkInterface,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Mavlink\MAVLinkInterface.cs,setAPType,The following switch statement is missing a default case: switch (MAVlist[sysid' compid].aptype)                      {                          case MAV_TYPE.GIMBAL: // storm32 - name 83                              MAVlist[sysid' compid].cs.firmware = Firmwares.Gymbal;                              break;                      }
Missing Default,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,ProcessButtonEvent,The following switch statement is missing a default case: switch (but.function)                  {                      case buttonfunction.ChangeMode:                          string mode = but.mode;                          if (mode != null)                          {                              _context.Send(delegate                              {                                  try                                  {                                      Interface.setMode(mode);                                  }                                  catch                                  {                                      CustomMessageBox.Show("Failed to change Modes");                                  }                              }' null);                          }                          break;                      case buttonfunction.Mount_Mode:                          _context.Send( delegate                          {                              try                              {                                  Interface.setParam("MNT_MODE"' but.p1);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to change mount mode");                              }                          }' null);                            break;                        case buttonfunction.Arm:                          _context.Send( delegate                          {                              try                              {                                  Interface.doARM(true);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Arm");                              }                          }' null);                          break;                      case buttonfunction.TakeOff:                          _context.Send( delegate                          {                              try                              {                                  Interface.setMode("Guided");                                  if (Interface.MAV.cs.firmware == Firmwares.ArduCopter2)                                  {                                      Interface.doCommand(MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 2);                                  }                                  else                                  {                                      Interface.doCommand(MAVLink.MAV_CMD.TAKEOFF' 0' 0' 0' 0' 0' 0' 20);                                  }                              }                              catch                              {                                  CustomMessageBox.Show("Failed to takeoff");                              }                          }' null);                          break;                      case buttonfunction.Disarm:                          _context.Send( delegate                          {                              try                              {                                  Interface.doARM(false);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Disarm");                              }                          }' null);                          break;                      case buttonfunction.Do_Set_Relay:                          _context.Send( delegate                          {                              try                              {                                  int number = (int) but.p1;                                  int state = buttondown == true ? 1 : 0;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_RELAY' number' state' 0' 0' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_SET_RELAY");                              }                          }' null);                          break;                      case buttonfunction.Digicam_Control:                          Interface.setDigicamControl(true);                          break;                      case buttonfunction.Do_Repeat_Relay:                          _context.Send( delegate                          {                              try                              {                                  int relaynumber = (int) but.p1;                                  int repeat = (int) but.p2;                                  int time = (int) but.p3;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_REPEAT_RELAY' relaynumber' repeat' time' 0'                                      0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_REPEAT_RELAY");                              }                          }' null);                          break;                      case buttonfunction.Do_Set_Servo:                          _context.Send( delegate                          {                              try                              {                                  int channel = (int) but.p1;                                  int pwm = (int) but.p2;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_SERVO' channel' pwm' 0' 0' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_SET_SERVO");                              }                          }' null);                          break;                      case buttonfunction.Do_Repeat_Servo:                          _context.Send( delegate                          {                              try                              {                                  int channelno = (int) but.p1;                                  int pwmvalue = (int) but.p2;                                  int repeattime = (int) but.p3;                                  int delay_ms = (int) but.p4;                                  Interface.doCommand(MAVLink.MAV_CMD.DO_REPEAT_SERVO' channelno' pwmvalue'                                      repeattime' delay_ms' 0' 0' 0);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to DO_REPEAT_SERVO");                              }                          }' null);                          break;                      case buttonfunction.Toggle_Pan_Stab:                          _context.Send( delegate                          {                              try                              {                                  float current = (float) Interface.MAV.param["MNT_STAB_PAN"];                                  float newvalue = (current > 0) ? 0 : 1;                                  Interface.setParam("MNT_STAB_PAN"' newvalue);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Toggle_Pan_Stab");                              }                          }' null);                          break;                      case buttonfunction.Gimbal_pnt_track:                          _context.Send( delegate                          {                              try                              {                                  Interface.doCommand(MAVLink.MAV_CMD.DO_SET_ROI' 0' 0' 0' 0'                                      Interface.MAV.cs.gimballat' Interface.MAV.cs.gimballng'                                      (float) Interface.MAV.cs.GimbalPoint.Alt);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Gimbal_pnt_track");                              }                          }' null);                          break;                      case buttonfunction.Mount_Control_0:                          _context.Send( delegate                          {                              try                              {                                  Interface.setMountControl(0' 0' 0' false);                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Mount_Control_0");                              }                          }' null);                          break;                      case buttonfunction.Button_axis0:                          _context.Send( delegate                          {                              try                              {                                  int pwmmin = (int) but.p1;                                  int pwmmax = (int) but.p2;                                    if (buttondown)                                      custom0 = pwmmax;                                  else                                      custom0 = pwmmin;                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Button_axis0");                              }                          }' null);                          break;                      case buttonfunction.Button_axis1:                          _context.Send( delegate                          {                              try                              {                                  int pwmmin = (int) but.p1;                                  int pwmmax = (int) but.p2;                                    if (buttondown)                                      custom1 = pwmmax;                                  else                                      custom1 = pwmmin;                              }                              catch                              {                                  CustomMessageBox.Show("Failed to Button_axis1");                              }                          }' null);                          break;                  }
Missing Default,MissionPlanner.Joystick,Joystick,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ArduPilot\Joystick\Joystick.cs,pickchannel,The following switch statement is missing a default case: switch (axis)              {                  case joystickaxis.None:                      working = ushort.MaxValue/2;                      break;                  case joystickaxis.Pass:                      working = (int) (((float) (trim - min)/range)*ushort.MaxValue);                      break;                  case joystickaxis.ARx:                      working = state.ARx;                      break;                    case joystickaxis.ARy:                      working = state.ARy;                      break;                    case joystickaxis.ARz:                      working = state.ARz;                      break;                    case joystickaxis.AX:                      working = state.AX;                      break;                    case joystickaxis.AY:                      working = state.AY;                      break;                    case joystickaxis.AZ:                      working = state.AZ;                      break;                    case joystickaxis.FRx:                      working = state.FRx;                      break;                    case joystickaxis.FRy:                      working = state.FRy;                      break;                    case joystickaxis.FRz:                      working = state.FRz;                      break;                    case joystickaxis.FX:                      working = state.FX;                      break;                    case joystickaxis.FY:                      working = state.FY;                      break;                    case joystickaxis.FZ:                      working = state.FZ;                      break;                    case joystickaxis.Rx:                      working = state.Rx;                      break;                    case joystickaxis.Ry:                      working = state.Ry;                      break;                    case joystickaxis.Rz:                      working = state.Rz;                      break;                    case joystickaxis.VRx:                      working = state.VRx;                      break;                    case joystickaxis.VRy:                      working = state.VRy;                      break;                    case joystickaxis.VRz:                      working = state.VRz;                      break;                    case joystickaxis.VX:                      working = state.VX;                      break;                    case joystickaxis.VY:                      working = state.VY;                      break;                    case joystickaxis.VZ:                      working = state.VZ;                      break;                    case joystickaxis.X:                      working = state.X;                      break;                    case joystickaxis.Y:                      working = state.Y;                      break;                    case joystickaxis.Z:                      working = state.Z;                      break;                    case joystickaxis.Slider1:                      int[] slider = state.GetSlider();                      working = slider[0];                      break;                    case joystickaxis.Slider2:                      int[] slider1 = state.GetSlider();                      working = slider1[1];                      break;                    case joystickaxis.Hatud1:                      hat1 = (int) Constrain(hat1' 0' 65535);                      working = hat1;                      break;                    case joystickaxis.Hatlr2:                      hat2 = (int) Constrain(hat2' 0' 65535);                      working = hat2;                      break;                    case joystickaxis.Custom1:                      working = (int)(((float)(custom0 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;                    case joystickaxis.Custom2:                      working = (int)(((float)(custom1 - min) / range) * ushort.MaxValue);                      working = (int)Constrain(working' 0' 65535);                      break;              }
