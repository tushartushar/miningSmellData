Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ManagedNativeWifi.Simple,NativeWifi,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WlanGetAvailableNetworkList,The method has 5 parameters. Parameters: hClientHandle' pInterfaceGuid' dwFlags' pReserved' ppAvailableNetworkList
Long Parameter List,ManagedNativeWifi.Simple,NativeWifi,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WlanQueryInterface,The method has 7 parameters. Parameters: hClientHandle' pInterfaceGuid' OpCode' pReserved' pdwDataSize' ppData' pWlanOpcodeValueType
Long Identifier,ManagedNativeWifi.Simple,NativeWifi,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,,The length of the parameter WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_ADHOC_PROFILES is 49.
Long Identifier,ManagedNativeWifi.Simple,NativeWifi,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,,The length of the parameter WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES is 57.
Magic Number,ManagedNativeWifi.Simple,NativeWifi,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetAvailableNetworkSsids,The following statement contains a magic number: try  			{  				uint negotiatedVersion;  				if (WlanOpenHandle(  					2' // Client version for Windows Vista and Windows Server 2008  					IntPtr.Zero'  					out negotiatedVersion'  					out clientHandle) != ERROR_SUCCESS)  					yield break;    				if (WlanEnumInterfaces(  					clientHandle'  					IntPtr.Zero'  					out interfaceList) != ERROR_SUCCESS)  					yield break;    				var interfaceInfoList = new WLAN_INTERFACE_INFO_LIST(interfaceList);    				Debug.WriteLine("Interface count: {0}"' interfaceInfoList.dwNumberOfItems);    				foreach (var interfaceInfo in interfaceInfoList.InterfaceInfo)  				{  					if (WlanGetAvailableNetworkList(  						clientHandle'  						interfaceInfo.InterfaceGuid'  						WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES'  						IntPtr.Zero'  						out availableNetworkList) != ERROR_SUCCESS)  						continue;    					var networkList = new WLAN_AVAILABLE_NETWORK_LIST(availableNetworkList);    					foreach (var network in networkList.Network)  					{  						Debug.WriteLine("Interface: {0}' SSID: {1}' Signal: {2}"'  							interfaceInfo.strInterfaceDescription'  							network.dot11Ssid'  							network.wlanSignalQuality);    						yield return network.dot11Ssid.ToString();  					}  				}  			}  			finally  			{  				if (availableNetworkList != IntPtr.Zero)  					WlanFreeMemory(availableNetworkList);    				if (interfaceList != IntPtr.Zero)  					WlanFreeMemory(interfaceList);    				if (clientHandle != IntPtr.Zero)  					WlanCloseHandle(clientHandle' IntPtr.Zero);  			}
Magic Number,ManagedNativeWifi.Simple,NativeWifi,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetConnectedNetworkSsids,The following statement contains a magic number: try  			{  				uint negotiatedVersion;  				if (WlanOpenHandle(  					2' // Client version for Windows Vista and Windows Server 2008  					IntPtr.Zero'  					out negotiatedVersion'  					out clientHandle) != ERROR_SUCCESS)  					yield break;    				if (WlanEnumInterfaces(  					clientHandle'  					IntPtr.Zero'  					out interfaceList) != ERROR_SUCCESS)  					yield break;    				var interfaceInfoList = new WLAN_INTERFACE_INFO_LIST(interfaceList);    				Debug.WriteLine("Interface count: {0}"' interfaceInfoList.dwNumberOfItems);    				foreach (var interfaceInfo in interfaceInfoList.InterfaceInfo)  				{  					uint dataSize;  					if (WlanQueryInterface(  						clientHandle'  						interfaceInfo.InterfaceGuid'  						WLAN_INTF_OPCODE.wlan_intf_opcode_current_connection'  						IntPtr.Zero'  						out dataSize'  						ref queryData'  						IntPtr.Zero) != ERROR_SUCCESS) // If not connected to a network' ERROR_INVALID_STATE will be returned.  						continue;    					var connection = (WLAN_CONNECTION_ATTRIBUTES)Marshal.PtrToStructure(queryData' typeof(WLAN_CONNECTION_ATTRIBUTES));  					if (connection.isState != WLAN_INTERFACE_STATE.wlan_interface_state_connected)  						continue;    					var association = connection.wlanAssociationAttributes;    					Debug.WriteLine("Interface: {0}' SSID: {1}' BSSID: {2}' Signal: {3}"'  						interfaceInfo.strInterfaceDescription'  						association.dot11Ssid'  						association.dot11Bssid'  						association.wlanSignalQuality);    					yield return association.dot11Ssid.ToString();  				}  			}  			finally  			{  				if (queryData != IntPtr.Zero)  					WlanFreeMemory(queryData);    				if (interfaceList != IntPtr.Zero)  					WlanFreeMemory(interfaceList);    				if (clientHandle != IntPtr.Zero)  					WlanCloseHandle(clientHandle' IntPtr.Zero);  			}
Magic Number,ManagedNativeWifi.Simple,WLAN_INTERFACE_INFO_LIST,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WLAN_INTERFACE_INFO_LIST,The following statement contains a magic number: dwIndex = (uint)Marshal.ReadInt32(ppInterfaceList' 4 /* Offset for dwNumberOfItems */);
Magic Number,ManagedNativeWifi.Simple,WLAN_INTERFACE_INFO_LIST,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WLAN_INTERFACE_INFO_LIST,The following statement contains a magic number: for (int i = 0; i < dwNumberOfItems; i++)  				{  					var interfaceInfo = new IntPtr(ppInterfaceList.ToInt64()  						+ 8 /* Offset for dwNumberOfItems and dwIndex */  						+ (Marshal.SizeOf(typeof(WLAN_INTERFACE_INFO)) * i) /* Offset for preceding items */);    					InterfaceInfo[i] = (WLAN_INTERFACE_INFO)Marshal.PtrToStructure(interfaceInfo' typeof(WLAN_INTERFACE_INFO));  				}
Magic Number,ManagedNativeWifi.Simple,WLAN_AVAILABLE_NETWORK_LIST,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WLAN_AVAILABLE_NETWORK_LIST,The following statement contains a magic number: dwIndex = (uint)Marshal.ReadInt32(ppAvailableNetworkList' 4 /* Offset for dwNumberOfItems */);
Magic Number,ManagedNativeWifi.Simple,WLAN_AVAILABLE_NETWORK_LIST,C:\repos\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WLAN_AVAILABLE_NETWORK_LIST,The following statement contains a magic number: for (int i = 0; i < dwNumberOfItems; i++)  				{  					var availableNetwork = new IntPtr(ppAvailableNetworkList.ToInt64()  						+ 8 /* Offset for dwNumberOfItems and dwIndex */  						+ (Marshal.SizeOf(typeof(WLAN_AVAILABLE_NETWORK)) * i) /* Offset for preceding items */);    					Network[i] = (WLAN_AVAILABLE_NETWORK)Marshal.PtrToStructure(availableNetwork' typeof(WLAN_AVAILABLE_NETWORK));  				}
