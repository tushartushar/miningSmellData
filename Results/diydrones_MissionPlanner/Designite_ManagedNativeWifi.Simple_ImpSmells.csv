Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WlanGetAvailableNetworkList,The method has 5 parameters.
Long Parameter List,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,WlanQueryInterface,The method has 7 parameters.
Long Statement,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetAvailableNetworkSsids,The length of the statement  "			if (WlanGetAvailableNetworkList (clientHandle' interfaceInfo.InterfaceGuid' WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES' IntPtr.Zero' out availableNetworkList) != ERROR_SUCCESS) " is 191.
Long Statement,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetAvailableNetworkSsids,The length of the statement  "				Debug.WriteLine ("Interface: {0}' SSID: {1}' Signal: {2}"' interfaceInfo.strInterfaceDescription' network.dot11Ssid' network.wlanSignalQuality); " is 144.
Long Statement,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetConnectedNetworkSsids,The length of the statement  "			if (WlanQueryInterface (clientHandle' interfaceInfo.InterfaceGuid' WLAN_INTF_OPCODE.wlan_intf_opcode_current_connection' IntPtr.Zero' out dataSize' ref queryData' IntPtr.Zero) != ERROR_SUCCESS) " is 193.
Long Statement,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetConnectedNetworkSsids,The length of the statement  "			Debug.WriteLine ("Interface: {0}' SSID: {1}' BSSID: {2}' Signal: {3}"' interfaceInfo.strInterfaceDescription' association.dot11Ssid' association.dot11Bssid' association.wlanSignalQuality); " is 188.
Magic Number,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetAvailableNetworkSsids,The following statement contains a magic number: try {  	uint negotiatedVersion;  	if (WlanOpenHandle (2' // Client version for Windows Vista and Windows Server 2008  	IntPtr.Zero' out negotiatedVersion' out clientHandle) != ERROR_SUCCESS)  		yield break;  	if (WlanEnumInterfaces (clientHandle' IntPtr.Zero' out interfaceList) != ERROR_SUCCESS)  		yield break;  	var interfaceInfoList = new WLAN_INTERFACE_INFO_LIST (interfaceList);  	Debug.WriteLine ("Interface count: {0}"' interfaceInfoList.dwNumberOfItems);  	foreach (var interfaceInfo in interfaceInfoList.InterfaceInfo) {  		if (WlanGetAvailableNetworkList (clientHandle' interfaceInfo.InterfaceGuid' WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES' IntPtr.Zero' out availableNetworkList) != ERROR_SUCCESS)  			continue;  		var networkList = new WLAN_AVAILABLE_NETWORK_LIST (availableNetworkList);  		foreach (var network in networkList.Network) {  			Debug.WriteLine ("Interface: {0}' SSID: {1}' Signal: {2}"' interfaceInfo.strInterfaceDescription' network.dot11Ssid' network.wlanSignalQuality);  			yield return network.dot11Ssid.ToString ();  		}  	}  } finally {  	if (availableNetworkList != IntPtr.Zero)  		WlanFreeMemory (availableNetworkList);  	if (interfaceList != IntPtr.Zero)  		WlanFreeMemory (interfaceList);  	if (clientHandle != IntPtr.Zero)  		WlanCloseHandle (clientHandle' IntPtr.Zero);  }  
Magic Number,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetAvailableNetworkSsids,The following statement contains a magic number: if (WlanOpenHandle (2' // Client version for Windows Vista and Windows Server 2008  IntPtr.Zero' out negotiatedVersion' out clientHandle) != ERROR_SUCCESS)  	yield break;  
Magic Number,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetConnectedNetworkSsids,The following statement contains a magic number: try {  	uint negotiatedVersion;  	if (WlanOpenHandle (2' // Client version for Windows Vista and Windows Server 2008  	IntPtr.Zero' out negotiatedVersion' out clientHandle) != ERROR_SUCCESS)  		yield break;  	if (WlanEnumInterfaces (clientHandle' IntPtr.Zero' out interfaceList) != ERROR_SUCCESS)  		yield break;  	var interfaceInfoList = new WLAN_INTERFACE_INFO_LIST (interfaceList);  	Debug.WriteLine ("Interface count: {0}"' interfaceInfoList.dwNumberOfItems);  	foreach (var interfaceInfo in interfaceInfoList.InterfaceInfo) {  		uint dataSize;  		if (WlanQueryInterface (clientHandle' interfaceInfo.InterfaceGuid' WLAN_INTF_OPCODE.wlan_intf_opcode_current_connection' IntPtr.Zero' out dataSize' ref queryData' IntPtr.Zero) != ERROR_SUCCESS)  			// If not connected to a network' ERROR_INVALID_STATE will be returned.  			continue;  		var connection = (WLAN_CONNECTION_ATTRIBUTES)Marshal.PtrToStructure (queryData' typeof(WLAN_CONNECTION_ATTRIBUTES));  		if (connection.isState != WLAN_INTERFACE_STATE.wlan_interface_state_connected)  			continue;  		var association = connection.wlanAssociationAttributes;  		Debug.WriteLine ("Interface: {0}' SSID: {1}' BSSID: {2}' Signal: {3}"' interfaceInfo.strInterfaceDescription' association.dot11Ssid' association.dot11Bssid' association.wlanSignalQuality);  		yield return association.dot11Ssid.ToString ();  	}  } finally {  	if (queryData != IntPtr.Zero)  		WlanFreeMemory (queryData);  	if (interfaceList != IntPtr.Zero)  		WlanFreeMemory (interfaceList);  	if (clientHandle != IntPtr.Zero)  		WlanCloseHandle (clientHandle' IntPtr.Zero);  }  
Magic Number,ManagedNativeWifi.Simple,NativeWifi,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\ManagedNativeWifi.Simple\NativeWifi.cs,GetConnectedNetworkSsids,The following statement contains a magic number: if (WlanOpenHandle (2' // Client version for Windows Vista and Windows Server 2008  IntPtr.Zero' out negotiatedVersion' out clientHandle) != ERROR_SUCCESS)  	yield break;  
