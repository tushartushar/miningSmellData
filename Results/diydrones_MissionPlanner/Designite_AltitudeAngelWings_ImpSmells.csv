Implementation smell,Namespace,Class,File,Method,Description
Long Method,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The method has 105 lines of code.
Complex Method,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,Cyclomatic complexity of the method is 9
Complex Method,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,Cyclomatic complexity of the method is 18
Long Parameter List,AltitudeAngelWings.ApiClient.Client,AltitudeAngelClient,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\AltitudeAngelClient.cs,CreateFlightReport,The method has 6 parameters. Parameters: flightReportName' isCommerial' localStartTime' localEndTime' location' radius
Long Parameter List,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The method has 5 parameters. Parameters: authBaseUri' clientId' clientSecret' scopes' existingState
Long Parameter List,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The method has 8 parameters. Parameters: authBaseUri' clientId' clientSecret' scopes' existingState' requireUserToken' redirectUri' codeProvider
Long Parameter List,AltitudeAngelWings.ApiClient.Client,IAltitudeAngelClient,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\IAltitudeAngelClient.cs,CreateFlightReport,The method has 6 parameters. Parameters: flightReportName' isCommerial' localStartTime' localEndTime' location' radius
Long Parameter List,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has 5 parameters. Parameters: messagesService' missionPlanner' settings' flightDataService' client
Long Statement,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The length of the statement  "                var userClient = new UserAgentClient(serverDescription' clientId' ClientCredentialApplicator.PostParameter(clientSecret)); " is 122.
Long Statement,AltitudeAngelWings.ApiClient.Client,AltitudeAngelHttpHandlerFactory,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\AltitudeAngelHttpHandlerFactory.cs,CreateMessageHandler,The length of the statement  "                new[] { "query_mapdata"' "query_mapairdata"' "talk_tower"' "query_userinfo"' "manage_flightreports" }' _existingState' true' "https://aawings.com/"'  " is 148.
Long Statement,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToColorInfo,The length of the statement  "            uint strokeColor = ToARGB((string)feature.Properties.Get("strokeColor")' (string)feature.Properties.Get("strokeOpacity")); " is 122.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,SubmitFlightReport,The length of the statement  "            await _messagesService.AddMessageAsync(new Message($"ARMED: {flightData.CurrentPosition.Latitude}'{flightData.CurrentPosition.Longitude}")); " is 140.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,CompleteFlightReport,The length of the statement  "            await _messagesService.AddMessageAsync(new Message($"DISARMED: {flightData.CurrentPosition.Latitude}'{flightData.CurrentPosition.Longitude}")); " is 143.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,CompleteFlightReport,The length of the statement  "                await _messagesService.AddMessageAsync(new Message($"Flight plan {_settings.CurrentFlightReportId} marked as complete")); " is 121.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,CompleteFlightReport,The length of the statement  "                await _messagesService.AddMessageAsync(new Message($"Marking flight plan {_settings.CurrentFlightReportId} as complete failed. {ex}")); " is 135.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,UpdateMapData,The length of the statement  "                IEnumerable<Feature> features = mapData.Features.Where(feature => feature.IsEnabledByDefault() && feature.IsFilterOutItem(FilteredOut)).ToList(); " is 145.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessAllFromCache,The length of the statement  "            ProcessFeatures(map' MapFeatureCache.Values.Where(feature => feature.IsEnabledByDefault() && feature.IsFilterOutItem(FilteredOut)).ToList()); " is 141.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,SignedIn,The method has an empty catch block.
Magic Number,AltitudeAngelWings.ApiClient.CodeProvider,WpfAuthorizeDisplay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\CodeProvider\WpfAuthorizeDisplay.cs,WpfAuthorizeDisplay,The following statement contains a magic number: Width = 800;
Magic Number,AltitudeAngelWings.ApiClient.CodeProvider,WpfAuthorizeDisplay,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\CodeProvider\WpfAuthorizeDisplay.cs,WpfAuthorizeDisplay,The following statement contains a magic number: Height = 600;
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: opacityByte = (byte)(opacityAmount * 25);
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: color.Length == 6
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB = (uint)opacityByte << 24;
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: byte.TryParse(color.Substring(i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);
Magic Number,AltitudeAngelWings,DrawingExtensions,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: i < 6
Magic Number,AltitudeAngelWings,AltitudeAngelPlugin,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\AltitudeAngelPlugin.cs,Configure,The following statement contains a magic number: ServiceLocator.Register<IFlightDataService>(l => new FlightDataService(                  TimeSpan.FromMilliseconds(500)'                  l.Resolve<IFlightDataProvider>()));
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The following statement contains a magic number: _disposer.Add(_missionPlanner.FlightDataMap                      .MapChanged                      .Throttle(TimeSpan.FromSeconds(10))                      .RepeatLastValue(TimeSpan.FromSeconds(60))                      .Subscribe(async i => await UpdateMapData(_missionPlanner.FlightDataMap)));
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The following statement contains a magic number: _disposer.Add(_missionPlanner.FlightDataMap                      .MapChanged                      .Throttle(TimeSpan.FromSeconds(10))                      .RepeatLastValue(TimeSpan.FromSeconds(60))                      .Subscribe(async i => await UpdateMapData(_missionPlanner.FlightDataMap)));
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The following statement contains a magic number: _disposer.Add(_missionPlanner.FlightPlanningMap                      .MapChanged                      .Throttle(TimeSpan.FromSeconds(1))                      .RepeatLastValue(TimeSpan.FromSeconds(60))                      .Subscribe(async i => await UpdateMapData(_missionPlanner.FlightPlanningMap)));
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,SubmitFlightReport,The following statement contains a magic number: var bufferedBoundingRadius = 500;
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,SubmitFlightReport,The following statement contains a magic number: bufferedBoundingRadius = Math.Max(flightPlan.BoundingRadius + 50' bufferedBoundingRadius);
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: altitude == null || altitude.Meters <= 152
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: switch (feature.Geometry.Type)                  {                      case GeoJSONObjectType.Point:                          {                              var pnt = (Point)feature.Geometry;                                List<PointLatLng> coordinates = new List<PointLatLng>();                                if (feature.Properties.ContainsKey("radius"))                              {                                  var rad = double.Parse(feature.Properties["radius"].ToString());                                    for (int i = 0; i <= 360; i += 10)                                  {                                      coordinates.Add(                                          newpos(new PointLatLng(((Position)pnt.Coordinates).Latitude'                                              ((Position)pnt.Coordinates).Longitude)' i' rad));                                  }                              }                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddOrUpdatePolygon(feature.Id' coordinates' colorInfo' feature);                              polygons.Add(feature.Id);                          }                          break;                      case GeoJSONObjectType.MultiPoint:                          break;                      case GeoJSONObjectType.LineString:                          {                              var line = (LineString)feature.Geometry;                              List<PointLatLng> coordinates = line.Coordinates.OfType<Position>()                                  .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                  .ToList();                              overlay.AddOrUpdateLine(feature.Id' coordinates' new ColorInfo { StrokeColor = 0xFFFF0000 }' feature);                              lines.Add(feature.Id);                          }                          break;                        case GeoJSONObjectType.MultiLineString:                          break;                      case GeoJSONObjectType.Polygon:                          {                              var poly = (Polygon)feature.Geometry;                              List<PointLatLng> coordinates =                                  poly.Coordinates[0].Coordinates.OfType<Position>()                                      .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                      .ToList();                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddOrUpdatePolygon(feature.Id' coordinates' colorInfo' feature);                              polygons.Add(feature.Id);                          }                          break;                      case GeoJSONObjectType.MultiPolygon:                          foreach (var poly in ((MultiPolygon)feature.Geometry).Coordinates)                          {                              List<PointLatLng> coordinates =                                  poly.Coordinates[0].Coordinates.OfType<Position>()                                      .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                      .ToList();                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddOrUpdatePolygon(feature.Id' coordinates' colorInfo' feature);                              polygons.Add(feature.Id);                          }                          break;                      case GeoJSONObjectType.GeometryCollection:                          break;                      case GeoJSONObjectType.Feature:                          break;                      case GeoJSONObjectType.FeatureCollection:                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: switch (feature.Geometry.Type)                  {                      case GeoJSONObjectType.Point:                          {                              var pnt = (Point)feature.Geometry;                                List<PointLatLng> coordinates = new List<PointLatLng>();                                if (feature.Properties.ContainsKey("radius"))                              {                                  var rad = double.Parse(feature.Properties["radius"].ToString());                                    for (int i = 0; i <= 360; i += 10)                                  {                                      coordinates.Add(                                          newpos(new PointLatLng(((Position)pnt.Coordinates).Latitude'                                              ((Position)pnt.Coordinates).Longitude)' i' rad));                                  }                              }                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddOrUpdatePolygon(feature.Id' coordinates' colorInfo' feature);                              polygons.Add(feature.Id);                          }                          break;                      case GeoJSONObjectType.MultiPoint:                          break;                      case GeoJSONObjectType.LineString:                          {                              var line = (LineString)feature.Geometry;                              List<PointLatLng> coordinates = line.Coordinates.OfType<Position>()                                  .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                  .ToList();                              overlay.AddOrUpdateLine(feature.Id' coordinates' new ColorInfo { StrokeColor = 0xFFFF0000 }' feature);                              lines.Add(feature.Id);                          }                          break;                        case GeoJSONObjectType.MultiLineString:                          break;                      case GeoJSONObjectType.Polygon:                          {                              var poly = (Polygon)feature.Geometry;                              List<PointLatLng> coordinates =                                  poly.Coordinates[0].Coordinates.OfType<Position>()                                      .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                      .ToList();                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddOrUpdatePolygon(feature.Id' coordinates' colorInfo' feature);                              polygons.Add(feature.Id);                          }                          break;                      case GeoJSONObjectType.MultiPolygon:                          foreach (var poly in ((MultiPolygon)feature.Geometry).Coordinates)                          {                              List<PointLatLng> coordinates =                                  poly.Coordinates[0].Coordinates.OfType<Position>()                                      .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                      .ToList();                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddOrUpdatePolygon(feature.Id' coordinates' colorInfo' feature);                              polygons.Add(feature.Id);                          }                          break;                      case GeoJSONObjectType.GeometryCollection:                          break;                      case GeoJSONObjectType.Feature:                          break;                      case GeoJSONObjectType.FeatureCollection:                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,newpos,The following statement contains a magic number: const double rad2deg = (180 / Math.PI);
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,newpos,The following statement contains a magic number: double radius_of_earth = 6378100.0;
