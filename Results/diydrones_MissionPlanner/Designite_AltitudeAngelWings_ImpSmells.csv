Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,Cyclomatic complexity of the method is 9
Complex Method,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,Cyclomatic complexity of the method is 36
Long Parameter List,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The method has 5 parameters.
Long Parameter List,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The method has 8 parameters.
Long Statement,AltitudeAngelWings.ApiClient.Client,AltitudeAngelClient,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\AltitudeAngelClient.cs,GetWeather,The length of the statement  "	JObject reportResponse = await _apiUrl.AppendPathSegments ("ops"' "tower"' "report").WithClient (_client).PostJsonAsync (new ReportRequest (aircraftInfo' flightInfo' "weather")).ReceiveJson<JObject> (); " is 202.
Long Statement,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The length of the statement  "		var userClient = new UserAgentClient (serverDescription' clientId' ClientCredentialApplicator.PostParameter (clientSecret)); " is 124.
Long Statement,AltitudeAngelWings.ApiClient.Client,AltitudeAngelHttpHandlerFactory,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\AltitudeAngelHttpHandlerFactory.cs,CreateMessageHandler,The length of the statement  "	_handlerInfo = ApiOAuthClientHandler.Create (_authUrl' ConfigurationManager.AppSettings ["ClientId"]' ConfigurationManager.AppSettings ["ClientSecret"]' new[] { " is 160.
Long Statement,AltitudeAngelWings.ApiClient.CodeProvider,WpfAuthorizeDisplay,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\CodeProvider\WpfAuthorizeDisplay.cs,WebBrowserOnNavigating,The length of the statement  "	if (navigatingCancelEventArgs.Uri.ToString ().StartsWith (_redirectUri.ToString ()' StringComparison.OrdinalIgnoreCase)) { " is 122.
Long Statement,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToColorInfo,The length of the statement  "	uint strokeColor = ToARGB ((string)feature.Properties.Get ("strokeColor")' (string)feature.Properties.Get ("strokeOpacity")); " is 125.
Long Statement,AltitudeAngelWings,ReactiveExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ReactiveExtensions.cs,SubscribeVisualState,The length of the statement  "	return source.ObserveOnDispatcher ().Subscribe (state => VisualStateManager.GoToElementState (stateElement' state.ToString ()' true)); " is 134.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,UpdateMapData,The length of the statement  "	IEnumerable<Feature> features = mapData.Features.Where (feature => feature.IsEnabledByDefault () && feature.IsFilterOutItem (FilteredOut)).ToList (); " is 149.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessAllFromCache,The length of the statement  "	ProcessFeatures (map' cache.Values.Where (feature => feature.IsEnabledByDefault () && feature.IsFilterOutItem (FilteredOut)).ToList ()); " is 136.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The length of the statement  "		IOverlay overlay = string.Equals ((string)feature.Properties.Get ("category")' "airspace") ? airOverlay : groundOverlay; " is 120.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The length of the statement  "							coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad)); " is 149.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The length of the statement  "					List<PointLatLng> coordinates = line.Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList (); " is 145.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The length of the statement  "					List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList (); " is 161.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The length of the statement  "					List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList (); " is 161.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,newpos,The length of the statement  "	double lon2 = lon1 + Math.Atan2 (Math.Sin (brng) * Math.Sin (dr) * Math.Cos (lat1)' Math.Cos (dr) - Math.Sin (lat1) * Math.Sin (lat2)); " is 135.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,CreateClient,The length of the statement  "	_aaClient = aaClientFactory (ConfigurationManager.AppSettings ["AuthURL"]' ConfigurationManager.AppSettings ["APIURL"]' existingState); " is 135.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,SignedIn,The method has an empty catch block.
Magic Number,AltitudeAngelWings.ApiClient.CodeProvider,WpfAuthorizeDisplay,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\CodeProvider\WpfAuthorizeDisplay.cs,WpfAuthorizeDisplay,The following statement contains a magic number: Width = 800;  
Magic Number,AltitudeAngelWings.ApiClient.CodeProvider,WpfAuthorizeDisplay,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\CodeProvider\WpfAuthorizeDisplay.cs,WpfAuthorizeDisplay,The following statement contains a magic number: Height = 600;  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.StartsWith ("#")) {  	color = color.Substring (1);  } else if (color.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase)) {  	color = color.Substring (2);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase)) {  	color = color.Substring (2);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: color = color.Substring (2);  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6) {  	float opacityAmount;  	if (!float.TryParse (opacity' out opacityAmount)) {  		opacityAmount = 1F;  	}  	opacityByte = (byte)(opacityAmount * 100);  } else if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6) {  	float opacityAmount;  	if (!float.TryParse (opacity' out opacityAmount)) {  		opacityAmount = 1F;  	}  	opacityByte = (byte)(opacityAmount * 100);  } else if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6) {  	float opacityAmount;  	if (!float.TryParse (opacity' out opacityAmount)) {  		opacityAmount = 1F;  	}  	opacityByte = (byte)(opacityAmount * 100);  } else if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6) {  	float opacityAmount;  	if (!float.TryParse (opacity' out opacityAmount)) {  		opacityAmount = 1F;  	}  	opacityByte = (byte)(opacityAmount * 100);  } else if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6) {  	float opacityAmount;  	if (!float.TryParse (opacity' out opacityAmount)) {  		opacityAmount = 1F;  	}  	opacityByte = (byte)(opacityAmount * 100);  } else if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: opacityByte = (byte)(opacityAmount * 100);  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 8) {  	if (opacity != null) {  		throw new InvalidOperationException ("Color cannot contain an ARGB value if the opacity is specified.");  	}  	if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  		opacityByte = 0xFF;  	}  	color = color.Substring (2);  } else {  	throw new ArgumentException (nameof (color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (!byte.TryParse (color.Substring (0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte)) {  	opacityByte = 0xFF;  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: color = color.Substring (2);  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB = (uint)opacityByte << 24;  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2) {  	byte colorByte;  	byte.TryParse (color.Substring (i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);  	colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2) {  	byte colorByte;  	byte.TryParse (color.Substring (i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);  	colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2) {  	byte colorByte;  	byte.TryParse (color.Substring (i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);  	colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2) {  	byte colorByte;  	byte.TryParse (color.Substring (i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);  	colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2) {  	byte colorByte;  	byte.TryParse (color.Substring (i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);  	colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2) {  	byte colorByte;  	byte.TryParse (color.Substring (i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);  	colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  }  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: i += 2
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: byte.TryParse (color.Substring (i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  
Magic Number,AltitudeAngelWings,DrawingExtensions,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: foreach (Feature feature in features) {  	IOverlay overlay = string.Equals ((string)feature.Properties.Get ("category")' "airspace") ? airOverlay : groundOverlay;  	var altitude = ((JObject)feature.Properties.Get ("altitudeFloor")).ToObject<Altitude> ();  	if (altitude == null || altitude.Meters <= 152) {  		if (!GroundDataDisplay) {  			if (overlay.PolygonExists (feature.Id))  				continue;  		}  	} else {  		if (!AirDataDisplay) {  			continue;  		}  	}  	switch (feature.Geometry.Type) {  	case GeoJSONObjectType.Point:  		{  			if (!overlay.PolygonExists (feature.Id)) {  				var pnt = (Point)feature.Geometry;  				List<PointLatLng> coordinates = new List<PointLatLng> ();  				if (feature.Properties.ContainsKey ("radius")) {  					var rad = double.Parse (feature.Properties ["radius"].ToString ());  					for (int i = 0; i <= 360; i += 10) {  						coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  					}  				}  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiPoint:  		break;  	case GeoJSONObjectType.LineString:  		{  			if (!overlay.LineExists (feature.Id)) {  				var line = (LineString)feature.Geometry;  				List<PointLatLng> coordinates = line.Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				overlay.AddLine (feature.Id' coordinates' new ColorInfo {  					StrokeColor = 0xFFFF0000  				}' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiLineString:  		break;  	case GeoJSONObjectType.Polygon:  		{  			if (!overlay.PolygonExists (feature.Id)) {  				var poly = (Polygon)feature.Geometry;  				List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiPolygon:  		if (!overlay.PolygonExists (feature.Id)) {  			foreach (var poly in ((MultiPolygon)feature.Geometry).Coordinates) {  				List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.GeometryCollection:  		break;  	case GeoJSONObjectType.Feature:  		break;  	case GeoJSONObjectType.FeatureCollection:  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: foreach (Feature feature in features) {  	IOverlay overlay = string.Equals ((string)feature.Properties.Get ("category")' "airspace") ? airOverlay : groundOverlay;  	var altitude = ((JObject)feature.Properties.Get ("altitudeFloor")).ToObject<Altitude> ();  	if (altitude == null || altitude.Meters <= 152) {  		if (!GroundDataDisplay) {  			if (overlay.PolygonExists (feature.Id))  				continue;  		}  	} else {  		if (!AirDataDisplay) {  			continue;  		}  	}  	switch (feature.Geometry.Type) {  	case GeoJSONObjectType.Point:  		{  			if (!overlay.PolygonExists (feature.Id)) {  				var pnt = (Point)feature.Geometry;  				List<PointLatLng> coordinates = new List<PointLatLng> ();  				if (feature.Properties.ContainsKey ("radius")) {  					var rad = double.Parse (feature.Properties ["radius"].ToString ());  					for (int i = 0; i <= 360; i += 10) {  						coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  					}  				}  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiPoint:  		break;  	case GeoJSONObjectType.LineString:  		{  			if (!overlay.LineExists (feature.Id)) {  				var line = (LineString)feature.Geometry;  				List<PointLatLng> coordinates = line.Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				overlay.AddLine (feature.Id' coordinates' new ColorInfo {  					StrokeColor = 0xFFFF0000  				}' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiLineString:  		break;  	case GeoJSONObjectType.Polygon:  		{  			if (!overlay.PolygonExists (feature.Id)) {  				var poly = (Polygon)feature.Geometry;  				List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiPolygon:  		if (!overlay.PolygonExists (feature.Id)) {  			foreach (var poly in ((MultiPolygon)feature.Geometry).Coordinates) {  				List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.GeometryCollection:  		break;  	case GeoJSONObjectType.Feature:  		break;  	case GeoJSONObjectType.FeatureCollection:  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: foreach (Feature feature in features) {  	IOverlay overlay = string.Equals ((string)feature.Properties.Get ("category")' "airspace") ? airOverlay : groundOverlay;  	var altitude = ((JObject)feature.Properties.Get ("altitudeFloor")).ToObject<Altitude> ();  	if (altitude == null || altitude.Meters <= 152) {  		if (!GroundDataDisplay) {  			if (overlay.PolygonExists (feature.Id))  				continue;  		}  	} else {  		if (!AirDataDisplay) {  			continue;  		}  	}  	switch (feature.Geometry.Type) {  	case GeoJSONObjectType.Point:  		{  			if (!overlay.PolygonExists (feature.Id)) {  				var pnt = (Point)feature.Geometry;  				List<PointLatLng> coordinates = new List<PointLatLng> ();  				if (feature.Properties.ContainsKey ("radius")) {  					var rad = double.Parse (feature.Properties ["radius"].ToString ());  					for (int i = 0; i <= 360; i += 10) {  						coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  					}  				}  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiPoint:  		break;  	case GeoJSONObjectType.LineString:  		{  			if (!overlay.LineExists (feature.Id)) {  				var line = (LineString)feature.Geometry;  				List<PointLatLng> coordinates = line.Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				overlay.AddLine (feature.Id' coordinates' new ColorInfo {  					StrokeColor = 0xFFFF0000  				}' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiLineString:  		break;  	case GeoJSONObjectType.Polygon:  		{  			if (!overlay.PolygonExists (feature.Id)) {  				var poly = (Polygon)feature.Geometry;  				List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.MultiPolygon:  		if (!overlay.PolygonExists (feature.Id)) {  			foreach (var poly in ((MultiPolygon)feature.Geometry).Coordinates) {  				List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  				ColorInfo colorInfo = feature.ToColorInfo ();  				colorInfo.StrokeColor = 0xFFFF0000;  				overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  			}  		}  		break;  	case GeoJSONObjectType.GeometryCollection:  		break;  	case GeoJSONObjectType.Feature:  		break;  	case GeoJSONObjectType.FeatureCollection:  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: if (altitude == null || altitude.Meters <= 152) {  	if (!GroundDataDisplay) {  		if (overlay.PolygonExists (feature.Id))  			continue;  	}  } else {  	if (!AirDataDisplay) {  		continue;  	}  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: switch (feature.Geometry.Type) {  case GeoJSONObjectType.Point:  	{  		if (!overlay.PolygonExists (feature.Id)) {  			var pnt = (Point)feature.Geometry;  			List<PointLatLng> coordinates = new List<PointLatLng> ();  			if (feature.Properties.ContainsKey ("radius")) {  				var rad = double.Parse (feature.Properties ["radius"].ToString ());  				for (int i = 0; i <= 360; i += 10) {  					coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  				}  			}  			ColorInfo colorInfo = feature.ToColorInfo ();  			colorInfo.StrokeColor = 0xFFFF0000;  			overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  		}  	}  	break;  case GeoJSONObjectType.MultiPoint:  	break;  case GeoJSONObjectType.LineString:  	{  		if (!overlay.LineExists (feature.Id)) {  			var line = (LineString)feature.Geometry;  			List<PointLatLng> coordinates = line.Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  			overlay.AddLine (feature.Id' coordinates' new ColorInfo {  				StrokeColor = 0xFFFF0000  			}' feature);  		}  	}  	break;  case GeoJSONObjectType.MultiLineString:  	break;  case GeoJSONObjectType.Polygon:  	{  		if (!overlay.PolygonExists (feature.Id)) {  			var poly = (Polygon)feature.Geometry;  			List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  			ColorInfo colorInfo = feature.ToColorInfo ();  			colorInfo.StrokeColor = 0xFFFF0000;  			overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  		}  	}  	break;  case GeoJSONObjectType.MultiPolygon:  	if (!overlay.PolygonExists (feature.Id)) {  		foreach (var poly in ((MultiPolygon)feature.Geometry).Coordinates) {  			List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  			ColorInfo colorInfo = feature.ToColorInfo ();  			colorInfo.StrokeColor = 0xFFFF0000;  			overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  		}  	}  	break;  case GeoJSONObjectType.GeometryCollection:  	break;  case GeoJSONObjectType.Feature:  	break;  case GeoJSONObjectType.FeatureCollection:  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: switch (feature.Geometry.Type) {  case GeoJSONObjectType.Point:  	{  		if (!overlay.PolygonExists (feature.Id)) {  			var pnt = (Point)feature.Geometry;  			List<PointLatLng> coordinates = new List<PointLatLng> ();  			if (feature.Properties.ContainsKey ("radius")) {  				var rad = double.Parse (feature.Properties ["radius"].ToString ());  				for (int i = 0; i <= 360; i += 10) {  					coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  				}  			}  			ColorInfo colorInfo = feature.ToColorInfo ();  			colorInfo.StrokeColor = 0xFFFF0000;  			overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  		}  	}  	break;  case GeoJSONObjectType.MultiPoint:  	break;  case GeoJSONObjectType.LineString:  	{  		if (!overlay.LineExists (feature.Id)) {  			var line = (LineString)feature.Geometry;  			List<PointLatLng> coordinates = line.Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  			overlay.AddLine (feature.Id' coordinates' new ColorInfo {  				StrokeColor = 0xFFFF0000  			}' feature);  		}  	}  	break;  case GeoJSONObjectType.MultiLineString:  	break;  case GeoJSONObjectType.Polygon:  	{  		if (!overlay.PolygonExists (feature.Id)) {  			var poly = (Polygon)feature.Geometry;  			List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  			ColorInfo colorInfo = feature.ToColorInfo ();  			colorInfo.StrokeColor = 0xFFFF0000;  			overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  		}  	}  	break;  case GeoJSONObjectType.MultiPolygon:  	if (!overlay.PolygonExists (feature.Id)) {  		foreach (var poly in ((MultiPolygon)feature.Geometry).Coordinates) {  			List<PointLatLng> coordinates = poly.Coordinates [0].Coordinates.OfType<GeographicPosition> ().Select (c => new PointLatLng (c.Latitude' c.Longitude)).ToList ();  			ColorInfo colorInfo = feature.ToColorInfo ();  			colorInfo.StrokeColor = 0xFFFF0000;  			overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  		}  	}  	break;  case GeoJSONObjectType.GeometryCollection:  	break;  case GeoJSONObjectType.Feature:  	break;  case GeoJSONObjectType.FeatureCollection:  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: if (!overlay.PolygonExists (feature.Id)) {  	var pnt = (Point)feature.Geometry;  	List<PointLatLng> coordinates = new List<PointLatLng> ();  	if (feature.Properties.ContainsKey ("radius")) {  		var rad = double.Parse (feature.Properties ["radius"].ToString ());  		for (int i = 0; i <= 360; i += 10) {  			coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  		}  	}  	ColorInfo colorInfo = feature.ToColorInfo ();  	colorInfo.StrokeColor = 0xFFFF0000;  	overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: if (!overlay.PolygonExists (feature.Id)) {  	var pnt = (Point)feature.Geometry;  	List<PointLatLng> coordinates = new List<PointLatLng> ();  	if (feature.Properties.ContainsKey ("radius")) {  		var rad = double.Parse (feature.Properties ["radius"].ToString ());  		for (int i = 0; i <= 360; i += 10) {  			coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  		}  	}  	ColorInfo colorInfo = feature.ToColorInfo ();  	colorInfo.StrokeColor = 0xFFFF0000;  	overlay.AddPolygon (feature.Id' coordinates' colorInfo' feature);  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: if (feature.Properties.ContainsKey ("radius")) {  	var rad = double.Parse (feature.Properties ["radius"].ToString ());  	for (int i = 0; i <= 360; i += 10) {  		coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  	}  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: if (feature.Properties.ContainsKey ("radius")) {  	var rad = double.Parse (feature.Properties ["radius"].ToString ());  	for (int i = 0; i <= 360; i += 10) {  		coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  	}  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: for (int i = 0; i <= 360; i += 10) {  	coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: for (int i = 0; i <= 360; i += 10) {  	coordinates.Add (newpos (new PointLatLng (((GeographicPosition)pnt.Coordinates).Latitude' ((GeographicPosition)pnt.Coordinates).Longitude)' i' rad));  }  
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: i += 10
