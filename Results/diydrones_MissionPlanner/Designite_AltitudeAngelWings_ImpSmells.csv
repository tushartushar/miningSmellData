Implementation smell,Namespace,Class,File,Method,Description
Long Method,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The method has 107 lines of code.
Long Parameter List,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The method has 5 parameters. Parameters: authBaseUri' clientId' clientSecret' scopes' existingState
Long Parameter List,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The method has 8 parameters. Parameters: authBaseUri' clientId' clientSecret' scopes' existingState' requireUserToken' redirectUri' codeProvider
Long Statement,AltitudeAngelWings.ApiClient.Client,ApiOAuthClientHandler,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,Create,The length of the statement  "                var userClient = new UserAgentClient(serverDescription' clientId' ClientCredentialApplicator.PostParameter(clientSecret)); " is 122.
Long Statement,AltitudeAngelWings.ApiClient.Client,BearerTokenHttpMessageHandler,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,SendAsync,The length of the statement  "                    //ErrorUtilities.VerifyProtocol(!this.Authorization.AccessTokenExpirationUtc.HasValue || this.Authorization.AccessTokenExpirationUtc >= DateTime.UtcNow || this.Authorization.RefreshToken != null' ClientStrings.AuthorizationExpired' new object[0]); " is 247.
Long Statement,AltitudeAngelWings.ApiClient.Client,BearerTokenHttpMessageHandler,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,SendAsync,The length of the statement  "                    if (this.Authorization.AccessTokenExpirationUtc.HasValue && this.Authorization.AccessTokenExpirationUtc.Value < DateTime.UtcNow) " is 128.
Long Statement,AltitudeAngelWings.ApiClient.Client,BearerTokenHttpMessageHandler,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\ApiOAuthClientHandler.cs,SendAsync,The length of the statement  "                        //ErrorUtilities.VerifyProtocol(this.Authorization.RefreshToken != null' ClientStrings.AccessTokenRefreshFailed' new object[0]); " is 128.
Long Statement,AltitudeAngelWings.ApiClient.Client,AltitudeAngelHttpHandlerFactory,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\Client\AltitudeAngelHttpHandlerFactory.cs,CreateMessageHandler,The length of the statement  "                new[] { "query_mapdata"' "query_mapairdata"' "talk_tower"' "query_userinfo" }' _existingState' true' "https://aawings.com/"'  " is 124.
Long Statement,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToColorInfo,The length of the statement  "            uint strokeColor = ToARGB((string)feature.Properties.Get("strokeColor")' (string)feature.Properties.Get("strokeOpacity")); " is 122.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,UpdateMapData,The length of the statement  "                IEnumerable<Feature> features = mapData.Features.Where(feature => feature.IsEnabledByDefault() && feature.IsFilterOutItem(FilteredOut)).ToList(); " is 145.
Long Statement,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessAllFromCache,The length of the statement  "            ProcessFeatures(map' cache.Values.Where(feature => feature.IsEnabledByDefault() && feature.IsFilterOutItem(FilteredOut)).ToList()); " is 131.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,AltitudeAngelService,The method has an empty catch block.
Empty Catch Block,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,SignedIn,The method has an empty catch block.
Magic Number,AltitudeAngelWings.ApiClient.CodeProvider,WpfAuthorizeDisplay,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\CodeProvider\WpfAuthorizeDisplay.cs,WpfAuthorizeDisplay,The following statement contains a magic number: Width = 800;
Magic Number,AltitudeAngelWings.ApiClient.CodeProvider,WpfAuthorizeDisplay,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\ApiClient\CodeProvider\WpfAuthorizeDisplay.cs,WpfAuthorizeDisplay,The following statement contains a magic number: Height = 600;
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.StartsWith("#"))              {                  color = color.Substring(1);              }              else if (color.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))              {                  color = color.Substring(2);              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6)              {                  float opacityAmount;                  if (!float.TryParse(opacity' out opacityAmount))                  {                      opacityAmount = 1F;                  }                    opacityByte = (byte)(opacityAmount * 100);              }              else if (color.Length == 8)              {                  if (opacity != null)                  {                      throw new InvalidOperationException("Color cannot contain an ARGB value if the opacity is specified.");                  }                    if (!byte.TryParse(color.Substring(0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte))                  {                      opacityByte = 0xFF;                  }                    color = color.Substring(2);              }              else              {                  throw new ArgumentException(nameof(color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6)              {                  float opacityAmount;                  if (!float.TryParse(opacity' out opacityAmount))                  {                      opacityAmount = 1F;                  }                    opacityByte = (byte)(opacityAmount * 100);              }              else if (color.Length == 8)              {                  if (opacity != null)                  {                      throw new InvalidOperationException("Color cannot contain an ARGB value if the opacity is specified.");                  }                    if (!byte.TryParse(color.Substring(0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte))                  {                      opacityByte = 0xFF;                  }                    color = color.Substring(2);              }              else              {                  throw new ArgumentException(nameof(color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6)              {                  float opacityAmount;                  if (!float.TryParse(opacity' out opacityAmount))                  {                      opacityAmount = 1F;                  }                    opacityByte = (byte)(opacityAmount * 100);              }              else if (color.Length == 8)              {                  if (opacity != null)                  {                      throw new InvalidOperationException("Color cannot contain an ARGB value if the opacity is specified.");                  }                    if (!byte.TryParse(color.Substring(0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte))                  {                      opacityByte = 0xFF;                  }                    color = color.Substring(2);              }              else              {                  throw new ArgumentException(nameof(color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6)              {                  float opacityAmount;                  if (!float.TryParse(opacity' out opacityAmount))                  {                      opacityAmount = 1F;                  }                    opacityByte = (byte)(opacityAmount * 100);              }              else if (color.Length == 8)              {                  if (opacity != null)                  {                      throw new InvalidOperationException("Color cannot contain an ARGB value if the opacity is specified.");                  }                    if (!byte.TryParse(color.Substring(0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte))                  {                      opacityByte = 0xFF;                  }                    color = color.Substring(2);              }              else              {                  throw new ArgumentException(nameof(color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: if (color.Length == 6)              {                  float opacityAmount;                  if (!float.TryParse(opacity' out opacityAmount))                  {                      opacityAmount = 1F;                  }                    opacityByte = (byte)(opacityAmount * 100);              }              else if (color.Length == 8)              {                  if (opacity != null)                  {                      throw new InvalidOperationException("Color cannot contain an ARGB value if the opacity is specified.");                  }                    if (!byte.TryParse(color.Substring(0' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out opacityByte))                  {                      opacityByte = 0xFF;                  }                    color = color.Substring(2);              }              else              {                  throw new ArgumentException(nameof(color)' "Color must be either #AARRGGBB' #RRGGBB' 0xAARRGGBB or 0xRRGGBB");              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: colorARGB = (uint)opacityByte << 24;
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2)              {                  byte colorByte;                  byte.TryParse(color.Substring(i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);                  colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2)              {                  byte colorByte;                  byte.TryParse(color.Substring(i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);                  colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2)              {                  byte colorByte;                  byte.TryParse(color.Substring(i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);                  colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2)              {                  byte colorByte;                  byte.TryParse(color.Substring(i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);                  colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2)              {                  byte colorByte;                  byte.TryParse(color.Substring(i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);                  colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);              }
Magic Number,AltitudeAngelWings,DrawingExtensions,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\DrawingExtensions.cs,ToARGB,The following statement contains a magic number: for (int i = 0; i < 6; i += 2)              {                  byte colorByte;                  byte.TryParse(color.Substring(i' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out colorByte);                  colorARGB |= (uint)colorByte << (((4 - i) / 2) * 8);              }
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: foreach (Feature feature in features)              {                  IOverlay overlay = string.Equals((string) feature.Properties.Get("category")' "airspace")                      ? airOverlay                      : groundOverlay;                    var altitude = ((JObject) feature.Properties.Get("altitudeFloor"))?.ToObject<Altitude>();                    if (altitude == null || altitude.Meters <= 152)                  {                      if (!GroundDataDisplay)                      {                          if (overlay.PolygonExists(feature.Id))                              continue;                      }                  }                  else                  {                      if (!AirDataDisplay)                      {                          continue;                      }                  }                    switch (feature.Geometry.Type)                  {                      case GeoJSONObjectType.Point:                      {                          if (!overlay.PolygonExists(feature.Id))                          {                              var pnt = (Point) feature.Geometry;                                List<PointLatLng> coordinates = new List<PointLatLng>();                                if (feature.Properties.ContainsKey("radius"))                              {                                  var rad = double.Parse(feature.Properties["radius"].ToString());                                    for (int i = 0; i <= 360; i+=10)                                  {                                      coordinates.Add(                                          newpos(new PointLatLng(((Position) pnt.Coordinates).Latitude'                                              ((Position) pnt.Coordinates).Longitude)' i' rad));                                  }                              }                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                          }                      }                          break;                      case GeoJSONObjectType.MultiPoint:                          break;                      case GeoJSONObjectType.LineString:                      {                          if (!overlay.LineExists(feature.Id))                          {                              var line = (LineString) feature.Geometry;                              List<PointLatLng> coordinates = line.Coordinates.OfType<Position>()                                  .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                  .ToList();                              overlay.AddLine(feature.Id' coordinates' new ColorInfo {StrokeColor = 0xFFFF0000}' feature);                          }                      }                          break;                        case GeoJSONObjectType.MultiLineString:                          break;                      case GeoJSONObjectType.Polygon:                      {                          if (!overlay.PolygonExists(feature.Id))                          {                              var poly = (Polygon) feature.Geometry;                              List<PointLatLng> coordinates =                                  poly.Coordinates[0].Coordinates.OfType<Position>()                                      .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                      .ToList();                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                          }                      }                          break;                      case GeoJSONObjectType.MultiPolygon:                          if (!overlay.PolygonExists(feature.Id))                          {                              foreach (var poly in ((MultiPolygon) feature.Geometry).Coordinates)                              {                                  List<PointLatLng> coordinates =                                      poly.Coordinates[0].Coordinates.OfType<Position>()                                          .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                          .ToList();                                    ColorInfo colorInfo = feature.ToColorInfo();                                  colorInfo.StrokeColor = 0xFFFF0000;                                  overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                              }                          }                          break;                      case GeoJSONObjectType.GeometryCollection:                          break;                      case GeoJSONObjectType.Feature:                          break;                      case GeoJSONObjectType.FeatureCollection:                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }              }
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: foreach (Feature feature in features)              {                  IOverlay overlay = string.Equals((string) feature.Properties.Get("category")' "airspace")                      ? airOverlay                      : groundOverlay;                    var altitude = ((JObject) feature.Properties.Get("altitudeFloor"))?.ToObject<Altitude>();                    if (altitude == null || altitude.Meters <= 152)                  {                      if (!GroundDataDisplay)                      {                          if (overlay.PolygonExists(feature.Id))                              continue;                      }                  }                  else                  {                      if (!AirDataDisplay)                      {                          continue;                      }                  }                    switch (feature.Geometry.Type)                  {                      case GeoJSONObjectType.Point:                      {                          if (!overlay.PolygonExists(feature.Id))                          {                              var pnt = (Point) feature.Geometry;                                List<PointLatLng> coordinates = new List<PointLatLng>();                                if (feature.Properties.ContainsKey("radius"))                              {                                  var rad = double.Parse(feature.Properties["radius"].ToString());                                    for (int i = 0; i <= 360; i+=10)                                  {                                      coordinates.Add(                                          newpos(new PointLatLng(((Position) pnt.Coordinates).Latitude'                                              ((Position) pnt.Coordinates).Longitude)' i' rad));                                  }                              }                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                          }                      }                          break;                      case GeoJSONObjectType.MultiPoint:                          break;                      case GeoJSONObjectType.LineString:                      {                          if (!overlay.LineExists(feature.Id))                          {                              var line = (LineString) feature.Geometry;                              List<PointLatLng> coordinates = line.Coordinates.OfType<Position>()                                  .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                  .ToList();                              overlay.AddLine(feature.Id' coordinates' new ColorInfo {StrokeColor = 0xFFFF0000}' feature);                          }                      }                          break;                        case GeoJSONObjectType.MultiLineString:                          break;                      case GeoJSONObjectType.Polygon:                      {                          if (!overlay.PolygonExists(feature.Id))                          {                              var poly = (Polygon) feature.Geometry;                              List<PointLatLng> coordinates =                                  poly.Coordinates[0].Coordinates.OfType<Position>()                                      .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                      .ToList();                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                          }                      }                          break;                      case GeoJSONObjectType.MultiPolygon:                          if (!overlay.PolygonExists(feature.Id))                          {                              foreach (var poly in ((MultiPolygon) feature.Geometry).Coordinates)                              {                                  List<PointLatLng> coordinates =                                      poly.Coordinates[0].Coordinates.OfType<Position>()                                          .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                          .ToList();                                    ColorInfo colorInfo = feature.ToColorInfo();                                  colorInfo.StrokeColor = 0xFFFF0000;                                  overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                              }                          }                          break;                      case GeoJSONObjectType.GeometryCollection:                          break;                      case GeoJSONObjectType.Feature:                          break;                      case GeoJSONObjectType.FeatureCollection:                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }              }
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,ProcessFeatures,The following statement contains a magic number: foreach (Feature feature in features)              {                  IOverlay overlay = string.Equals((string) feature.Properties.Get("category")' "airspace")                      ? airOverlay                      : groundOverlay;                    var altitude = ((JObject) feature.Properties.Get("altitudeFloor"))?.ToObject<Altitude>();                    if (altitude == null || altitude.Meters <= 152)                  {                      if (!GroundDataDisplay)                      {                          if (overlay.PolygonExists(feature.Id))                              continue;                      }                  }                  else                  {                      if (!AirDataDisplay)                      {                          continue;                      }                  }                    switch (feature.Geometry.Type)                  {                      case GeoJSONObjectType.Point:                      {                          if (!overlay.PolygonExists(feature.Id))                          {                              var pnt = (Point) feature.Geometry;                                List<PointLatLng> coordinates = new List<PointLatLng>();                                if (feature.Properties.ContainsKey("radius"))                              {                                  var rad = double.Parse(feature.Properties["radius"].ToString());                                    for (int i = 0; i <= 360; i+=10)                                  {                                      coordinates.Add(                                          newpos(new PointLatLng(((Position) pnt.Coordinates).Latitude'                                              ((Position) pnt.Coordinates).Longitude)' i' rad));                                  }                              }                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                          }                      }                          break;                      case GeoJSONObjectType.MultiPoint:                          break;                      case GeoJSONObjectType.LineString:                      {                          if (!overlay.LineExists(feature.Id))                          {                              var line = (LineString) feature.Geometry;                              List<PointLatLng> coordinates = line.Coordinates.OfType<Position>()                                  .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                  .ToList();                              overlay.AddLine(feature.Id' coordinates' new ColorInfo {StrokeColor = 0xFFFF0000}' feature);                          }                      }                          break;                        case GeoJSONObjectType.MultiLineString:                          break;                      case GeoJSONObjectType.Polygon:                      {                          if (!overlay.PolygonExists(feature.Id))                          {                              var poly = (Polygon) feature.Geometry;                              List<PointLatLng> coordinates =                                  poly.Coordinates[0].Coordinates.OfType<Position>()                                      .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                      .ToList();                                ColorInfo colorInfo = feature.ToColorInfo();                              colorInfo.StrokeColor = 0xFFFF0000;                              overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                          }                      }                          break;                      case GeoJSONObjectType.MultiPolygon:                          if (!overlay.PolygonExists(feature.Id))                          {                              foreach (var poly in ((MultiPolygon) feature.Geometry).Coordinates)                              {                                  List<PointLatLng> coordinates =                                      poly.Coordinates[0].Coordinates.OfType<Position>()                                          .Select(c => new PointLatLng(c.Latitude' c.Longitude))                                          .ToList();                                    ColorInfo colorInfo = feature.ToColorInfo();                                  colorInfo.StrokeColor = 0xFFFF0000;                                  overlay.AddPolygon(feature.Id' coordinates' colorInfo' feature);                              }                          }                          break;                      case GeoJSONObjectType.GeometryCollection:                          break;                      case GeoJSONObjectType.Feature:                          break;                      case GeoJSONObjectType.FeatureCollection:                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }              }
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,newpos,The following statement contains a magic number: const double rad2deg = (180 / Math.PI);
Magic Number,AltitudeAngelWings.Service,AltitudeAngelService,C:\repos\diydrones_MissionPlanner\ExtLibs\AltitudeAngelWings\Service\AltitudeAngelService.cs,newpos,The following statement contains a magic number: double radius_of_earth = 6378100.0;
