Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,Cyclomatic complexity of the method is 10
Empty Catch Block,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The method has an empty catch block.
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Location = new System.Drawing.Point(299' 39);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Location = new System.Drawing.Point(299' 39);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 35);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 35);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(281' 96);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(281' 96);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(281' 20);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(281' 20);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 2;
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Location = new System.Drawing.Point(299' 10);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Location = new System.Drawing.Point(299' 10);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.TabIndex = 3;
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Location = new System.Drawing.Point(300' 69);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Location = new System.Drawing.Point(300' 69);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Size = new System.Drawing.Size(55' 17);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Size = new System.Drawing.Size(55' 17);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.TabIndex = 4;
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Location = new System.Drawing.Point(299' 92);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Location = new System.Drawing.Point(299' 92);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Size = new System.Drawing.Size(47' 17);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Size = new System.Drawing.Size(47' 17);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.TabIndex = 5;
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Location = new System.Drawing.Point(300' 115);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Location = new System.Drawing.Point(300' 115);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Size = new System.Drawing.Size(57' 17);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Size = new System.Drawing.Size(57' 17);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.TabIndex = 6;
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(382' 140);
Magic Number,Installer,Installer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(382' 140);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,expireCache,The following statement contains a magic number: var uridates = _instances.Where(a =>                      {                          return a._uri == downloadStream._uri && a._lastread < DateTime.Now.AddSeconds(-180);                      });
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize = 1024 * 2;
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize = 1024 * 2;
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize < 1024 * 2
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getAllData,The following statement contains a magic number: chunksize < 1024 * 2
Magic Number,MissionPlanner.Utilities,DownloadStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,GetChunk,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: request.Timeout = 10000;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: byte[] buf1 = new byte[1024];
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: var percent = ((got / (float)contlen) * 100.0f);
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The following statement contains a magic number: webRequest.Timeout = 10000;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: chunkSize = 1024 * 1024 * 10;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: chunkSize = 1024 * 1024 * 10;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: chunkSize = 1024 * 1024 * 10;
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: Parallel.ForEach(LongRange(0' 1 + size / chunkSize)' new ParallelOptions { MaxDegreeOfParallelism = 3 }' (start) =>                  {                      HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                      if (!String.IsNullOrEmpty(Settings.Instance.UserAgent))                          ((HttpWebRequest)request).UserAgent = Settings.Instance.UserAgent;                      var minrange = start * chunkSize;                      var maxrange = Math.Min(start * chunkSize + chunkSize - 1' size);                      request.AddRange(minrange' maxrange);                      log.Info(String.Format("chunk {0} {1} {2}-{3}"' start' uri' minrange' maxrange));                      HttpWebResponse response = (HttpWebResponse)request.GetResponse();                        log.Info(start + " " + uri + " " + response.StatusCode + " " + response.ContentLength);                        if (response.StatusCode != HttpStatusCode.PartialContent && start != 0)                      {                          // fallback to single connection;                          response.Close();                          return;                      }                        using (Stream stream = response.GetResponseStream())                      {                          byte[] array = new byte[1024 * 80];                          int count;                          while ((count = stream.Read(array' 0' array.Length)) != 0)                          {                              lock (syncObject)                              {                                  file.Seek(minrange' SeekOrigin.Begin);                                  file.Write(array' 0' count);                                  got += count;                                  minrange += count;                                  var elapsed = (DateTime.Now - starttime).TotalSeconds;                                  var percent = ((got / (float) size) * 100.0f);                                  if (lastupdate.Second != DateTime.Now.Second)                                  {                                      lastupdate = DateTime.Now;                                      Console.WriteLine("{0} bps {1} {2}s {3}% of {4}     \r"' got / elapsed' got' elapsed'                                          percent' size);                                      var timeleft = TimeSpan.FromSeconds(((elapsed / percent) * (100 - percent)));                                      status?.Invoke((int) percent'                                          "Downloading.. ETA: " +                                         //DateTime.Now.AddSeconds(((elapsed / percent) * (100 - percent))).ToShortTimeString()                                          formatTimeSpan(timeleft)                                          );                                  }                              }                          }                      }                  });
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,ParallelDownloadFile,The following statement contains a magic number: status?.Invoke(100' "Complete");
Magic Number,MissionPlanner.Utilities,Download,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,formatTimeSpan,The following statement contains a magic number: timeleft.TotalSeconds >= 60
