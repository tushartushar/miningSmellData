Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The method has an empty catch block.
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: if (Download.getFilefromNet(md5s' checkfile))              {                  List<string> filestoget = new List<string>();                  var sums = File.ReadAllLines(checkfile);                  Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });                    DownloadStream ds = new DownloadStream(zip);                    // length / 100 = part size                  // part size rounded to closest 100kb                  ds.chunksize = (int) (Math.Floor((ds.Length/100.0) / 100000.0) * 100000.0);                    Console.WriteLine("chunk size {0}"' ds.chunksize);                    int got = 0;                  using (ZipArchive zip = new ZipArchive(ds))                  {                      foreach (var file in filestoget)                      {                          var entry = zip.GetEntry(file);                          UpdateText(String.Format("Getting {0}\nFile {1} of {2}\nCompressed size {3}\nSize {4}"' file' got' filestoget.Count'                              entry?.CompressedLength' entry?.Length));                          var output = tmp + file.Replace('/'' '\\');                          var dir = Path.GetDirectoryName(output);                          if (!Directory.Exists(dir))                              Directory.CreateDirectory(dir);                            await Task.Run(() => { entry.ExtractToFile(output' true); });                          got++;                      }                  }                    UpdateText("Done");                    //certutil -addstore "Root" signed.cer                  this.Invoke((Action) delegate()                  {                      but_Start.Enabled = true;                  });              }              else              {                  MessageBox.Show("Failed to get checksum file");              }
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: if (Download.getFilefromNet(md5s' checkfile))              {                  List<string> filestoget = new List<string>();                  var sums = File.ReadAllLines(checkfile);                  Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });                    DownloadStream ds = new DownloadStream(zip);                    // length / 100 = part size                  // part size rounded to closest 100kb                  ds.chunksize = (int) (Math.Floor((ds.Length/100.0) / 100000.0) * 100000.0);                    Console.WriteLine("chunk size {0}"' ds.chunksize);                    int got = 0;                  using (ZipArchive zip = new ZipArchive(ds))                  {                      foreach (var file in filestoget)                      {                          var entry = zip.GetEntry(file);                          UpdateText(String.Format("Getting {0}\nFile {1} of {2}\nCompressed size {3}\nSize {4}"' file' got' filestoget.Count'                              entry?.CompressedLength' entry?.Length));                          var output = tmp + file.Replace('/'' '\\');                          var dir = Path.GetDirectoryName(output);                          if (!Directory.Exists(dir))                              Directory.CreateDirectory(dir);                            await Task.Run(() => { entry.ExtractToFile(output' true); });                          got++;                      }                  }                    UpdateText("Done");                    //certutil -addstore "Root" signed.cer                  this.Invoke((Action) delegate()                  {                      but_Start.Enabled = true;                  });              }              else              {                  MessageBox.Show("Failed to get checksum file");              }
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: if (Download.getFilefromNet(md5s' checkfile))              {                  List<string> filestoget = new List<string>();                  var sums = File.ReadAllLines(checkfile);                  Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });                    DownloadStream ds = new DownloadStream(zip);                    // length / 100 = part size                  // part size rounded to closest 100kb                  ds.chunksize = (int) (Math.Floor((ds.Length/100.0) / 100000.0) * 100000.0);                    Console.WriteLine("chunk size {0}"' ds.chunksize);                    int got = 0;                  using (ZipArchive zip = new ZipArchive(ds))                  {                      foreach (var file in filestoget)                      {                          var entry = zip.GetEntry(file);                          UpdateText(String.Format("Getting {0}\nFile {1} of {2}\nCompressed size {3}\nSize {4}"' file' got' filestoget.Count'                              entry?.CompressedLength' entry?.Length));                          var output = tmp + file.Replace('/'' '\\');                          var dir = Path.GetDirectoryName(output);                          if (!Directory.Exists(dir))                              Directory.CreateDirectory(dir);                            await Task.Run(() => { entry.ExtractToFile(output' true); });                          got++;                      }                  }                    UpdateText("Done");                    //certutil -addstore "Root" signed.cer                  this.Invoke((Action) delegate()                  {                      but_Start.Enabled = true;                  });              }              else              {                  MessageBox.Show("Failed to get checksum file");              }
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: if (Download.getFilefromNet(md5s' checkfile))              {                  List<string> filestoget = new List<string>();                  var sums = File.ReadAllLines(checkfile);                  Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });                    DownloadStream ds = new DownloadStream(zip);                    // length / 100 = part size                  // part size rounded to closest 100kb                  ds.chunksize = (int) (Math.Floor((ds.Length/100.0) / 100000.0) * 100000.0);                    Console.WriteLine("chunk size {0}"' ds.chunksize);                    int got = 0;                  using (ZipArchive zip = new ZipArchive(ds))                  {                      foreach (var file in filestoget)                      {                          var entry = zip.GetEntry(file);                          UpdateText(String.Format("Getting {0}\nFile {1} of {2}\nCompressed size {3}\nSize {4}"' file' got' filestoget.Count'                              entry?.CompressedLength' entry?.Length));                          var output = tmp + file.Replace('/'' '\\');                          var dir = Path.GetDirectoryName(output);                          if (!Directory.Exists(dir))                              Directory.CreateDirectory(dir);                            await Task.Run(() => { entry.ExtractToFile(output' true); });                          got++;                      }                  }                    UpdateText("Done");                    //certutil -addstore "Root" signed.cer                  this.Invoke((Action) delegate()                  {                      but_Start.Enabled = true;                  });              }              else              {                  MessageBox.Show("Failed to get checksum file");              }
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: if (Download.getFilefromNet(md5s' checkfile))              {                  List<string> filestoget = new List<string>();                  var sums = File.ReadAllLines(checkfile);                  Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });                    DownloadStream ds = new DownloadStream(zip);                    // length / 100 = part size                  // part size rounded to closest 100kb                  ds.chunksize = (int) (Math.Floor((ds.Length/100.0) / 100000.0) * 100000.0);                    Console.WriteLine("chunk size {0}"' ds.chunksize);                    int got = 0;                  using (ZipArchive zip = new ZipArchive(ds))                  {                      foreach (var file in filestoget)                      {                          var entry = zip.GetEntry(file);                          UpdateText(String.Format("Getting {0}\nFile {1} of {2}\nCompressed size {3}\nSize {4}"' file' got' filestoget.Count'                              entry?.CompressedLength' entry?.Length));                          var output = tmp + file.Replace('/'' '\\');                          var dir = Path.GetDirectoryName(output);                          if (!Directory.Exists(dir))                              Directory.CreateDirectory(dir);                            await Task.Run(() => { entry.ExtractToFile(output' true); });                          got++;                      }                  }                    UpdateText("Done");                    //certutil -addstore "Root" signed.cer                  this.Invoke((Action) delegate()                  {                      but_Start.Enabled = true;                  });              }              else              {                  MessageBox.Show("Failed to get checksum file");              }
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,start_dowork,The following statement contains a magic number: if (Download.getFilefromNet(md5s' checkfile))              {                  List<string> filestoget = new List<string>();                  var sums = File.ReadAllLines(checkfile);                  Parallel.ForEach(sums' sum =>                  {                      var match = regex.Match(sum);                      if (match.Success)                      {                          var file = tmp + match.Groups[2].Value;                          if (File.Exists(file))                          {                              if (!MD5File(file' match.Groups[1].Value))                              {                                  lock (filestoget)                                      filestoget.Add(match.Groups[2].Value);                              }                          }                          else                          {                              lock (filestoget)                                  filestoget.Add(match.Groups[2].Value);                          }                      }                  });                    DownloadStream ds = new DownloadStream(zip);                    // length / 100 = part size                  // part size rounded to closest 100kb                  ds.chunksize = (int) (Math.Floor((ds.Length/100.0) / 100000.0) * 100000.0);                    Console.WriteLine("chunk size {0}"' ds.chunksize);                    int got = 0;                  using (ZipArchive zip = new ZipArchive(ds))                  {                      foreach (var file in filestoget)                      {                          var entry = zip.GetEntry(file);                          UpdateText(String.Format("Getting {0}\nFile {1} of {2}\nCompressed size {3}\nSize {4}"' file' got' filestoget.Count'                              entry?.CompressedLength' entry?.Length));                          var output = tmp + file.Replace('/'' '\\');                          var dir = Path.GetDirectoryName(output);                          if (!Directory.Exists(dir))                              Directory.CreateDirectory(dir);                            await Task.Run(() => { entry.ExtractToFile(output' true); });                          got++;                      }                  }                    UpdateText("Done");                    //certutil -addstore "Root" signed.cer                  this.Invoke((Action) delegate()                  {                      but_Start.Enabled = true;                  });              }              else              {                  MessageBox.Show("Failed to get checksum file");              }
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Location = new System.Drawing.Point(299' 39);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Location = new System.Drawing.Point(299' 39);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_Start.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 35);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 35);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(281' 96);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(281' 96);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(281' 20);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(281' 20);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 2;
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Location = new System.Drawing.Point(299' 10);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Location = new System.Drawing.Point(299' 10);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.Size = new System.Drawing.Size(75' 23);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.but_folder.TabIndex = 3;
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Location = new System.Drawing.Point(300' 69);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Location = new System.Drawing.Point(300' 69);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Size = new System.Drawing.Size(55' 17);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Size = new System.Drawing.Size(55' 17);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.TabIndex = 4;
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Location = new System.Drawing.Point(299' 92);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Location = new System.Drawing.Point(299' 92);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Size = new System.Drawing.Size(47' 17);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Size = new System.Drawing.Size(47' 17);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.TabIndex = 5;
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Location = new System.Drawing.Point(300' 115);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Location = new System.Drawing.Point(300' 115);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Size = new System.Drawing.Size(57' 17);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Size = new System.Drawing.Size(57' 17);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.TabIndex = 6;
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(382' 140);
Magic Number,Installer,Installer,C:\repos\diydrones_MissionPlanner\ExtLibs\Installer\Installer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(382' 140);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,expireCache,The following statement contains a magic number: lock (_lock)              {                  foreach (var downloadStream in _instances.ToArray())                  {                      // only process a uri once                      if (seen.Contains(downloadStream._uri))                          continue;                      seen.Add(downloadStream._uri);                        // total instances with this uri                      var uris = _instances.Where(a => { return a._uri == downloadStream._uri; });                      // total instance with thsi uri and old lastread                      var uridates = _instances.Where(a =>                      {                          return a._uri == downloadStream._uri && a._lastread < DateTime.Now.AddSeconds(-180);                      });                        // check if they are equal and expire                      if (uris.Count() == uridates.Count())                      {                          _cacheChunks.Remove(downloadStream._uri);                          foreach (var uridate in uridates.ToArray())                          {                              _instances.Remove(uridate);                          }                      }                  }              }
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      new System.Net.Security.RemoteCertificateValidationCallback(                          (sender' certificate' chain' policyErrors) => { return true; });                    log.Info(url);                  // Create a request using a URL that can receive a post.                   WebRequest request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse)response).StatusDescription);                  if (((HttpWebResponse)response).StatusCode != HttpStatusCode.OK)                      return false;                    if (File.Exists(saveto))                  {                      DateTime lastfilewrite = new FileInfo(saveto).LastWriteTime;                      DateTime lasthttpmod = ((HttpWebResponse)response).LastModified;                        if (lasthttpmod < lastfilewrite)                      {                          if (((HttpWebResponse)response).ContentLength == new FileInfo(saveto).Length)                          {                              log.Info("got LastModified " + saveto + " " + ((HttpWebResponse)response).LastModified +                                       " vs " + new FileInfo(saveto).LastWriteTime);                              response.Close();                              return true;                          }                      }                  }                    // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    long bytes = response.ContentLength;                  long contlen = bytes;                    byte[] buf1 = new byte[1024];                    if (!Directory.Exists(Path.GetDirectoryName(saveto)))                      Directory.CreateDirectory(Path.GetDirectoryName(saveto));                    FileStream fs = new FileStream(saveto + ".new"' FileMode.Create);                    DateTime dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      log.Debug(saveto + " " + bytes);                      int len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex.ToString());                  return false;              }
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      new System.Net.Security.RemoteCertificateValidationCallback(                          (sender' certificate' chain' policyErrors) => { return true; });                    log.Info(url);                  // Create a request using a URL that can receive a post.                   WebRequest request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse)response).StatusDescription);                  if (((HttpWebResponse)response).StatusCode != HttpStatusCode.OK)                      return false;                    if (File.Exists(saveto))                  {                      DateTime lastfilewrite = new FileInfo(saveto).LastWriteTime;                      DateTime lasthttpmod = ((HttpWebResponse)response).LastModified;                        if (lasthttpmod < lastfilewrite)                      {                          if (((HttpWebResponse)response).ContentLength == new FileInfo(saveto).Length)                          {                              log.Info("got LastModified " + saveto + " " + ((HttpWebResponse)response).LastModified +                                       " vs " + new FileInfo(saveto).LastWriteTime);                              response.Close();                              return true;                          }                      }                  }                    // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    long bytes = response.ContentLength;                  long contlen = bytes;                    byte[] buf1 = new byte[1024];                    if (!Directory.Exists(Path.GetDirectoryName(saveto)))                      Directory.CreateDirectory(Path.GetDirectoryName(saveto));                    FileStream fs = new FileStream(saveto + ".new"' FileMode.Create);                    DateTime dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      log.Debug(saveto + " " + bytes);                      int len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex.ToString());                  return false;              }
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The following statement contains a magic number: webRequest.Timeout = 1200;
