Implementation smell,Namespace,Class,File,Method,Description
Long Method,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The method has 100 lines of code.
Complex Method,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,Cyclomatic complexity of the method is 15
Complex Method,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,Cyclomatic complexity of the method is 9
Complex Method,GDAL,OGR,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\Ogr.cs,ProcessGeometry,Cyclomatic complexity of the method is 11
Complex Method,GDAL,OGR,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\Ogr.cs,ReportFeature,Cyclomatic complexity of the method is 13
Long Parameter List,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The method has 6 parameters. Parameters: lng1' lat1' lng2' lat2' width' height
Long Parameter List,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,map,The method has 5 parameters. Parameters: x' in_min' in_max' out_min' out_max
Long Parameter List,GDAL,GeoBitmap,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GeoBitmap,The method has 8 parameters. Parameters: file' resolution' rasterXSize' rasterYSize' Left' Top' Right' Bottom
Long Statement,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The length of the statement  "                        //Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0); " is 167.
Long Statement,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The length of the statement  "            //rasterizeOptions = new string[] { "ALL_TOUCHED=TRUE"' "ATTRIBUTE=" + fieldName }; //To set all touched pixels into raster pixel   " is 129.
Long Statement,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The length of the statement  "            //Gdal.RasterizeLayer(myDataset' 1' bandlist' layer' IntPtr.Zero' IntPtr.Zero' 1' burnValues' null' null' null); // To burn the given burn values instead of feature attributes   " is 175.
Long Statement,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The length of the statement  "            Gdal.RasterizeLayer(myDataset' 1' bandlist' layer' IntPtr.Zero' IntPtr.Zero' 1' burnValues' rasterizeOptions' new Gdal.GDALProgressFuncDelegate(ProgressFunc)' "Raster conversion"); " is 180.
Long Statement,GDAL,GDALProvider,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDALProvider.cs,GetTileImage,The length of the statement  "            var bmp = GDAL.GetBitmap(p1.Lng' p1.Lat' p2.Lng' p2.Lat' GDALProvider.Instance.Projection.TileSize.Width' GDALProvider.Instance.Projection.TileSize.Height); " is 156.
Complex Conditional,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The conditional expression  "rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0"  is complex.
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,ScanDirectory,The following statement contains a magic number: new FileInfo(file).Length < 1024 * 1
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: log.InfoFormat("  Center (" + GDALInfoGetPosition(ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: log.InfoFormat("  Center (" + GDALInfoGetPosition(ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: double[] transform = new double[6];
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: i < 6
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: image.Resolution < (res / 3)
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: a >= 50
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: double[] adfGeoTransform = new double[6];
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoX = adfGeoTransform[0] + adfGeoTransform[1] * x + adfGeoTransform[2] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoY = adfGeoTransform[3] + adfGeoTransform[4] * x + adfGeoTransform[5] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoY = adfGeoTransform[3] + adfGeoTransform[4] * x + adfGeoTransform[5] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoY = adfGeoTransform[3] + adfGeoTransform[4] * x + adfGeoTransform[5] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: double[] adfGeoTransform = new double[6];
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoX = adfGeoTransform[0] + adfGeoTransform[1] * x + adfGeoTransform[2] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoY = adfGeoTransform[3] + adfGeoTransform[4] * x + adfGeoTransform[5] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoY = adfGeoTransform[3] + adfGeoTransform[4] * x + adfGeoTransform[5] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoY = adfGeoTransform[3] + adfGeoTransform[4] * x + adfGeoTransform[5] * y;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The following statement contains a magic number: const double noDataValue = -9999;
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The following statement contains a magic number: double[] burnValues = new double[] { 10.0 };
Magic Number,GDAL,GDAL,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,ProgressFunc,The following statement contains a magic number: Console.Write("Processing ... " + complete * 100 + "% Completed.");
Magic Number,GDAL,GDALProvider,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\GDALProvider.cs,GDALProvider,The following statement contains a magic number: MaxZoom = 24;
Magic Number,GDAL,OGR,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\Ogr.cs,ProcessGeometry,The following statement contains a magic number: switch ((wkbGeometryType)((int)GeometryType & 0xffff))              {                  case wkbGeometryType.wkbUnknown:                      break;                  case wkbGeometryType.wkbPoint:                      var pnt = new double[3];                      geom.GetPoint(0' pnt);                      NewPoint?.Invoke(new point(pnt));                      break;                  case wkbGeometryType.wkbLineString:                      {                          List<point> ls = new List<point>();                          var pointcount = geom.GetPointCount();                          for (int p = 0; p < pointcount; p++)                          {                              double[] pnt2 = new double[3];                              geom.GetPoint(p' pnt2);                              ls.Add(pnt2);                          }                            NewLineString?.Invoke(ls);                          break;                      }                  case wkbGeometryType.wkbPolygon:                      {                          List<point> poly = new List<point>();                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              var geom2 = geom.GetGeometryRef(i);                              var pointcount1 = geom2.GetPointCount();                              for (int p = 0; p < pointcount1; p++)                              {                                  double[] pnt2 = new double[3];                                  geom2.GetPoint(p' pnt2);                                  poly.Add(pnt2);                              }                                NewPolygon?.Invoke(poly);                          }                            break;                      }                  case wkbGeometryType.wkbMultiPoint:                  case wkbGeometryType.wkbMultiLineString:                  case wkbGeometryType.wkbMultiPolygon:                  case wkbGeometryType.wkbGeometryCollection:                  case wkbGeometryType.wkbLinearRing:                      {                          Geometry sub_geom;                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              sub_geom = geom.GetGeometryRef(i);                              ProcessGeometry(sub_geom);                          }                            break;                      }                  case wkbGeometryType.wkbNone:                        break;              }
Magic Number,GDAL,OGR,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\Ogr.cs,ProcessGeometry,The following statement contains a magic number: switch ((wkbGeometryType)((int)GeometryType & 0xffff))              {                  case wkbGeometryType.wkbUnknown:                      break;                  case wkbGeometryType.wkbPoint:                      var pnt = new double[3];                      geom.GetPoint(0' pnt);                      NewPoint?.Invoke(new point(pnt));                      break;                  case wkbGeometryType.wkbLineString:                      {                          List<point> ls = new List<point>();                          var pointcount = geom.GetPointCount();                          for (int p = 0; p < pointcount; p++)                          {                              double[] pnt2 = new double[3];                              geom.GetPoint(p' pnt2);                              ls.Add(pnt2);                          }                            NewLineString?.Invoke(ls);                          break;                      }                  case wkbGeometryType.wkbPolygon:                      {                          List<point> poly = new List<point>();                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              var geom2 = geom.GetGeometryRef(i);                              var pointcount1 = geom2.GetPointCount();                              for (int p = 0; p < pointcount1; p++)                              {                                  double[] pnt2 = new double[3];                                  geom2.GetPoint(p' pnt2);                                  poly.Add(pnt2);                              }                                NewPolygon?.Invoke(poly);                          }                            break;                      }                  case wkbGeometryType.wkbMultiPoint:                  case wkbGeometryType.wkbMultiLineString:                  case wkbGeometryType.wkbMultiPolygon:                  case wkbGeometryType.wkbGeometryCollection:                  case wkbGeometryType.wkbLinearRing:                      {                          Geometry sub_geom;                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              sub_geom = geom.GetGeometryRef(i);                              ProcessGeometry(sub_geom);                          }                            break;                      }                  case wkbGeometryType.wkbNone:                        break;              }
Magic Number,GDAL,OGR,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\Ogr.cs,ProcessGeometry,The following statement contains a magic number: switch ((wkbGeometryType)((int)GeometryType & 0xffff))              {                  case wkbGeometryType.wkbUnknown:                      break;                  case wkbGeometryType.wkbPoint:                      var pnt = new double[3];                      geom.GetPoint(0' pnt);                      NewPoint?.Invoke(new point(pnt));                      break;                  case wkbGeometryType.wkbLineString:                      {                          List<point> ls = new List<point>();                          var pointcount = geom.GetPointCount();                          for (int p = 0; p < pointcount; p++)                          {                              double[] pnt2 = new double[3];                              geom.GetPoint(p' pnt2);                              ls.Add(pnt2);                          }                            NewLineString?.Invoke(ls);                          break;                      }                  case wkbGeometryType.wkbPolygon:                      {                          List<point> poly = new List<point>();                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              var geom2 = geom.GetGeometryRef(i);                              var pointcount1 = geom2.GetPointCount();                              for (int p = 0; p < pointcount1; p++)                              {                                  double[] pnt2 = new double[3];                                  geom2.GetPoint(p' pnt2);                                  poly.Add(pnt2);                              }                                NewPolygon?.Invoke(poly);                          }                            break;                      }                  case wkbGeometryType.wkbMultiPoint:                  case wkbGeometryType.wkbMultiLineString:                  case wkbGeometryType.wkbMultiPolygon:                  case wkbGeometryType.wkbGeometryCollection:                  case wkbGeometryType.wkbLinearRing:                      {                          Geometry sub_geom;                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              sub_geom = geom.GetGeometryRef(i);                              ProcessGeometry(sub_geom);                          }                            break;                      }                  case wkbGeometryType.wkbNone:                        break;              }
Magic Number,GDAL,point,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\point.cs,point,The following statement contains a magic number: this.z = pnt[2];
Missing Default,GDAL,OGR,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\GDAL\Ogr.cs,ProcessGeometry,The following switch statement is missing a default case: switch ((wkbGeometryType)((int)GeometryType & 0xffff))              {                  case wkbGeometryType.wkbUnknown:                      break;                  case wkbGeometryType.wkbPoint:                      var pnt = new double[3];                      geom.GetPoint(0' pnt);                      NewPoint?.Invoke(new point(pnt));                      break;                  case wkbGeometryType.wkbLineString:                      {                          List<point> ls = new List<point>();                          var pointcount = geom.GetPointCount();                          for (int p = 0; p < pointcount; p++)                          {                              double[] pnt2 = new double[3];                              geom.GetPoint(p' pnt2);                              ls.Add(pnt2);                          }                            NewLineString?.Invoke(ls);                          break;                      }                  case wkbGeometryType.wkbPolygon:                      {                          List<point> poly = new List<point>();                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              var geom2 = geom.GetGeometryRef(i);                              var pointcount1 = geom2.GetPointCount();                              for (int p = 0; p < pointcount1; p++)                              {                                  double[] pnt2 = new double[3];                                  geom2.GetPoint(p' pnt2);                                  poly.Add(pnt2);                              }                                NewPolygon?.Invoke(poly);                          }                            break;                      }                  case wkbGeometryType.wkbMultiPoint:                  case wkbGeometryType.wkbMultiLineString:                  case wkbGeometryType.wkbMultiPolygon:                  case wkbGeometryType.wkbGeometryCollection:                  case wkbGeometryType.wkbLinearRing:                      {                          Geometry sub_geom;                          for (int i = 0; i < geom.GetGeometryCount(); i++)                          {                              sub_geom = geom.GetGeometryRef(i);                              ProcessGeometry(sub_geom);                          }                            break;                      }                  case wkbGeometryType.wkbNone:                        break;              }
