Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,Cyclomatic complexity of the method is 18
Complex Method,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,Cyclomatic complexity of the method is 9
Long Parameter List,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The method has 6 parameters.
Long Parameter List,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,map,The method has 5 parameters.
Long Statement,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The length of the statement  "				log.InfoFormat ("          (" + GCPs [i].GCPPixel + "'" + GCPs [i].GCPLine + ") -> (" + GCPs [i].GCPX + "'" + GCPs [i].GCPY + "'" + GCPs [i].GCPZ + ")"); " is 153.
Long Statement,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The length of the statement  "				//Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0); " is 167.
Long Statement,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImage,The length of the statement  "			BitmapData bitmapData = bitmap.LockBits (new Rectangle (0' 0' ds.RasterXSize' ds.RasterYSize)' ImageLockMode.ReadWrite' PixelFormat.Format8bppIndexed); " is 151.
Long Statement,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImage,The length of the statement  "				band.ReadRaster (0' 0' ds.RasterXSize' ds.RasterYSize' buf' ds.RasterXSize' ds.RasterYSize' DataType.GDT_Byte' 1' stride); " is 122.
Long Statement,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The length of the statement  "	//rasterizeOptions = new string[] { "ALL_TOUCHED=TRUE"' "ATTRIBUTE=" + fieldName }; //To set all touched pixels into raster pixel   " is 129.
Long Statement,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The length of the statement  "	//Gdal.RasterizeLayer(myDataset' 1' bandlist' layer' IntPtr.Zero' IntPtr.Zero' 1' burnValues' null' null' null); // To burn the given burn values instead of feature attributes   " is 175.
Long Statement,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Rasterize,The length of the statement  "	Gdal.RasterizeLayer (myDataset' 1' bandlist' layer' IntPtr.Zero' IntPtr.Zero' 1' burnValues' rasterizeOptions' new Gdal.GDALProgressFuncDelegate (ProgressFunc)' "Raster conversion"); " is 182.
Long Statement,GDAL,GDALProvider,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDALProvider.cs,GetTileImage,The length of the statement  "	var bmp = GDAL.GetBitmap (p1.Lng' p1.Lat' p2.Lng' p2.Lat' GDALProvider.Instance.Projection.TileSize.Width' GDALProvider.Instance.Projection.TileSize.Height); " is 157.
Complex Conditional,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The conditional expression  "rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0"  is complex.
Magic Number,GDAL,GdalConfiguration,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GdalConfiguration.cs,GetPlatform,The following statement contains a magic number: return IntPtr.Size == 4 ? "x86" : "x64";  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,ScanDirectory,The following statement contains a magic number: foreach (var file in files) {  	i++;  	try {  		// 1kb file check  		if (new FileInfo (file).Length < 1024 * 1)  			continue;  		if (OnProgress != null)  			OnProgress ((i - 1) / (double)files.Length' file);  		var info = GDAL.LoadImageInfo (file);  		_cache.Add (info);  	} catch (Exception ex) {  		log.Error (ex);  	}  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,ScanDirectory,The following statement contains a magic number: try {  	// 1kb file check  	if (new FileInfo (file).Length < 1024 * 1)  		continue;  	if (OnProgress != null)  		OnProgress ((i - 1) / (double)files.Length' file);  	var info = GDAL.LoadImageInfo (file);  	_cache.Add (info);  } catch (Exception ex) {  	log.Error (ex);  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,ScanDirectory,The following statement contains a magic number: if (new FileInfo (file).Length < 1024 * 1)  	continue;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: using (var ds = OSGeo.GDAL.Gdal.Open (file' OSGeo.GDAL.Access.GA_ReadOnly)) {  	log.InfoFormat ("Raster dataset parameters:");  	log.InfoFormat ("  Projection: " + ds.GetProjectionRef ());  	log.InfoFormat ("  RasterCount: " + ds.RasterCount);  	log.InfoFormat ("  RasterSize (" + ds.RasterXSize + "'" + ds.RasterYSize + ")");  	OSGeo.GDAL.Driver drv = ds.GetDriver ();  	log.InfoFormat ("Using driver " + drv.LongName);  	string[] metadata = ds.GetMetadata ("");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			// log.InfoFormat("    " + iMeta + ":  " + metadata[iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("IMAGE_STRUCTURE");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Image Structure Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("SUBDATASETS");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Subdatasets:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("GEOLOCATION");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Geolocation:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	log.InfoFormat ("Corner Coordinates:");  	log.InfoFormat ("  Upper Left (" + GDALInfoGetPosition (ds' 0.0' 0.0) + ")");  	log.InfoFormat ("  Lower Left (" + GDALInfoGetPosition (ds' 0.0' ds.RasterYSize) + ")");  	log.InfoFormat ("  Upper Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' 0.0) + ")");  	log.InfoFormat ("  Lower Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' ds.RasterYSize) + ")");  	log.InfoFormat ("  Center (" + GDALInfoGetPosition (ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");  	log.InfoFormat ("");  	string projection = ds.GetProjectionRef ();  	if (projection != null) {  		SpatialReference srs = new SpatialReference (null);  		if (srs.ImportFromWkt (ref projection) == 0) {  			string wkt;  			srs.ExportToPrettyWkt (out wkt' 0);  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (wkt);  		} else {  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (projection);  		}  	}  	if (ds.GetGCPCount () > 0) {  		log.InfoFormat ("GCP Projection: "' ds.GetGCPProjection ());  		GCP[] GCPs = ds.GetGCPs ();  		for (int i = 0; i < ds.GetGCPCount (); i++) {  			log.InfoFormat ("GCP[" + i + "]: Id=" + GCPs [i].Id + "' Info=" + GCPs [i].Info);  			log.InfoFormat ("          (" + GCPs [i].GCPPixel + "'" + GCPs [i].GCPLine + ") -> (" + GCPs [i].GCPX + "'" + GCPs [i].GCPY + "'" + GCPs [i].GCPZ + ")");  			log.InfoFormat ("");  		}  		log.InfoFormat ("");  		double[] transform = new double[6];  		Gdal.GCPsToGeoTransform (GCPs' transform' 0);  		log.InfoFormat ("GCP Equivalent geotransformation parameters: "' ds.GetGCPProjection ());  		for (int i = 0; i < 6; i++)  			log.InfoFormat ("t[" + i + "] = " + transform [i].ToString ());  		log.InfoFormat ("");  	}  	var TL = GDALInfoGetPositionDouble (ds' 0.0' 0.0);  	var BR = GDALInfoGetPositionDouble (ds' ds.RasterXSize' ds.RasterYSize);  	var resolution = Math.Abs (BR [0] - TL [0]) / ds.RasterXSize;  	if (resolution == 1)  		throw new Exception ("Invalid coords");  	return new GeoBitmap (file' resolution' ds.RasterXSize' ds.RasterYSize' TL [0]' TL [1]' BR [0]' BR [1]);  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: using (var ds = OSGeo.GDAL.Gdal.Open (file' OSGeo.GDAL.Access.GA_ReadOnly)) {  	log.InfoFormat ("Raster dataset parameters:");  	log.InfoFormat ("  Projection: " + ds.GetProjectionRef ());  	log.InfoFormat ("  RasterCount: " + ds.RasterCount);  	log.InfoFormat ("  RasterSize (" + ds.RasterXSize + "'" + ds.RasterYSize + ")");  	OSGeo.GDAL.Driver drv = ds.GetDriver ();  	log.InfoFormat ("Using driver " + drv.LongName);  	string[] metadata = ds.GetMetadata ("");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			// log.InfoFormat("    " + iMeta + ":  " + metadata[iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("IMAGE_STRUCTURE");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Image Structure Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("SUBDATASETS");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Subdatasets:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("GEOLOCATION");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Geolocation:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	log.InfoFormat ("Corner Coordinates:");  	log.InfoFormat ("  Upper Left (" + GDALInfoGetPosition (ds' 0.0' 0.0) + ")");  	log.InfoFormat ("  Lower Left (" + GDALInfoGetPosition (ds' 0.0' ds.RasterYSize) + ")");  	log.InfoFormat ("  Upper Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' 0.0) + ")");  	log.InfoFormat ("  Lower Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' ds.RasterYSize) + ")");  	log.InfoFormat ("  Center (" + GDALInfoGetPosition (ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");  	log.InfoFormat ("");  	string projection = ds.GetProjectionRef ();  	if (projection != null) {  		SpatialReference srs = new SpatialReference (null);  		if (srs.ImportFromWkt (ref projection) == 0) {  			string wkt;  			srs.ExportToPrettyWkt (out wkt' 0);  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (wkt);  		} else {  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (projection);  		}  	}  	if (ds.GetGCPCount () > 0) {  		log.InfoFormat ("GCP Projection: "' ds.GetGCPProjection ());  		GCP[] GCPs = ds.GetGCPs ();  		for (int i = 0; i < ds.GetGCPCount (); i++) {  			log.InfoFormat ("GCP[" + i + "]: Id=" + GCPs [i].Id + "' Info=" + GCPs [i].Info);  			log.InfoFormat ("          (" + GCPs [i].GCPPixel + "'" + GCPs [i].GCPLine + ") -> (" + GCPs [i].GCPX + "'" + GCPs [i].GCPY + "'" + GCPs [i].GCPZ + ")");  			log.InfoFormat ("");  		}  		log.InfoFormat ("");  		double[] transform = new double[6];  		Gdal.GCPsToGeoTransform (GCPs' transform' 0);  		log.InfoFormat ("GCP Equivalent geotransformation parameters: "' ds.GetGCPProjection ());  		for (int i = 0; i < 6; i++)  			log.InfoFormat ("t[" + i + "] = " + transform [i].ToString ());  		log.InfoFormat ("");  	}  	var TL = GDALInfoGetPositionDouble (ds' 0.0' 0.0);  	var BR = GDALInfoGetPositionDouble (ds' ds.RasterXSize' ds.RasterYSize);  	var resolution = Math.Abs (BR [0] - TL [0]) / ds.RasterXSize;  	if (resolution == 1)  		throw new Exception ("Invalid coords");  	return new GeoBitmap (file' resolution' ds.RasterXSize' ds.RasterYSize' TL [0]' TL [1]' BR [0]' BR [1]);  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: using (var ds = OSGeo.GDAL.Gdal.Open (file' OSGeo.GDAL.Access.GA_ReadOnly)) {  	log.InfoFormat ("Raster dataset parameters:");  	log.InfoFormat ("  Projection: " + ds.GetProjectionRef ());  	log.InfoFormat ("  RasterCount: " + ds.RasterCount);  	log.InfoFormat ("  RasterSize (" + ds.RasterXSize + "'" + ds.RasterYSize + ")");  	OSGeo.GDAL.Driver drv = ds.GetDriver ();  	log.InfoFormat ("Using driver " + drv.LongName);  	string[] metadata = ds.GetMetadata ("");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			// log.InfoFormat("    " + iMeta + ":  " + metadata[iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("IMAGE_STRUCTURE");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Image Structure Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("SUBDATASETS");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Subdatasets:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("GEOLOCATION");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Geolocation:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	log.InfoFormat ("Corner Coordinates:");  	log.InfoFormat ("  Upper Left (" + GDALInfoGetPosition (ds' 0.0' 0.0) + ")");  	log.InfoFormat ("  Lower Left (" + GDALInfoGetPosition (ds' 0.0' ds.RasterYSize) + ")");  	log.InfoFormat ("  Upper Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' 0.0) + ")");  	log.InfoFormat ("  Lower Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' ds.RasterYSize) + ")");  	log.InfoFormat ("  Center (" + GDALInfoGetPosition (ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");  	log.InfoFormat ("");  	string projection = ds.GetProjectionRef ();  	if (projection != null) {  		SpatialReference srs = new SpatialReference (null);  		if (srs.ImportFromWkt (ref projection) == 0) {  			string wkt;  			srs.ExportToPrettyWkt (out wkt' 0);  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (wkt);  		} else {  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (projection);  		}  	}  	if (ds.GetGCPCount () > 0) {  		log.InfoFormat ("GCP Projection: "' ds.GetGCPProjection ());  		GCP[] GCPs = ds.GetGCPs ();  		for (int i = 0; i < ds.GetGCPCount (); i++) {  			log.InfoFormat ("GCP[" + i + "]: Id=" + GCPs [i].Id + "' Info=" + GCPs [i].Info);  			log.InfoFormat ("          (" + GCPs [i].GCPPixel + "'" + GCPs [i].GCPLine + ") -> (" + GCPs [i].GCPX + "'" + GCPs [i].GCPY + "'" + GCPs [i].GCPZ + ")");  			log.InfoFormat ("");  		}  		log.InfoFormat ("");  		double[] transform = new double[6];  		Gdal.GCPsToGeoTransform (GCPs' transform' 0);  		log.InfoFormat ("GCP Equivalent geotransformation parameters: "' ds.GetGCPProjection ());  		for (int i = 0; i < 6; i++)  			log.InfoFormat ("t[" + i + "] = " + transform [i].ToString ());  		log.InfoFormat ("");  	}  	var TL = GDALInfoGetPositionDouble (ds' 0.0' 0.0);  	var BR = GDALInfoGetPositionDouble (ds' ds.RasterXSize' ds.RasterYSize);  	var resolution = Math.Abs (BR [0] - TL [0]) / ds.RasterXSize;  	if (resolution == 1)  		throw new Exception ("Invalid coords");  	return new GeoBitmap (file' resolution' ds.RasterXSize' ds.RasterYSize' TL [0]' TL [1]' BR [0]' BR [1]);  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: using (var ds = OSGeo.GDAL.Gdal.Open (file' OSGeo.GDAL.Access.GA_ReadOnly)) {  	log.InfoFormat ("Raster dataset parameters:");  	log.InfoFormat ("  Projection: " + ds.GetProjectionRef ());  	log.InfoFormat ("  RasterCount: " + ds.RasterCount);  	log.InfoFormat ("  RasterSize (" + ds.RasterXSize + "'" + ds.RasterYSize + ")");  	OSGeo.GDAL.Driver drv = ds.GetDriver ();  	log.InfoFormat ("Using driver " + drv.LongName);  	string[] metadata = ds.GetMetadata ("");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			// log.InfoFormat("    " + iMeta + ":  " + metadata[iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("IMAGE_STRUCTURE");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Image Structure Metadata:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("SUBDATASETS");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Subdatasets:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	metadata = ds.GetMetadata ("GEOLOCATION");  	if (metadata.Length > 0) {  		log.InfoFormat ("  Geolocation:");  		for (int iMeta = 0; iMeta < metadata.Length; iMeta++) {  			log.InfoFormat ("    " + iMeta + ":  " + metadata [iMeta]);  		}  		log.InfoFormat ("");  	}  	log.InfoFormat ("Corner Coordinates:");  	log.InfoFormat ("  Upper Left (" + GDALInfoGetPosition (ds' 0.0' 0.0) + ")");  	log.InfoFormat ("  Lower Left (" + GDALInfoGetPosition (ds' 0.0' ds.RasterYSize) + ")");  	log.InfoFormat ("  Upper Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' 0.0) + ")");  	log.InfoFormat ("  Lower Right (" + GDALInfoGetPosition (ds' ds.RasterXSize' ds.RasterYSize) + ")");  	log.InfoFormat ("  Center (" + GDALInfoGetPosition (ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");  	log.InfoFormat ("");  	string projection = ds.GetProjectionRef ();  	if (projection != null) {  		SpatialReference srs = new SpatialReference (null);  		if (srs.ImportFromWkt (ref projection) == 0) {  			string wkt;  			srs.ExportToPrettyWkt (out wkt' 0);  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (wkt);  		} else {  			log.InfoFormat ("Coordinate System is:");  			log.InfoFormat (projection);  		}  	}  	if (ds.GetGCPCount () > 0) {  		log.InfoFormat ("GCP Projection: "' ds.GetGCPProjection ());  		GCP[] GCPs = ds.GetGCPs ();  		for (int i = 0; i < ds.GetGCPCount (); i++) {  			log.InfoFormat ("GCP[" + i + "]: Id=" + GCPs [i].Id + "' Info=" + GCPs [i].Info);  			log.InfoFormat ("          (" + GCPs [i].GCPPixel + "'" + GCPs [i].GCPLine + ") -> (" + GCPs [i].GCPX + "'" + GCPs [i].GCPY + "'" + GCPs [i].GCPZ + ")");  			log.InfoFormat ("");  		}  		log.InfoFormat ("");  		double[] transform = new double[6];  		Gdal.GCPsToGeoTransform (GCPs' transform' 0);  		log.InfoFormat ("GCP Equivalent geotransformation parameters: "' ds.GetGCPProjection ());  		for (int i = 0; i < 6; i++)  			log.InfoFormat ("t[" + i + "] = " + transform [i].ToString ());  		log.InfoFormat ("");  	}  	var TL = GDALInfoGetPositionDouble (ds' 0.0' 0.0);  	var BR = GDALInfoGetPositionDouble (ds' ds.RasterXSize' ds.RasterYSize);  	var resolution = Math.Abs (BR [0] - TL [0]) / ds.RasterXSize;  	if (resolution == 1)  		throw new Exception ("Invalid coords");  	return new GeoBitmap (file' resolution' ds.RasterXSize' ds.RasterYSize' TL [0]' TL [1]' BR [0]' BR [1]);  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: log.InfoFormat ("  Center (" + GDALInfoGetPosition (ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: log.InfoFormat ("  Center (" + GDALInfoGetPosition (ds' ds.RasterXSize / 2' ds.RasterYSize / 2) + ")");  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: if (ds.GetGCPCount () > 0) {  	log.InfoFormat ("GCP Projection: "' ds.GetGCPProjection ());  	GCP[] GCPs = ds.GetGCPs ();  	for (int i = 0; i < ds.GetGCPCount (); i++) {  		log.InfoFormat ("GCP[" + i + "]: Id=" + GCPs [i].Id + "' Info=" + GCPs [i].Info);  		log.InfoFormat ("          (" + GCPs [i].GCPPixel + "'" + GCPs [i].GCPLine + ") -> (" + GCPs [i].GCPX + "'" + GCPs [i].GCPY + "'" + GCPs [i].GCPZ + ")");  		log.InfoFormat ("");  	}  	log.InfoFormat ("");  	double[] transform = new double[6];  	Gdal.GCPsToGeoTransform (GCPs' transform' 0);  	log.InfoFormat ("GCP Equivalent geotransformation parameters: "' ds.GetGCPProjection ());  	for (int i = 0; i < 6; i++)  		log.InfoFormat ("t[" + i + "] = " + transform [i].ToString ());  	log.InfoFormat ("");  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: if (ds.GetGCPCount () > 0) {  	log.InfoFormat ("GCP Projection: "' ds.GetGCPProjection ());  	GCP[] GCPs = ds.GetGCPs ();  	for (int i = 0; i < ds.GetGCPCount (); i++) {  		log.InfoFormat ("GCP[" + i + "]: Id=" + GCPs [i].Id + "' Info=" + GCPs [i].Info);  		log.InfoFormat ("          (" + GCPs [i].GCPPixel + "'" + GCPs [i].GCPLine + ") -> (" + GCPs [i].GCPX + "'" + GCPs [i].GCPY + "'" + GCPs [i].GCPZ + ")");  		log.InfoFormat ("");  	}  	log.InfoFormat ("");  	double[] transform = new double[6];  	Gdal.GCPsToGeoTransform (GCPs' transform' 0);  	log.InfoFormat ("GCP Equivalent geotransformation parameters: "' ds.GetGCPProjection ());  	for (int i = 0; i < 6; i++)  		log.InfoFormat ("t[" + i + "] = " + transform [i].ToString ());  	log.InfoFormat ("");  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,LoadImageInfo,The following statement contains a magic number: for (int i = 0; i < 6; i++)  	log.InfoFormat ("t[" + i + "] = " + transform [i].ToString ());  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (output)) {  	g.Clear (Color.Transparent);  	RectLatLng request = new RectLatLng (lat1' lng1' lng2 - lng1' lat2 - lat1);  	//g.DrawString(request.ToString()' Control.DefaultFont' Brushes.Wheat' 0' 0);  	bool cleared = false;  	foreach (var image in _cache) {  		// calc the pixel coord within the image rect  		var ImageTop = (float)map (request.Top' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  		var ImageLeft = (float)map (request.Left' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  		var ImageBottom = (float)map (request.Bottom' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  		var ImageRight = (float)map (request.Right' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  		RectangleF rect = new RectangleF (ImageLeft' ImageTop' ImageRight - ImageLeft' ImageBottom - ImageTop);  		var res = (request.Right - request.Left) / width;  		if (rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0) {  			if (!cleared) {  				//g.Clear(Color.Red);  				cleared = true;  			}  			if (image.Resolution < (res / 3))  				continue;  			//Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0);  			try {  				lock (locker) {  					if (image.Bitmap == null)  						continue;  					// this is wrong  					g.DrawImage (image.Bitmap' new RectangleF (0' 0' width' height)' rect' GraphicsUnit.Pixel);  				}  				a++;  				if (a >= 50)  					return output;  			} catch (Exception ex) {  				log.Error (ex);  				//throw new Exception("Bad Image "+image.File);  			}  		}  	}  	if (a == 0) {  		return null;  	}  	return output;  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (output)) {  	g.Clear (Color.Transparent);  	RectLatLng request = new RectLatLng (lat1' lng1' lng2 - lng1' lat2 - lat1);  	//g.DrawString(request.ToString()' Control.DefaultFont' Brushes.Wheat' 0' 0);  	bool cleared = false;  	foreach (var image in _cache) {  		// calc the pixel coord within the image rect  		var ImageTop = (float)map (request.Top' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  		var ImageLeft = (float)map (request.Left' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  		var ImageBottom = (float)map (request.Bottom' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  		var ImageRight = (float)map (request.Right' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  		RectangleF rect = new RectangleF (ImageLeft' ImageTop' ImageRight - ImageLeft' ImageBottom - ImageTop);  		var res = (request.Right - request.Left) / width;  		if (rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0) {  			if (!cleared) {  				//g.Clear(Color.Red);  				cleared = true;  			}  			if (image.Resolution < (res / 3))  				continue;  			//Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0);  			try {  				lock (locker) {  					if (image.Bitmap == null)  						continue;  					// this is wrong  					g.DrawImage (image.Bitmap' new RectangleF (0' 0' width' height)' rect' GraphicsUnit.Pixel);  				}  				a++;  				if (a >= 50)  					return output;  			} catch (Exception ex) {  				log.Error (ex);  				//throw new Exception("Bad Image "+image.File);  			}  		}  	}  	if (a == 0) {  		return null;  	}  	return output;  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: foreach (var image in _cache) {  	// calc the pixel coord within the image rect  	var ImageTop = (float)map (request.Top' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  	var ImageLeft = (float)map (request.Left' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  	var ImageBottom = (float)map (request.Bottom' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  	var ImageRight = (float)map (request.Right' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  	RectangleF rect = new RectangleF (ImageLeft' ImageTop' ImageRight - ImageLeft' ImageBottom - ImageTop);  	var res = (request.Right - request.Left) / width;  	if (rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0) {  		if (!cleared) {  			//g.Clear(Color.Red);  			cleared = true;  		}  		if (image.Resolution < (res / 3))  			continue;  		//Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0);  		try {  			lock (locker) {  				if (image.Bitmap == null)  					continue;  				// this is wrong  				g.DrawImage (image.Bitmap' new RectangleF (0' 0' width' height)' rect' GraphicsUnit.Pixel);  			}  			a++;  			if (a >= 50)  				return output;  		} catch (Exception ex) {  			log.Error (ex);  			//throw new Exception("Bad Image "+image.File);  		}  	}  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: foreach (var image in _cache) {  	// calc the pixel coord within the image rect  	var ImageTop = (float)map (request.Top' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  	var ImageLeft = (float)map (request.Left' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  	var ImageBottom = (float)map (request.Bottom' image.Rect.Top' image.Rect.Bottom' 0' image.RasterYSize);  	var ImageRight = (float)map (request.Right' image.Rect.Left' image.Rect.Right' 0' image.RasterXSize);  	RectangleF rect = new RectangleF (ImageLeft' ImageTop' ImageRight - ImageLeft' ImageBottom - ImageTop);  	var res = (request.Right - request.Left) / width;  	if (rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0) {  		if (!cleared) {  			//g.Clear(Color.Red);  			cleared = true;  		}  		if (image.Resolution < (res / 3))  			continue;  		//Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0);  		try {  			lock (locker) {  				if (image.Bitmap == null)  					continue;  				// this is wrong  				g.DrawImage (image.Bitmap' new RectangleF (0' 0' width' height)' rect' GraphicsUnit.Pixel);  			}  			a++;  			if (a >= 50)  				return output;  		} catch (Exception ex) {  			log.Error (ex);  			//throw new Exception("Bad Image "+image.File);  		}  	}  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: if (rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0) {  	if (!cleared) {  		//g.Clear(Color.Red);  		cleared = true;  	}  	if (image.Resolution < (res / 3))  		continue;  	//Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0);  	try {  		lock (locker) {  			if (image.Bitmap == null)  				continue;  			// this is wrong  			g.DrawImage (image.Bitmap' new RectangleF (0' 0' width' height)' rect' GraphicsUnit.Pixel);  		}  		a++;  		if (a >= 50)  			return output;  	} catch (Exception ex) {  		log.Error (ex);  		//throw new Exception("Bad Image "+image.File);  	}  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: if (rect.Left <= image.RasterXSize && rect.Top <= image.RasterYSize && rect.Right >= 0 && rect.Bottom >= 0) {  	if (!cleared) {  		//g.Clear(Color.Red);  		cleared = true;  	}  	if (image.Resolution < (res / 3))  		continue;  	//Console.WriteLine("{0} <= {1} && {2} <= {3} || {4} >= {5} && {6} >= {7} "' rect.Left' image.RasterXSize' rect.Top' image.RasterYSize' rect.Right' 0' rect.Bottom' 0);  	try {  		lock (locker) {  			if (image.Bitmap == null)  				continue;  			// this is wrong  			g.DrawImage (image.Bitmap' new RectangleF (0' 0' width' height)' rect' GraphicsUnit.Pixel);  		}  		a++;  		if (a >= 50)  			return output;  	} catch (Exception ex) {  		log.Error (ex);  		//throw new Exception("Bad Image "+image.File);  	}  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: if (image.Resolution < (res / 3))  	continue;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: try {  	lock (locker) {  		if (image.Bitmap == null)  			continue;  		// this is wrong  		g.DrawImage (image.Bitmap' new RectangleF (0' 0' width' height)' rect' GraphicsUnit.Pixel);  	}  	a++;  	if (a >= 50)  		return output;  } catch (Exception ex) {  	log.Error (ex);  	//throw new Exception("Bad Image "+image.File);  }  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GetBitmap,The following statement contains a magic number: if (a >= 50)  	return output;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoX = adfGeoTransform [0] + adfGeoTransform [1] * x + adfGeoTransform [2] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoY = adfGeoTransform [3] + adfGeoTransform [4] * x + adfGeoTransform [5] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoY = adfGeoTransform [3] + adfGeoTransform [4] * x + adfGeoTransform [5] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPosition,The following statement contains a magic number: dfGeoY = adfGeoTransform [3] + adfGeoTransform [4] * x + adfGeoTransform [5] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoX = adfGeoTransform [0] + adfGeoTransform [1] * x + adfGeoTransform [2] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoY = adfGeoTransform [3] + adfGeoTransform [4] * x + adfGeoTransform [5] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoY = adfGeoTransform [3] + adfGeoTransform [4] * x + adfGeoTransform [5] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,GDALInfoGetPositionDouble,The following statement contains a magic number: dfGeoY = adfGeoTransform [3] + adfGeoTransform [4] * x + adfGeoTransform [5] * y;  
Magic Number,GDAL,GDAL,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,ProgressFunc,The following statement contains a magic number: Console.Write ("Processing ... " + complete * 100 + "% Completed.");  
Magic Number,GDAL,Program,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDAL.cs,Main,The following statement contains a magic number: map.MaxZoom = 22;  
Magic Number,GDAL,GDALProvider,F:\newReposMay17\diydrones_MissionPlanner\ExtLibs\GDAL\GDALProvider.cs,GDALProvider,The following statement contains a magic number: MaxZoom = 24;  
