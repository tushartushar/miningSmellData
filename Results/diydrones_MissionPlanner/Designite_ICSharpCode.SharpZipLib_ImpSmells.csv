Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,GetAndMoveToFrontDecode,The method has 126 lines of code.
Long Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The method has 276 lines of code.
Long Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,QSort3,The method has 104 lines of code.
Long Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,The method has 165 lines of code.
Long Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,FullGtU,The method has 109 lines of code.
Long Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The method has 116 lines of code.
Long Method,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadHeader,The method has 129 lines of code.
Long Method,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The method has 169 lines of code.
Long Method,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,GetNextEntry,The method has 109 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The method has 110 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The method has 103 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The method has 188 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,RunUpdates,The method has 103 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,The method has 131 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,PutNextEntry,The method has 164 lines of code.
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,GetAndMoveToFrontDecode,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,HbCreateDecodeTables,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,Cyclomatic complexity of the method is 63
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SimpleSort,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,QSort3,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,Cyclomatic complexity of the method is 25
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,Cyclomatic complexity of the method is 21
Complex Method,ICSharpCode.SharpZipLib.Core,FileSystemScanner,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\FileSystemScanner.cs,ScanDir,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Core,NameFilter,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\NameFilter.cs,SplitQuoted,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\StreamUtils.cs,Copy,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESStream.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadHeader,Cyclomatic complexity of the method is 27
Complex Method,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,ExtractEntry,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,WriteEntryCore,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,GetNextEntry,Cyclomatic complexity of the method is 19
Complex Method,ICSharpCode.SharpZipLib.Tar,TarOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarOutputStream.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,SetLevel,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,Cyclomatic complexity of the method is 22
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,Cyclomatic complexity of the method is 21
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,ExtractZip,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,ExtractFileEntry,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,ExtractEntry,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\WindowsNameTransform.cs,MakeValidName,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntryFactory.cs,MakeFileEntry,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntryFactory.cs,MakeDirectoryEntry,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestArchive,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,Cyclomatic complexity of the method is 42
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,BeginUpdate,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLocalEntryHeader,Cyclomatic complexity of the method is 19
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteCentralDirectoryHeader,Cyclomatic complexity of the method is 17
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,RunUpdates,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteLocalHeader,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,GetNextEntry,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,CloseEntry,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,InitialRead,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,BodyRead,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,PutNextEntry,Cyclomatic complexity of the method is 33
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,CloseEntry,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,Finish,Cyclomatic complexity of the method is 19
Long Parameter List,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,HbCreateDecodeTables,The method has 7 parameters. Parameters: limit' baseArray' perm' length' minLen' maxLen' alphaSize
Long Parameter List,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbAssignCodes,The method has 5 parameters. Parameters: code' length' minLen' maxLen' alphaSize
Long Parameter List,ICSharpCode.SharpZipLib.Core,ExtendedPathFilter,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\PathFilter.cs,ExtendedPathFilter,The method has 5 parameters. Parameters: filter' minSize' maxSize' minDate' maxDate
Long Parameter List,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\StreamUtils.cs,Copy,The method has 7 parameters. Parameters: source' destination' buffer' progressHandler' updateInterval' sender' name
Long Parameter List,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\StreamUtils.cs,Copy,The method has 8 parameters. Parameters: source' destination' buffer' progressHandler' updateInterval' sender' name' fixedTarget
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,PkzipClassicEncryptCryptoTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,PkzipClassicDecryptCryptoTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESTransform.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.GZip,GZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GZip.cs,Compress,The method has 5 parameters. Parameters: inStream' outStream' isStreamOwner' bufferSize' level
Long Parameter List,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,GetNameBytes,The method has 5 parameters. Parameters: name' nameOffset' buffer' bufferOffset' length
Long Parameter List,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,GetNameBytes,The method has 5 parameters. Parameters: name' nameOffset' buffer' bufferOffset' length
Long Parameter List,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,GetAsciiBytes,The method has 5 parameters. Parameters: toAdd' nameOffset' buffer' bufferOffset' length
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: zipFileName' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: outputStream' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,ExtractZip,The method has 8 parameters. Parameters: zipFileName' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime' allowParentTraversal
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,ExtractZip,The method has 9 parameters. Parameters: inputStream' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime' isStreamOwner' allowParentTraversal
Long Parameter List,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,CopyBytes,The method has 5 parameters. Parameters: update' destination' source' bytesToCopy' updateCrc
Long Parameter List,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,CopyEntryDataDirect,The method has 5 parameters. Parameters: update' stream' updateCrc' destinationPosition' sourcePosition
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralFileHeaderSignature is 31.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralDirLocatorSignature is 31.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipConstants.cs,,The length of the parameter EndOfCentralDirectorySignature is 30.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,UpdateCommentOnly,The length of the parameter CentralHeaderCommentSizeOffset is 30.
Long Statement,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,The length of the statement  "						while ((ftab[((runningOrder[j - h]) + 1) << 8] - ftab[(runningOrder[j - h]) << 8]) > (ftab[((vv) + 1) << 8] - ftab[(vv) << 8])) { " is 129.
Long Statement,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The length of the statement  "						(int)(1 + (((weight[n1] & 0x000000ff) > (weight[n2] & 0x000000ff)) ? (weight[n1] & 0x000000ff) : (weight[n2] & 0x000000ff))); " is 125.
Long Statement,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESStream.cs,Read,The length of the statement  "							throw new Exception("AES Authentication Code does not match. This is a super-CRC check on the data in the file after compression and encryption. \r\n" " is 150.
Long Statement,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The length of the statement  "				var mod_time = (int)((DateTime.Now.Ticks - new DateTime(1970' 1' 1).Ticks) / 10000000L);  // Ticks give back 100ns intervals " is 124.
Long Statement,ICSharpCode.SharpZipLib.Tar,TarBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarBuffer.cs,WriteBlock,The length of the statement  "				string errorText = string.Format("TarBuffer.WriteBlock - block to write has length '{0}' which is not the block size of '{1}'"' " is 127.
Long Statement,ICSharpCode.SharpZipLib.Tar,TarBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarBuffer.cs,WriteBlock,The length of the statement  "				string errorText = string.Format("TarBuffer.WriteBlock - record has length '{0}' with offset '{1}' which is less than the record size of '{2}'"' " is 144.
Long Statement,ICSharpCode.SharpZipLib.Tar,TarExtendedHeaderReader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarExtendedHeaderReader.cs,Flush,The length of the statement  "			decoder.Convert(byteBuffer' 0' bbIndex' charBuffer' 0' 4' false' out int bytesUsed' out int charsUsed' out bool completed); " is 123.
Long Statement,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,ParseBinaryOrOctal,The length of the statement  "				// File sizes over 8GB are stored in 8 right-justified bytes of binary indicated by setting the high-order bit of the leftmost byte of a numeric field. " is 151.
Long Statement,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,GetAsciiBytes,The length of the statement  "			// If length is beyond the toAdd string length (which is OK by the prev loop condition)' eg if a field has fixed length and the string is shorter' make sure all of the extra chars are written as NULLs' so that the reader func would ignore them and get back the original string " is 276.
Long Statement,ICSharpCode.SharpZipLib.Tar,TarOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarOutputStream.cs,PutNextEntry,The length of the statement  "				while (nameCharIndex < entry.TarHeader.Name.Length + 1 /* we've allocated one for the null char' now we must make sure it gets written out */) { " is 144.
Long Statement,ICSharpCode.SharpZipLib.Tar,TarOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarOutputStream.cs,PutNextEntry,The length of the statement  "					TarHeader.GetAsciiBytes(entry.TarHeader.Name' nameCharIndex' this.blockBuffer' 0' TarBuffer.BlockSize); // This func handles OK the extra char out of string length " is 163.
Long Statement,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,InsertString,The length of the statement  "			int hash = ((ins_h << DeflaterConstants.HASH_SHIFT) ^ window[strstart + (DeflaterConstants.MIN_MATCH - 1)]) & DeflaterConstants.HASH_MASK; " is 138.
Long Statement,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateStored,The length of the statement  "				(blockStart < DeflaterConstants.WSIZE && storedLength >= DeflaterConstants.MAX_DIST) ||   // Block may move out of window " is 121.
Long Statement,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The length of the statement  "						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == DeflaterConstants.MIN_MATCH && strstart - matchStart > TooFar))) { " is 141.
Long Statement,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,ExtractZip,The length of the statement  "			ExtractZip(inputStream' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime' true' allowParentTraversal); " is 143.
Long Statement,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\WindowsNameTransform.cs,TransformFile,The length of the statement  "					if(!_allowParentTraversal && !Path.GetFullPath(name).StartsWith(_baseDirectory' StringComparison.InvariantCultureIgnoreCase)) " is 125.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The length of the statement  "				// (localHeader ||) was deleted' because actually there is no specific difference with reading sizes between local header & central directory  " is 141.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,FindEntry,The length of the statement  "				if (string.Compare(name' entries_[i].Name' ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal) == 0) { " is 126.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "						if ((localFlags & (int)(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0) { " is 158.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "					if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0) { " is 135.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion)); " is 128.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion)); " is 128.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,The length of the statement  "				long offset = LocateBlockWithSignature(ZipConstants.Zip64CentralDirLocatorSignature' locatedEndOfCentralDir' 0' 0x1000); " is 120.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,GetNextEntry,The length of the statement  "			if (method == (int)CompressionMethod.Stored && (!isCrypted && csize != size || (isCrypted && csize - ZipConstants.CryptoHeaderSize != size))) { " is 143.
Complex Conditional,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,Initialize,The conditional expression  "magic1 != 'B' || magic2 != 'Z' || magic3 != 'h' || magic4 < '1' || magic4 > '9'"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,InitBlock,The conditional expression  "magic1 == 0x17 && magic2 == 0x72 && magic3 == 0x45 && magic4 == 0x38 && magic5 == 0x50 && magic6 == 0x90"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,InitBlock,The conditional expression  "magic1 != 0x31 || magic2 != 0x41 || magic3 != 0x59 || magic4 != 0x26 || magic5 != 0x53 || magic6 != 0x59"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetDecompressStructureSizes,The conditional expression  "!(0 <= newSize100k && newSize100k <= 9 && 0 <= blockSize100k && blockSize100k <= 9)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The conditional expression  "ge > gs && nPart != nGroups && nPart != 1 && ((nGroups - nPart) % 2 == 1)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,AllocateCompressStructures,The conditional expression  "block == null || quadrant == null || zptr == null || ftab == null"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The conditional expression  "(index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,IsBinary,The conditional expression  "(b < 8) || ((b > 13) && (b < 32)) || (b == 255)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,GetNextEntry,The conditional expression  "header.TypeFlag != TarHeader.LF_NORMAL &&  							   header.TypeFlag != TarHeader.LF_OLDNORM &&  							   header.TypeFlag != TarHeader.LF_LINK &&  							   header.TypeFlag != TarHeader.LF_SYMLINK &&  							   header.TypeFlag != TarHeader.LF_DIR"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[match + matchLen] != scan_end               || window[match + matchLen - 1] != scan_end1               || window[match] != window[scan]               || window[++match] != window[++scan]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateStored,The conditional expression  "(storedLength >= DeflaterConstants.MAX_BLOCK_SIZE) || // Block is full  				(blockStart < DeflaterConstants.WSIZE && storedLength >= DeflaterConstants.MAX_DIST) ||   // Block may move out of window  				flush"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,The conditional expression  "lookahead >= DeflaterConstants.MIN_MATCH &&  					(hashHead = InsertString()) != 0 &&  					strategy != DeflateStrategy.HuffmanOnly &&  					strstart - hashHead <= DeflaterConstants.MAX_DIST &&  					FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= DeflaterConstants.MAX_DIST &&  						FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == DeflaterConstants.MIN_MATCH && strstart - matchStart > TooFar))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The conditional expression  "unixData != null &&  				// Only apply modification time' but require all other values to be present  				// This is done to match InfoZIP's behaviour  				((unixData.Include & ExtendedUnixData.Flags.ModificationTime) != 0) &&  				((unixData.Include & ExtendedUnixData.Flags.AccessTime) != 0) &&  				((unixData.Include & ExtendedUnixData.Flags.CreateTime) != 0)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The conditional expression  "(extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The conditional expression  "((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0 || compressedSize > 0) && entry.Size > 0)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The conditional expression  "(compressedSize != 0)  						&& (compressedSize != entry.CompressedSize && compressedSize != 0xFFFFFFFF && compressedSize != -1)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,The conditional expression  "(thisDiskNumber == 0xffff) ||  				(startCentralDirDisk == 0xffff) ||  				(entriesForThisDisk == 0xffff) ||  				(entriesForWholeCentralDir == 0xffff) ||  				(centralDirSize == 0xffffffff) ||  				(offsetOfCentralDir == 0xffffffff)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,GetNextEntry,The conditional expression  "header == ZipConstants.CentralHeaderSignature ||  				header == ZipConstants.EndOfCentralDirectorySignature ||  				header == ZipConstants.CentralHeaderDigitalSignature ||  				header == ZipConstants.ArchiveExtraDataSignature ||  				header == ZipConstants.Zip64CentralFileHeaderSignature"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,GetNextEntry,The conditional expression  "method == (int)CompressionMethod.Stored && (!isCrypted && csize != size || (isCrypted && csize - ZipConstants.CryptoHeaderSize != size))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,BodyRead,The conditional expression  "(flags & 8) == 0 &&  							(inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size)"  is complex.
Empty Catch Block,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,Dispose,The method has an empty catch block.
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2.cs,Decompress,The following statement contains a magic number: Core.StreamUtils.Copy(bzipInput' outStream' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2.cs,Compress,The following statement contains a magic number: Core.StreamUtils.Copy(inStream' bzipOutput' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,MakeMaps,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,EndBlock,The following statement contains a magic number: computedCombinedCRC = ((computedCombinedCRC << 1) & 0xFFFFFFFF) | (computedCombinedCRC >> 31);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,FillBuffer,The following statement contains a magic number: bsBuff = (bsBuff << 8) | (thech & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,FillBuffer,The following statement contains a magic number: bsLive += 8;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetUChar,The following statement contains a magic number: return (char)BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetInt32,The following statement contains a magic number: int result = BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetInt32,The following statement contains a magic number: result = (result << 8) | BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetInt32,The following statement contains a magic number: result = (result << 8) | BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetInt32,The following statement contains a magic number: result = (result << 8) | BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetInt32,The following statement contains a magic number: result = (result << 8) | BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetInt32,The following statement contains a magic number: result = (result << 8) | BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,BsGetInt32,The following statement contains a magic number: result = (result << 8) | BsR(8);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: bool[] inUse16 = new bool[16];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: i < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: inUse[i * 16 + j] = (BsR(1) == 1);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: j < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: i < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: int alphaSize = nInUse + 2;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: int nGroups = BsR(3);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: int nSelectors = BsR(15);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: int curr = BsR(5);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,RecvDecodingTables,The following statement contains a magic number: int minLen = 32;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,GetAndMoveToFrontDecode,The following statement contains a magic number: byte[] yy = new byte[256];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,GetAndMoveToFrontDecode,The following statement contains a magic number: origPtr = BsGetIntVS(24);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,GetAndMoveToFrontDecode,The following statement contains a magic number: i <= 255
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,GetAndMoveToFrontDecode,The following statement contains a magic number: i <= 255
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,GetAndMoveToFrontDecode,The following statement contains a magic number: zn > 20
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: int[] cftab = new int[257];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: Array.Copy(unzftab' 0' cftab' 1' 256);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: i <= 256
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: ch2 = 256;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetupRandPartA,The following statement contains a magic number: rTPos == 512
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetDecompressStructureSizes,The following statement contains a magic number: !(0 <= newSize100k && newSize100k <= 9 && 0 <= blockSize100k && blockSize100k <= 9)
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,SetDecompressStructureSizes,The following statement contains a magic number: !(0 <= newSize100k && newSize100k <= 9 && 0 <= blockSize100k && blockSize100k <= 9)
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BZip2OutputStream,The following statement contains a magic number: workFactor = 50;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BZip2OutputStream,The following statement contains a magic number: blockSize = 9;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BZip2OutputStream,The following statement contains a magic number: blockSize > 9
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,WriteByte,The following statement contains a magic number: int b = (256 + value) % 256;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,WriteByte,The following statement contains a magic number: int b = (256 + value) % 256;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,WriteByte,The following statement contains a magic number: runLength > 254
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MakeMaps,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,WriteRun,The following statement contains a magic number: switch (runLength) {  				case 1:  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 2:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 3:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				default:  					inUse[runLength - 4] = true;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)(runLength - 4);  					break;  				}
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,WriteRun,The following statement contains a magic number: switch (runLength) {  				case 1:  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 2:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 3:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				default:  					inUse[runLength - 4] = true;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)(runLength - 4);  					break;  				}
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,WriteRun,The following statement contains a magic number: switch (runLength) {  				case 1:  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 2:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 3:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				default:  					inUse[runLength - 4] = true;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)(runLength - 4);  					break;  				}
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,WriteRun,The following statement contains a magic number: switch (runLength) {  				case 1:  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 2:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				case 3:  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					break;  				default:  					inUse[runLength - 4] = true;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)currentChar;  					last++;  					block[last + 1] = (byte)(runLength - 4);  					break;  				}
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,InitBlock,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,InitBlock,The following statement contains a magic number: allowableBlockSize = BZip2Constants.BaseBlockSize * blockSize100k - 20;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,EndBlock,The following statement contains a magic number: combinedCRC = (combinedCRC << 1) | (combinedCRC >> 31);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsFinishedWithStream,The following statement contains a magic number: int ch = (bsBuff >> 24);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsFinishedWithStream,The following statement contains a magic number: bsBuff <<= 8;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsFinishedWithStream,The following statement contains a magic number: bsLive -= 8;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsW,The following statement contains a magic number: int ch = (bsBuff >> 24);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsW,The following statement contains a magic number: bsBuff <<= 8;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsW,The following statement contains a magic number: bsLive -= 8;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsW,The following statement contains a magic number: bsLive >= 8
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsW,The following statement contains a magic number: bsBuff |= (v << (32 - bsLive - n));
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutUChar,The following statement contains a magic number: BsW(8' c);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutint,The following statement contains a magic number: BsW(8' (u >> 24) & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutint,The following statement contains a magic number: BsW(8' (u >> 24) & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutint,The following statement contains a magic number: BsW(8' (u >> 16) & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutint,The following statement contains a magic number: BsW(8' (u >> 16) & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutint,The following statement contains a magic number: BsW(8' (u >> 8) & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutint,The following statement contains a magic number: BsW(8' (u >> 8) & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,BsPutint,The following statement contains a magic number: BsW(8' u & 0xFF);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: alphaSize = nInUse + 2;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: nGroups = 2;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: nMTF < 200
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: ge > gs && nPart != nGroups && nPart != 1 && ((nGroups - nPart) % 2 == 1)
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost2 += (short)len[2][icv];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost3 += (short)len[3][icv];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost4 += (short)len[4][icv];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost5 += (short)len[5][icv];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost[2] = cost2;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost[3] = cost3;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost[4] = cost4;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: cost[5] = cost5;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: nGroups == 6
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: bc = 999999999;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: HbMakeCodeLengths(len[t]' rfreq[t]' alphaSize' 20);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: !(nGroups < 8)
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: !(nSelectors < 32768 && nSelectors <= (2 + (900000 / BZip2Constants.GroupSize)))
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: !(nSelectors < 32768 && nSelectors <= (2 + (900000 / BZip2Constants.GroupSize)))
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: !(nSelectors < 32768 && nSelectors <= (2 + (900000 / BZip2Constants.GroupSize)))
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: minLen = 32;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: maxLen > 20
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: bool[] inUse16 = new bool[16];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: inUse[i * 16 + j]
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: j < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: i < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: i < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: inUse[i * 16 + j]
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: j < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: i < 16
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: BsW(3' nGroups);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: BsW(15' nSelectors);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: BsW(5' curr);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: BsW(2' 2);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: BsW(2' 2);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: BsW(2' 3);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SendMTFValues,The following statement contains a magic number: BsW(2' 3);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MoveToFrontCodeAndSend,The following statement contains a magic number: BsPutIntVS(24' origPtr);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,SimpleSort,The following statement contains a magic number: bigN < 2
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,The following statement contains a magic number: int[] runningOrder = new int[256];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,The following statement contains a magic number: int[] copy = new int[256];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,The following statement contains a magic number: bool[] bigDone = new bool[256];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,The following statement contains a magic number: block[last + i + 2] = block[(i % (last + 1)) + 1];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,MainSort,The following statement contains a magic number: last < 4000
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,RandomiseBlock,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,RandomiseBlock,The following statement contains a magic number: rTPos == 512
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,FullGtU,The following statement contains a magic number: k -= 4;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,AllocateCompressStructures,The following statement contains a magic number: ftab = new int[65537];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,AllocateCompressStructures,The following statement contains a magic number: szptr = new short[2 * n];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The following statement contains a magic number: char[] yy = new char[256];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The following statement contains a magic number: switch (zPend % 2) {  					case 0:  						szptr[wr] = (short)BZip2Constants.RunA;  						wr++;  						mtfFreq[BZip2Constants.RunA]++;  						break;  					case 1:  						szptr[wr] = (short)BZip2Constants.RunB;  						wr++;  						mtfFreq[BZip2Constants.RunB]++;  						break;  					}
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The following statement contains a magic number: zPend < 2
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The following statement contains a magic number: zPend = (zPend - 2) / 2;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The following statement contains a magic number: zPend = (zPend - 2) / 2;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: int[] heap = new int[BZip2Constants.MaximumAlphaSize + 2];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: int[] weight = new int[BZip2Constants.MaximumAlphaSize * 2];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: int[] parent = new int[BZip2Constants.MaximumAlphaSize * 2];
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: weight[i + 1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: parent[0] = -2;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: !(nHeap < (BZip2Constants.MaximumAlphaSize + 2))
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: !(nNodes < (BZip2Constants.MaximumAlphaSize * 2))
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: j = weight[i] >> 8;
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: j = 1 + (j / 2);
Magic Number,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,HbMakeCodeLengths,The following statement contains a magic number: weight[i] = j << 8;
Magic Number,ICSharpCode.SharpZipLib.Checksum,Adler32,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Checksum\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checkValue >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksum,Adler32,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Checksum\Adler32.cs,Update,The following statement contains a magic number: checkValue = (s2 << 16) + s1;
Magic Number,ICSharpCode.SharpZipLib.Checksum,BZip2Crc,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Checksum\BZip2Crc.cs,Update,The following statement contains a magic number: checkValue = unchecked(crcTable[(byte)(((checkValue >> 24) & 0xFF) ^ bval)] ^ (checkValue << 8));
Magic Number,ICSharpCode.SharpZipLib.Checksum,BZip2Crc,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Checksum\BZip2Crc.cs,Update,The following statement contains a magic number: checkValue = unchecked(crcTable[(byte)(((checkValue >> 24) & 0xFF) ^ bval)] ^ (checkValue << 8));
Magic Number,ICSharpCode.SharpZipLib.Checksum,Crc32,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Checksum\Crc32.cs,ComputeCrc32,The following statement contains a magic number: return (uint)(Crc32.crcTable[(oldCrc ^ bval) & 0xFF] ^ (oldCrc >> 8));
Magic Number,ICSharpCode.SharpZipLib.Checksum,Crc32,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Checksum\Crc32.cs,Update,The following statement contains a magic number: checkValue = unchecked(crcTable[(checkValue ^ bval) & 0xFF] ^ (checkValue >> 8));
Magic Number,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\StreamUtils.cs,Copy,The following statement contains a magic number: buffer.Length < 128
Magic Number,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\StreamUtils.cs,Copy,The following statement contains a magic number: buffer.Length < 128
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: int index = 2;
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: int elements = 2;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[1] = newKeys[1] * 134775813 + 1;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: byte[] result = new byte[12];
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[1] = (byte)((newKeys[0] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte)((newKeys[0] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte)((newKeys[0] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte)((newKeys[0] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte)((newKeys[0] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[4] = (byte)(newKeys[1] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte)((newKeys[1] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte)((newKeys[1] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte)((newKeys[1] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte)((newKeys[1] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte)((newKeys[1] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte)((newKeys[1] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte)(newKeys[2] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte)(newKeys[2] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: return (byte)((temp * (temp ^ 1)) >> 8);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keyData.Length != 12
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys = new uint[3];
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[1] = keys[1] * 134775813 + 1;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,Reset,The following statement contains a magic number: keys[2] = 0;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicManaged,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\PkzipClassic.cs,GenerateKey,The following statement contains a magic number: key_ = new byte[12];
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESStream.cs,ZipAESStream,The following statement contains a magic number: _slideBuffer = new byte[1024];
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: blockSize != 16 && blockSize != 32
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: blockSize != 16 && blockSize != 32
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: throw new Exception("Invalid salt len. Must be " + blockSize / 2 + " for blocksize " + blockSize);
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: saltBytes.Length != blockSize / 2
Magic Number,ICSharpCode.SharpZipLib.GZip,GZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GZip.cs,Decompress,The following statement contains a magic number: Core.StreamUtils.Copy(gzipInput' outStream' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GZip.cs,Compress,The following statement contains a magic number: bufferSize < 512
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadHeader,The following statement contains a magic number: magic != (GZipConstants.GZIP_MAGIC >> 8)
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadHeader,The following statement contains a magic number: compressionType != 8
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadHeader,The following statement contains a magic number: i < 6
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadHeader,The following statement contains a magic number: int extraLen = (len2 << 8) | len1;
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadHeader,The following statement contains a magic number: crcval = (crcval << 8) | tempByte;
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: byte[] footer = new byte[8];
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: int needed = 8;
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: int count = inputBuffer.ReadClearTextBuffer(footer' 8 - needed' needed);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: int crcval = (footer[0] & 0xff) | ((footer[1] & 0xff) << 8) | ((footer[2] & 0xff) << 16) | (footer[3] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: int crcval = (footer[0] & 0xff) | ((footer[1] & 0xff) << 8) | ((footer[2] & 0xff) << 16) | (footer[3] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: int crcval = (footer[0] & 0xff) | ((footer[1] & 0xff) << 8) | ((footer[2] & 0xff) << 16) | (footer[3] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: int crcval = (footer[0] & 0xff) | ((footer[1] & 0xff) << 8) | ((footer[2] & 0xff) << 16) | (footer[3] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: int crcval = (footer[0] & 0xff) | ((footer[1] & 0xff) << 8) | ((footer[2] & 0xff) << 16) | (footer[3] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: uint total =  				(uint)((uint)footer[4] & 0xff) |  				(uint)(((uint)footer[5] & 0xff) << 8) |  				(uint)(((uint)footer[6] & 0xff) << 16) |  				(uint)((uint)footer[7] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: uint total =  				(uint)((uint)footer[4] & 0xff) |  				(uint)(((uint)footer[5] & 0xff) << 8) |  				(uint)(((uint)footer[6] & 0xff) << 16) |  				(uint)((uint)footer[7] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: uint total =  				(uint)((uint)footer[4] & 0xff) |  				(uint)(((uint)footer[5] & 0xff) << 8) |  				(uint)(((uint)footer[6] & 0xff) << 16) |  				(uint)((uint)footer[7] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: uint total =  				(uint)((uint)footer[4] & 0xff) |  				(uint)(((uint)footer[5] & 0xff) << 8) |  				(uint)(((uint)footer[6] & 0xff) << 16) |  				(uint)((uint)footer[7] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: uint total =  				(uint)((uint)footer[4] & 0xff) |  				(uint)(((uint)footer[5] & 0xff) << 8) |  				(uint)(((uint)footer[6] & 0xff) << 16) |  				(uint)((uint)footer[7] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: uint total =  				(uint)((uint)footer[4] & 0xff) |  				(uint)(((uint)footer[5] & 0xff) << 8) |  				(uint)(((uint)footer[6] & 0xff) << 16) |  				(uint)((uint)footer[7] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipInputStream.cs,ReadFooter,The following statement contains a magic number: uint total =  				(uint)((uint)footer[4] & 0xff) |  				(uint)(((uint)footer[5] & 0xff) << 8) |  				(uint)(((uint)footer[6] & 0xff) << 16) |  				(uint)((uint)footer[7] << 24);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,Finish,The following statement contains a magic number: gzipFooter = new byte[] {  					(byte) crcval' (byte) (crcval >> 8)'  					(byte) (crcval >> 16)' (byte) (crcval >> 24)'    					(byte) totalin' (byte) (totalin >> 8)'  					(byte) (totalin >> 16)' (byte) (totalin >> 24)  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,Finish,The following statement contains a magic number: gzipFooter = new byte[] {  					(byte) crcval' (byte) (crcval >> 8)'  					(byte) (crcval >> 16)' (byte) (crcval >> 24)'    					(byte) totalin' (byte) (totalin >> 8)'  					(byte) (totalin >> 16)' (byte) (totalin >> 24)  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,Finish,The following statement contains a magic number: gzipFooter = new byte[] {  					(byte) crcval' (byte) (crcval >> 8)'  					(byte) (crcval >> 16)' (byte) (crcval >> 24)'    					(byte) totalin' (byte) (totalin >> 8)'  					(byte) (totalin >> 16)' (byte) (totalin >> 24)  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,Finish,The following statement contains a magic number: gzipFooter = new byte[] {  					(byte) crcval' (byte) (crcval >> 8)'  					(byte) (crcval >> 16)' (byte) (crcval >> 24)'    					(byte) totalin' (byte) (totalin >> 8)'  					(byte) (totalin >> 16)' (byte) (totalin >> 24)  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,Finish,The following statement contains a magic number: gzipFooter = new byte[] {  					(byte) crcval' (byte) (crcval >> 8)'  					(byte) (crcval >> 16)' (byte) (crcval >> 24)'    					(byte) totalin' (byte) (totalin >> 8)'  					(byte) (totalin >> 16)' (byte) (totalin >> 24)  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,Finish,The following statement contains a magic number: gzipFooter = new byte[] {  					(byte) crcval' (byte) (crcval >> 8)'  					(byte) (crcval >> 16)' (byte) (crcval >> 24)'    					(byte) totalin' (byte) (totalin >> 8)'  					(byte) (totalin >> 16)' (byte) (totalin >> 24)  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The following statement contains a magic number: var mod_time = (int)((DateTime.Now.Ticks - new DateTime(1970' 1' 1).Ticks) / 10000000L);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The following statement contains a magic number: var mod_time = (int)((DateTime.Now.Ticks - new DateTime(1970' 1' 1).Ticks) / 10000000L);
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The following statement contains a magic number: byte[] gzipHeader = {  					// The two magic bytes  					(byte) (GZipConstants.GZIP_MAGIC >> 8)' (byte) (GZipConstants.GZIP_MAGIC & 0xff)'    					// The compression type  					(byte) Deflater.DEFLATED'    					// The flags (not set)  					0'    					// The modification time  					(byte) mod_time' (byte) (mod_time >> 8)'  					(byte) (mod_time >> 16)' (byte) (mod_time >> 24)'    					// The extra flags  					0'    					// The OS type (unknown)  					(byte) 255  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The following statement contains a magic number: byte[] gzipHeader = {  					// The two magic bytes  					(byte) (GZipConstants.GZIP_MAGIC >> 8)' (byte) (GZipConstants.GZIP_MAGIC & 0xff)'    					// The compression type  					(byte) Deflater.DEFLATED'    					// The flags (not set)  					0'    					// The modification time  					(byte) mod_time' (byte) (mod_time >> 8)'  					(byte) (mod_time >> 16)' (byte) (mod_time >> 24)'    					// The extra flags  					0'    					// The OS type (unknown)  					(byte) 255  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The following statement contains a magic number: byte[] gzipHeader = {  					// The two magic bytes  					(byte) (GZipConstants.GZIP_MAGIC >> 8)' (byte) (GZipConstants.GZIP_MAGIC & 0xff)'    					// The compression type  					(byte) Deflater.DEFLATED'    					// The flags (not set)  					0'    					// The modification time  					(byte) mod_time' (byte) (mod_time >> 8)'  					(byte) (mod_time >> 16)' (byte) (mod_time >> 24)'    					// The extra flags  					0'    					// The OS type (unknown)  					(byte) 255  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The following statement contains a magic number: byte[] gzipHeader = {  					// The two magic bytes  					(byte) (GZipConstants.GZIP_MAGIC >> 8)' (byte) (GZipConstants.GZIP_MAGIC & 0xff)'    					// The compression type  					(byte) Deflater.DEFLATED'    					// The flags (not set)  					0'    					// The modification time  					(byte) mod_time' (byte) (mod_time >> 8)'  					(byte) (mod_time >> 16)' (byte) (mod_time >> 24)'    					// The extra flags  					0'    					// The OS type (unknown)  					(byte) 255  				};
Magic Number,ICSharpCode.SharpZipLib.GZip,GZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\GZip\GzipOutputStream.cs,WriteHeader,The following statement contains a magic number: byte[] gzipHeader = {  					// The two magic bytes  					(byte) (GZipConstants.GZIP_MAGIC >> 8)' (byte) (GZipConstants.GZIP_MAGIC & 0xff)'    					// The compression type  					(byte) Deflater.DEFLATED'    					// The flags (not set)  					0'    					// The modification time  					(byte) mod_time' (byte) (mod_time >> 8)'  					(byte) (mod_time >> 16)' (byte) (mod_time >> 24)'    					// The extra flags  					0'    					// The OS type (unknown)  					(byte) 255  				};
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,Read,The following statement contains a magic number: do {  				if (end < EXTRA) {  					Fill();  				}    				int bitIn = (got > 0) ? (end - end % lNBits) << 3 :  										(end << 3) - (lNBits - 1);    				while (lBitPos < bitIn) {  					#region A  					// handle 1-byte reads correctly  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						maxMaxCode = lMaxMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}    					// check for code-width expansion  					if (lFreeEnt > lMaxCode) {  						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) +  						nBytes - (lBitPos - 1 + nBytes) % nBytes;    						lNBits++;  						lMaxCode = (lNBits == maxBits) ? lMaxMaxCode :  														(1 << lNBits) - 1;    						lBitMask = (1 << lNBits) - 1;  						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region B  					// read next code  					int pos = lBitPos >> 3;  					int code = (((lData[pos] & 0xFF) |  						((lData[pos + 1] & 0xFF) << 8) |  						((lData[pos + 2] & 0xFF) << 16)) >>  						(lBitPos & 0x7)) & lBitMask;    					lBitPos += lNBits;    					// handle first iteration  					if (lOldCode == -1) {  						if (code >= 256)  							throw new LzwException("corrupt input: " + code + " > 255");    						lFinChar = (byte)(lOldCode = code);  						buffer[offset++] = lFinChar;  						count--;  						continue;  					}    					// handle CLEAR code  					if (code == TBL_CLEAR && blockMode) {  						Array.Copy(zeros' 0' lTabPrefix' 0' zeros.Length);  						lFreeEnt = TBL_FIRST - 1;    						int nBytes = lNBits << 3;  						lBitPos = (lBitPos - 1) + nBytes - (lBitPos - 1 + nBytes) % nBytes;  						lNBits = LzwConstants.INIT_BITS;  						lMaxCode = (1 << lNBits) - 1;  						lBitMask = lMaxCode;    						// Code tables reset    						lBitPos = ResetBuf(lBitPos);  						goto MainLoop;  					}  					#endregion    					#region C  					// setup  					int inCode = code;  					lStackP = lStack.Length;    					// Handle KwK case  					if (code >= lFreeEnt) {  						if (code > lFreeEnt) {  							throw new LzwException("corrupt input: code=" + code +  								"' freeEnt=" + lFreeEnt);  						}    						lStack[--lStackP] = lFinChar;  						code = lOldCode;  					}    					// Generate output characters in reverse order  					while (code >= 256) {  						lStack[--lStackP] = lTabSuffix[code];  						code = lTabPrefix[code];  					}    					lFinChar = lTabSuffix[code];  					buffer[offset++] = lFinChar;  					count--;    					// And put them out in forward order  					sSize = lStack.Length - lStackP;  					int num = (sSize >= count) ? count : sSize;  					Array.Copy(lStack' lStackP' buffer' offset' num);  					offset += num;  					count -= num;  					lStackP += num;  					#endregion    					#region D  					// generate new entry in table  					if (lFreeEnt < lMaxMaxCode) {  						lTabPrefix[lFreeEnt] = lOldCode;  						lTabSuffix[lFreeEnt] = lFinChar;  						lFreeEnt++;  					}    					// Remember previous code  					lOldCode = inCode;    					// if output buffer full' then return  					if (count == 0) {  						nBits = lNBits;  						maxCode = lMaxCode;  						bitMask = lBitMask;  						oldCode = lOldCode;  						finChar = lFinChar;  						stackP = lStackP;  						freeEnt = lFreeEnt;  						bitPos = lBitPos;    						return offset - start;  					}  					#endregion  				}   // while    				lBitPos = ResetBuf(lBitPos);    			} while (got > 0);
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,ResetBuf,The following statement contains a magic number: int pos = bitPosition >> 3;
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,ParseHeader,The following statement contains a magic number: hdr[0] != (LzwConstants.MAGIC >> 8) || hdr[1] != (LzwConstants.MAGIC & 0xff)
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,ParseHeader,The following statement contains a magic number: blockMode = (hdr[2] & LzwConstants.BLOCK_MODE_MASK) > 0;
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,ParseHeader,The following statement contains a magic number: maxBits = hdr[2] & LzwConstants.BIT_MASK;
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,ParseHeader,The following statement contains a magic number: (hdr[2] & LzwConstants.RESERVED_MASK) > 0
Magic Number,ICSharpCode.SharpZipLib.Lzw,LzwInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Lzw\LzwInputStream.cs,ParseHeader,The following statement contains a magic number: freeEnt = blockMode ? TBL_FIRST : 256;
Magic Number,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,IsBinary,The following statement contains a magic number: int sampleSize = Math.Min(4096' (int)fs.Length);
Magic Number,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,IsBinary,The following statement contains a magic number: (b < 8) || ((b > 13) && (b < 32)) || (b == 255)
Magic Number,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,IsBinary,The following statement contains a magic number: (b < 8) || ((b > 13) && (b < 32)) || (b == 255)
Magic Number,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,IsBinary,The following statement contains a magic number: (b < 8) || ((b > 13) && (b < 32)) || (b == 255)
Magic Number,ICSharpCode.SharpZipLib.Tar,TarArchive,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarArchive.cs,IsBinary,The following statement contains a magic number: (b < 8) || ((b > 13) && (b < 32)) || (b == 255)
Magic Number,ICSharpCode.SharpZipLib.Tar,TarEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarEntry.cs,GetFileTarHeader,The following statement contains a magic number: header.Mode = 1003;
Magic Number,ICSharpCode.SharpZipLib.Tar,TarEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarEntry.cs,NameTarHeader,The following statement contains a magic number: header.Mode = isDir ? 1003 : 33216;
Magic Number,ICSharpCode.SharpZipLib.Tar,TarEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarEntry.cs,NameTarHeader,The following statement contains a magic number: header.Mode = isDir ? 1003 : 33216;
Magic Number,ICSharpCode.SharpZipLib.Tar,TarExtendedHeaderReader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarExtendedHeaderReader.cs,Read,The following statement contains a magic number: headerParts = new string[3];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarExtendedHeaderReader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarExtendedHeaderReader.cs,Flush,The following statement contains a magic number: decoder.Convert(byteBuffer' 0' bbIndex' charBuffer' 0' 4' false' out int bytesUsed' out int charsUsed' out bool completed);
Magic Number,ICSharpCode.SharpZipLib.Tar,TarExtendedHeaderReader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarExtendedHeaderReader.cs,ResetBuffers,The following statement contains a magic number: charBuffer = new char[4];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarExtendedHeaderReader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarExtendedHeaderReader.cs,ResetBuffers,The following statement contains a magic number: byteBuffer = new byte[4];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,ParseBinaryOrOctal,The following statement contains a magic number: result = result << 8 | header[offset + pos];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,ParseOctal,The following statement contains a magic number: result = (result << 3) + (header[i] - '0');
Magic Number,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,GetOctalBytes,The following statement contains a magic number: buffer[offset + localIndex] = (byte)((byte)'0' + (byte)(v & 7));
Magic Number,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,GetOctalBytes,The following statement contains a magic number: v >>= 3;
Magic Number,ICSharpCode.SharpZipLib.Tar,TarHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarHeader.cs,GetBinaryOrOctalBytes,The following statement contains a magic number: value = value >> 8;
Magic Number,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,Skip,The following statement contains a magic number: byte[] skipBuf = new byte[8 * 1024];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,Skip,The following statement contains a magic number: byte[] skipBuf = new byte[8 * 1024];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,CopyEntryContents,The following statement contains a magic number: byte[] tempBuffer = new byte[32 * 1024];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarInputStream.cs,CopyEntryContents,The following statement contains a magic number: byte[] tempBuffer = new byte[32 * 1024];
Magic Number,ICSharpCode.SharpZipLib.Tar,TarOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Tar\TarOutputStream.cs,PutNextEntry,The following statement contains a magic number: longHeader.Mode = 420;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflater,The following statement contains a magic number: level = 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,SetLevel,The following statement contains a magic number: level = 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: level_flags = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: level_flags < 0 || level_flags > 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header |= level_flags << 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header += 31 - (header % 31);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header += 31 - (header % 31);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: pending.WriteShortMSB(chksum >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: switch (state) {  						case BUSY_STATE:  							// We need more input now  							return origLength - length;  						case FLUSHING_STATE:  							if (level != NO_COMPRESSION) {  								/* We have to supply some lookahead.  8 bit lookahead  								 * is needed by the zlib inflater' and we must fill  								 * the next byte' so that all bits are flushed.  								 */  								int neededbits = 8 + ((-pending.BitCount) & 7);  								while (neededbits > 0) {  									/* write a static tree block consisting solely of  									 * an EOF:  									 */  									pending.WriteBits(2' 10);  									neededbits -= 10;  								}  							}  							state = BUSY_STATE;  							break;  						case FINISHING_STATE:  							pending.AlignToByte();    							// Compressed data is complete.  Write footer information if required.  							if (!noZlibHeaderOrFooter) {  								int adler = engine.Adler;  								pending.WriteShortMSB(adler >> 16);  								pending.WriteShortMSB(adler & 0xffff);  							}  							state = FINISHED_STATE;  							break;  					}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: switch (state) {  						case BUSY_STATE:  							// We need more input now  							return origLength - length;  						case FLUSHING_STATE:  							if (level != NO_COMPRESSION) {  								/* We have to supply some lookahead.  8 bit lookahead  								 * is needed by the zlib inflater' and we must fill  								 * the next byte' so that all bits are flushed.  								 */  								int neededbits = 8 + ((-pending.BitCount) & 7);  								while (neededbits > 0) {  									/* write a static tree block consisting solely of  									 * an EOF:  									 */  									pending.WriteBits(2' 10);  									neededbits -= 10;  								}  							}  							state = BUSY_STATE;  							break;  						case FINISHING_STATE:  							pending.AlignToByte();    							// Compressed data is complete.  Write footer information if required.  							if (!noZlibHeaderOrFooter) {  								int adler = engine.Adler;  								pending.WriteShortMSB(adler >> 16);  								pending.WriteShortMSB(adler & 0xffff);  							}  							state = FINISHED_STATE;  							break;  					}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: switch (state) {  						case BUSY_STATE:  							// We need more input now  							return origLength - length;  						case FLUSHING_STATE:  							if (level != NO_COMPRESSION) {  								/* We have to supply some lookahead.  8 bit lookahead  								 * is needed by the zlib inflater' and we must fill  								 * the next byte' so that all bits are flushed.  								 */  								int neededbits = 8 + ((-pending.BitCount) & 7);  								while (neededbits > 0) {  									/* write a static tree block consisting solely of  									 * an EOF:  									 */  									pending.WriteBits(2' 10);  									neededbits -= 10;  								}  							}  							state = BUSY_STATE;  							break;  						case FINISHING_STATE:  							pending.AlignToByte();    							// Compressed data is complete.  Write footer information if required.  							if (!noZlibHeaderOrFooter) {  								int adler = engine.Adler;  								pending.WriteShortMSB(adler >> 16);  								pending.WriteShortMSB(adler & 0xffff);  							}  							state = FINISHED_STATE;  							break;  					}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: switch (state) {  						case BUSY_STATE:  							// We need more input now  							return origLength - length;  						case FLUSHING_STATE:  							if (level != NO_COMPRESSION) {  								/* We have to supply some lookahead.  8 bit lookahead  								 * is needed by the zlib inflater' and we must fill  								 * the next byte' so that all bits are flushed.  								 */  								int neededbits = 8 + ((-pending.BitCount) & 7);  								while (neededbits > 0) {  									/* write a static tree block consisting solely of  									 * an EOF:  									 */  									pending.WriteBits(2' 10);  									neededbits -= 10;  								}  							}  							state = BUSY_STATE;  							break;  						case FINISHING_STATE:  							pending.AlignToByte();    							// Compressed data is complete.  Write footer information if required.  							if (!noZlibHeaderOrFooter) {  								int adler = engine.Adler;  								pending.WriteShortMSB(adler >> 16);  								pending.WriteShortMSB(adler & 0xffff);  							}  							state = FINISHED_STATE;  							break;  					}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: switch (state) {  						case BUSY_STATE:  							// We need more input now  							return origLength - length;  						case FLUSHING_STATE:  							if (level != NO_COMPRESSION) {  								/* We have to supply some lookahead.  8 bit lookahead  								 * is needed by the zlib inflater' and we must fill  								 * the next byte' so that all bits are flushed.  								 */  								int neededbits = 8 + ((-pending.BitCount) & 7);  								while (neededbits > 0) {  									/* write a static tree block consisting solely of  									 * an EOF:  									 */  									pending.WriteBits(2' 10);  									neededbits -= 10;  								}  							}  							state = BUSY_STATE;  							break;  						case FINISHING_STATE:  							pending.AlignToByte();    							// Compressed data is complete.  Write footer information if required.  							if (!noZlibHeaderOrFooter) {  								int adler = engine.Adler;  								pending.WriteShortMSB(adler >> 16);  								pending.WriteShortMSB(adler & 0xffff);  							}  							state = FINISHED_STATE;  							break;  					}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: switch (state) {  						case BUSY_STATE:  							// We need more input now  							return origLength - length;  						case FLUSHING_STATE:  							if (level != NO_COMPRESSION) {  								/* We have to supply some lookahead.  8 bit lookahead  								 * is needed by the zlib inflater' and we must fill  								 * the next byte' so that all bits are flushed.  								 */  								int neededbits = 8 + ((-pending.BitCount) & 7);  								while (neededbits > 0) {  									/* write a static tree block consisting solely of  									 * an EOF:  									 */  									pending.WriteBits(2' 10);  									neededbits -= 10;  								}  							}  							state = BUSY_STATE;  							break;  						case FINISHING_STATE:  							pending.AlignToByte();    							// Compressed data is complete.  Write footer information if required.  							if (!noZlibHeaderOrFooter) {  								int adler = engine.Adler;  								pending.WriteShortMSB(adler >> 16);  								pending.WriteShortMSB(adler & 0xffff);  							}  							state = FINISHED_STATE;  							break;  					}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflaterEngine,The following statement contains a magic number: window = new byte[2 * DeflaterConstants.WSIZE];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,SetDictionary,The following statement contains a magic number: strstart += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,SetLevel,The following statement contains a magic number: (level < 0) || (level > 9)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FillWindow,The following statement contains a magic number: int more = 2 * DeflaterConstants.WSIZE - lookahead - strstart;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: chainLength >>= 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,The following statement contains a magic number: strstart > 2 * DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: strstart >= 2 * DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == DeflaterConstants.MIN_MATCH && strstart - matchStart > TooFar))
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: prevLen -= 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x030 + i) << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 144
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 9;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 280
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x0c0 - 280 + i) << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x0c0 - 280 + i) << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticDCodes[i] = BitReverse(i << 11);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticDLength[i] = 5;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: distTree = new Tree(this' DIST_NUM' 1' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(distTree.numCodes - 1' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTree.length[BL_ORDER[rank]]' 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: int bits = (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: int bits = (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: bits > 0 && bits <= 5
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: bits = dc / 2 - 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushStoredBlock,The following statement contains a magic number: pending.WriteBits((DeflaterConstants.STORED_BLOCK << 1) + (lastBlock ? 1 : 0)' 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int blTreeCodes = 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +  				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +  				extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +  				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +  				extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: storedOffset >= 0 && storedLength + 4 < opt_len >> 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: storedOffset >= 0 && storedLength + 4 < opt_len >> 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: l_buf[last_lit++] = (byte)(length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: int lc = Lcode(length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: lc >= 265 && lc < 285
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: lc >= 265 && lc < 285
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += dc / 2 - 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: dc >= 4
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short)(bit4Reverse[toReverse & 0xF] << 12 |  							bit4Reverse[(toReverse >> 4) & 0xF] << 8 |  							bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  							bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short)(bit4Reverse[toReverse & 0xF] << 12 |  							bit4Reverse[(toReverse >> 4) & 0xF] << 8 |  							bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  							bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short)(bit4Reverse[toReverse & 0xF] << 12 |  							bit4Reverse[(toReverse >> 4) & 0xF] << 8 |  							bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  							bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short)(bit4Reverse[toReverse & 0xF] << 12 |  							bit4Reverse[(toReverse >> 4) & 0xF] << 8 |  							bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  							bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short)(bit4Reverse[toReverse & 0xF] << 12 |  							bit4Reverse[(toReverse >> 4) & 0xF] << 8 |  							bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  							bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short)(bit4Reverse[toReverse & 0xF] << 12 |  							bit4Reverse[(toReverse >> 4) & 0xF] << 8 |  							bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  							bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: return 285;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: length == 255
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: int code = 257;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: code += 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: length >= 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: code += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: distance >= 4
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: code += bl_counts[bits] << (15 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: nextCode[bits - 1] += 1 << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: pos > 0 && freqs[heap[ppos = (pos - 1) / 2]] > freq
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int node = maxCode < 2 ? ++maxCode : 0;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: heapLen < 2
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] values = new int[2 * heapLen - 1];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * i] = node;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * i + 1] = -1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: values[i] = freqs[node] << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: path = path * 2 + 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: (path = ppos) > 0 && values[heap[ppos = (path - 1) / 2]] > lastVal
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * last] = first;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * last + 1] = second;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: path = ppos * 2 + 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: (path = ppos) > 0 && values[heap[ppos = (path - 1) / 2]] > lastVal
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: heap[0] != childs.Length / 2 - 1
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: max_count = 138;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: min_count = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: max_count = 138;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: min_count = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numNodes = childs.Length / 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numLeafs = (numNodes + 1) / 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: childs[2 * i + 1] != -1
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: bl_counts[maxLength - 2] -= overflow;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int nodePtr = 2 * numLeafs;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int childPtr = 2 * childs[nodePtr++];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: int header = input.PeekBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header % 31 != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: (header & 0x0f00) != (Deflater.DEFLATED << 8)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: int dictByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: readAdler = (readAdler << 8) | dictByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode) {  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0) {  							outputWindow.Write(symbol);  							if (--free < 258) {  								return true;  							}  						}    						if (symbol < 257) {  							if (symbol < 0) {  								return false;  							} else {  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}    						try {  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through    					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through    					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0) {  							return false;  						}    						try {  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep dist code");  						}    						goto case DECODE_HUFFMAN_DISTBITS; // fall through    					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}    						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;    					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode) {  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0) {  							outputWindow.Write(symbol);  							if (--free < 258) {  								return true;  							}  						}    						if (symbol < 257) {  							if (symbol < 0) {  								return false;  							} else {  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}    						try {  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through    					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through    					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0) {  							return false;  						}    						try {  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep dist code");  						}    						goto case DECODE_HUFFMAN_DISTBITS; // fall through    					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}    						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;    					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode) {  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0) {  							outputWindow.Write(symbol);  							if (--free < 258) {  								return true;  							}  						}    						if (symbol < 257) {  							if (symbol < 0) {  								return false;  							} else {  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}    						try {  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through    					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through    					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0) {  							return false;  						}    						try {  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep dist code");  						}    						goto case DECODE_HUFFMAN_DISTBITS; // fall through    					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}    						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;    					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode) {  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0) {  							outputWindow.Write(symbol);  							if (--free < 258) {  								return true;  							}  						}    						if (symbol < 257) {  							if (symbol < 0) {  								return false;  							} else {  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}    						try {  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through    					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through    					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0) {  							return false;  						}    						try {  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						} catch (Exception) {  							throw new SharpZipBaseException("Illegal rep dist code");  						}    						goto case DECODE_HUFFMAN_DISTBITS; // fall through    					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0) {  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0) {  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}    						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;    					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: free >= 258
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: int chkByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: readAdler = (readAdler << 8) | chkByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();    				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}    					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);    					isLastBlock |= (type & 1) != 0;  					switch (type >> 1) {  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader(input);  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;    				case DECODE_STORED_LEN1: {  						if ((uncomprLen = input.PeekBits(16)) < 0) {  							return false;  						}  						input.DropBits(16);  						mode = DECODE_STORED_LEN2;  					}  					goto case DECODE_STORED_LEN2; // fall through    				case DECODE_STORED_LEN2: {  						int nlen = input.PeekBits(16);  						if (nlen < 0) {  							return false;  						}  						input.DropBits(16);  						if (nlen != (uncomprLen ^ 0xffff)) {  							throw new SharpZipBaseException("broken uncompressed block");  						}  						mode = DECODE_STORED;  					}  					goto case DECODE_STORED; // fall through    				case DECODE_STORED: {  						int more = outputWindow.CopyStored(input' uncomprLen);  						uncomprLen -= more;  						if (uncomprLen == 0) {  							mode = DECODE_BLOCKS;  							return true;  						}  						return !input.IsNeedingInput;  					}    				case DECODE_DYN_HEADER:  					if (!dynHeader.AttemptRead()) {  						return false;  					}    					litlenTree = dynHeader.LiteralLengthTree;  					distTree = dynHeader.DistanceTree;  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through    				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();    				case FINISHED:  					return false;    				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();    				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}    					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);    					isLastBlock |= (type & 1) != 0;  					switch (type >> 1) {  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader(input);  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;    				case DECODE_STORED_LEN1: {  						if ((uncomprLen = input.PeekBits(16)) < 0) {  							return false;  						}  						input.DropBits(16);  						mode = DECODE_STORED_LEN2;  					}  					goto case DECODE_STORED_LEN2; // fall through    				case DECODE_STORED_LEN2: {  						int nlen = input.PeekBits(16);  						if (nlen < 0) {  							return false;  						}  						input.DropBits(16);  						if (nlen != (uncomprLen ^ 0xffff)) {  							throw new SharpZipBaseException("broken uncompressed block");  						}  						mode = DECODE_STORED;  					}  					goto case DECODE_STORED; // fall through    				case DECODE_STORED: {  						int more = outputWindow.CopyStored(input' uncomprLen);  						uncomprLen -= more;  						if (uncomprLen == 0) {  							mode = DECODE_BLOCKS;  							return true;  						}  						return !input.IsNeedingInput;  					}    				case DECODE_DYN_HEADER:  					if (!dynHeader.AttemptRead()) {  						return false;  					}    					litlenTree = dynHeader.LiteralLengthTree;  					distTree = dynHeader.DistanceTree;  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through    				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();    				case FINISHED:  					return false;    				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();    				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}    					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);    					isLastBlock |= (type & 1) != 0;  					switch (type >> 1) {  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader(input);  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;    				case DECODE_STORED_LEN1: {  						if ((uncomprLen = input.PeekBits(16)) < 0) {  							return false;  						}  						input.DropBits(16);  						mode = DECODE_STORED_LEN2;  					}  					goto case DECODE_STORED_LEN2; // fall through    				case DECODE_STORED_LEN2: {  						int nlen = input.PeekBits(16);  						if (nlen < 0) {  							return false;  						}  						input.DropBits(16);  						if (nlen != (uncomprLen ^ 0xffff)) {  							throw new SharpZipBaseException("broken uncompressed block");  						}  						mode = DECODE_STORED;  					}  					goto case DECODE_STORED; // fall through    				case DECODE_STORED: {  						int more = outputWindow.CopyStored(input' uncomprLen);  						uncomprLen -= more;  						if (uncomprLen == 0) {  							mode = DECODE_BLOCKS;  							return true;  						}  						return !input.IsNeedingInput;  					}    				case DECODE_DYN_HEADER:  					if (!dynHeader.AttemptRead()) {  						return false;  					}    					litlenTree = dynHeader.LiteralLengthTree;  					distTree = dynHeader.DistanceTree;  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through    				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();    				case FINISHED:  					return false;    				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();    				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}    					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);    					isLastBlock |= (type & 1) != 0;  					switch (type >> 1) {  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader(input);  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;    				case DECODE_STORED_LEN1: {  						if ((uncomprLen = input.PeekBits(16)) < 0) {  							return false;  						}  						input.DropBits(16);  						mode = DECODE_STORED_LEN2;  					}  					goto case DECODE_STORED_LEN2; // fall through    				case DECODE_STORED_LEN2: {  						int nlen = input.PeekBits(16);  						if (nlen < 0) {  							return false;  						}  						input.DropBits(16);  						if (nlen != (uncomprLen ^ 0xffff)) {  							throw new SharpZipBaseException("broken uncompressed block");  						}  						mode = DECODE_STORED;  					}  					goto case DECODE_STORED; // fall through    				case DECODE_STORED: {  						int more = outputWindow.CopyStored(input' uncomprLen);  						uncomprLen -= more;  						if (uncomprLen == 0) {  							mode = DECODE_BLOCKS;  							return true;  						}  						return !input.IsNeedingInput;  					}    				case DECODE_DYN_HEADER:  					if (!dynHeader.AttemptRead()) {  						return false;  					}    					litlenTree = dynHeader.LiteralLengthTree;  					distTree = dynHeader.DistanceTree;  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through    				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();    				case FINISHED:  					return false;    				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();    				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}    					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);    					isLastBlock |= (type & 1) != 0;  					switch (type >> 1) {  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader(input);  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;    				case DECODE_STORED_LEN1: {  						if ((uncomprLen = input.PeekBits(16)) < 0) {  							return false;  						}  						input.DropBits(16);  						mode = DECODE_STORED_LEN2;  					}  					goto case DECODE_STORED_LEN2; // fall through    				case DECODE_STORED_LEN2: {  						int nlen = input.PeekBits(16);  						if (nlen < 0) {  							return false;  						}  						input.DropBits(16);  						if (nlen != (uncomprLen ^ 0xffff)) {  							throw new SharpZipBaseException("broken uncompressed block");  						}  						mode = DECODE_STORED;  					}  					goto case DECODE_STORED; // fall through    				case DECODE_STORED: {  						int more = outputWindow.CopyStored(input' uncomprLen);  						uncomprLen -= more;  						if (uncomprLen == 0) {  							mode = DECODE_BLOCKS;  							return true;  						}  						return !input.IsNeedingInput;  					}    				case DECODE_DYN_HEADER:  					if (!dynHeader.AttemptRead()) {  						return false;  					}    					litlenTree = dynHeader.LiteralLengthTree;  					distTree = dynHeader.DistanceTree;  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through    				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();    				case FINISHED:  					return false;    				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();    				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}    					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);    					isLastBlock |= (type & 1) != 0;  					switch (type >> 1) {  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader(input);  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;    				case DECODE_STORED_LEN1: {  						if ((uncomprLen = input.PeekBits(16)) < 0) {  							return false;  						}  						input.DropBits(16);  						mode = DECODE_STORED_LEN2;  					}  					goto case DECODE_STORED_LEN2; // fall through    				case DECODE_STORED_LEN2: {  						int nlen = input.PeekBits(16);  						if (nlen < 0) {  							return false;  						}  						input.DropBits(16);  						if (nlen != (uncomprLen ^ 0xffff)) {  							throw new SharpZipBaseException("broken uncompressed block");  						}  						mode = DECODE_STORED;  					}  					goto case DECODE_STORED; // fall through    				case DECODE_STORED: {  						int more = outputWindow.CopyStored(input' uncomprLen);  						uncomprLen -= more;  						if (uncomprLen == 0) {  							mode = DECODE_BLOCKS;  							return true;  						}  						return !input.IsNeedingInput;  					}    				case DECODE_DYN_HEADER:  					if (!dynHeader.AttemptRead()) {  						return false;  					}    					litlenTree = dynHeader.LiteralLengthTree;  					distTree = dynHeader.DistanceTree;  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through    				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();    				case FINISHED:  					return false;    				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();    				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}    					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);    					isLastBlock |= (type & 1) != 0;  					switch (type >> 1) {  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader(input);  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;    				case DECODE_STORED_LEN1: {  						if ((uncomprLen = input.PeekBits(16)) < 0) {  							return false;  						}  						input.DropBits(16);  						mode = DECODE_STORED_LEN2;  					}  					goto case DECODE_STORED_LEN2; // fall through    				case DECODE_STORED_LEN2: {  						int nlen = input.PeekBits(16);  						if (nlen < 0) {  							return false;  						}  						input.DropBits(16);  						if (nlen != (uncomprLen ^ 0xffff)) {  							throw new SharpZipBaseException("broken uncompressed block");  						}  						mode = DECODE_STORED;  					}  					goto case DECODE_STORED; // fall through    				case DECODE_STORED: {  						int more = outputWindow.CopyStored(input' uncomprLen);  						uncomprLen -= more;  						if (uncomprLen == 0) {  							mode = DECODE_BLOCKS;  							return true;  						}  						return !input.IsNeedingInput;  					}    				case DECODE_DYN_HEADER:  					if (!dynHeader.AttemptRead()) {  						return false;  					}    					litlenTree = dynHeader.LiteralLengthTree;  					distTree = dynHeader.DistanceTree;  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through    				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();    				case FINISHED:  					return false;    				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: !input.TryGetBits(5' ref litLenCodeCount' 257)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: !input.TryGetBits(5' ref litLenCodeCount' 257)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: !input.TryGetBits(5' ref distanceCodeCount' 1)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: !input.TryGetBits(4' ref metaCodeCount' 4)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: !input.TryGetBits(4' ref metaCodeCount' 4)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: !input.TryGetBits(3' ref codeLengths' MetaCodeLengthIndex[i])
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: symbol < 16
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterDynHeader.cs,CreateStateMachine,The following statement contains a magic number: codeLengths[256] == 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: byte[] codeLengths = new byte[288];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 144
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 9;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 280
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 288
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths = new byte[32];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 5;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 32
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treeSize = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code += blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treeSize += (end - start) >> (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treePtr = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code -= blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[DeflaterHuffman.BitReverse(i)] = (short)((-treePtr << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treePtr += 1 << (bits - 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[revcode] = (short)((i << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits <= 9
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: nextCode[bits] = code + (1 << (16 - bits));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int subtree = -(symbol >> 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int bitlen = symbol & 15;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: symbol = tree[subtree | (lookahead >> 9)];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: (lookahead = input.PeekBits(9)) >= 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteShort,The following statement contains a magic number: buffer[end++] = unchecked((byte)(value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer[end++] = unchecked((byte)(value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer[end++] = unchecked((byte)(value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer[end++] = unchecked((byte)(value >> 24));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: buffer[end++] = unchecked((byte)(bits >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: bitCount > 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: buffer[end++] = unchecked((byte)(bits >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bits >>= 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bitCount -= 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bitCount >= 16
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteShortMSB,The following statement contains a magic number: buffer[end++] = unchecked((byte)(s >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bits >>= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bitCount -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bitCount >= 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\DeflaterOutputStream.cs,DeflaterOutputStream,The following statement contains a magic number: bufferSize < 512
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\DeflaterOutputStream.cs,InitializeAESPassword,The following statement contains a magic number: int blockSize = entry.AESKeySize / 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: bufferSize = 1024;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: bufferSize < 1024
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeShort,The following statement contains a magic number: return ReadLeByte() | (ReadLeByte() << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeInt,The following statement contains a magic number: return ReadLeShort() | (ReadLeShort() << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeLong,The following statement contains a magic number: return (uint)ReadLeInt() | ((long)ReadLeInt() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: buffer_ |= (uint)((window_[windowStart_++] & 0xff |  								 (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: bitsInBuffer_ += 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: buffer_ >>= (bitsInBuffer_ & 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: bitsInBuffer_ &= ~7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: (bitsInBuffer_ & 7) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: buffer_ >>= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SetInput,The following statement contains a magic number: bitsInBuffer_ += 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,AddFileContents,The following statement contains a magic number: buffer_ = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\FastZip.cs,ExtractFileEntry,The following statement contains a magic number: buffer_ = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,ZipEntry,The following statement contains a magic number: (versionRequiredToExtract != 0) && (versionRequiredToExtract < 10)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: extraData.ValueLength < 4
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint sec = Math.Min(59' 2 * (dosTime & 0x1f));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint sec = Math.Min(59' 2 * (dosTime & 0x1f));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint min = Math.Min(59' (dosTime >> 5) & 0x3f);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint min = Math.Min(59' (dosTime >> 5) & 0x3f);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint hrs = Math.Min(23' (dosTime >> 11) & 0x1f);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint hrs = Math.Min(23' (dosTime >> 11) & 0x1f);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint mon = Math.Max(1' Math.Min(12' ((dosTime >> 21) & 0xf)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint mon = Math.Max(1' Math.Min(12' ((dosTime >> 21) & 0xf)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint year = ((dosTime >> 25) & 0x7f) + 1980;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: uint year = ((dosTime >> 25) & 0x7f) + 1980;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,GetDateTime,The following statement contains a magic number: int day = Math.Max(1' Math.Min(DateTime.DaysInMonth((int)year' (int)mon)' (int)((dosTime >> 16) & 0x1f)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntry.cs,ProcessAESExtraData,The following statement contains a magic number: length < 7
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipEntryFactory.cs,MakeDirectoryEntry,The following statement contains a magic number: externalAttributes |= (setAttributes_ | 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: _modificationTime = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc) +  						new TimeSpan(0' 0' 0' iTime' 0);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: _lastAccessTime = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc) +  						new TimeSpan(0' 0' 0' iTime' 0);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: _createTime = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc) +  						new TimeSpan(0' 0' 0' iTime' 0);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: TimeSpan span = _modificationTime - new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: TimeSpan span = _lastAccessTime - new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: TimeSpan span = _createTime - new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||  					(value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,NTTaggedData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: helperStream.WriteLEShort(24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,Find,The following statement contains a magic number: (localTag != headerID) && (_index < _data.Length - 3)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: int newLength = _data.Length + addLength + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: newLength -= (ValueLength + 4);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,AddLeShort,The following statement contains a magic number: _newEntry.WriteByte((byte)(toAdd >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,AddLeInt,The following statement contains a magic number: AddLeShort((short)(toAdd >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,AddLeLong,The following statement contains a magic number: AddLeInt((int)(toAdd >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: int trueStart = _readValueStart - 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: byte[] newData = new byte[_data.Length - (ValueLength + 4)];
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: int trueEnd = trueStart + ValueLength + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: ReadCheck(8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: return (ReadInt() & 0xffffffff) | (((long)ReadInt()) << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: ReadCheck(4);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +  				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +  				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +  				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +  				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +  				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: _index += 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: ReadCheck(2);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: _index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: (_readValueStart > _data.Length) ||  				(_readValueStart < 4)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: _index + length < 4
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: _index > _data.Length - 2
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: _index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: _data[index + 1] = (byte)(source >> 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestArchive,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64))
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) &&   // Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: ((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: extractVersion < 50
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: ((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: extractVersion < 62
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: compressedSize > ZipConstants.CryptoHeaderSize + 2
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLEShort,The following statement contains a magic number: baseStream_.WriteByte((byte)((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLEUshort,The following statement contains a magic number: baseStream_.WriteByte((byte)(value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort)(value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLeLong,The following statement contains a magic number: WriteLEInt((int)(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint((uint)(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: result = ZipConstants.DataDescriptorSize - 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: result = ZipConstants.Zip64DataDescriptorSize - 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,GetOutputStream,The following statement contains a magic number: switch (entry.CompressionMethod) {  				case CompressionMethod.Stored:  					result = new UncompressedStream(result);  					break;    				case CompressionMethod.Deflated:  					var dos = new DeflaterOutputStream(result' new Deflater(9' true));  					dos.IsStreamOwner = false;  					result = dos;  					break;    				default:  					throw new ZipException("Unknown compression method " + entry.CompressionMethod);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,CopyEntryDirect,The following statement contains a magic number: const int NameLengthOffset = 26;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,CopyEntry,The following statement contains a magic number: const int NameLengthOffset = 26;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,UpdateCommentOnly,The following statement contains a magic number: const int CentralHeaderCommentSizeOffset = 16;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadLEUshort,The following statement contains a magic number: return unchecked((ushort)((ushort)data1 | (ushort)(data2 << 8)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadLEUint,The following statement contains a magic number: return (uint)(ReadLEUshort() | (ReadLEUshort() << 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadLEUlong,The following statement contains a magic number: return ReadLEUint() | ((ulong)ReadLEUint() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long)centralDirSize + offsetOfCentralDir);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: !isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long)centralDirSize))
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: entry.CryptoCheckValue = (byte)(crc >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: (bitFlags & 8) == 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: WriteEncryptionHeader(result' entry.DosTime << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: (entry.Crc < 0) || (entry.Flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,MemoryArchiveStorage,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,MakeTemporaryCopy,The following statement contains a magic number: StreamUtils.Copy(stream' temporaryStream_' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.Zip,MemoryArchiveStorage,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,OpenForDirectUpdate,The following statement contains a magic number: StreamUtils.Copy(stream' result' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteZip64EndOfCentralDirectory,The following statement contains a magic number: WriteLELong(44);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,ReadLEShort,The following statement contains a magic number: return byteValue1 | (byteValue2 << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,ReadLEInt,The following statement contains a magic number: return ReadLEShort() | (ReadLEShort() << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,ReadLELong,The following statement contains a magic number: return (uint)ReadLEInt() | ((long)ReadLEInt() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteLEShort,The following statement contains a magic number: stream_.WriteByte((byte)((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteLEUshort,The following statement contains a magic number: stream_.WriteByte((byte)(value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort)(value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteLELong,The following statement contains a magic number: WriteLEInt((int)(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint((uint)(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: result += 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: result += 16;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,GetNextEntry,The following statement contains a magic number: entry.CryptoCheckValue = (byte)((crc2 >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,GetNextEntry,The following statement contains a magic number: (flags & 8) == 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,CompleteCloseEntry,The following statement contains a magic number: (flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,CloseEntry,The following statement contains a magic number: byte[] tmp = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,CloseEntry,The following statement contains a magic number: (flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,BodyRead,The following statement contains a magic number: switch (method) {  				case (int)CompressionMethod.Deflated:  					count = base.Read(buffer' offset' count);  					if (count <= 0) {  						if (!inf.IsFinished) {  							throw new ZipException("Inflater not finished!");  						}  						inputBuffer.Available = inf.RemainingInput;    						// A csize of -1 is from an unpatched local header  						if ((flags & 8) == 0 &&  							(inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size)) {  							throw new ZipException("Size mismatch: " + csize + ";" + size + " <-> " + inf.TotalIn + ";" + inf.TotalOut);  						}  						inf.Reset();  						finished = true;  					}  					break;    				case (int)CompressionMethod.Stored:  					if ((count > csize) && (csize >= 0)) {  						count = (int)csize;  					}    					if (count > 0) {  						count = inputBuffer.ReadClearTextBuffer(buffer' offset' count);  						if (count > 0) {  							csize -= count;  							size -= count;  						}  					}    					if (csize == 0) {  						finished = true;  					} else {  						if (count < 0) {  							throw new ZipException("EOF in stored block");  						}  					}  					break;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: int howMany = invalidPathChars.Length + 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryCharsRelaxed[howMany - 2] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: howMany = invalidPathChars.Length + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '\\';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 3] = '*';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 4] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,WriteLeShort,The following statement contains a magic number: baseOutputStream_.WriteByte((byte)((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,WriteLeInt,The following statement contains a magic number: WriteLeShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,WriteLeLong,The following statement contains a magic number: WriteLeInt((int)(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: entry.Flags |= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: entry.Flags |= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: baseOutputStream_.Write(AESAuthCode' 0' 10);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: (curEntry.Flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,AddExtraDataAES,The following statement contains a magic number: const int VENDOR_VERSION = 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,CopyAndEncrypt,The following statement contains a magic number: const int CopyBufferSize = 4096;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipStrings,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipStrings.cs,ZipStrings,The following statement contains a magic number: SystemDefaultCodePage = (codePage == 1 || codePage == 2 || codePage == 3 || codePage == 42) ? FallbackCodePage : codePage;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipStrings,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipStrings.cs,ZipStrings,The following statement contains a magic number: SystemDefaultCodePage = (codePage == 1 || codePage == 2 || codePage == 3 || codePage == 42) ? FallbackCodePage : codePage;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipStrings,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipStrings.cs,ZipStrings,The following statement contains a magic number: SystemDefaultCodePage = (codePage == 1 || codePage == 2 || codePage == 3 || codePage == 42) ? FallbackCodePage : codePage;
Duplicate Code,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,FullGtU,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 24)' (13' 32)' (21' 40)' (29' 48))
Duplicate Code,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,FullGtU,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 39)' (13' 47))
Duplicate Code,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,FullGtU,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 24)' (21' 40)' (29' 48))
Duplicate Code,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,FullGtU,The method contains a code clone-set at the following line numbers (starting from the method definition): ((57' 88)' (70' 101))
Duplicate Code,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,FullGtU,The method contains a code clone-set at the following line numbers (starting from the method definition): ((57' 76)' (83' 102))
Duplicate Code,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The method contains a code clone-set at the following line numbers (starting from the method definition): ((42' 61)' (70' 89))
Missing Default,ICSharpCode.SharpZipLib.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2InputStream.cs,ReadByte,The following switch statement is missing a default case: switch (currentState) {  				case RAND_PART_B_STATE:  					SetupRandPartB();  					break;  				case RAND_PART_C_STATE:  					SetupRandPartC();  					break;  				case NO_RAND_PART_B_STATE:  					SetupNoRandPartB();  					break;  				case NO_RAND_PART_C_STATE:  					SetupNoRandPartC();  					break;  				case START_BLOCK_STATE:  				case NO_RAND_PART_A_STATE:  				case RAND_PART_A_STATE:  					break;  			}
Missing Default,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The following switch statement is missing a default case: switch (zPend % 2) {  							case 0:  								szptr[wr] = (short)BZip2Constants.RunA;  								wr++;  								mtfFreq[BZip2Constants.RunA]++;  								break;  							case 1:  								szptr[wr] = (short)BZip2Constants.RunB;  								wr++;  								mtfFreq[BZip2Constants.RunB]++;  								break;  							}
Missing Default,ICSharpCode.SharpZipLib.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\BZip2\BZip2OutputStream.cs,GenerateMTFValues,The following switch statement is missing a default case: switch (zPend % 2) {  					case 0:  						szptr[wr] = (short)BZip2Constants.RunA;  						wr++;  						mtfFreq[BZip2Constants.RunA]++;  						break;  					case 1:  						szptr[wr] = (short)BZip2Constants.RunB;  						wr++;  						mtfFreq[BZip2Constants.RunB]++;  						break;  					}
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following switch statement is missing a default case: switch (state) {  						case BUSY_STATE:  							// We need more input now  							return origLength - length;  						case FLUSHING_STATE:  							if (level != NO_COMPRESSION) {  								/* We have to supply some lookahead.  8 bit lookahead  								 * is needed by the zlib inflater' and we must fill  								 * the next byte' so that all bits are flushed.  								 */  								int neededbits = 8 + ((-pending.BitCount) & 7);  								while (neededbits > 0) {  									/* write a static tree block consisting solely of  									 * an EOF:  									 */  									pending.WriteBits(2' 10);  									neededbits -= 10;  								}  							}  							state = BUSY_STATE;  							break;  						case FINISHING_STATE:  							pending.AlignToByte();    							// Compressed data is complete.  Write footer information if required.  							if (!noZlibHeaderOrFooter) {  								int adler = engine.Adler;  								pending.WriteShortMSB(adler >> 16);  								pending.WriteShortMSB(adler & 0xffff);  							}  							state = FINISHED_STATE;  							break;  					}
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,SetLevel,The following switch statement is missing a default case: switch (compressionFunction) {  					case DeflaterConstants.DEFLATE_STORED:  						if (strstart > blockStart) {  							huffman.FlushStoredBlock(window' blockStart'  								strstart - blockStart' false);  							blockStart = strstart;  						}  						UpdateHash();  						break;    					case DeflaterConstants.DEFLATE_FAST:  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart'  								false);  							blockStart = strstart;  						}  						break;    					case DeflaterConstants.DEFLATE_SLOW:  						if (prevAvailable) {  							huffman.TallyLit(window[strstart - 1] & 0xff);  						}  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart' false);  							blockStart = strstart;  						}  						prevAvailable = false;  						matchLen = DeflaterConstants.MIN_MATCH - 1;  						break;  				}
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following switch statement is missing a default case: switch( (scanMax - scan) % 8 )              {              case 1: if (window[++scan] == window[++match]) break;                break;              case 2: if (window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 3: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 4: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 5: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 6: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              case 7: if (window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]                && window[++scan] == window[++match]) break;                break;              }
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,WriteLocalEntryHeader,The following switch statement is missing a default case: switch (useZip64_) {  					case UseZip64.Dynamic:  						if (entry.Size < 0) {  							entry.ForceZip64();  						}  						break;    					case UseZip64.On:  						entry.ForceZip64();  						break;    					case UseZip64.Off:  						// Do nothing.  The entry itself may be using Zip64 independantly.  						break;  				}
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,RunUpdates,The following switch statement is missing a default case: switch (update.Command) {  							case UpdateCommand.Copy:  								if (directUpdate) {  									CopyEntryDirect(workFile' update' ref destinationPosition);  								} else {  									CopyEntry(workFile' update);  								}  								break;    							case UpdateCommand.Modify:  								// TODO: Direct modifying of an entry will take some legwork.  								ModifyEntry(workFile' update);  								break;    							case UpdateCommand.Add:  								if (!IsNewArchive && directUpdate) {  									workFile.baseStream_.Position = destinationPosition;  								}    								AddEntry(workFile' update);    								if (directUpdate) {  									destinationPosition = workFile.baseStream_.Position;  								}  								break;  						}
Missing Default,ICSharpCode.SharpZipLib.Zip,PartialInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipFile.cs,Seek,The following switch statement is missing a default case: switch (origin) {  					case SeekOrigin.Begin:  						newPos = start_ + offset;  						break;    					case SeekOrigin.Current:  						newPos = readPos_ + offset;  						break;    					case SeekOrigin.End:  						newPos = end_ + offset;  						break;  				}
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipInputStream.cs,BodyRead,The following switch statement is missing a default case: switch (method) {  				case (int)CompressionMethod.Deflated:  					count = base.Read(buffer' offset' count);  					if (count <= 0) {  						if (!inf.IsFinished) {  							throw new ZipException("Inflater not finished!");  						}  						inputBuffer.Available = inf.RemainingInput;    						// A csize of -1 is from an unpatched local header  						if ((flags & 8) == 0 &&  							(inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size)) {  							throw new ZipException("Size mismatch: " + csize + ";" + size + " <-> " + inf.TotalIn + ";" + inf.TotalOut);  						}  						inf.Reset();  						finished = true;  					}  					break;    				case (int)CompressionMethod.Stored:  					if ((count > csize) && (csize >= 0)) {  						count = (int)csize;  					}    					if (count > 0) {  						count = inputBuffer.ReadClearTextBuffer(buffer' offset' count);  						if (count > 0) {  							csize -= count;  							size -= count;  						}  					}    					if (csize == 0) {  						finished = true;  					} else {  						if (count < 0) {  							throw new ZipException("EOF in stored block");  						}  					}  					break;  			}
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos\diydrones_MissionPlanner\ExtLibs\ICSharpCode.SharpZipLib\Zip\ZipOutputStream.cs,Write,The following switch statement is missing a default case: switch (curMethod) {  				case CompressionMethod.Deflated:  					base.Write(buffer' offset' count);  					break;    				case CompressionMethod.Stored:  					if (Password != null) {  						CopyAndEncrypt(buffer' offset' count);  					} else {  						baseOutputStream_.Write(buffer' offset' count);  					}  					break;  			}
