Implementation smell,Namespace,Class,File,Method,Description
Long Method,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The method has 170 lines of code.
Long Method,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The method has 114 lines of code.
Long Method,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The method has 111 lines of code.
Long Method,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The method has 153 lines of code.
Long Method,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The method has 105 lines of code.
Long Method,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The method has 133 lines of code.
Long Method,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The method has 148 lines of code.
Long Method,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The method has 141 lines of code.
Long Method,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The method has 161 lines of code.
Long Method,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The method has 142 lines of code.
Long Method,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The method has 162 lines of code.
Long Method,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The method has 141 lines of code.
Long Method,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The method has 161 lines of code.
Long Method,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The method has 142 lines of code.
Long Method,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The method has 101 lines of code.
Long Method,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The method has 111 lines of code.
Long Method,MissionPlanner.Utilities,Vector3<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vector3.cs,rotate,The method has 205 lines of code.
Long Method,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,SetupGraph,The method has 119 lines of code.
Long Method,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The method has 221 lines of code.
Long Method,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The method has 288 lines of code.
Complex Method,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,Cyclomatic complexity of the method is 9
Complex Method,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,Cyclomatic complexity of the method is 11
Complex Method,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getUrl,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,run_sphere_fit,Cyclomatic complexity of the method is 12
Complex Method,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,run_ellipsoid_fit,Cyclomatic complexity of the method is 12
Complex Method,MissionPlanner.Utilities,dxf,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\dxf.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,MissionPlanner.Utilities,EnumTranslator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\EnumTranslator.cs,Translate,Cyclomatic complexity of the method is 8
Complex Method,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,Cyclomatic complexity of the method is 12
Complex Method,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,Cyclomatic complexity of the method is 23
Complex Method,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,Cyclomatic complexity of the method is 28
Complex Method,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,Cyclomatic complexity of the method is 23
Complex Method,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,Cyclomatic complexity of the method is 28
Complex Method,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,Cyclomatic complexity of the method is 23
Complex Method,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,Cyclomatic complexity of the method is 28
Complex Method,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,Cyclomatic complexity of the method is 13
Complex Method,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,Cyclomatic complexity of the method is 9
Complex Method,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,Cyclomatic complexity of the method is 14
Long Parameter List,MissionPlanner.Utilities,PointLatLngAltHdg,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,PointLatLngAltHdg,The method has 6 parameters. Parameters: lat' lng' alt' heading' tag' time
Long Parameter List,MissionPlanner.Utilities,neighbor_umbrella,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,neighbor_umbrella,The method has 6 parameters. Parameters: a' b' c' d' e' f
Long Parameter List,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,map,The method has 5 parameters. Parameters: x' in_min' in_max' out_min' out_max
Long Parameter List,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,map,The method has 5 parameters. Parameters: x' in_min' in_max' out_min' out_max
Long Parameter List,MissionPlanner.Utilities,NativeMethods,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,gst_buffer_extract_dup,The method has 5 parameters. Parameters: raw' offset' size' dest' dest_size
Long Parameter List,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The method has 6 parameters. Parameters: plla' R' P' Y' hfov' vfov
Long Parameter List,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The method has 6 parameters. Parameters: qx' qv' qa' r' pd' ix
Long Parameter List,MissionPlanner.Utilities,MathHelper,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Math.cs,map,The method has 5 parameters. Parameters: x' in_min' in_max' out_min' out_max
Long Parameter List,MissionPlanner.Utilities,Matrix3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix3.cs,Matrix3,The method has 9 parameters. Parameters: a' b' c' d' e' f' g' h' i
Long Parameter List,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupBasePos,The method has 6 parameters. Parameters: port' basepos' surveyindur' surveyinacc' disable' movingbase
Long Parameter List,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,EarthRatesToBodyRates,The method has 6 parameters. Parameters: roll' pitch' yaw' rollRate' pitchRate' yawRate
Long Parameter List,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,EarthRatesToBodyRatesRyan,The method has 6 parameters. Parameters: roll' pitch' yaw' x' y' z
Long Parameter List,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,EarthRatesToBodyRatesMine,The method has 6 parameters. Parameters: roll' pitch' yaw' rollRate' pitchRate' yawRate
Long Parameter List,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,OGLtoBCBF,The method has 6 parameters. Parameters: phi' theta' psi' x' y' z
Long Parameter List,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,FLIGHTtoBCBF,The method has 5 parameters. Parameters: x' y' z' alpha' beta
Long Parameter List,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,gps_newpos,The method has 6 parameters. Parameters: lat' lon' bearing' distance' latitude' longitude
Long Parameter List,MissionPlanner.Utilities,vlcrender,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\vlcrender.cs,Setup,The method has 6 parameters. Parameters: opaque' chroma' width' height' pitches' lines
Long Parameter List,WebCamService,NativeMethods,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,OleCreatePropertyFrame,The method has 11 parameters. Parameters: hwndOwner' x' y' lpszCaption' cObjects' ppUnk' cPages' lpPageClsID' lcid' dwReserved' lpvReserved
Long Parameter List,Simplify,Douglas,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fitCurve.cs,DouglasPeuckerReduction,The method has 5 parameters. Parameters: points' firstPoint' lastPoint' tolerance' pointIndexsToKeep
Long Parameter List,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,FormatOct,The method has 7 parameters. Parameters: NativeFormat' Alternate' FieldLength' FieldPrecision' Left2Right' Padding' Value
Long Parameter List,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,FormatHex,The method has 7 parameters. Parameters: NativeFormat' Alternate' FieldLength' FieldPrecision' Left2Right' Padding' Value
Long Parameter List,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,FormatNumber,The method has 9 parameters. Parameters: NativeFormat' Alternate' FieldLength' FieldPrecision' Left2Right' PositiveSign' PositiveSpace' Padding' Value
Long Identifier,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,,The length of the parameter COMPASS_CAL_NUM_ELLIPSOID_PARAMS is 32.
Long Statement,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The length of the statement  "                                altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).  " is 133.
Long Statement,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The length of the statement  "                                UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty); " is 135.
Long Statement,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The length of the statement  "                                ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.  " is 129.
Long Statement,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertHexStringToByteArray,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.InvariantCulture' "The binary key cannot have an odd number of digits: {0}"' hexString)); " is 143.
Long Statement,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The length of the statement  "                double num6 = Math.Floor((double)(latitude / denominator)) + Math.Floor((double)((0.5 + (this.modulo(latitude' denominator) / denominator)) - num5)); " is 149.
Long Statement,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The length of the statement  "                double num11 = Math.Floor((double)(numerator / num9)) + Math.Floor((double)((0.5 + (this.modulo(numerator' num9) / num9)) - num10)); " is 132.
Long Statement,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,running,The length of the statement  "            return _status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_ONE || _status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_TWO; " is 132.
Long Statement,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The length of the statement  "            //var flags = TextFormatFlags.Default;// TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter;// |  TextFormatFlags.GlyphOverhangPadding; " is 150.
Long Statement,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,test,The length of the statement  "                @";C:\gstreamer\1.0\x86_64\bin\;D:\gstreamer\1.0\x86_64\bin\;E:\gstreamer\1.0\x86_64\bin\;F:\gstreamer\1.0\x86_64\bin\"); " is 121.
Long Statement,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,test,The length of the statement  "                //@"videotestsrc ! video/x-raw' width=1280' height=720' framerate=30/1 ! clockoverlay ! x264enc speed-preset=1 threads=1 sliced-threads=1 mb-tree=0 rc-lookahead=0 sync-lookahead=0 bframes=0 ! rtph264pay ! application/x-rtp ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw'format=BGRA ! appsink name=outsink"' " is 316.
Long Statement,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,test,The length of the statement  "                @"-v udpsrc port=5601 buffer-size=300000 ! application/x-rtp ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw'format=BGRA ! appsink name=outsink"' " is 154.
Long Statement,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,test,The length of the statement  "            //var msg = GStreamer.gst_bus_timed_pop_filtered(bus' GStreamer.GST_CLOCK_TIME_NONE' GStreamer.GstMessageType.GST_MESSAGE_ERROR | GStreamer.GstMessageType.GST_MESSAGE_EOS); " is 172.
Long Statement,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,Start,The length of the statement  "                            //"-v udpsrc port={0} buffer-size=300000 ! application/x-rtp ! rtph264depay ! avdec_h264 ! queue leaky=2 ! videoconvert ! video/x-raw'format=BGRA ! queue leaky=2 ! rtpvrawpay ! tcpserversink host=127.0.0.1 port={1} sync=false"' " is 227.
Long Statement,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,Start,The length of the statement  "                            "-v udpsrc port={0} buffer-size=300000 ! application/x-rtp ! rtph264depay ! avdec_h264 ! queue leaky=2 ! avenc_mjpeg ! queue leaky=2 ! tcpserversink host=127.0.0.1 port={1} sync=false"' " is 185.
Long Statement,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,Start,The length of the statement  "                    //"-v udpsrc port=5600 buffer-size=300000 ! application/x-rtp ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw'format=BGRA ! queue ! rtpvrawpay ! giosink location=\\\\\\\\.\\\\pipe\\\\gstreamer"); " is 204.
Long Statement,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,FromUTM,The length of the statement  "            GeoUtility.GeoSystem.UTM utm = new GeoUtility.GeoSystem.UTM(Math.Abs(zone)' x' y' zone < 0 ? GeoUtility.GeoSystem.Base.Geocentric.Hemisphere.South : GeoUtility.GeoSystem.Base.Geocentric.Hemisphere.North); " is 204.
Long Statement,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,ToUTM,The length of the statement  "            IProjectedCoordinateSystem utm = ProjectedCoordinateSystem.WGS84_UTM(Math.Abs(utmzone)' list[0].Lat < 0 ? false : true); " is 120.
Long Statement,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetBearing,The length of the statement  "            var x = Math.Cos(latitude1) * Math.Sin(latitude2) - Math.Sin(latitude1) * Math.Cos(latitude2) * Math.Cos(longitudeDifference); " is 126.
Long Statement,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The length of the statement  "            double num7 = Math.Pow(Math.Sin(num6 / 2.0)' 2.0) + ((Math.Cos(d) * Math.Cos(num3)) * Math.Pow(Math.Sin(num5 / 2.0)' 2.0)); " is 123.
Long Statement,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0'4} {1'2} {2'2} {3'2} {4'2} {5'10} {6'2} {7'2}"' gpstime.Year' gpstime.Month'gpstime.Day' gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 199.
Long Statement,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                        //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000")); " is 135.
Long Statement,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0} {1} {2} {3'2} {4} {5} {6} {7}"' gpstime.Year' gpstime.Month' gpstime.Day'gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 184.
Long Statement,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                        //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")' " is 151.
Long Statement,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                Console.WriteLine("> {0} {1} {2} {3'2} {4} {5} {6} {7}"' gpstime.Year' gpstime.Month' gpstime.Day'gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 182.
Long Statement,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                           Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")' " is 146.
Long Statement,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0'4} {1'2} {2'2} {3'2} {4'2} {5'10} {6'2} {7'2}"' gpstime.Year' gpstime.Month'gpstime.Day' gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 199.
Long Statement,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0'4} {1'2} {2'2} {3'2} {4'2} {5'10} {6'2} {7'2}"' gpstime.Year' gpstime.Month'gpstime.Day' gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 199.
Long Statement,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0'4} {1'2} {2'2} {3'2} {4'2} {5'10} {6'2} {7'2}"' gpstime.Year' gpstime.Month'gpstime.Day' gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 199.
Long Statement,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0'4} {1'2} {2'2} {3'2} {4'2} {5'10} {6'2} {7'2}"' gpstime.Year' gpstime.Month'gpstime.Day' gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 199.
Long Statement,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0'4} {1'2} {2'2} {3'2} {4'2} {5'10} {6'2} {7'2}"' gpstime.Year' gpstime.Month'gpstime.Day' gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 199.
Long Statement,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The length of the statement  "                //Console.WriteLine("> {0'4} {1'2} {2'2} {3'2} {4'2} {5'10} {6'2} {7'2}"' gpstime.Year' gpstime.Month'gpstime.Day' gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat); " is 199.
Long Statement,MissionPlanner.Utilities,Settings,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Settings.cs,GetDataDirectory,The length of the statement  "            var path = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + Path.DirectorySeparatorChar + "Mission Planner" + " is 137.
Long Statement,MissionPlanner.Utilities,Settings,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Settings.cs,GetUserDataDirectory,The length of the statement  "            var path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + Path.DirectorySeparatorChar + "Mission Planner" + " is 127.
Long Statement,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The length of the statement  "                //RLN27.576944W97.108611LN27.468056W96.961111LN27.322222W97.050000LN27.345833W97.088889LN27.439167W97.186944RLN27.672778W97.212222LN27.576944W97.108611LN27.533333W97.133333LN27.638333W97.237222RCN27.686333W97.294667R007.00" is 222.
Long Statement,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The length of the statement  "                            var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));" is 163.
Long Statement,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The length of the statement  "                            pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));" is 165.
Long Statement,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The length of the statement  "                            pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));" is 166.
Long Statement,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The length of the statement  "                            var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));" is 165.
Long Statement,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,OGLtoBCBF,The length of the statement  "            // THANKS TO GEORGE M SIOURIS WHOSE "MISSILE GUIDANCE AND CONTROL SYSTEMS" BOOK SEEMS TO BE THE ONLY EASY TO FIND REFERENCE THAT" is 128.
Long Statement,MissionPlanner.Utilities,utmpos,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\utmpos.cs,ToLLA2,The length of the statement  "            GeoUtility.GeoSystem.UTM utm = new GeoUtility.GeoSystem.UTM(Math.Abs(zone)' x' y' zone < 0 ? GeoUtility.GeoSystem.Base.Geocentric.Hemisphere.South : GeoUtility.GeoSystem.Base.Geocentric.Hemisphere.North); " is 204.
Long Statement,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The length of the statement  "            //            string ans = mat1.Groups[1].Value.ToString() + mat1.Groups[2].Value.ToString() + mat1.Groups[4].Value.ToString() + mat1.Groups[5].Value.ToString() + mat1.Groups[6].Value.ToString();" is 195.
Long Statement,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,SetupGraph,The length of the statement  "                    hr = NativeMethods.OleCreatePropertyFrame(IntPtr.Zero' 0' 0' filterInfo.achName' 1' ref oDevice' caGUID.cElems' caGUID.pElems' 0' 0' IntPtr.Zero); " is 146.
Long Statement,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The length of the statement  "                        string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}"; " is 142.
Complex Conditional,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The conditional expression  "(by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary"  is complex.
Complex Conditional,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The conditional expression  "adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)"  is complex.
Complex Conditional,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The conditional expression  "items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed")"  is complex.
Complex Conditional,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_subtriangle_index,The conditional expression  "(is_zero(w.x) || is_zero(w.y) || is_zero(w.z)) && !inclusive"  is complex.
Complex Conditional,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,fit_acceptable,The conditional expression  "!isnan(_fitness) &&                  _params.radius > 150 && _params.radius < 950 && //Earth's magnetic field strength range: 250-850mG                  fabsf(_params.offset.x) < _offset_max &&                  fabsf(_params.offset.y) < _offset_max &&                  fabsf(_params.offset.z) < _offset_max &&                  _params.diag.x > 0.2f && _params.diag.x < 5.0f &&                  _params.diag.y > 0.2f && _params.diag.y < 5.0f &&                  _params.diag.z > 0.2f && _params.diag.z < 5.0f &&                  fabsf(_params.offdiag.x) < 1.0f && //absolute of sine/cosine output cannot be greater than 1                  fabsf(_params.offdiag.y) < 1.0f &&                  fabsf(_params.offdiag.z) < 1.0f"  is complex.
Complex Conditional,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,FindLineIntersection,The conditional expression  "(r < 0 || r > 1) || (s < 0 || s > 1)"  is complex.
Complex Conditional,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,Equals,The conditional expression  "this.Lat == plla.Lat &&              this.Lng == plla.Lng &&              this.Alt == plla.Alt &&              this.color == plla.color &&              this.Tag == plla.Tag"  is complex.
Complex Conditional,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The conditional expression  "filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001")"  is complex.
Complex Conditional,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The conditional expression  "fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o'"  is complex.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOpenflights,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,ReadLine,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getUrl,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Crypto,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Crypto.cs,Crypto,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,GitHubContent,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GitHubContent.cs,GetObject,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,Start,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readJPGData,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,Stop,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,ListExtension,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ListExtension.cs,SortENABLE,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Settings,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Settings.cs,Load,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Settings,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Settings.cs,Save,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,TCPConsole,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\TCPConsole.cs,Write,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,tfr,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,tfrcallback,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The method has an empty catch block.
Empty Catch Block,MissionPlanner.Utilities,ZeroConf,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ZeroConf.cs,resolverAsync,The method has an empty catch block.
Empty Catch Block,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,timer,The method has an empty catch block.
Empty Catch Block,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,SetConfigParms,The method has an empty catch block.
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The following statement contains a magic number: while (run)              {                  log.Info("adsb connect loop");                  //custom                  try                  {                      if (!String.IsNullOrEmpty(server))                      {                          using (TcpClient cl = new TcpClient())                          {                              cl.Connect(server' serverport);                                log.Info("Connected " + server + ":" + serverport);                                ReadMessage(cl.GetStream());                          }                      }                  }                  catch (Exception ex) { log.Error(ex); }                    // dump1090 sbs                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30003);                            log.Info("Connected loopback:30003");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // dump1090 avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30002);                            log.Info("Connected loopback:30002");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // rtl1090 -sbs1                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31004);                            log.Info("Connected loopback:31004");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) { }                    // rtl1090 - avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31001);                            log.Info("Connected loopback:31001");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // adsb#                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 47806);                            log.Info("Connected loopback:47806");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // cleanup any sockets that might be outstanding.                  GC.Collect();                  System.Threading.Thread.Sleep(5000);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The following statement contains a magic number: while (run)              {                  log.Info("adsb connect loop");                  //custom                  try                  {                      if (!String.IsNullOrEmpty(server))                      {                          using (TcpClient cl = new TcpClient())                          {                              cl.Connect(server' serverport);                                log.Info("Connected " + server + ":" + serverport);                                ReadMessage(cl.GetStream());                          }                      }                  }                  catch (Exception ex) { log.Error(ex); }                    // dump1090 sbs                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30003);                            log.Info("Connected loopback:30003");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // dump1090 avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30002);                            log.Info("Connected loopback:30002");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // rtl1090 -sbs1                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31004);                            log.Info("Connected loopback:31004");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) { }                    // rtl1090 - avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31001);                            log.Info("Connected loopback:31001");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // adsb#                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 47806);                            log.Info("Connected loopback:47806");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // cleanup any sockets that might be outstanding.                  GC.Collect();                  System.Threading.Thread.Sleep(5000);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The following statement contains a magic number: while (run)              {                  log.Info("adsb connect loop");                  //custom                  try                  {                      if (!String.IsNullOrEmpty(server))                      {                          using (TcpClient cl = new TcpClient())                          {                              cl.Connect(server' serverport);                                log.Info("Connected " + server + ":" + serverport);                                ReadMessage(cl.GetStream());                          }                      }                  }                  catch (Exception ex) { log.Error(ex); }                    // dump1090 sbs                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30003);                            log.Info("Connected loopback:30003");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // dump1090 avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30002);                            log.Info("Connected loopback:30002");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // rtl1090 -sbs1                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31004);                            log.Info("Connected loopback:31004");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) { }                    // rtl1090 - avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31001);                            log.Info("Connected loopback:31001");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // adsb#                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 47806);                            log.Info("Connected loopback:47806");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // cleanup any sockets that might be outstanding.                  GC.Collect();                  System.Threading.Thread.Sleep(5000);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The following statement contains a magic number: while (run)              {                  log.Info("adsb connect loop");                  //custom                  try                  {                      if (!String.IsNullOrEmpty(server))                      {                          using (TcpClient cl = new TcpClient())                          {                              cl.Connect(server' serverport);                                log.Info("Connected " + server + ":" + serverport);                                ReadMessage(cl.GetStream());                          }                      }                  }                  catch (Exception ex) { log.Error(ex); }                    // dump1090 sbs                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30003);                            log.Info("Connected loopback:30003");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // dump1090 avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30002);                            log.Info("Connected loopback:30002");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // rtl1090 -sbs1                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31004);                            log.Info("Connected loopback:31004");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) { }                    // rtl1090 - avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31001);                            log.Info("Connected loopback:31001");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // adsb#                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 47806);                            log.Info("Connected loopback:47806");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // cleanup any sockets that might be outstanding.                  GC.Collect();                  System.Threading.Thread.Sleep(5000);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The following statement contains a magic number: while (run)              {                  log.Info("adsb connect loop");                  //custom                  try                  {                      if (!String.IsNullOrEmpty(server))                      {                          using (TcpClient cl = new TcpClient())                          {                              cl.Connect(server' serverport);                                log.Info("Connected " + server + ":" + serverport);                                ReadMessage(cl.GetStream());                          }                      }                  }                  catch (Exception ex) { log.Error(ex); }                    // dump1090 sbs                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30003);                            log.Info("Connected loopback:30003");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // dump1090 avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30002);                            log.Info("Connected loopback:30002");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // rtl1090 -sbs1                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31004);                            log.Info("Connected loopback:31004");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) { }                    // rtl1090 - avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31001);                            log.Info("Connected loopback:31001");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // adsb#                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 47806);                            log.Info("Connected loopback:47806");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // cleanup any sockets that might be outstanding.                  GC.Collect();                  System.Threading.Thread.Sleep(5000);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,TryConnect,The following statement contains a magic number: while (run)              {                  log.Info("adsb connect loop");                  //custom                  try                  {                      if (!String.IsNullOrEmpty(server))                      {                          using (TcpClient cl = new TcpClient())                          {                              cl.Connect(server' serverport);                                log.Info("Connected " + server + ":" + serverport);                                ReadMessage(cl.GetStream());                          }                      }                  }                  catch (Exception ex) { log.Error(ex); }                    // dump1090 sbs                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30003);                            log.Info("Connected loopback:30003");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // dump1090 avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 30002);                            log.Info("Connected loopback:30002");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // rtl1090 -sbs1                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31004);                            log.Info("Connected loopback:31004");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) { }                    // rtl1090 - avr                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 31001);                            log.Info("Connected loopback:31001");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                      // adsb#                  try                  {                      using (TcpClient cl = new TcpClient())                      {                            cl.Connect(System.Net.IPAddress.Loopback' 47806);                            log.Info("Connected loopback:47806");                            ReadMessage(cl.GetStream());                      }                  }                  catch (Exception) {  }                    // cleanup any sockets that might be outstanding.                  GC.Collect();                  System.Threading.Thread.Sleep(5000);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: st1.ReadTimeout = 10000;
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: while (run)              {                  int by = st1.ReadByte();                  if (by == -1)                      break;                    if (by == '*')                  {                      avrcount++;                      if (avrcount >= 4)                          avr = true;                        if (avr)                      {                          Plane plane = ReadMessage('*' + ReadLine(st1));                                                  if (plane != null)                          {                              PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                              plla.Heading = (float)plane.heading;                              if (plla.Lat == 0 && plla.Lng == 0)                                  continue;                              if (UpdatePlanePosition != null && plla != null)                                  UpdatePlanePosition(plla' EventArgs.Empty);                              //Console.WriteLine(plane.pllalocal(plane.llaeven));                              Console.WriteLine(plane.ID + " " + plla);                          }                      }                  }                  else if ((by == 'M' || by == 'S' || by == 'A' || by == 'I' || by == 'C') && !binary) // msg clk sta air id sel                  {                      string line = ((char)by) +ReadLine(st1);                        if (line.StartsWith("MSG"))                      {                          string[] strArray = line.Split(new char[] { ''' });                            if (strArray[1] == "3") // airborne pos                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                               int altitude = 0;                              try                              {                                  altitude = (int)double.Parse(strArray[11]' CultureInfo.InvariantCulture);// Integer. Mode C Altitude relative to 1013 mb (29.92" Hg).                               }                              catch { }                                                           double lat = 0;                              try                              {                                  lat = double.Parse(strArray[14]' CultureInfo.InvariantCulture);//Float. Latitude.                               }                              catch { }                              double lon = 0;                              try                              {                                  lon = double.Parse(strArray[15]' CultureInfo.InvariantCulture);//Float. Longitude                               }                              catch { }                                bool is_on_ground = strArray[21] != "0";//Boolean. Flag to indicate ground squat switch is active.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                Plane plane = ((Plane)Planes[hex_ident]);                                if (lat == 0 && lon == 0)                                  continue;                                if (UpdatePlanePosition != null && plane != null)                                  UpdatePlanePosition(new PointLatLngAltHdg(lat' lon' altitude / 3.048' (float)plane.heading' hex_ident' DateTime.Now)' EventArgs.Empty);                          }                          else if (strArray[1] == "4")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                try                              {                                  int ground_speed = (int)double.Parse(strArray[12]' CultureInfo.InvariantCulture);// Integer. Speed over ground.                               }                              catch { }                              try                              {                                  ((Plane)Planes[hex_ident]).heading = (int)double.Parse(strArray[13]' CultureInfo.InvariantCulture);//Integer. Ground track angle.                               }                              catch { }                            }                          else if (strArray[1] == "1")                          {                              String session_id = strArray[2];// String. Database session record number.                               String aircraft_id = strArray[3];// String. Database aircraft record number.                               String hex_ident = strArray[4];//String. 24-bit ICACO ID' in hex.                               String flight_id = strArray[5];//String. Database flight record number.                               String generated_date = strArray[6];// String. Date the message was generated.                               String generated_time = strArray[7];//String. Time the message was generated.                               String logged_date = strArray[8];//String. Date the message was logged.                               String logged_time = strArray[9];//String. Time the message was logged.                               String callsign = strArray[10];//String. Eight character flight ID or callsign.                                 if (Planes[hex_ident] == null)                                  Planes[hex_ident] = new Plane();                                                            ((Plane)Planes[hex_ident]).CallSign = callsign;                          }                      }                      else                      {                          log.Info(line);                        }                  }                  else if (by == 0x1a)                  {                      avr = false;                        byte[] buffer = new byte[24];                      buffer[0] = (byte)by;                        int type = st1.ReadByte();                      buffer[1] = (byte)type;                      st1.Read(buffer' 2' 7);                        switch (type)                      {                          case '1': // mode-ac                              // 2 bytes                              st1.Read(buffer' 9' 2);                              //log.Info("1");                              break;                          case '2': // mode-s short                              st1.Read(buffer' 9' 7);                              //log.Info("2");                              break;                          case '3': // mode-s long                              st1.Read(buffer' 9' 14);                              //log.Info("3");                              Plane plane = ReadMessage(buffer);                              if (plane != null)                              {                                  binary = true;                                  PointLatLngAltHdg plla = new PointLatLngAltHdg(plane.plla());                                  if (plla == null)                                      break;                                  if (plla.Lat == 0 && plla.Lng == 0)                                      continue;                                  plla.Heading = (float)plane.heading;                                  if (UpdatePlanePosition != null && plla != null)                                      UpdatePlanePosition(plla' EventArgs.Empty);                                  //Console.WriteLine(plane.pllalocal(plane.llaeven));                                  Console.WriteLine(plla);                              }                              break;                          default:                              break;                      }                  }                  else                  {                      log.Info("bad sync 0x" + by.ToString("X2") + " " + (char)by);                  }              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (data[1] == '3')              {                  StringBuilder sb = new StringBuilder();                    for (int a = 0; a < 14; a++)                  {                      sb.Append(data[9 + a].ToString("X2"));                  }                    return ReadMessage("*"+sb);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (data[1] == '3')              {                  StringBuilder sb = new StringBuilder();                    for (int a = 0; a < 14; a++)                  {                      sb.Append(data[9 + a].ToString("X2"));                  }                    return ReadMessage("*"+sb);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (data.Length < 13)                  return null;
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.DF = (byte)(data[0] >> 3);
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.CA = (byte)(data[0] & 7);
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.AA = (uint)((data[1] << 16) + (data[2] << 8) +(data[3]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.AA = (uint)((data[1] << 16) + (data[2] << 8) +(data[3]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.AA = (uint)((data[1] << 16) + (data[2] << 8) +(data[3]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.AA = (uint)((data[1] << 16) + (data[2] << 8) +(data[3]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: Array.Copy(data' 4' adsbmess.adsbdata' 0' 7);
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: Array.Copy(data' 4' adsbmess.adsbdata' 0' 7);
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.PI = (uint)((data[11] << 16) + (data[12] << 8) + (data[13]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.PI = (uint)((data[11] << 16) + (data[12] << 8) + (data[13]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.PI = (uint)((data[11] << 16) + (data[12] << 8) + (data[13]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.PI = (uint)((data[11] << 16) + (data[12] << 8) + (data[13]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: adsbmess.PI = (uint)((data[11] << 16) + (data[12] << 8) + (data[13]));
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: byte[] pidata = crc.ComputeChecksumBytes(data' 0' data.Length - 3' false);
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.PI != ((pidata[0] << 16) + (pidata[1] << 8) + pidata[2]))              {                  Console.WriteLine("Parity Fail");                  return null;              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.PI != ((pidata[0] << 16) + (pidata[1] << 8) + pidata[2]))              {                  Console.WriteLine("Parity Fail");                  return null;              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.PI != ((pidata[0] << 16) + (pidata[1] << 8) + pidata[2]))              {                  Console.WriteLine("Parity Fail");                  return null;              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ReadMessage,The following statement contains a magic number: if (adsbmess.DF == 17 &&                   (adsbmess.TypeCode >= 9 && adsbmess.TypeCode <= 18)                 || (adsbmess.TypeCode >= 0x14 && adsbmess.TypeCode <= 0x16)                  ) // airbornepos              {                  // odd                  if (adsbmess.Fcprformat)                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaodd  = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " odd");                  }                  else // even                  {                      ((Plane)Planes[adsbmess.AA.ToString("X5")]).llaeven = adsbmess;                        //Console.WriteLine("adsb " + planeid + " type " + adsbmess.DF + " even");                  }              }              else if (adsbmess.DF == 17 && adsbmess.TypeCode >= 1 && adsbmess.TypeCode <= 4) // ident              {                  StringBuilder builder = new StringBuilder();                    int count = 8;                  for (int i = 0; i < count; i++)                  {                      char ch = '\0';                      byte[] char1 = adsbmess.getbits(adsbmess.adsbdata' 7 + i * 6' 6);                        byte num2 = char1[0];                        if ((num2 > 0) && (num2 < 0x1b))                      {                          ch = (char)(0x41 + (num2 - 1));                      }                      else if (num2 == 0x20)                      {                          ch = ' ';                      }                      else if ((num2 > 0x2f) && (num2 < 0x3a))                      {                          ch = (char)(0x30 + (num2 - 0x30));                      }                      if (ch != '\0')                      {                          builder.Append(ch);                      }                  }                    adsbmess.Ident = builder.ToString();                  //Console.WriteLine("Ident " + builder.ToString());              }               else if (adsbmess.DF == 17 && adsbmess.TypeCode == 0x13) // velocity              {                  int subtype = adsbmess.adsbdata[0] & 7;                  int accuracy = (adsbmess.adsbdata[1] >> 3) & 15;                    switch (subtype)                  {                      case 3:                      case 4:                          bool headingstatus = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                          if (headingstatus)                          {                              ushort head = (ushort)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                              double heading = head * 0.3515625;                              ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = heading;                          }                          break;                      case 1:                      case 2:                      default:                          bool westvel = ((adsbmess.adsbdata[1] >> 2) & 1) > 0;                            int ewvel = (int)(((adsbmess.adsbdata[1] & 3) << 8) + adsbmess.adsbdata[2]);                            bool southvel = ((adsbmess.adsbdata[3] >> 7) & 1) > 0;                            int nsvel = (int)(((adsbmess.adsbdata[3] & 127) << 3) + (adsbmess.adsbdata[4] >> 5));                            if (westvel)                              ewvel *= -1;                            if (southvel)                              nsvel *= -1;                            double cog = (Math.Atan2(ewvel' nsvel) * (180 / Math.PI));                            Console.WriteLine("vel " + ewvel + " " + nsvel + " " + cog);                            ((Plane)Planes[adsbmess.AA.ToString("X5")]).heading = (cog + 360) % 360;                            break;                  }              }              else              {                  Console.WriteLine("No processing type 0x" + adsbmess.TypeCode.ToString("X2") + " DF " + adsbmess.DF);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertHexStringToByteArray,The following statement contains a magic number: if (hexString.Length % 2 != 0)              {                  throw new ArgumentException(String.Format(CultureInfo.InvariantCulture' "The binary key cannot have an odd number of digits: {0}"' hexString));              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertHexStringToByteArray,The following statement contains a magic number: byte[] HexAsBytes = new byte[hexString.Length / 2];
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertHexStringToByteArray,The following statement contains a magic number: for (int index = 0; index < HexAsBytes.Length; index++)              {                  string byteValue = hexString.Substring(index * 2' 2);                  HexAsBytes[index] = byte.Parse(byteValue' NumberStyles.HexNumber' CultureInfo.InvariantCulture);              }
Magic Number,MissionPlanner.Utilities,adsb,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertHexStringToByteArray,The following statement contains a magic number: for (int index = 0; index < HexAsBytes.Length; index++)              {                  string byteValue = hexString.Substring(index * 2' 2);                  HexAsBytes[index] = byte.Parse(byteValue' NumberStyles.HexNumber' CultureInfo.InvariantCulture);              }
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: if (Math.Abs((llaeven.recvtime - llaodd.recvtime).TotalSeconds) > 30)                      return PointLatLngAlt.Zero;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double j = Math.Floor((((59.0 * llaeven.lat) - (60.0 * llaodd.lat)) / 131072.0) + 0.5);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double j = Math.Floor((((59.0 * llaeven.lat) - (60.0 * llaodd.lat)) / 131072.0) + 0.5);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double j = Math.Floor((((59.0 * llaeven.lat) - (60.0 * llaodd.lat)) / 131072.0) + 0.5);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double j = Math.Floor((((59.0 * llaeven.lat) - (60.0 * llaodd.lat)) / 131072.0) + 0.5);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double[] rlat = new double[2];
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlat[0] = AirDlat0 * (modulo(j' 60) + llaeven.lat / 131072.0);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlat[0] = AirDlat0 * (modulo(j' 60) + llaeven.lat / 131072.0);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlat[1] = AirDlat1 * (modulo(j' 59) + llaodd.lat / 131072.0);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlat[1] = AirDlat1 * (modulo(j' 59) + llaodd.lat / 131072.0);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: if (rlat[0] >= 270)                      rlat[0] -= 360;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: if (rlat[0] >= 270)                      rlat[0] -= 360;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: if (rlat[1] >= 270)                      rlat[1] -= 360;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: if (rlat[1] >= 270)                      rlat[1] -= 360;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double M = Math.Floor((inside / 131072.0) + 0.5);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double M = Math.Floor((inside / 131072.0) + 0.5);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double dlon0 = 360.0 / ni0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double dlon1 = 360.0 / ni1;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: double[] rlng = new double[2];
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[0] = dlon0 * (modulo(M' ni0) + (llaeven.lng / 131072.0));
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[1] = dlon1 * (modulo(M' ni1) + (llaodd.lng / 131072.0));
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[0] = modulo(rlng[0] + 180.0' 360.0) - 180.0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[0] = modulo(rlng[0] + 180.0' 360.0) - 180.0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[0] = modulo(rlng[0] + 180.0' 360.0) - 180.0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[1] = modulo(rlng[1] + 180.0' 360.0) - 180.0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[1] = modulo(rlng[1] + 180.0' 360.0) - 180.0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: rlng[1] = modulo(rlng[1] + 180.0' 360.0) - 180.0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,plla,The following statement contains a magic number: return new PointLatLngAlt(reflat' reflng' llaodd.alt * 0.3048' ID);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The following statement contains a magic number: int num = 131072;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The following statement contains a magic number: double denominator = (newmsg.OddFormat ? 6.101694915254237 : 6.0);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The following statement contains a magic number: double denominator = (newmsg.OddFormat ? 6.101694915254237 : 6.0);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The following statement contains a magic number: double num3 =  360.0;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The following statement contains a magic number: double num6 = Math.Floor((double)(latitude / denominator)) + Math.Floor((double)((0.5 + (this.modulo(latitude' denominator) / denominator)) - num5));
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,pllalocal,The following statement contains a magic number: double num11 = Math.Floor((double)(numerator / num9)) + Math.Floor((double)((0.5 + (this.modulo(numerator' num9) / num9)) - num10));
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,NL,The following statement contains a magic number: if (latitude <= 87.0)                  {                      for (int i = 0; i < _NLTable.Length; i++)                      {                          if (latitude <= _NLTable[i])                          {                              return (0x3b - i);                          }                      }                  }
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,BuildNLTable,The following statement contains a magic number: double num = 57.295779513082323;
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,BuildNLTable,The following statement contains a magic number: double num2 = 1.0 - Math.Cos(0.10471975511965977);
Magic Number,MissionPlanner.Utilities,Plane,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,BuildNLTable,The following statement contains a magic number: for (int i = 0; i < 0x3a; i++)                  {                      double num5 = 1.0 - Math.Cos(6.2831853071795862 / ((double)num3));                      double d = num2 / num5;                      double num7 = Math.Sqrt(d);                      _NLTable[i] = num * Math.Acos(num7);                      num3--;                  }
Magic Number,MissionPlanner.Utilities,ModeSMessage,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,getbits,The following statement contains a magic number: byte[] ans = new byte[bitcount / 8 + 1];
Magic Number,MissionPlanner.Utilities,ModeSMessage,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,getbits,The following statement contains a magic number: for (int a = startbit + bitcount; a > startbit; a--)                   {                      int no = ((a / 8) * 8) + (7 - (a % 8));                      bool bit = ba.Get(no);                      //Console.SetCursorPosition(a' Console.CursorTop);                      //Console.Write(bit ? "1" : "0");                      banswer.Set(bitsdone' bit);                      bitsdone++;                  }
Magic Number,MissionPlanner.Utilities,ModeSMessage,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,getbits,The following statement contains a magic number: for (int a = startbit + bitcount; a > startbit; a--)                   {                      int no = ((a / 8) * 8) + (7 - (a % 8));                      bool bit = ba.Get(no);                      //Console.SetCursorPosition(a' Console.CursorTop);                      //Console.Write(bit ? "1" : "0");                      banswer.Set(bitsdone' bit);                      bitsdone++;                  }
Magic Number,MissionPlanner.Utilities,ModeSMessage,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,getbits,The following statement contains a magic number: for (int a = startbit + bitcount; a > startbit; a--)                   {                      int no = ((a / 8) * 8) + (7 - (a % 8));                      bool bit = ba.Get(no);                      //Console.SetCursorPosition(a' Console.CursorTop);                      //Console.Write(bit ? "1" : "0");                      banswer.Set(bitsdone' bit);                      bitsdone++;                  }
Magic Number,MissionPlanner.Utilities,ModeSMessage,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,getbits,The following statement contains a magic number: for (int a = startbit + bitcount; a > startbit; a--)                   {                      int no = ((a / 8) * 8) + (7 - (a % 8));                      bool bit = ba.Get(no);                      //Console.SetCursorPosition(a' Console.CursorTop);                      //Console.Write(bit ? "1" : "0");                      banswer.Set(bitsdone' bit);                      bitsdone++;                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,Crc32ModeS,The following statement contains a magic number: for (uint i = 0; i < this._LookupTable.Length; i++)                  {                      uint num2 = i << 0x18;                      for (int j = 0; j < 8; j++)                      {                          if ((num2 & 0x80000000) != 0x80000000)                          {                              num2 = num2 << 1;                          }                          else                          {                              num2 = (uint)((num2 ^ -392064) << 1);                          }                      }                      this._LookupTable[i] = num2;                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,Crc32ModeS,The following statement contains a magic number: for (uint i = 0; i < this._LookupTable.Length; i++)                  {                      uint num2 = i << 0x18;                      for (int j = 0; j < 8; j++)                      {                          if ((num2 & 0x80000000) != 0x80000000)                          {                              num2 = num2 << 1;                          }                          else                          {                              num2 = (uint)((num2 ^ -392064) << 1);                          }                      }                      this._LookupTable[i] = num2;                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksum,The following statement contains a magic number: for (int i = offset; i < (offset + length); i++)                  {                      uint index = (uint)(((num & -16777216) >> 0x18) ^ bytes[i]);                      num = (num << 8) ^ this._LookupTable[index];                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksum,The following statement contains a magic number: for (int i = offset; i < (offset + length); i++)                  {                      uint index = (uint)(((num & -16777216) >> 0x18) ^ bytes[i]);                      num = (num << 8) ^ this._LookupTable[index];                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional32,The following statement contains a magic number: uint crc = (uint)((((bytes[0] << 0x18) + (bytes[1] << 0x10)) + (bytes[2] << 8)) + bytes[3]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional32,The following statement contains a magic number: uint crc = (uint)((((bytes[0] << 0x18) + (bytes[1] << 0x10)) + (bytes[2] << 8)) + bytes[3]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional32,The following statement contains a magic number: uint crc = (uint)((((bytes[0] << 0x18) + (bytes[1] << 0x10)) + (bytes[2] << 8)) + bytes[3]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint crc = (uint)((((bytes[0] << 0x18) + (bytes[1] << 0x10)) + (bytes[2] << 8)) + bytes[3]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint crc = (uint)((((bytes[0] << 0x18) + (bytes[1] << 0x10)) + (bytes[2] << 8)) + bytes[3]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint crc = (uint)((((bytes[0] << 0x18) + (bytes[1] << 0x10)) + (bytes[2] << 8)) + bytes[3]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num2 = (uint)((((bytes[4] << 0x18) + (bytes[5] << 0x10)) + (bytes[6] << 8)) + bytes[7]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num2 = (uint)((((bytes[4] << 0x18) + (bytes[5] << 0x10)) + (bytes[6] << 8)) + bytes[7]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num2 = (uint)((((bytes[4] << 0x18) + (bytes[5] << 0x10)) + (bytes[6] << 8)) + bytes[7]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num2 = (uint)((((bytes[4] << 0x18) + (bytes[5] << 0x10)) + (bytes[6] << 8)) + bytes[7]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num2 = (uint)((((bytes[4] << 0x18) + (bytes[5] << 0x10)) + (bytes[6] << 8)) + bytes[7]);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num3 = (uint)(((bytes[8] << 0x18) + (bytes[9] << 0x10)) + (bytes[10] << 8));
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num3 = (uint)(((bytes[8] << 0x18) + (bytes[9] << 0x10)) + (bytes[10] << 8));
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num3 = (uint)(((bytes[8] << 0x18) + (bytes[9] << 0x10)) + (bytes[10] << 8));
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ComputeChecksumBytesTraditional88,The following statement contains a magic number: uint num3 = (uint)(((bytes[8] << 0x18) + (bytes[9] << 0x10)) + (bytes[10] << 8));
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertToByteArray,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertToByteArray,The following statement contains a magic number: if (littleEndian)                  {                      buffer[0] = (byte)(crc & 0xff);                      buffer[1] = (byte)((crc >> 8) & 0xff);                      buffer[2] = (byte)((crc >> 0x10) & 0xff);                      buffer[3] = (byte)(crc >> 0x18);                      return buffer;                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertToByteArray,The following statement contains a magic number: if (littleEndian)                  {                      buffer[0] = (byte)(crc & 0xff);                      buffer[1] = (byte)((crc >> 8) & 0xff);                      buffer[2] = (byte)((crc >> 0x10) & 0xff);                      buffer[3] = (byte)(crc >> 0x18);                      return buffer;                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertToByteArray,The following statement contains a magic number: if (littleEndian)                  {                      buffer[0] = (byte)(crc & 0xff);                      buffer[1] = (byte)((crc >> 8) & 0xff);                      buffer[2] = (byte)((crc >> 0x10) & 0xff);                      buffer[3] = (byte)(crc >> 0x18);                      return buffer;                  }
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertToByteArray,The following statement contains a magic number: buffer[2] = (byte)((crc >> 8) & 0xff);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertToByteArray,The following statement contains a magic number: buffer[2] = (byte)((crc >> 8) & 0xff);
Magic Number,MissionPlanner.Utilities,Crc32ModeS,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\adsb.cs,ConvertToByteArray,The following statement contains a magic number: buffer[3] = (byte)(crc & 0xff);
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,getAirports,The following statement contains a magic number: lock (locker)              {                  DateTime start = DateTime.Now;                    //log.Info("getAirports " + centerpoint);                    // check if we have moved 66% from our last cache center point                  if (currentcenter.GetDistance(centerpoint) < ((proximity/3)*2))                  {                      if (!newairports)                          return cache;                  }                    newairports = false;                    log.Info("getAirports - regen list");                    // generate a new list                  currentcenter = centerpoint;                    cache.Clear();                    foreach (PointLatLngAlt item in airports)                  {                      if (item.GetDistance(centerpoint) < proximity)                      {                          cache.Add(item);                      }                  }                    log.Info("getAirports done " + (DateTime.Now - start).TotalSeconds + " sec");                    return cache;              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,getAirports,The following statement contains a magic number: lock (locker)              {                  DateTime start = DateTime.Now;                    //log.Info("getAirports " + centerpoint);                    // check if we have moved 66% from our last cache center point                  if (currentcenter.GetDistance(centerpoint) < ((proximity/3)*2))                  {                      if (!newairports)                          return cache;                  }                    newairports = false;                    log.Info("getAirports - regen list");                    // generate a new list                  currentcenter = centerpoint;                    cache.Clear();                    foreach (PointLatLngAlt item in airports)                  {                      if (item.GetDistance(centerpoint) < proximity)                      {                          cache.Add(item);                      }                  }                    log.Info("getAirports done " + (DateTime.Now - start).TotalSeconds + " sec");                    return cache;              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,AddAirport,The following statement contains a magic number: lock (locker)              {                  if (checkdups)                  {                      foreach (PointLatLngAlt item in airports)                      {                          if (item.GetDistance(plla) < 1000) // 1000m                          {                              return;                          }                      }                  }                    airports.Add(plla);                    newairports = true;              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOpenflights,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      string name = items[1];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[2 + latOffset];                      }                      name = name.Trim('"');                        if (items[5 + latOffset].Length != 6)                          continue;                        double lat = double.Parse(items[6 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[7 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[8 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOpenflights,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      string name = items[1];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[2 + latOffset];                      }                      name = name.Trim('"');                        if (items[5 + latOffset].Length != 6)                          continue;                        double lat = double.Parse(items[6 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[7 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[8 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOpenflights,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      string name = items[1];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[2 + latOffset];                      }                      name = name.Trim('"');                        if (items[5 + latOffset].Length != 6)                          continue;                        double lat = double.Parse(items[6 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[7 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[8 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOpenflights,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      string name = items[1];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[2 + latOffset];                      }                      name = name.Trim('"');                        if (items[5 + latOffset].Length != 6)                          continue;                        double lat = double.Parse(items[6 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[7 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[8 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOpenflights,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      string name = items[1];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[2 + latOffset];                      }                      name = name.Trim('"');                        if (items[5 + latOffset].Length != 6)                          continue;                        double lat = double.Parse(items[6 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[7 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[8 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadOurairports,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    if (items.Length == 0)                      continue;                    try                  {                      if (items[0] == "\"id\"")                          continue;                        if (items[1].Length != 6) // "xxxx"                          continue;                        if (items[2].Contains("small_airport") || items[2].Contains("seaplane_base") ||                          items[2].Contains("heliport") || items[2].Contains("closed"))                          continue;                          string name = items[3];                      int latOffset = 0;                      while (name[0] == '"' && name[name.Length - 1] != '"')                      {                          latOffset += 1;                          name = name + "'" + items[3 + latOffset];                      }                      name = name.Trim('"');                      double lat = double.Parse(items[4 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double lng = double.Parse(items[5 + latOffset].Trim('"')' CultureInfo.InvariantCulture);                      double alt = 0;                        //double alt = double.Parse(items[6 + latOffset].Trim('"')) * 0.3048;                        var newap = new PointLatLngAlt(lat' lng' alt' name);                        AddAirport(newap);                      //Console.WriteLine(newap);                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadPartow,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(':');                    string name = items[2].Trim('"');                    double lat = double.Parse(items[5]' CultureInfo.InvariantCulture) +                               double.Parse(items[6]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[7]' CultureInfo.InvariantCulture)/3600;                  double lng = double.Parse(items[9]' CultureInfo.InvariantCulture) +                               double.Parse(items[10]' CultureInfo.InvariantCulture)/60 +                               double.Parse(items[11]' CultureInfo.InvariantCulture)/3600;                    if (items[8] == "S")                      lat *= -1;                    if (items[12] == "W")                      lng *= -1;                    var newap = new PointLatLngAlt(lat' lng' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,Airports,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Airports.cs,ReadUNLOCODE,The following statement contains a magic number: foreach (var line in lines)              {                  string[] items = line.Split(''');                    string name = items[3].Trim('"');                  string function = items[6].Trim('"');                  string coords = items[10].Trim('"');                    if (name == "")                      continue;                  if (coords == "")                      continue;                  if (!function.Contains("4"))                      continue;                    string[] coordssplit = coords.Split(' ');                    if (coordssplit.Length != 2)                      continue;                    double northing = double.Parse(coordssplit[0].Substring(0' 4)' CultureInfo.InvariantCulture)/100.0;                  double easting = double.Parse(coordssplit[1].Substring(0' 5)' CultureInfo.InvariantCulture)/100.0;                    if (coordssplit[0].Contains("S"))                      northing *= -1;                    if (coordssplit[1].Contains("W"))                      easting *= -1;                    var newap = new PointLatLngAlt(northing' easting' 0' name);                    AddAirport(newap);                  Console.WriteLine(newap);              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,section,The following statement contains a magic number: return 4 * i + j;
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_neighbor_umbrella_component,The following statement contains a magic number: if (idx < 3)              {                  return _neighbor_umbrellas[idx].components[comp_idx];              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_neighbor_umbrella_component,The following statement contains a magic number: return (_neighbor_umbrellas[idx % 3].components[comp_idx] + 10) % 20;
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_neighbor_umbrella_component,The following statement contains a magic number: return (_neighbor_umbrellas[idx % 3].components[comp_idx] + 10) % 20;
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_neighbor_umbrella_component,The following statement contains a magic number: return (_neighbor_umbrellas[idx % 3].components[comp_idx] + 10) % 20;
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (is_equal(u.x' u.y))              {                  /* If the coefficients of the first and second vertices are equal' then                   * v crosses the first component or the edge formed by the umbrella's                   * pivot and forth vertex. */                  int comp = _neighbor_umbrella_component(idx' 0);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c0];                  if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return comp;                  }                  else if (x0 < 0)                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' u.x < u.y ? 3 : 2);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (is_equal(u.x' u.y))              {                  /* If the coefficients of the first and second vertices are equal' then                   * v crosses the first component or the edge formed by the umbrella's                   * pivot and forth vertex. */                  int comp = _neighbor_umbrella_component(idx' 0);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c0];                  if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return comp;                  }                  else if (x0 < 0)                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' u.x < u.y ? 3 : 2);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (is_equal(u.x' u.y))              {                  /* If the coefficients of the first and second vertices are equal' then                   * v crosses the first component or the edge formed by the umbrella's                   * pivot and forth vertex. */                  int comp = _neighbor_umbrella_component(idx' 0);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c0];                  if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return comp;                  }                  else if (x0 < 0)                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' u.x < u.y ? 3 : 2);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (is_equal(u.x' u.y))              {                  /* If the coefficients of the first and second vertices are equal' then                   * v crosses the first component or the edge formed by the umbrella's                   * pivot and forth vertex. */                  int comp = _neighbor_umbrella_component(idx' 0);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c0];                  if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return comp;                  }                  else if (x0 < 0)                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' u.x < u.y ? 3 : 2);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (is_equal(u.x' u.y))              {                  /* If the coefficients of the first and second vertices are equal' then                   * v crosses the first component or the edge formed by the umbrella's                   * pivot and forth vertex. */                  int comp = _neighbor_umbrella_component(idx' 0);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c0];                  if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return comp;                  }                  else if (x0 < 0)                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' u.x < u.y ? 3 : 2);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_from_neighbor_umbrella,The following statement contains a magic number: if (u.y > u.x)              {                  /* If the coefficient of the second vertex is greater than the first                   * one's' then v crosses the first' second or third component. */                  int comp = _neighbor_umbrella_component(idx' 1);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x1 = (float) w[_neighbor_umbrellas[idx % 3].v1_c1];                  float x2 = (float) w[_neighbor_umbrellas[idx % 3].v2_c1];                    if (is_zero(x1))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x1 < 0 ? 2 : 1);                  }                  else if (x1 < 0)                  {                      return _neighbor_umbrella_component(idx' 2);                  }                    if (is_zero(x2))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x2 > 0 ? 1 : 0);                  }                  else if (x2 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    return comp;              }              else              {                  /* If the coefficient of the second vertex is lesser than the first                   * one's' then v crosses the first' fourth or fifth component. */                  int comp = _neighbor_umbrella_component(idx' 4);                  var w = _inverses[comp % 10] * v;                  if (comp > 9)                  {                      w = -w;                  }                  float x4 = (float) w[_neighbor_umbrellas[idx % 3].v4_c4];                  float x0 = (float) w[_neighbor_umbrellas[idx % 3].v0_c4];                    if (is_zero(x4))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x4 < 0 ? 0 : 4);                  }                  else if (x4 < 0)                  {                      return _neighbor_umbrella_component(idx' 0);                  }                    if (is_zero(x0))                  {                      if (!inclusive)                      {                          return -1;                      }                      return _neighbor_umbrella_component(idx' x0 > 0 ? 4 : 3);                  }                  else if (x0 < 0)                  {                      return _neighbor_umbrella_component(idx' 3);                  }                    return comp;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (umbrella % 3)              {                  case 0:                      w.z = -w.z;                      break;                  case 1:                      w = new Vector3(w.y' w.z' -w.x);                      break;                  case 2:                      w = new Vector3(w.z' w.x' -w.y);                      break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following statement contains a magic number: switch (umbrella % 3)              {                  case 0:                      w.z = -w.z;                      break;                  case 1:                      w = new Vector3(w.y' w.z' -w.x);                      break;                  case 2:                      w = new Vector3(w.z' w.x' -w.y);                      break;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_subtriangle_index,The following statement contains a magic number: var w = _mid_inverses[triangle_index % 10] * v;
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_subtriangle_index,The following statement contains a magic number: if (triangle_index > 9)              {                  w = -w;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_subtriangle_index,The following statement contains a magic number: if (!is_zero(w.x) && w.x < 0)              {                  return 3;              }
Magic Number,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_subtriangle_index,The following statement contains a magic number: if (!is_zero(w.z) && w.z < 0)              {                  return 2;              }
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,ReadLine,The following statement contains a magic number: DateTime deadline = DateTime.Now.AddSeconds(5);
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,ReadLine,The following statement contains a magic number: while (DateTime.Now < deadline) {                  try                  {                      byte by = br.ReadByte();                      deadline = DateTime.Now.AddSeconds(5);                      sb.Append((char) by);                      if (by == '\n')                          break;                  }                  catch { }              }
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getUrl,The following statement contains a magic number: try              {                    // Create a request using a URL that can receive a post.                   WebRequest request = HttpWebRequest.Create(URL);                  // Set the Method property of the request to POST.                  request.Method = "GET";                    ((HttpWebRequest)request).AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;                    request.Headers.Add("Accept-Encoding"' "gzip'deflate");                    // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Debug(((HttpWebResponse)response).StatusDescription);                  // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    BinaryReader br = new BinaryReader(dataStream);                    // get boundary header                    string mpheader = response.Headers["Content-Type"];                  if (mpheader.IndexOf("boundary=") == -1)                  {                      ReadLine(br); // this is a blank line                      string line = "proxyline";                      do                      {                          line = ReadLine(br);                          if (line.StartsWith("--"))                          {                              mpheader = line;                              break;                          }                      } while (line.Length > 2);                  }                  else                  {                      int startboundary = mpheader.IndexOf("boundary=") + 9;                      int endboundary = mpheader.Length;                        mpheader = mpheader.Substring(startboundary' endboundary - startboundary);                  }                    dataStream.ReadTimeout = 30000; // 30 seconds                  br.BaseStream.ReadTimeout = 30000;                    while (running)                  {                      try                      {                          // get the multipart start header                          int length = int.Parse(getHeader(br)["Content-Length"]);                            // read boundary header                          if (length > 0)                          {                              byte[] buf1 = new byte[length];                                dataStream.ReadTimeout = 3000;                                int offset = 0;                              int len = 0;                                while ((len = br.Read(buf1' offset' length)) > 0)                              {                                  offset += len;                                  length -= len;                                }                              /*                              BinaryWriter sw = new BinaryWriter(File.OpenWrite("test.jpg"));                                sw.Write(buf1'0'buf1.Length);                                sw.Close();                              */                              try                              {                                  Bitmap frame = new Bitmap(new MemoryStream(buf1));                                    fps++;                                    if (lastimage.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("MJPEG " + fps);                                      fps = 0;                                      lastimage = DateTime.Now;                                  }                                    if (OnNewImage != null)                                      OnNewImage(frame' EventArgs.Empty);                              }                              catch { }                          }                            // blank line at end of data                          System.Threading.Thread.Sleep(1);                          ReadLine(br);                      }                      catch (Exception ex) { log.Info(ex); break; }                  }                    // clear last image                  if (OnNewImage != null)                      OnNewImage(null' EventArgs.Empty);                    dataStream.Close();                  response.Close();                }              catch (Exception ex) { log.Error(ex); }
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getUrl,The following statement contains a magic number: try              {                    // Create a request using a URL that can receive a post.                   WebRequest request = HttpWebRequest.Create(URL);                  // Set the Method property of the request to POST.                  request.Method = "GET";                    ((HttpWebRequest)request).AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;                    request.Headers.Add("Accept-Encoding"' "gzip'deflate");                    // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Debug(((HttpWebResponse)response).StatusDescription);                  // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    BinaryReader br = new BinaryReader(dataStream);                    // get boundary header                    string mpheader = response.Headers["Content-Type"];                  if (mpheader.IndexOf("boundary=") == -1)                  {                      ReadLine(br); // this is a blank line                      string line = "proxyline";                      do                      {                          line = ReadLine(br);                          if (line.StartsWith("--"))                          {                              mpheader = line;                              break;                          }                      } while (line.Length > 2);                  }                  else                  {                      int startboundary = mpheader.IndexOf("boundary=") + 9;                      int endboundary = mpheader.Length;                        mpheader = mpheader.Substring(startboundary' endboundary - startboundary);                  }                    dataStream.ReadTimeout = 30000; // 30 seconds                  br.BaseStream.ReadTimeout = 30000;                    while (running)                  {                      try                      {                          // get the multipart start header                          int length = int.Parse(getHeader(br)["Content-Length"]);                            // read boundary header                          if (length > 0)                          {                              byte[] buf1 = new byte[length];                                dataStream.ReadTimeout = 3000;                                int offset = 0;                              int len = 0;                                while ((len = br.Read(buf1' offset' length)) > 0)                              {                                  offset += len;                                  length -= len;                                }                              /*                              BinaryWriter sw = new BinaryWriter(File.OpenWrite("test.jpg"));                                sw.Write(buf1'0'buf1.Length);                                sw.Close();                              */                              try                              {                                  Bitmap frame = new Bitmap(new MemoryStream(buf1));                                    fps++;                                    if (lastimage.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("MJPEG " + fps);                                      fps = 0;                                      lastimage = DateTime.Now;                                  }                                    if (OnNewImage != null)                                      OnNewImage(frame' EventArgs.Empty);                              }                              catch { }                          }                            // blank line at end of data                          System.Threading.Thread.Sleep(1);                          ReadLine(br);                      }                      catch (Exception ex) { log.Info(ex); break; }                  }                    // clear last image                  if (OnNewImage != null)                      OnNewImage(null' EventArgs.Empty);                    dataStream.Close();                  response.Close();                }              catch (Exception ex) { log.Error(ex); }
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getUrl,The following statement contains a magic number: try              {                    // Create a request using a URL that can receive a post.                   WebRequest request = HttpWebRequest.Create(URL);                  // Set the Method property of the request to POST.                  request.Method = "GET";                    ((HttpWebRequest)request).AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;                    request.Headers.Add("Accept-Encoding"' "gzip'deflate");                    // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Debug(((HttpWebResponse)response).StatusDescription);                  // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    BinaryReader br = new BinaryReader(dataStream);                    // get boundary header                    string mpheader = response.Headers["Content-Type"];                  if (mpheader.IndexOf("boundary=") == -1)                  {                      ReadLine(br); // this is a blank line                      string line = "proxyline";                      do                      {                          line = ReadLine(br);                          if (line.StartsWith("--"))                          {                              mpheader = line;                              break;                          }                      } while (line.Length > 2);                  }                  else                  {                      int startboundary = mpheader.IndexOf("boundary=") + 9;                      int endboundary = mpheader.Length;                        mpheader = mpheader.Substring(startboundary' endboundary - startboundary);                  }                    dataStream.ReadTimeout = 30000; // 30 seconds                  br.BaseStream.ReadTimeout = 30000;                    while (running)                  {                      try                      {                          // get the multipart start header                          int length = int.Parse(getHeader(br)["Content-Length"]);                            // read boundary header                          if (length > 0)                          {                              byte[] buf1 = new byte[length];                                dataStream.ReadTimeout = 3000;                                int offset = 0;                              int len = 0;                                while ((len = br.Read(buf1' offset' length)) > 0)                              {                                  offset += len;                                  length -= len;                                }                              /*                              BinaryWriter sw = new BinaryWriter(File.OpenWrite("test.jpg"));                                sw.Write(buf1'0'buf1.Length);                                sw.Close();                              */                              try                              {                                  Bitmap frame = new Bitmap(new MemoryStream(buf1));                                    fps++;                                    if (lastimage.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("MJPEG " + fps);                                      fps = 0;                                      lastimage = DateTime.Now;                                  }                                    if (OnNewImage != null)                                      OnNewImage(frame' EventArgs.Empty);                              }                              catch { }                          }                            // blank line at end of data                          System.Threading.Thread.Sleep(1);                          ReadLine(br);                      }                      catch (Exception ex) { log.Info(ex); break; }                  }                    // clear last image                  if (OnNewImage != null)                      OnNewImage(null' EventArgs.Empty);                    dataStream.Close();                  response.Close();                }              catch (Exception ex) { log.Error(ex); }
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getUrl,The following statement contains a magic number: try              {                    // Create a request using a URL that can receive a post.                   WebRequest request = HttpWebRequest.Create(URL);                  // Set the Method property of the request to POST.                  request.Method = "GET";                    ((HttpWebRequest)request).AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;                    request.Headers.Add("Accept-Encoding"' "gzip'deflate");                    // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Debug(((HttpWebResponse)response).StatusDescription);                  // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    BinaryReader br = new BinaryReader(dataStream);                    // get boundary header                    string mpheader = response.Headers["Content-Type"];                  if (mpheader.IndexOf("boundary=") == -1)                  {                      ReadLine(br); // this is a blank line                      string line = "proxyline";                      do                      {                          line = ReadLine(br);                          if (line.StartsWith("--"))                          {                              mpheader = line;                              break;                          }                      } while (line.Length > 2);                  }                  else                  {                      int startboundary = mpheader.IndexOf("boundary=") + 9;                      int endboundary = mpheader.Length;                        mpheader = mpheader.Substring(startboundary' endboundary - startboundary);                  }                    dataStream.ReadTimeout = 30000; // 30 seconds                  br.BaseStream.ReadTimeout = 30000;                    while (running)                  {                      try                      {                          // get the multipart start header                          int length = int.Parse(getHeader(br)["Content-Length"]);                            // read boundary header                          if (length > 0)                          {                              byte[] buf1 = new byte[length];                                dataStream.ReadTimeout = 3000;                                int offset = 0;                              int len = 0;                                while ((len = br.Read(buf1' offset' length)) > 0)                              {                                  offset += len;                                  length -= len;                                }                              /*                              BinaryWriter sw = new BinaryWriter(File.OpenWrite("test.jpg"));                                sw.Write(buf1'0'buf1.Length);                                sw.Close();                              */                              try                              {                                  Bitmap frame = new Bitmap(new MemoryStream(buf1));                                    fps++;                                    if (lastimage.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("MJPEG " + fps);                                      fps = 0;                                      lastimage = DateTime.Now;                                  }                                    if (OnNewImage != null)                                      OnNewImage(frame' EventArgs.Empty);                              }                              catch { }                          }                            // blank line at end of data                          System.Threading.Thread.Sleep(1);                          ReadLine(br);                      }                      catch (Exception ex) { log.Info(ex); break; }                  }                    // clear last image                  if (OnNewImage != null)                      OnNewImage(null' EventArgs.Empty);                    dataStream.Close();                  response.Close();                }              catch (Exception ex) { log.Error(ex); }
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getUrl,The following statement contains a magic number: try              {                    // Create a request using a URL that can receive a post.                   WebRequest request = HttpWebRequest.Create(URL);                  // Set the Method property of the request to POST.                  request.Method = "GET";                    ((HttpWebRequest)request).AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;                    request.Headers.Add("Accept-Encoding"' "gzip'deflate");                    // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Debug(((HttpWebResponse)response).StatusDescription);                  // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    BinaryReader br = new BinaryReader(dataStream);                    // get boundary header                    string mpheader = response.Headers["Content-Type"];                  if (mpheader.IndexOf("boundary=") == -1)                  {                      ReadLine(br); // this is a blank line                      string line = "proxyline";                      do                      {                          line = ReadLine(br);                          if (line.StartsWith("--"))                          {                              mpheader = line;                              break;                          }                      } while (line.Length > 2);                  }                  else                  {                      int startboundary = mpheader.IndexOf("boundary=") + 9;                      int endboundary = mpheader.Length;                        mpheader = mpheader.Substring(startboundary' endboundary - startboundary);                  }                    dataStream.ReadTimeout = 30000; // 30 seconds                  br.BaseStream.ReadTimeout = 30000;                    while (running)                  {                      try                      {                          // get the multipart start header                          int length = int.Parse(getHeader(br)["Content-Length"]);                            // read boundary header                          if (length > 0)                          {                              byte[] buf1 = new byte[length];                                dataStream.ReadTimeout = 3000;                                int offset = 0;                              int len = 0;                                while ((len = br.Read(buf1' offset' length)) > 0)                              {                                  offset += len;                                  length -= len;                                }                              /*                              BinaryWriter sw = new BinaryWriter(File.OpenWrite("test.jpg"));                                sw.Write(buf1'0'buf1.Length);                                sw.Close();                              */                              try                              {                                  Bitmap frame = new Bitmap(new MemoryStream(buf1));                                    fps++;                                    if (lastimage.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("MJPEG " + fps);                                      fps = 0;                                      lastimage = DateTime.Now;                                  }                                    if (OnNewImage != null)                                      OnNewImage(frame' EventArgs.Empty);                              }                              catch { }                          }                            // blank line at end of data                          System.Threading.Thread.Sleep(1);                          ReadLine(br);                      }                      catch (Exception ex) { log.Info(ex); break; }                  }                    // clear last image                  if (OnNewImage != null)                      OnNewImage(null' EventArgs.Empty);                    dataStream.Close();                  response.Close();                }              catch (Exception ex) { log.Error(ex); }
Magic Number,MissionPlanner.Utilities,CaptureMJPEG,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CaptureMJPEG.cs,getHeader,The following statement contains a magic number: do              {                  line = ReadLine(stream);                    string[] items = line.Split(new char[] { ':' }' StringSplitOptions.RemoveEmptyEntries);                      if (items.Length == 2)                      answer.Add(items[0].Trim()' items[1].Trim());                } while (line != "");
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,update_completion_mask,The following statement contains a magic number: _completion_mask[section / 8] |= (byte)(1 << (section % 8));
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,update_completion_mask,The following statement contains a magic number: _completion_mask[section / 8] |= (byte)(1 << (section % 8));
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,update_completion_mask,The following statement contains a magic number: memset(_completion_mask' 0' 10);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,check_for_timeout,The following statement contains a magic number: if (running() && tnow - _last_sample_ms > 1000)              {                  _retry = false;                  set_status(compass_cal_status_t.COMPASS_CAL_FAILED);                  return true;              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,update,The following statement contains a magic number: if (_status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_ONE)              {                  if (_fit_step >= 10)                  {                      if (is_equal(_fitness' _initial_fitness) || isnan(_fitness))                      {                          //if true' means that fitness is diverging instead of converging                          set_status(compass_cal_status_t.COMPASS_CAL_FAILED);                          failure = true;                      }                      set_status(compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_TWO);                  }                  else                  {                      if (_fit_step == 0)                      {                          calc_initial_offset();                      }                      run_sphere_fit();                      _fit_step++;                  }              }              else if (_status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_TWO)              {                  if (_fit_step >= 35)                  {                      if (fit_acceptable())                      {                          set_status(compass_cal_status_t.COMPASS_CAL_SUCCESS);                      }                      else                      {                          set_status(compass_cal_status_t.COMPASS_CAL_FAILED);                          failure = true;                      }                  }                  else if (_fit_step < 15)                  {                      run_sphere_fit();                      _fit_step++;                  }                  else                  {                      run_ellipsoid_fit();                      _fit_step++;                  }              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,update,The following statement contains a magic number: if (_status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_ONE)              {                  if (_fit_step >= 10)                  {                      if (is_equal(_fitness' _initial_fitness) || isnan(_fitness))                      {                          //if true' means that fitness is diverging instead of converging                          set_status(compass_cal_status_t.COMPASS_CAL_FAILED);                          failure = true;                      }                      set_status(compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_TWO);                  }                  else                  {                      if (_fit_step == 0)                      {                          calc_initial_offset();                      }                      run_sphere_fit();                      _fit_step++;                  }              }              else if (_status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_TWO)              {                  if (_fit_step >= 35)                  {                      if (fit_acceptable())                      {                          set_status(compass_cal_status_t.COMPASS_CAL_SUCCESS);                      }                      else                      {                          set_status(compass_cal_status_t.COMPASS_CAL_FAILED);                          failure = true;                      }                  }                  else if (_fit_step < 15)                  {                      run_sphere_fit();                      _fit_step++;                  }                  else                  {                      run_ellipsoid_fit();                      _fit_step++;                  }              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,update,The following statement contains a magic number: if (_status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_ONE)              {                  if (_fit_step >= 10)                  {                      if (is_equal(_fitness' _initial_fitness) || isnan(_fitness))                      {                          //if true' means that fitness is diverging instead of converging                          set_status(compass_cal_status_t.COMPASS_CAL_FAILED);                          failure = true;                      }                      set_status(compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_TWO);                  }                  else                  {                      if (_fit_step == 0)                      {                          calc_initial_offset();                      }                      run_sphere_fit();                      _fit_step++;                  }              }              else if (_status == compass_cal_status_t.COMPASS_CAL_RUNNING_STEP_TWO)              {                  if (_fit_step >= 35)                  {                      if (fit_acceptable())                      {                          set_status(compass_cal_status_t.COMPASS_CAL_SUCCESS);                      }                      else                      {                          set_status(compass_cal_status_t.COMPASS_CAL_FAILED);                          failure = true;                      }                  }                  else if (_fit_step < 15)                  {                      run_sphere_fit();                      _fit_step++;                  }                  else                  {                      run_ellipsoid_fit();                      _fit_step++;                  }              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,reset_state,The following statement contains a magic number: _params.radius = 200;
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,reset_state,The following statement contains a magic number: memset(_completion_mask' 0' 10);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,fit_acceptable,The following statement contains a magic number: if (!isnan(_fitness) &&                  _params.radius > 150 && _params.radius < 950 && //Earth's magnetic field strength range: 250-850mG                  fabsf(_params.offset.x) < _offset_max &&                  fabsf(_params.offset.y) < _offset_max &&                  fabsf(_params.offset.z) < _offset_max &&                  _params.diag.x > 0.2f && _params.diag.x < 5.0f &&                  _params.diag.y > 0.2f && _params.diag.y < 5.0f &&                  _params.diag.z > 0.2f && _params.diag.z < 5.0f &&                  fabsf(_params.offdiag.x) < 1.0f && //absolute of sine/cosine output cannot be greater than 1                  fabsf(_params.offdiag.y) < 1.0f &&                  fabsf(_params.offdiag.z) < 1.0f)              {                    return _fitness <= sq(_tolerance);              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,fit_acceptable,The following statement contains a magic number: if (!isnan(_fitness) &&                  _params.radius > 150 && _params.radius < 950 && //Earth's magnetic field strength range: 250-850mG                  fabsf(_params.offset.x) < _offset_max &&                  fabsf(_params.offset.y) < _offset_max &&                  fabsf(_params.offset.z) < _offset_max &&                  _params.diag.x > 0.2f && _params.diag.x < 5.0f &&                  _params.diag.y > 0.2f && _params.diag.y < 5.0f &&                  _params.diag.z > 0.2f && _params.diag.z < 5.0f &&                  fabsf(_params.offdiag.x) < 1.0f && //absolute of sine/cosine output cannot be greater than 1                  fabsf(_params.offdiag.y) < 1.0f &&                  fabsf(_params.offdiag.z) < 1.0f)              {                    return _fitness <= sq(_tolerance);              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,accept_sample,The following statement contains a magic number: staticuint16_t faces = (staticuint16_t)(2 * COMPASS_CAL_NUM_SAMPLES - 4);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,accept_sample,The following statement contains a magic number: staticuint16_t faces = (staticuint16_t)(2 * COMPASS_CAL_NUM_SAMPLES - 4);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,accept_sample,The following statement contains a magic number: float min_distance = _params.radius * 2 * sinf(theta / 2);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,accept_sample,The following statement contains a magic number: float min_distance = _params.radius * 2 * sinf(theta / 2);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_sphere_jacob,The following statement contains a magic number: ret[2] = -1.0f * (((offdiag.x * A) + (diag.y * B) + (offdiag.z * C)) / length);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_sphere_jacob,The following statement contains a magic number: ret[3] = -1.0f * (((offdiag.y * A) + (offdiag.z * B) + (diag.z * C)) / length);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,run_sphere_fit,The following statement contains a magic number: if (!inverse(JTJ' JTJ' 4))              {                  return;              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,run_sphere_fit,The following statement contains a magic number: if (!inverse(JTJ2' JTJ2' 4))              {                  return;              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_ellipsoid_jacob,The following statement contains a magic number: ret[2] = -1.0f * (((offdiag.y * A) + (offdiag.z * B) + (diag.z * C)) / length);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_ellipsoid_jacob,The following statement contains a magic number: ret[3] = -1.0f * ((sample.x + offset.x) * A) / length;
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_ellipsoid_jacob,The following statement contains a magic number: ret[4] = -1.0f * ((sample.y + offset.y) * B) / length;
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_ellipsoid_jacob,The following statement contains a magic number: ret[5] = -1.0f * ((sample.z + offset.z) * C) / length;
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_ellipsoid_jacob,The following statement contains a magic number: ret[6] = -1.0f * (((sample.y + offset.y) * A) + ((sample.x + offset.x) * B)) / length;
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_ellipsoid_jacob,The following statement contains a magic number: ret[7] = -1.0f * (((sample.z + offset.z) * A) + ((sample.x + offset.x) * C)) / length;
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,calc_ellipsoid_jacob,The following statement contains a magic number: ret[8] = -1.0f * (((sample.z + offset.z) * B) + ((sample.y + offset.y) * C)) / length;
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,run_ellipsoid_fit,The following statement contains a magic number: if (!inverse(JTJ' JTJ' 9))              {                  return;              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,run_ellipsoid_fit,The following statement contains a magic number: if (!inverse(JTJ2' JTJ2' 9))              {                  return;              }
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,get_random16,The following statement contains a magic number: m_z = 36969 * (m_z & 0xFFFFu) + (m_z >> 16);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,get_random16,The following statement contains a magic number: m_z = 36969 * (m_z & 0xFFFFu) + (m_z >> 16);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,get_random16,The following statement contains a magic number: m_w = 18000 * (m_w & 0xFFFFu) + (m_w >> 16);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,get_random16,The following statement contains a magic number: m_w = 18000 * (m_w & 0xFFFFu) + (m_w >> 16);
Magic Number,MissionPlanner.Utilities,CompassCalibrator,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\CompassCalibrator.cs,get_random16,The following statement contains a magic number: return (uint16_t) (((m_z << 16) + m_w) & 0xFFFF);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,expireCache,The following statement contains a magic number: lock (_lock)              {                  foreach (var downloadStream in _instances.ToArray())                  {                      // only process a uri once                      if (seen.Contains(downloadStream._uri))                          continue;                      seen.Add(downloadStream._uri);                        // total instances with this uri                      var uris = _instances.Where(a => { return a._uri == downloadStream._uri; });                      // total instance with thsi uri and old lastread                      var uridates = _instances.Where(a =>                      {                          return a._uri == downloadStream._uri && a._lastread < DateTime.Now.AddSeconds(-180);                      });                        // check if they are equal and expire                      if (uris.Count() == uridates.Count())                      {                          _cacheChunks.Remove(downloadStream._uri);                          foreach (var uridate in uridates.ToArray())                          {                              _instances.Remove(uridate);                          }                      }                  }              }
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,DownloadStream,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,DownloadStream,The following statement contains a magic number: _timer = new Timer(a => { expireCache(); }' null' 1000 * 30' 1000 * 30);
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      new System.Net.Security.RemoteCertificateValidationCallback(                          (sender' certificate' chain' policyErrors) => { return true; });                    log.Info(url);                  // Create a request using a URL that can receive a post.                   WebRequest request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse)response).StatusDescription);                  if (((HttpWebResponse)response).StatusCode != HttpStatusCode.OK)                      return false;                    if (File.Exists(saveto))                  {                      DateTime lastfilewrite = new FileInfo(saveto).LastWriteTime;                      DateTime lasthttpmod = ((HttpWebResponse)response).LastModified;                        if (lasthttpmod < lastfilewrite)                      {                          if (((HttpWebResponse)response).ContentLength == new FileInfo(saveto).Length)                          {                              log.Info("got LastModified " + saveto + " " + ((HttpWebResponse)response).LastModified +                                       " vs " + new FileInfo(saveto).LastWriteTime);                              response.Close();                              return true;                          }                      }                  }                    // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    long bytes = response.ContentLength;                  long contlen = bytes;                    byte[] buf1 = new byte[1024];                    if (!Directory.Exists(Path.GetDirectoryName(saveto)))                      Directory.CreateDirectory(Path.GetDirectoryName(saveto));                    FileStream fs = new FileStream(saveto + ".new"' FileMode.Create);                    DateTime dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      log.Debug(saveto + " " + bytes);                      int len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex.ToString());                  return false;              }
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,getFilefromNet,The following statement contains a magic number: try              {                  // this is for mono to a ssl server                  //ServicePointManager.CertificatePolicy = new NoCheckCertificatePolicy();                     ServicePointManager.ServerCertificateValidationCallback =                      new System.Net.Security.RemoteCertificateValidationCallback(                          (sender' certificate' chain' policyErrors) => { return true; });                    log.Info(url);                  // Create a request using a URL that can receive a post.                   WebRequest request = WebRequest.Create(url);                  request.Timeout = 10000;                  // Set the Method property of the request to POST.                  request.Method = "GET";                  // Get the response.                  WebResponse response = request.GetResponse();                  // Display the status.                  log.Info(((HttpWebResponse)response).StatusDescription);                  if (((HttpWebResponse)response).StatusCode != HttpStatusCode.OK)                      return false;                    if (File.Exists(saveto))                  {                      DateTime lastfilewrite = new FileInfo(saveto).LastWriteTime;                      DateTime lasthttpmod = ((HttpWebResponse)response).LastModified;                        if (lasthttpmod < lastfilewrite)                      {                          if (((HttpWebResponse)response).ContentLength == new FileInfo(saveto).Length)                          {                              log.Info("got LastModified " + saveto + " " + ((HttpWebResponse)response).LastModified +                                       " vs " + new FileInfo(saveto).LastWriteTime);                              response.Close();                              return true;                          }                      }                  }                    // Get the stream containing content returned by the server.                  Stream dataStream = response.GetResponseStream();                    long bytes = response.ContentLength;                  long contlen = bytes;                    byte[] buf1 = new byte[1024];                    if (!Directory.Exists(Path.GetDirectoryName(saveto)))                      Directory.CreateDirectory(Path.GetDirectoryName(saveto));                    FileStream fs = new FileStream(saveto + ".new"' FileMode.Create);                    DateTime dt = DateTime.Now;                    while (dataStream.CanRead && bytes > 0)                  {                      log.Debug(saveto + " " + bytes);                      int len = dataStream.Read(buf1' 0' buf1.Length);                      bytes -= len;                      fs.Write(buf1' 0' len);                  }                    fs.Close();                  dataStream.Close();                  response.Close();                    File.Delete(saveto);                  File.Move(saveto + ".new"' saveto);                    return true;              }              catch (Exception ex)              {                  log.Info("getFilefromNet(): " + ex.ToString());                  return false;              }
Magic Number,MissionPlanner.Utilities,Download,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Download.cs,CheckHTTPFileExists,The following statement contains a magic number: webRequest.Timeout = 1200;
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTED,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,getAltitude,The following statement contains a magic number: foreach (var DTEDdata in index)              {                  if (DTEDdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(DTEDdata.FileName))                      {                          short['] altdata = new short[DTEDdata.width' DTEDdata.height];                            using (var stream = File.OpenRead(DTEDdata.FileName))                          {                              stream.Seek(3428' SeekOrigin.Begin);                                for (int b = 0; b < (DTEDdata.height); b++)                              {                                  var buffer = new byte[DTEDdata.height*2 + 12]; // header + checksum + data(shorts)                                  stream.Read(buffer' 0' buffer.Length);                                    if (buffer[0] == 0xaa)                                  {                                      int blockno = ((int) buffer[1] << 16) + ((int) buffer[2] << 8) + buffer[3];                                      int longcount = ((int) buffer[4] << 8) + buffer[5];                                      int latcount = ((int) buffer[6] << 8) + buffer[7];                                        for (int a = 0; a < DTEDdata.width; a++)                                      {                                          altdata[longcount' latcount + a] =                                              (short) (((int) buffer[8 + a*2] << 8) + buffer[8 + a*2 + 1]);                                      }                                  }                              }                          }                          cache[DTEDdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lng' DTEDdata.Area.Left' DTEDdata.Area.Right-DTEDdata.xscale' 0' DTEDdata.width - 1);                      var yf = map(lat' DTEDdata.Area.Bottom'DTEDdata.Area.Top-DTEDdata.yscale' 0' DTEDdata.height - 1);                        int x_int = (int)xf;                      double x_frac = xf - x_int;                        int y_int = (int)yf;                      double y_frac = yf - y_int;                        double alt00 = GetAlt(DTEDdata.FileName' x_int' y_int);                      double alt10 = GetAlt(DTEDdata.FileName' x_int + 1' y_int);                      double alt01 = GetAlt(DTEDdata.FileName' x_int' y_int + 1);                      double alt11 = GetAlt(DTEDdata.FileName' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "DTED";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,LoadFile,The following statement contains a magic number: using (var stream = File.OpenRead(filename))                  {                      byte[] buffer = new byte[80];                      stream.Read(buffer' 0' buffer.Length);                        var UHL = user_header_label.Match(ASCIIEncoding.ASCII.GetString(buffer));                        if (!UHL.Success)                      {                          log.ErrorFormat("DTED invalid header {0} - {1}"' filename' ASCIIEncoding.ASCII.GetString(buffer).TrimUnPrintable());                          return;                      }                        buffer = new byte[648];                      stream.Read(buffer' 0' buffer.Length);                        var DSI = data_set_identification.Match(ASCIIEncoding.ASCII.GetString(buffer));                        buffer = new byte[2700];                      stream.Read(buffer' 0' buffer.Length);                        var ACC = accuracy_description.Match(ASCIIEncoding.ASCII.GetString(buffer));                        width = int.Parse(UHL.Groups[10].Value);                      height = int.Parse(UHL.Groups[11].Value);                        log.InfoFormat("Size ({0}'{1})"' width' height);                        // lower left corner                      x = DDDMMSSH2DD(UHL.Groups[3].Value);                      y = DDDMMSSH2DD(UHL.Groups[4].Value);                        log.InfoFormat("Start Point ({0}'{1})"' x' y);                        // scales                      xscale = SSSS2DD(UHL.Groups[5].Value);                      yscale = SSSS2DD(UHL.Groups[6].Value);                        log.InfoFormat("Scale ({0}'{1})"' xscale' yscale);                        // switch top for bottom                      y += height * yscale;                        Area = new RectLatLng(y' x' width * xscale' height * yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        FileName = filename;                      index.Add(this);                  }
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var D = int.Parse(input.Substring(0' 3));
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var M = double.Parse(input.Substring(3' 2)) / 60;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var M = double.Parse(input.Substring(3' 2)) / 60;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var M = double.Parse(input.Substring(3' 2)) / 60;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var S = double.Parse(input.Substring(5' 2)) / 60 / 60;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var S = double.Parse(input.Substring(5' 2)) / 60 / 60;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var S = double.Parse(input.Substring(5' 2)) / 60 / 60;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var S = double.Parse(input.Substring(5' 2)) / 60 / 60;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,DDDMMSSH2DD,The following statement contains a magic number: var H = input.Substring(7' 1);
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,SSSS2DD,The following statement contains a magic number: var S = double.Parse(input) / 60 / 60 / 10;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,SSSS2DD,The following statement contains a magic number: var S = double.Parse(input) / 60 / 60 / 10;
Magic Number,MissionPlanner.Utilities,DTEDdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\DTED.cs,SSSS2DD,The following statement contains a magic number: var S = double.Parse(input) / 60 / 60 / 10;
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,FreqTable,The following statement contains a magic number: double[] m_freq = new double[N/2];
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,FreqTable,The following statement contains a magic number: m_freq = new double[(N/2)];
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,FreqTable,The following statement contains a magic number: for (int i = 0; i < N/2; i++)                  m_freq[i] = i*samplerate/N;
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,rin,The following statement contains a magic number: double SCALE = 20/Math.Log(10);
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,rin,The following statement contains a magic number: double SCALE = 20/Math.Log(10);
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,rin,The following statement contains a magic number: double[] m_mag = new double[N/2];
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,rin,The following statement contains a magic number: for (int i = 0; i < N; i++)                  m_win[i] = (4.0/N)*0.5*(1 - Math.Cos(2*Math.PI*i/N));
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,rin,The following statement contains a magic number: for (int i = 0; i < N; i++)                  m_win[i] = (4.0/N)*0.5*(1 - Math.Cos(2*Math.PI*i/N));
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,rin,The following statement contains a magic number: for (int i = 0; i < N; i++)                  m_win[i] = (4.0/N)*0.5*(1 - Math.Cos(2*Math.PI*i/N));
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,rin,The following statement contains a magic number: for (int i = 0; i < N/2; i++)              {                  double re = xRe[i]; // get the Real FFT Number at position i                  double im = xIm[i]; // get the Imaginary FFT Number at position i                    m_mag[i] = Math.Sqrt(re*re + im*im); // Convert magnitude to decibels                    //m_mag[i] = SCALE * Math.Log(m_mag[i] + MIN_VALUE);              }
Magic Number,MissionPlanner.Utilities,FFT2,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fft.cs,run,The following statement contains a magic number: for (uint stage = 0; stage < m_logN; stage++)              {                  // Compute a multiplier factor for the "twiddle factors".                  // The twiddle factors are complex unit vectors spaced at                  // regular angular intervals. The angle by which the twiddle                  // factor advances depends on the FFT stage. In many FFT                  // implementations the twiddle factors are cached' but because                  // array lookup is relatively slow in C#' it's just                  // as fast to compute them on the fly.                  double wAngleInc = wIndexStep*2.0*Math.PI/m_N;                  if (inverse == false)                      wAngleInc *= -1;                  double wMulRe = Math.Cos(wAngleInc);                  double wMulIm = Math.Sin(wAngleInc);                    for (uint start = 0; start < m_N; start += spacing)                  {                      FFTElement xTop = m_X[start];                      FFTElement xBot = m_X[start + span];                        double wRe = 1.0;                      double wIm = 0.0;                        // For each butterfly in this stage                      for (uint flyCount = 0; flyCount < numFlies; ++flyCount)                      {                          // Get the top & bottom values                          double xTopRe = xTop.re;                          double xTopIm = xTop.im;                          double xBotRe = xBot.re;                          double xBotIm = xBot.im;                            // Top branch of butterfly has addition                          xTop.re = xTopRe + xBotRe;                          xTop.im = xTopIm + xBotIm;                            // Bottom branch of butterly has subtraction'                          // followed by multiplication by twiddle factor                          xBotRe = xTopRe - xBotRe;                          xBotIm = xTopIm - xBotIm;                          xBot.re = xBotRe*wRe - xBotIm*wIm;                          xBot.im = xBotRe*wIm + xBotIm*wRe;                            // Advance butterfly to next top & bottom positions                          xTop = xTop.next;                          xBot = xBot.next;                            // Update the twiddle factor' via complex multiply                          // by unit vector with the appropriate angle                          // (wRe + j wIm) = (wRe + j wIm) x (wMulRe + j wMulIm)                          double tRe = wRe;                          wRe = wRe*wMulRe - wIm*wMulIm;                          wIm = tRe*wMulIm + wIm*wMulRe;                      }                  }                    numFlies >>= 1; // Divide by 2 by right shift                  span >>= 1;                  spacing >>= 1;                  wIndexStep <<= 1; // Multiply by 2 by left shift              }
Magic Number,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,FindBestFitFont,The following statement contains a magic number: while (true)              {                  SizeF size = g.MeasureString(text' font);                    // It fits' back out                  if (size.Height <= proposedSize.Height &&                      size.Width <= proposedSize.Width)                  {                      return font;                  }                    // Try a smaller font (90% of old size)                  Font oldFont = font;                  font = new Font(font.Name' (float) (font.Size*.9)' font.Style);                  oldFont.Dispose();              }
Magic Number,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The following statement contains a magic number: for (; letter <= 'Z'; letter++)              {                  Font font = new Font("Arial Narrow"' 7' FontStyle.Regular);                    Bitmap bmp = new Bitmap(width' height);                    Graphics g = Graphics.FromImage(bmp);                    g.Clear(Color.White);                    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;                  g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;                  g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;                    //font = FindBestFitFont(g' letter.ToString()' font' new Size(width'height)' flags);                    var fsize = g.MeasureString(letter.ToString()' font);                    g.DrawString(letter.ToString()' font' Brushes.Black' 0' 0);                    try                  {                      // bmp = new Bitmap(bmp' new Size(8' 16));                      if (letter >= ':' && letter <= '@')                          continue;                        bmp.Save("!" + letter + ".bmp");                        string outlet = letter.ToString().ToLower();                        switch (letter)                      {                          case '0':                              outlet = "ze";                              break;                          case '1':                              outlet = "on";                              break;                          case '2':                              outlet = "tw";                              break;                          case '3':                              outlet = "th";                              break;                          case '4':                              outlet = "fo";                              break;                          case '5':                              outlet = "fi";                              break;                          case '6':                              outlet = "si";                              break;                          case '7':                              outlet = "se";                              break;                          case '8':                              outlet = "ei";                              break;                          case '9':                              outlet = "ni";                              break;                      }                        file.Write("byte " + outlet + "[16] = {");                        for (int h = 0; h < 16; h++)                      {                          byte chr = 0x0;                            for (int w = 0; w < 8; w++)                          {                              var pix = bmp.GetPixel(w' h);                              if (pix.R == 255 && pix.G == 255 && pix.B == 255)                              {                                  chr += (byte) (1 << w);                              }                              else                              {                              }                          }                            file.Write(String.Format("0x{0:X}'"' chr));                      }                        file.WriteLine("};");                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The following statement contains a magic number: for (; letter <= 'Z'; letter++)              {                  Font font = new Font("Arial Narrow"' 7' FontStyle.Regular);                    Bitmap bmp = new Bitmap(width' height);                    Graphics g = Graphics.FromImage(bmp);                    g.Clear(Color.White);                    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;                  g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;                  g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;                    //font = FindBestFitFont(g' letter.ToString()' font' new Size(width'height)' flags);                    var fsize = g.MeasureString(letter.ToString()' font);                    g.DrawString(letter.ToString()' font' Brushes.Black' 0' 0);                    try                  {                      // bmp = new Bitmap(bmp' new Size(8' 16));                      if (letter >= ':' && letter <= '@')                          continue;                        bmp.Save("!" + letter + ".bmp");                        string outlet = letter.ToString().ToLower();                        switch (letter)                      {                          case '0':                              outlet = "ze";                              break;                          case '1':                              outlet = "on";                              break;                          case '2':                              outlet = "tw";                              break;                          case '3':                              outlet = "th";                              break;                          case '4':                              outlet = "fo";                              break;                          case '5':                              outlet = "fi";                              break;                          case '6':                              outlet = "si";                              break;                          case '7':                              outlet = "se";                              break;                          case '8':                              outlet = "ei";                              break;                          case '9':                              outlet = "ni";                              break;                      }                        file.Write("byte " + outlet + "[16] = {");                        for (int h = 0; h < 16; h++)                      {                          byte chr = 0x0;                            for (int w = 0; w < 8; w++)                          {                              var pix = bmp.GetPixel(w' h);                              if (pix.R == 255 && pix.G == 255 && pix.B == 255)                              {                                  chr += (byte) (1 << w);                              }                              else                              {                              }                          }                            file.Write(String.Format("0x{0:X}'"' chr));                      }                        file.WriteLine("};");                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The following statement contains a magic number: for (; letter <= 'Z'; letter++)              {                  Font font = new Font("Arial Narrow"' 7' FontStyle.Regular);                    Bitmap bmp = new Bitmap(width' height);                    Graphics g = Graphics.FromImage(bmp);                    g.Clear(Color.White);                    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;                  g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;                  g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;                    //font = FindBestFitFont(g' letter.ToString()' font' new Size(width'height)' flags);                    var fsize = g.MeasureString(letter.ToString()' font);                    g.DrawString(letter.ToString()' font' Brushes.Black' 0' 0);                    try                  {                      // bmp = new Bitmap(bmp' new Size(8' 16));                      if (letter >= ':' && letter <= '@')                          continue;                        bmp.Save("!" + letter + ".bmp");                        string outlet = letter.ToString().ToLower();                        switch (letter)                      {                          case '0':                              outlet = "ze";                              break;                          case '1':                              outlet = "on";                              break;                          case '2':                              outlet = "tw";                              break;                          case '3':                              outlet = "th";                              break;                          case '4':                              outlet = "fo";                              break;                          case '5':                              outlet = "fi";                              break;                          case '6':                              outlet = "si";                              break;                          case '7':                              outlet = "se";                              break;                          case '8':                              outlet = "ei";                              break;                          case '9':                              outlet = "ni";                              break;                      }                        file.Write("byte " + outlet + "[16] = {");                        for (int h = 0; h < 16; h++)                      {                          byte chr = 0x0;                            for (int w = 0; w < 8; w++)                          {                              var pix = bmp.GetPixel(w' h);                              if (pix.R == 255 && pix.G == 255 && pix.B == 255)                              {                                  chr += (byte) (1 << w);                              }                              else                              {                              }                          }                            file.Write(String.Format("0x{0:X}'"' chr));                      }                        file.WriteLine("};");                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The following statement contains a magic number: for (; letter <= 'Z'; letter++)              {                  Font font = new Font("Arial Narrow"' 7' FontStyle.Regular);                    Bitmap bmp = new Bitmap(width' height);                    Graphics g = Graphics.FromImage(bmp);                    g.Clear(Color.White);                    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;                  g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;                  g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;                    //font = FindBestFitFont(g' letter.ToString()' font' new Size(width'height)' flags);                    var fsize = g.MeasureString(letter.ToString()' font);                    g.DrawString(letter.ToString()' font' Brushes.Black' 0' 0);                    try                  {                      // bmp = new Bitmap(bmp' new Size(8' 16));                      if (letter >= ':' && letter <= '@')                          continue;                        bmp.Save("!" + letter + ".bmp");                        string outlet = letter.ToString().ToLower();                        switch (letter)                      {                          case '0':                              outlet = "ze";                              break;                          case '1':                              outlet = "on";                              break;                          case '2':                              outlet = "tw";                              break;                          case '3':                              outlet = "th";                              break;                          case '4':                              outlet = "fo";                              break;                          case '5':                              outlet = "fi";                              break;                          case '6':                              outlet = "si";                              break;                          case '7':                              outlet = "se";                              break;                          case '8':                              outlet = "ei";                              break;                          case '9':                              outlet = "ni";                              break;                      }                        file.Write("byte " + outlet + "[16] = {");                        for (int h = 0; h < 16; h++)                      {                          byte chr = 0x0;                            for (int w = 0; w < 8; w++)                          {                              var pix = bmp.GetPixel(w' h);                              if (pix.R == 255 && pix.G == 255 && pix.B == 255)                              {                                  chr += (byte) (1 << w);                              }                              else                              {                              }                          }                            file.Write(String.Format("0x{0:X}'"' chr));                      }                        file.WriteLine("};");                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The following statement contains a magic number: for (; letter <= 'Z'; letter++)              {                  Font font = new Font("Arial Narrow"' 7' FontStyle.Regular);                    Bitmap bmp = new Bitmap(width' height);                    Graphics g = Graphics.FromImage(bmp);                    g.Clear(Color.White);                    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;                  g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;                  g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;                    //font = FindBestFitFont(g' letter.ToString()' font' new Size(width'height)' flags);                    var fsize = g.MeasureString(letter.ToString()' font);                    g.DrawString(letter.ToString()' font' Brushes.Black' 0' 0);                    try                  {                      // bmp = new Bitmap(bmp' new Size(8' 16));                      if (letter >= ':' && letter <= '@')                          continue;                        bmp.Save("!" + letter + ".bmp");                        string outlet = letter.ToString().ToLower();                        switch (letter)                      {                          case '0':                              outlet = "ze";                              break;                          case '1':                              outlet = "on";                              break;                          case '2':                              outlet = "tw";                              break;                          case '3':                              outlet = "th";                              break;                          case '4':                              outlet = "fo";                              break;                          case '5':                              outlet = "fi";                              break;                          case '6':                              outlet = "si";                              break;                          case '7':                              outlet = "se";                              break;                          case '8':                              outlet = "ei";                              break;                          case '9':                              outlet = "ni";                              break;                      }                        file.Write("byte " + outlet + "[16] = {");                        for (int h = 0; h < 16; h++)                      {                          byte chr = 0x0;                            for (int w = 0; w < 8; w++)                          {                              var pix = bmp.GetPixel(w' h);                              if (pix.R == 255 && pix.G == 255 && pix.B == 255)                              {                                  chr += (byte) (1 << w);                              }                              else                              {                              }                          }                            file.Write(String.Format("0x{0:X}'"' chr));                      }                        file.WriteLine("};");                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The following statement contains a magic number: for (; letter <= 'Z'; letter++)              {                  Font font = new Font("Arial Narrow"' 7' FontStyle.Regular);                    Bitmap bmp = new Bitmap(width' height);                    Graphics g = Graphics.FromImage(bmp);                    g.Clear(Color.White);                    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;                  g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;                  g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;                    //font = FindBestFitFont(g' letter.ToString()' font' new Size(width'height)' flags);                    var fsize = g.MeasureString(letter.ToString()' font);                    g.DrawString(letter.ToString()' font' Brushes.Black' 0' 0);                    try                  {                      // bmp = new Bitmap(bmp' new Size(8' 16));                      if (letter >= ':' && letter <= '@')                          continue;                        bmp.Save("!" + letter + ".bmp");                        string outlet = letter.ToString().ToLower();                        switch (letter)                      {                          case '0':                              outlet = "ze";                              break;                          case '1':                              outlet = "on";                              break;                          case '2':                              outlet = "tw";                              break;                          case '3':                              outlet = "th";                              break;                          case '4':                              outlet = "fo";                              break;                          case '5':                              outlet = "fi";                              break;                          case '6':                              outlet = "si";                              break;                          case '7':                              outlet = "se";                              break;                          case '8':                              outlet = "ei";                              break;                          case '9':                              outlet = "ni";                              break;                      }                        file.Write("byte " + outlet + "[16] = {");                        for (int h = 0; h < 16; h++)                      {                          byte chr = 0x0;                            for (int w = 0; w < 8; w++)                          {                              var pix = bmp.GetPixel(w' h);                              if (pix.R == 255 && pix.G == 255 && pix.B == 255)                              {                                  chr += (byte) (1 << w);                              }                              else                              {                              }                          }                            file.Write(String.Format("0x{0:X}'"' chr));                      }                        file.WriteLine("};");                  }                  catch                  {                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,getAltitude,The following statement contains a magic number: foreach (var geotiffdata in index)              {                  if (geotiffdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(geotiffdata.FileName) && geotiffdata.cacheable)                      {                          float['] altdata = new float[geotiffdata.height' geotiffdata.width];                            using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))                          {                              byte[] scanline = new byte[tiff.ScanlineSize()];                                for (int row = 0; row < geotiffdata.height; row++)                              {                                  tiff.ReadScanline(scanline' row);                                    for (int col = 0; col < geotiffdata.width; col++)                                  {                                      if (geotiffdata.bits == 16)                                      {                                          altdata[row' col] = (short) ((scanline[col*2 + 1] << 8) + scanline[col*2]);                                      }                                      else if (geotiffdata.bits == 32)                                      {                                          altdata[row' col] = (float) BitConverter.ToSingle(scanline' col*4);                                      }                                  }                              }                          }                            cache[geotiffdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lat' geotiffdata.Area.Top' geotiffdata.Area.Bottom' 0' geotiffdata.height-1);                      var yf = map(lng' geotiffdata.Area.Left' geotiffdata.Area.Right' 0' geotiffdata.width-1);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        // y_int = (geotiffdata.height - 2) - y_int;                        double alt00 = GetAlt(geotiffdata' x_int' y_int);                      double alt10 = GetAlt(geotiffdata' x_int + 1' y_int);                      double alt01 = GetAlt(geotiffdata' x_int' y_int + 1);                      double alt11 = GetAlt(geotiffdata' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "GeoTiff";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,getAltitude,The following statement contains a magic number: foreach (var geotiffdata in index)              {                  if (geotiffdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(geotiffdata.FileName) && geotiffdata.cacheable)                      {                          float['] altdata = new float[geotiffdata.height' geotiffdata.width];                            using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))                          {                              byte[] scanline = new byte[tiff.ScanlineSize()];                                for (int row = 0; row < geotiffdata.height; row++)                              {                                  tiff.ReadScanline(scanline' row);                                    for (int col = 0; col < geotiffdata.width; col++)                                  {                                      if (geotiffdata.bits == 16)                                      {                                          altdata[row' col] = (short) ((scanline[col*2 + 1] << 8) + scanline[col*2]);                                      }                                      else if (geotiffdata.bits == 32)                                      {                                          altdata[row' col] = (float) BitConverter.ToSingle(scanline' col*4);                                      }                                  }                              }                          }                            cache[geotiffdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lat' geotiffdata.Area.Top' geotiffdata.Area.Bottom' 0' geotiffdata.height-1);                      var yf = map(lng' geotiffdata.Area.Left' geotiffdata.Area.Right' 0' geotiffdata.width-1);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        // y_int = (geotiffdata.height - 2) - y_int;                        double alt00 = GetAlt(geotiffdata' x_int' y_int);                      double alt10 = GetAlt(geotiffdata' x_int + 1' y_int);                      double alt01 = GetAlt(geotiffdata' x_int' y_int + 1);                      double alt11 = GetAlt(geotiffdata' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "GeoTiff";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,getAltitude,The following statement contains a magic number: foreach (var geotiffdata in index)              {                  if (geotiffdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(geotiffdata.FileName) && geotiffdata.cacheable)                      {                          float['] altdata = new float[geotiffdata.height' geotiffdata.width];                            using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))                          {                              byte[] scanline = new byte[tiff.ScanlineSize()];                                for (int row = 0; row < geotiffdata.height; row++)                              {                                  tiff.ReadScanline(scanline' row);                                    for (int col = 0; col < geotiffdata.width; col++)                                  {                                      if (geotiffdata.bits == 16)                                      {                                          altdata[row' col] = (short) ((scanline[col*2 + 1] << 8) + scanline[col*2]);                                      }                                      else if (geotiffdata.bits == 32)                                      {                                          altdata[row' col] = (float) BitConverter.ToSingle(scanline' col*4);                                      }                                  }                              }                          }                            cache[geotiffdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lat' geotiffdata.Area.Top' geotiffdata.Area.Bottom' 0' geotiffdata.height-1);                      var yf = map(lng' geotiffdata.Area.Left' geotiffdata.Area.Right' 0' geotiffdata.width-1);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        // y_int = (geotiffdata.height - 2) - y_int;                        double alt00 = GetAlt(geotiffdata' x_int' y_int);                      double alt10 = GetAlt(geotiffdata' x_int + 1' y_int);                      double alt01 = GetAlt(geotiffdata' x_int' y_int + 1);                      double alt11 = GetAlt(geotiffdata' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "GeoTiff";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,getAltitude,The following statement contains a magic number: foreach (var geotiffdata in index)              {                  if (geotiffdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(geotiffdata.FileName) && geotiffdata.cacheable)                      {                          float['] altdata = new float[geotiffdata.height' geotiffdata.width];                            using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))                          {                              byte[] scanline = new byte[tiff.ScanlineSize()];                                for (int row = 0; row < geotiffdata.height; row++)                              {                                  tiff.ReadScanline(scanline' row);                                    for (int col = 0; col < geotiffdata.width; col++)                                  {                                      if (geotiffdata.bits == 16)                                      {                                          altdata[row' col] = (short) ((scanline[col*2 + 1] << 8) + scanline[col*2]);                                      }                                      else if (geotiffdata.bits == 32)                                      {                                          altdata[row' col] = (float) BitConverter.ToSingle(scanline' col*4);                                      }                                  }                              }                          }                            cache[geotiffdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lat' geotiffdata.Area.Top' geotiffdata.Area.Bottom' 0' geotiffdata.height-1);                      var yf = map(lng' geotiffdata.Area.Left' geotiffdata.Area.Right' 0' geotiffdata.width-1);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        // y_int = (geotiffdata.height - 2) - y_int;                        double alt00 = GetAlt(geotiffdata' x_int' y_int);                      double alt10 = GetAlt(geotiffdata' x_int + 1' y_int);                      double alt01 = GetAlt(geotiffdata' x_int' y_int + 1);                      double alt11 = GetAlt(geotiffdata' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "GeoTiff";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,getAltitude,The following statement contains a magic number: foreach (var geotiffdata in index)              {                  if (geotiffdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(geotiffdata.FileName) && geotiffdata.cacheable)                      {                          float['] altdata = new float[geotiffdata.height' geotiffdata.width];                            using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))                          {                              byte[] scanline = new byte[tiff.ScanlineSize()];                                for (int row = 0; row < geotiffdata.height; row++)                              {                                  tiff.ReadScanline(scanline' row);                                    for (int col = 0; col < geotiffdata.width; col++)                                  {                                      if (geotiffdata.bits == 16)                                      {                                          altdata[row' col] = (short) ((scanline[col*2 + 1] << 8) + scanline[col*2]);                                      }                                      else if (geotiffdata.bits == 32)                                      {                                          altdata[row' col] = (float) BitConverter.ToSingle(scanline' col*4);                                      }                                  }                              }                          }                            cache[geotiffdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lat' geotiffdata.Area.Top' geotiffdata.Area.Bottom' 0' geotiffdata.height-1);                      var yf = map(lng' geotiffdata.Area.Left' geotiffdata.Area.Right' 0' geotiffdata.width-1);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        // y_int = (geotiffdata.height - 2) - y_int;                        double alt00 = GetAlt(geotiffdata' x_int' y_int);                      double alt10 = GetAlt(geotiffdata' x_int + 1' y_int);                      double alt01 = GetAlt(geotiffdata' x_int' y_int + 1);                      double alt11 = GetAlt(geotiffdata' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "GeoTiff";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,getAltitude,The following statement contains a magic number: foreach (var geotiffdata in index)              {                  if (geotiffdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(geotiffdata.FileName) && geotiffdata.cacheable)                      {                          float['] altdata = new float[geotiffdata.height' geotiffdata.width];                            using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))                          {                              byte[] scanline = new byte[tiff.ScanlineSize()];                                for (int row = 0; row < geotiffdata.height; row++)                              {                                  tiff.ReadScanline(scanline' row);                                    for (int col = 0; col < geotiffdata.width; col++)                                  {                                      if (geotiffdata.bits == 16)                                      {                                          altdata[row' col] = (short) ((scanline[col*2 + 1] << 8) + scanline[col*2]);                                      }                                      else if (geotiffdata.bits == 32)                                      {                                          altdata[row' col] = (float) BitConverter.ToSingle(scanline' col*4);                                      }                                  }                              }                          }                            cache[geotiffdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lat' geotiffdata.Area.Top' geotiffdata.Area.Bottom' 0' geotiffdata.height-1);                      var yf = map(lng' geotiffdata.Area.Left' geotiffdata.Area.Right' 0' geotiffdata.width-1);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        // y_int = (geotiffdata.height - 2) - y_int;                        double alt00 = GetAlt(geotiffdata' x_int' y_int);                      double alt10 = GetAlt(geotiffdata' x_int + 1' y_int);                      double alt01 = GetAlt(geotiffdata' x_int' y_int + 1);                      double alt11 = GetAlt(geotiffdata' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "GeoTiff";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,getAltitude,The following statement contains a magic number: foreach (var geotiffdata in index)              {                  if (geotiffdata.Area.Contains(lat' lng))                  {                      // add to cache                      if (!cache.ContainsKey(geotiffdata.FileName) && geotiffdata.cacheable)                      {                          float['] altdata = new float[geotiffdata.height' geotiffdata.width];                            using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))                          {                              byte[] scanline = new byte[tiff.ScanlineSize()];                                for (int row = 0; row < geotiffdata.height; row++)                              {                                  tiff.ReadScanline(scanline' row);                                    for (int col = 0; col < geotiffdata.width; col++)                                  {                                      if (geotiffdata.bits == 16)                                      {                                          altdata[row' col] = (short) ((scanline[col*2 + 1] << 8) + scanline[col*2]);                                      }                                      else if (geotiffdata.bits == 32)                                      {                                          altdata[row' col] = (float) BitConverter.ToSingle(scanline' col*4);                                      }                                  }                              }                          }                            cache[geotiffdata.FileName] = altdata;                      }                        // get answer                      var xf = map(lat' geotiffdata.Area.Top' geotiffdata.Area.Bottom' 0' geotiffdata.height-1);                      var yf = map(lng' geotiffdata.Area.Left' geotiffdata.Area.Right' 0' geotiffdata.width-1);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        // y_int = (geotiffdata.height - 2) - y_int;                        double alt00 = GetAlt(geotiffdata' x_int' y_int);                      double alt10 = GetAlt(geotiffdata' x_int + 1' y_int);                      double alt01 = GetAlt(geotiffdata' x_int' y_int + 1);                      double alt11 = GetAlt(geotiffdata' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' y_frac);                        if (v > -1000)                          answer.currenttype = srtm.tiletype.valid;                      answer.alt = v;                      answer.altsource = "GeoTiff";                      return answer;                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,GetAltNoCache,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))              {                  byte[] scanline = new byte[tiff.ScanlineSize()];                    for (int row = 0; row < geotiffdata.height; row++)                  {                      tiff.ReadScanline(scanline' x);                        if (geotiffdata.bits == 16)                      {                          return (short)((scanline[y * 2 + 1] << 8) + scanline[y * 2]);                      }                      else if (geotiffdata.bits == 32)                      {                          return BitConverter.ToSingle(scanline' y * 4);                      }                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,GetAltNoCache,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))              {                  byte[] scanline = new byte[tiff.ScanlineSize()];                    for (int row = 0; row < geotiffdata.height; row++)                  {                      tiff.ReadScanline(scanline' x);                        if (geotiffdata.bits == 16)                      {                          return (short)((scanline[y * 2 + 1] << 8) + scanline[y * 2]);                      }                      else if (geotiffdata.bits == 32)                      {                          return BitConverter.ToSingle(scanline' y * 4);                      }                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,GetAltNoCache,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))              {                  byte[] scanline = new byte[tiff.ScanlineSize()];                    for (int row = 0; row < geotiffdata.height; row++)                  {                      tiff.ReadScanline(scanline' x);                        if (geotiffdata.bits == 16)                      {                          return (short)((scanline[y * 2 + 1] << 8) + scanline[y * 2]);                      }                      else if (geotiffdata.bits == 32)                      {                          return BitConverter.ToSingle(scanline' y * 4);                      }                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,GetAltNoCache,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))              {                  byte[] scanline = new byte[tiff.ScanlineSize()];                    for (int row = 0; row < geotiffdata.height; row++)                  {                      tiff.ReadScanline(scanline' x);                        if (geotiffdata.bits == 16)                      {                          return (short)((scanline[y * 2 + 1] << 8) + scanline[y * 2]);                      }                      else if (geotiffdata.bits == 32)                      {                          return BitConverter.ToSingle(scanline' y * 4);                      }                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,GetAltNoCache,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))              {                  byte[] scanline = new byte[tiff.ScanlineSize()];                    for (int row = 0; row < geotiffdata.height; row++)                  {                      tiff.ReadScanline(scanline' x);                        if (geotiffdata.bits == 16)                      {                          return (short)((scanline[y * 2 + 1] << 8) + scanline[y * 2]);                      }                      else if (geotiffdata.bits == 32)                      {                          return BitConverter.ToSingle(scanline' y * 4);                      }                  }              }
Magic Number,MissionPlanner.Utilities,GeoTiff,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,GetAltNoCache,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(geotiffdata.FileName' "r"))              {                  byte[] scanline = new byte[tiff.ScanlineSize()];                    for (int row = 0; row < geotiffdata.height; row++)                  {                      tiff.ReadScanline(scanline' x);                        if (geotiffdata.bits == 16)                      {                          return (short)((scanline[y * 2 + 1] << 8) + scanline[y * 2]);                      }                      else if (geotiffdata.bits == 32)                      {                          return BitConverter.ToSingle(scanline' y * 4);                      }                  }              }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,geotiffdata,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GeoTiff.cs,LoadFile,The following statement contains a magic number: using (Tiff tiff = Tiff.Open(filename' "r"))                  {                      width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();                      height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();                      bits = tiff.GetField(TiffTag.BITSPERSAMPLE)[0].ToInt();                        var modelscale = tiff.GetField(TiffTag.GEOTIFF_MODELPIXELSCALETAG);                      var tiepoint = tiff.GetField(TiffTag.GEOTIFF_MODELTIEPOINTTAG);                        i = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0);                      j = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 8);                      k = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 16);                      x = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 24);                      y = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 32);                      z = BitConverter.ToDouble(tiepoint[1].ToByteArray()' 0 + 40);                        log.InfoFormat("Tie Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        xscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0);                      yscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 8);                      zscale = BitConverter.ToDouble(modelscale[1].ToByteArray()' 0 + 16);                        log.InfoFormat("Scale ({0}'{1}'{2})"' xscale' yscale' zscale);                        Area = new RectLatLng(y' x' width*xscale' height*yscale);                        log.InfoFormat("Coverage {0}"' Area.ToString());                        log.InfoFormat("CacheAble {0}"' cacheable.ToString());                        // starts from top left so x + y -                      x += xscale / 2.0;                      y -= yscale / 2.0;                        log.InfoFormat("Start Point ({0}'{1}'{2}) --> ({3}'{4}'{5})"' i' j' k' x' y' z);                        GeoTiff.index.Add(this);                        /*                    short numberOfDirectories = tiff.NumberOfDirectories();                  for (short d = 0; d < numberOfDirectories; ++d)                  {                      tiff.SetDirectory((short)d);                        for (ushort t = ushort.MinValue; t < ushort.MaxValue; ++t)                      {                          TiffTag tag = (TiffTag)t;                          FieldValue[] value = tiff.GetField(tag);                          if (value != null)                          {                              for (int j2 = 0; j2 < value.Length; j2++)                              {                                  Console.WriteLine("{0} : {1} : {2}"' tag.ToString()' value[j2].Value.GetType().ToString()' value[j2].ToString());                              }                          }                      }                  }                       */                  }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,test,The following statement contains a magic number: NativeMethods.gst_app_sink_set_max_buffers(appsink' 5);
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,test,The following statement contains a magic number: while (true)              {                  var sample = NativeMethods.gst_app_sink_try_pull_sample(appsink' GST_SECOND);                  if (sample != IntPtr.Zero)                  {                      //var caps = gst_app_sink_get_caps(appsink);                      var caps = NativeMethods.gst_sample_get_caps(sample);                      var caps_s = NativeMethods.gst_caps_get_structure(caps' 0);                      NativeMethods.gst_structure_get_int(caps_s' "width"' out Width);                      NativeMethods.gst_structure_get_int(caps_s' "height"' out Height);                        //var capsstring = gst_caps_to_string(caps_s);                      //var structure = gst_sample_get_info(sample);                      //var structstring = gst_structure_to_string(structure);                      var buffer = NativeMethods.gst_sample_get_buffer(sample);                      if (buffer != IntPtr.Zero)                      {                          var info = new GstMapInfo();                          if (NativeMethods.gst_buffer_map(buffer' out info' GstMapFlags.GST_MAP_READ))                          {                              //byte[] data = new byte[info.size];                              //Marshal.Copy(info.data' data' 0' (int) info.size);                                var image = new Bitmap(Width' Height' 4 * Width' System.Drawing.Imaging.PixelFormat.Format32bppArgb' info.data);                                _onNewImage?.Invoke(null' image);                                //image.Save("image.bmp");                                //gst_mini_object_unref(info.memory);                                NativeMethods.gst_buffer_unmap(buffer' out info);                          }                         // gst_buffer_unref(buffer);                          //gst_mini_object_unref(buffer);                      }                      //gst_mini_object_unref(sample);                      NativeMethods.gst_sample_unref(sample);                  }                    //image.Save("image.bmp");                        //image.Save("image2.bmp");                    //File.WriteAllBytes("image.raw"' data);                }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,GStreamer,The following statement contains a magic number: UdpPort = 5600;
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,GStreamer,The following statement contains a magic number: OutputPort = 1235;
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,NamedPipeConnect,The following statement contains a magic number: using (var stream = new BufferedStream(pipeServer' 1024 * 1024 * 9 * 10))              {                  using (MemoryStream ms = new MemoryStream())                  {                      while (pipeServer.IsConnected)                      {                          //readJPGData(stream' ms);                            readRTPData(stream' ms);                            System.Threading.Thread.Sleep(0);                      }                        //cleanup on disconnect                      _onNewImage?.Invoke(null' null);                  }              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,NamedPipeConnect,The following statement contains a magic number: using (var stream = new BufferedStream(pipeServer' 1024 * 1024 * 9 * 10))              {                  using (MemoryStream ms = new MemoryStream())                  {                      while (pipeServer.IsConnected)                      {                          //readJPGData(stream' ms);                            readRTPData(stream' ms);                            System.Threading.Thread.Sleep(0);                      }                        //cleanup on disconnect                      _onNewImage?.Invoke(null' null);                  }              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,NamedPipeConnect,The following statement contains a magic number: using (var stream = new BufferedStream(pipeServer' 1024 * 1024 * 9 * 10))              {                  using (MemoryStream ms = new MemoryStream())                  {                      while (pipeServer.IsConnected)                      {                          //readJPGData(stream' ms);                            readRTPData(stream' ms);                            System.Threading.Thread.Sleep(0);                      }                        //cleanup on disconnect                      _onNewImage?.Invoke(null' null);                  }              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,NamedPipeConnect,The following statement contains a magic number: using (var stream = new BufferedStream(pipeServer' 1024 * 1024 * 9 * 10))              {                  using (MemoryStream ms = new MemoryStream())                  {                      while (pipeServer.IsConnected)                      {                          //readJPGData(stream' ms);                            readRTPData(stream' ms);                            System.Threading.Thread.Sleep(0);                      }                        //cleanup on disconnect                      _onNewImage?.Invoke(null' null);                  }              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,_Start,The following statement contains a magic number: try              {                  var deadline = DateTime.Now.AddSeconds(20);                    log.Info("_Start");                    while (DateTime.Now < deadline)                  {                      try                      {                          TcpClient client = new TcpClient("127.0.0.1"' OutputPort);                          Console.WriteLine("Port open");                          client.Close();                          break;                      }                      catch (Exception)                      {                          Console.WriteLine("Port closed");                      }                  }                    using (TcpClient client = new TcpClient("127.0.0.1"' OutputPort))                  {                      client.ReceiveBufferSize = 1024 * 1024 * 5; // 5mb                        using (MemoryStream ms = new MemoryStream())                      {                          using (var stream = new BufferedStream(client.GetStream()' 1024 * 1024 * 5))                          {                              DateTime lastdata = DateTime.Now;                              while (client.Client.Connected)                              {                                  int bytestoread = client.Available;                                    while (bytestoread > 0)                                  {                                      //bytestoread -= readRTPData(stream' ms);                                      bytestoread -= readJPGData(stream' ms);                                      lastdata = DateTime.Now;                                  }                                  // up to 100 fps or 50 with 10ms process time                                  System.Threading.Thread.Sleep(10);                                    if (lastdata.AddSeconds(5) < DateTime.Now)                                  {                                      client.Client.Send(new byte[0]);                                  }                              }                              //cleanup on disconnect                              _onNewImage?.Invoke(null' null);                          }                      }                  }              }              catch (Exception ex)              {                  _onNewImage?.Invoke(null' null);                  log.Error(ex);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,GStreamer,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,readRTPData,The following statement contains a magic number: if (ch1 == rtpbyte1)              {                  var ch2 = stream.ReadByte();                  readamount++;                  // handle 2 rtpbyte1's in a row                  if (ch2 == rtpbyte1)                  {                      ch1 = ch2;                      ch2 = stream.ReadByte();                      readamount++;                  }                    if (ch2 == rtpbyte2 || ch2 == rtpbyte2_2)                  {                      byte[] headerBytes = new byte[4 * 5];                      headerBytes[0] = (byte) ch1;                      headerBytes[1] = (byte) ch2;                        readamount += stream.Read(headerBytes' 2' headerBytes.Length - 2);                        GStreamer.rtpheader header = new rtpheader(headerBytes);                        // this check is the same as rtpbyte1 and rtpbyte2/rtpbyte2_2                      if (header.version == 2 && header.payloadtype == 96 && header.extsequencenumber == 0)                      {                          // read additial C                          if (header.C > 0)                          {                              var oldsize = headerBytes.Length;                              Array.Resize(ref headerBytes' headerBytes.Length + 6);                              readamount += stream.Read(headerBytes' oldsize' 6);                                header = new rtpheader(headerBytes);                          }                            var pixels = header.length / 4;                          if (header.C > 0 && header.lineno == 0)                          {                              width = header.offset + pixels;                          }                            //p0 + (lin * ystride) + (offs * pgroup)' length                          var fileoffset = (header.lineno) * width * 4 + header.offset * 4;                          if (fileoffset != ms.Position)                          {                          }                          ms.Seek(fileoffset' SeekOrigin.Begin);                            int neededbytes = header.length + header.length2;                            if (buffer == null || buffer.Length < (neededbytes))                              buffer = new byte[neededbytes];                            var read = stream.Read(buffer' 0' neededbytes);                          ms.Write(buffer' 0' read);                          readamount += read;                            if (header.marker > 0 && width != 0)                          {                              ms.Seek(0' SeekOrigin.Begin);                              try                              {                                  if (img == null || img.Width < width || img.Height < header.lineno + 1)                                      img = new Bitmap(width' header.lineno + 1' PixelFormat.Format32bppArgb);                                    lock (img)                                  {                                      BitmapData bmpData = img.LockBits(new Rectangle(0' 0' img.Width' img.Height)'                                          ImageLockMode.WriteOnly' img.PixelFormat);                                        IntPtr ptr = bmpData.Scan0;                                        Marshal.Copy(ms.ToArray()' 0' ptr' (int) img.Width * img.Height * 4);                                        img.UnlockBits(bmpData);                                  }                                    //img.Save("test.bmp");                                    _onNewImage?.Invoke(null' img);                                    tempno++;                                  persecond++;                                    if (lastsecond.Second != DateTime.Now.Second)                                  {                                      Console.WriteLine("image {0}x{1} size {2} miss {3} ps {4}"'                                          img.Width'                                          img.Height' 0' miss' persecond);                                      persecond = 0;                                      lastsecond = DateTime.Now;                                      miss = 0;                                  }                                    ms.SetLength(0);                              }                              catch                              {                                  ms.SetLength(0);                              }                          }                      }                      else                      {                          miss++;                          Console.WriteLine("packet failed header check ");                      }                  }                  else                  {                      miss++;                      Console.WriteLine("out of sync2 {0:X}"' ch1);                  }              }              else              {                  miss++;                  Console.WriteLine("out of sync1 {0:X}"' ch1);              }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: version = (byte) ((buffer[0] >> 6) & 3);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: version = (byte) ((buffer[0] >> 6) & 3);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: padding = (byte) ((buffer[0] >> 5) & 1);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: extension = (byte) ((buffer[0] >> 4) & 1);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: csrccount = (byte) ((buffer[0] >> 0) & 15);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: marker = (byte) ((buffer[1] >> 7) & 1);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: payloadtype = (byte) ((buffer[1] >> 0) & 127);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: sequencenumber = (ushort) (buffer[2] << 8 + buffer[3]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: sequencenumber = (ushort) (buffer[2] << 8 + buffer[3]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: sequencenumber = (ushort) (buffer[2] << 8 + buffer[3]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: timestamp = (uint) (buffer[4] << 24 + buffer[5] << 26 + buffer[6] << 8 + buffer[7]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: timestamp = (uint) (buffer[4] << 24 + buffer[5] << 26 + buffer[6] << 8 + buffer[7]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: timestamp = (uint) (buffer[4] << 24 + buffer[5] << 26 + buffer[6] << 8 + buffer[7]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: timestamp = (uint) (buffer[4] << 24 + buffer[5] << 26 + buffer[6] << 8 + buffer[7]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: timestamp = (uint) (buffer[4] << 24 + buffer[5] << 26 + buffer[6] << 8 + buffer[7]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: timestamp = (uint) (buffer[4] << 24 + buffer[5] << 26 + buffer[6] << 8 + buffer[7]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: timestamp = (uint) (buffer[4] << 24 + buffer[5] << 26 + buffer[6] << 8 + buffer[7]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: ssrc = (uint) (buffer[8] << 24 + buffer[9] << 26 + buffer[10] << 8 + buffer[11]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: ssrc = (uint) (buffer[8] << 24 + buffer[9] << 26 + buffer[10] << 8 + buffer[11]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: ssrc = (uint) (buffer[8] << 24 + buffer[9] << 26 + buffer[10] << 8 + buffer[11]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: ssrc = (uint) (buffer[8] << 24 + buffer[9] << 26 + buffer[10] << 8 + buffer[11]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: ssrc = (uint) (buffer[8] << 24 + buffer[9] << 26 + buffer[10] << 8 + buffer[11]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: ssrc = (uint) (buffer[8] << 24 + buffer[9] << 26 + buffer[10] << 8 + buffer[11]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: ssrc = (uint) (buffer[8] << 24 + buffer[9] << 26 + buffer[10] << 8 + buffer[11]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: extsequencenumber = (ushort) (buffer[12] << 8 + buffer[13]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: extsequencenumber = (ushort) (buffer[12] << 8 + buffer[13]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: extsequencenumber = (ushort) (buffer[12] << 8 + buffer[13]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: length = (ushort) ((buffer[14] << 8) + buffer[15]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: length = (ushort) ((buffer[14] << 8) + buffer[15]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: length = (ushort) ((buffer[14] << 8) + buffer[15]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: F = (byte) (buffer[16] >> 7);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: F = (byte) (buffer[16] >> 7);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: lineno = (ushort) (((buffer[16] & 127) << 8) + buffer[17]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: lineno = (ushort) (((buffer[16] & 127) << 8) + buffer[17]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: lineno = (ushort) (((buffer[16] & 127) << 8) + buffer[17]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: lineno = (ushort) (((buffer[16] & 127) << 8) + buffer[17]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: C = (byte) (buffer[18] >> 7);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: C = (byte) (buffer[18] >> 7);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: offset = (ushort) (((buffer[18] & 127) << 8) + buffer[19]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: offset = (ushort) (((buffer[18] & 127) << 8) + buffer[19]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: offset = (ushort) (((buffer[18] & 127) << 8) + buffer[19]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: offset = (ushort) (((buffer[18] & 127) << 8) + buffer[19]);
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: if (buffer.Length >= 26)                  {                      length2 = (ushort) ((buffer[20] << 8) + buffer[21]);                      F2 = (byte) (buffer[22] >> 7);                      // height line number                      lineno2 = (ushort) (((buffer[22] & 127) << 8) + buffer[23]);                      // there is more than one height here                      C2 = (byte) (buffer[24] >> 7);                      offset2 = (ushort) (((buffer[24] & 127) << 8) + buffer[25]);                        return;                  }
Magic Number,MissionPlanner.Utilities,rtpheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\GStreamer.cs,rtpheader,The following statement contains a magic number: var actoffset = offset * 4;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: if (R == 0 && P == 0)              {                  // calc fov in m on the ground at 0 alt                  var fovh = Math.Tan(hfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovv = Math.Tan(vfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovd = Math.Sqrt(fovh * fovh + fovv * fovv);                    // where we put our footprint                  var ans2 = new List<PointLatLngAlt>();                    // calc bearing from center to corner                  var bearing1 = Math.Atan2(fovh' fovv) * MathHelper.rad2deg;                    // calc first corner point                  var newpos1 = plla.newpos(bearing1 + Y' Math.Sqrt(fovh * fovh + fovv * fovv));                  // set alt to 0' as we used the hypot for distance and fov is based on 0 alt                  newpos1.Alt = 0;                  // calc intersection from center to new point and return ground hit point                  var cen1 = calcIntersection(plla' newpos1);                  // add to our footprint poly                  ans2.Add(cen1);                  addtomap(cen1' "cen1");                    //repeat                    newpos1 = plla.newpos(Y - bearing1' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen2");                    newpos1 = plla.newpos(bearing1 + Y - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen3");                    newpos1 = plla.newpos(Y - bearing1 - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen4");                      addtomap(plla' "plane");                    return ans2;              }
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: if (R == 0 && P == 0)              {                  // calc fov in m on the ground at 0 alt                  var fovh = Math.Tan(hfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovv = Math.Tan(vfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovd = Math.Sqrt(fovh * fovh + fovv * fovv);                    // where we put our footprint                  var ans2 = new List<PointLatLngAlt>();                    // calc bearing from center to corner                  var bearing1 = Math.Atan2(fovh' fovv) * MathHelper.rad2deg;                    // calc first corner point                  var newpos1 = plla.newpos(bearing1 + Y' Math.Sqrt(fovh * fovh + fovv * fovv));                  // set alt to 0' as we used the hypot for distance and fov is based on 0 alt                  newpos1.Alt = 0;                  // calc intersection from center to new point and return ground hit point                  var cen1 = calcIntersection(plla' newpos1);                  // add to our footprint poly                  ans2.Add(cen1);                  addtomap(cen1' "cen1");                    //repeat                    newpos1 = plla.newpos(Y - bearing1' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen2");                    newpos1 = plla.newpos(bearing1 + Y - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen3");                    newpos1 = plla.newpos(Y - bearing1 - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen4");                      addtomap(plla' "plane");                    return ans2;              }
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: if (R == 0 && P == 0)              {                  // calc fov in m on the ground at 0 alt                  var fovh = Math.Tan(hfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovv = Math.Tan(vfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovd = Math.Sqrt(fovh * fovh + fovv * fovv);                    // where we put our footprint                  var ans2 = new List<PointLatLngAlt>();                    // calc bearing from center to corner                  var bearing1 = Math.Atan2(fovh' fovv) * MathHelper.rad2deg;                    // calc first corner point                  var newpos1 = plla.newpos(bearing1 + Y' Math.Sqrt(fovh * fovh + fovv * fovv));                  // set alt to 0' as we used the hypot for distance and fov is based on 0 alt                  newpos1.Alt = 0;                  // calc intersection from center to new point and return ground hit point                  var cen1 = calcIntersection(plla' newpos1);                  // add to our footprint poly                  ans2.Add(cen1);                  addtomap(cen1' "cen1");                    //repeat                    newpos1 = plla.newpos(Y - bearing1' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen2");                    newpos1 = plla.newpos(bearing1 + Y - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen3");                    newpos1 = plla.newpos(Y - bearing1 - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen4");                      addtomap(plla' "plane");                    return ans2;              }
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: if (R == 0 && P == 0)              {                  // calc fov in m on the ground at 0 alt                  var fovh = Math.Tan(hfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovv = Math.Tan(vfov / 2.0 * MathHelper.deg2rad) * plla.Alt;                  var fovd = Math.Sqrt(fovh * fovh + fovv * fovv);                    // where we put our footprint                  var ans2 = new List<PointLatLngAlt>();                    // calc bearing from center to corner                  var bearing1 = Math.Atan2(fovh' fovv) * MathHelper.rad2deg;                    // calc first corner point                  var newpos1 = plla.newpos(bearing1 + Y' Math.Sqrt(fovh * fovh + fovv * fovv));                  // set alt to 0' as we used the hypot for distance and fov is based on 0 alt                  newpos1.Alt = 0;                  // calc intersection from center to new point and return ground hit point                  var cen1 = calcIntersection(plla' newpos1);                  // add to our footprint poly                  ans2.Add(cen1);                  addtomap(cen1' "cen1");                    //repeat                    newpos1 = plla.newpos(Y - bearing1' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen2");                    newpos1 = plla.newpos(bearing1 + Y - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen3");                    newpos1 = plla.newpos(Y - bearing1 - 180' Math.Sqrt(fovh * fovh + fovv * fovv));                  newpos1.Alt = 0;                  cen1 = calcIntersection(plla' newpos1);                  ans2.Add(cen1);                  addtomap(cen1' "cen4");                      addtomap(plla' "plane");                    return ans2;              }
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: double frontangle = (P*0) + vfov/2;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: double backangle = (P*0) - vfov/2;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: double leftangle = (R*0) + hfov/2;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: double rightangle = (R*0) - hfov/2;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calc,The following statement contains a magic number: Vector3 center1 = new Vector3(0' 0' 10000);
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,newpos,The following statement contains a magic number: double degN = 90 - bearing;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,newpos,The following statement contains a magic number: if (degN < 0)                  degN += 360;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,newpos,The following statement contains a magic number: double degN = 90 - bearing;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,newpos,The following statement contains a magic number: if (degN < 0)                  degN += 360;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calcIntersection,The following statement contains a magic number: int distout = 10;
Magic Number,MissionPlanner.Utilities,ImageProjection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ImageProjection.cs,calcIntersection,The following statement contains a magic number: while (distout < (dist+100))              {                  // get a projected point to test intersection against - not using slope distance                  PointLatLngAlt newposdist = plla.newpos(Y' distout);                  newposdist.Alt = srtm.getAltitude(newposdist.Lat' newposdist.Lng).alt;                    // get another point 'step' infront                  PointLatLngAlt newposdist2 = plla.newpos(Y' distout + step);                  newposdist2.Alt = srtm.getAltitude(newposdist2.Lat' newposdist2.Lng).alt;                    // x is dist from plane' y is alt                  var newpoint = FindLineIntersection(new PointF(0' (float)plla.Alt)'                      new PointF((float)dist' (float)dest.Alt)'                      new PointF((float)distout' (float)newposdist.Alt)'                      new PointF((float)distout + step' (float)newposdist2.Alt));                    if (newpoint.X != 0)                  {                      newpos = plla.newpos(Y' newpoint.X);                      newpos.Alt = newpoint.Y;                        return newpos;                  }                    distout += step;              }
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Predicition,The following statement contains a magic number: return m_x.Data[0] + (dt * m_x.Data[1]) + (dt * dt * m_x.Data[2]);
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Variance,The following statement contains a magic number: Matrix f = new Matrix(3' 3)              {                  Data = new double[] {                   1' dt' dt * dt'                   0' 1' dt'                  0' 0' 1}              };
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Variance,The following statement contains a magic number: Matrix f = new Matrix(3' 3)              {                  Data = new double[] {                   1' dt' dt * dt'                   0' 1' dt'                  0' 0' 1}              };
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_q.Data[2] = qa * qx;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_q.Data[3] = qx * qv;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_q.Data[4] = qv * qv;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_q.Data[5] = qa * qv;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_q.Data[6] = qx * qa;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_q.Data[7] = qv * qa;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_q.Data[8] = qa * qa;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_p.Data[0] = m_p.Data[4] = m_p.Data[8] = pd;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_p.Data[0] = m_p.Data[4] = m_p.Data[8] = pd;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Reset,The following statement contains a magic number: m_x.Data[2] = 0;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix f = new Matrix(3' 3) { Data = new double[] {                   1' dt' dt * dt'                   0' 1' dt'                  0' 0' 1} };
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix f = new Matrix(3' 3) { Data = new double[] {                   1' dt' dt * dt'                   0' 1' dt'                  0' 0' 1} };
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix h = Matrix.MakeIdentity(3);
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix ht = Matrix.MakeIdentity(3);
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix y = new Matrix(1' 3) { Data = new double[] {                   mx - m_x.Data[0]'                   mv - m_x.Data[1]'                  ma - m_x.Data[2]} };
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix y = new Matrix(1' 3) { Data = new double[] {                   mx - m_x.Data[0]'                   mv - m_x.Data[1]'                  ma - m_x.Data[2]} };
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: s.Data[4] += m_r;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: s.Data[8] += m_r;
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix k = new Matrix(3' 3);
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix k = new Matrix(3' 3);
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: for (int i = 0; i < k.Data.Length; i++)              {                  double gain = k.Data[i];                  gain = gain < 0 ? 0 : gain > 0.25 ? 0.25 : gain;                  k.Data[i] = gain;              }
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: for (int i = 0; i < k.Data.Length; i++)              {                  double gain = k.Data[i];                  gain = gain < 0 ? 0 : gain > 0.25 ? 0.25 : gain;                  k.Data[i] = gain;              }
Magic Number,MissionPlanner.Utilities,Kalman3D,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Kalman3D.cs,Update,The following statement contains a magic number: Matrix id = Matrix.MakeIdentity(3);
Magic Number,MissionPlanner.Utilities,L10NU,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\L10NU.cs,L10NU,The following statement contains a magic number: if (lines != null)              {                  foreach (string line in lines)                  {                      if (line.StartsWith("#"))                      {                          continue;                      }                      string[] kv = Regex.Split(line' "=");                      if (kv.Length == 2)                      {                          strings[kv[0]] = kv[1];                      }                  }              }
Magic Number,MissionPlanner.Utilities,LineOffset,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\LineOffset.cs,GetPolygon,The following statement contains a magic number: if (polyline.Count <= 3)                  return new List<PointLatLngAlt>();
Magic Number,MissionPlanner.Utilities,LineOffset,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\LineOffset.cs,GetPolygon,The following statement contains a magic number: foreach (var point in polyline)              {                  if (point == prevpoint)                      continue;                    double dist = prevpoint.GetDistance(point);                  if (dist < (distm*1.1))                      continue;                    double bearing = prevpoint.GetBearing(point);                    leftoffsetpoints.Add(point.newpos(bearing - 90' distm));                  rightoffsetpoints.Add(point.newpos(bearing + 90' distm));                    prevpoint = point;              }
Magic Number,MissionPlanner.Utilities,LineOffset,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\LineOffset.cs,GetPolygon,The following statement contains a magic number: foreach (var point in polyline)              {                  if (point == prevpoint)                      continue;                    double dist = prevpoint.GetDistance(point);                  if (dist < (distm*1.1))                      continue;                    double bearing = prevpoint.GetBearing(point);                    leftoffsetpoints.Add(point.newpos(bearing - 90' distm));                  rightoffsetpoints.Add(point.newpos(bearing + 90' distm));                    prevpoint = point;              }
Magic Number,MissionPlanner.Utilities,LineOffset,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\LineOffset.cs,GetPolygon,The following statement contains a magic number: foreach (var point in polyline)              {                  if (point == prevpoint)                      continue;                    double dist = prevpoint.GetDistance(point);                  if (dist < (distm*1.1))                      continue;                    double bearing = prevpoint.GetBearing(point);                    leftoffsetpoints.Add(point.newpos(bearing - 90' distm));                  rightoffsetpoints.Add(point.newpos(bearing + 90' distm));                    prevpoint = point;              }
Magic Number,MissionPlanner.Utilities,Locationwp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\locationwp.cs,Convert,The following statement contains a magic number: if (isint)              {                  var temp = new MAVLink.mavlink_mission_item_int_t()                  {                      command = cmd.id'                      param1 = cmd.p1'                      param2 = cmd.p2'                      param3 = cmd.p3'                      param4 = cmd.p4'                      x = (int)(cmd.lat * 1.0e7)'                      y = (int)(cmd.lng * 1.0e7)'                      z = (float) cmd.alt'                      seq = cmd._seq'                      frame = cmd._frame                  };                    return temp;              }              else              {                  var temp = new MAVLink.mavlink_mission_item_t()                  {                      command = cmd.id'                      param1 = cmd.p1'                      param2 = cmd.p2'                      param3 = cmd.p3'                      param4 = cmd.p4'                      x = (float) cmd.lat'                      y = (float) cmd.lng'                      z = (float) cmd.alt'                      seq = cmd._seq'                      frame = cmd._frame                  };                    return temp;              }
Magic Number,MissionPlanner.Utilities,Locationwp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\locationwp.cs,Convert,The following statement contains a magic number: if (isint)              {                  var temp = new MAVLink.mavlink_mission_item_int_t()                  {                      command = cmd.id'                      param1 = cmd.p1'                      param2 = cmd.p2'                      param3 = cmd.p3'                      param4 = cmd.p4'                      x = (int)(cmd.lat * 1.0e7)'                      y = (int)(cmd.lng * 1.0e7)'                      z = (float) cmd.alt'                      seq = cmd._seq'                      frame = cmd._frame                  };                    return temp;              }              else              {                  var temp = new MAVLink.mavlink_mission_item_t()                  {                      command = cmd.id'                      param1 = cmd.p1'                      param2 = cmd.p2'                      param3 = cmd.p3'                      param4 = cmd.p4'                      x = (float) cmd.lat'                      y = (float) cmd.lng'                      z = (float) cmd.alt'                      seq = cmd._seq'                      frame = cmd._frame                  };                    return temp;              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 2)              {                  rv.Data[0] = det * m.Data[3];                  rv.Data[3] = det * m.Data[0];                  rv.Data[1] = -det * m.Data[2];                  rv.Data[2] = -det * m.Data[1];              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 2)              {                  rv.Data[0] = det * m.Data[3];                  rv.Data[3] = det * m.Data[0];                  rv.Data[1] = -det * m.Data[2];                  rv.Data[2] = -det * m.Data[1];              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 2)              {                  rv.Data[0] = det * m.Data[3];                  rv.Data[3] = det * m.Data[0];                  rv.Data[1] = -det * m.Data[2];                  rv.Data[2] = -det * m.Data[1];              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 2)              {                  rv.Data[0] = det * m.Data[3];                  rv.Data[3] = det * m.Data[0];                  rv.Data[1] = -det * m.Data[2];                  rv.Data[2] = -det * m.Data[1];              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 2)              {                  rv.Data[0] = det * m.Data[3];                  rv.Data[3] = det * m.Data[0];                  rv.Data[1] = -det * m.Data[2];                  rv.Data[2] = -det * m.Data[1];              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix.cs,Invert,The following statement contains a magic number: if (m.m_c == 3)              {                  rv.Data[0] = det * (m.Data[8] * m.Data[4]) - (m.Data[7] * m.Data[5]);                  rv.Data[1] = -det * (m.Data[8] * m.Data[1]) - (m.Data[7] * m.Data[2]);                  rv.Data[2] = det * (m.Data[5] * m.Data[1]) - (m.Data[4] * m.Data[2]);                    rv.Data[3] = -det * (m.Data[8] * m.Data[3]) - (m.Data[6] * m.Data[5]);                  rv.Data[4] = det * (m.Data[8] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[5] = -det * (m.Data[5] * m.Data[0]) - (m.Data[3] * m.Data[2]);                    rv.Data[6] = det * (m.Data[7] * m.Data[3]) - (m.Data[6] * m.Data[4]);                  rv.Data[7] = -det * (m.Data[7] * m.Data[0]) - (m.Data[6] * m.Data[2]);                  rv.Data[8] = det * (m.Data[4] * m.Data[0]) - (m.Data[3] * m.Data[1]);              }
Magic Number,MissionPlanner.Utilities,Matrix3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix3.cs,normalize,The following statement contains a magic number: Vector3 t0 = a - (b*(0.5*error));
Magic Number,MissionPlanner.Utilities,Matrix3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Matrix3.cs,normalize,The following statement contains a magic number: Vector3 t1 = b - (a*(0.5*error));
Magic Number,MissionPlanner.Utilities,MissionFile,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\MissionFile.cs,ConvertFromMissionItem,The following statement contains a magic number: return new Locationwp() {alt = (float)missionItem[2]' lat = missionItem[0]' lng = missionItem[1]};
Magic Number,MissionPlanner.Utilities,nmea,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\nmea.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == '$')                      {                          step = 1;                          msglencount = 0;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 'G')                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      if (msglencount > 1000)                      {                          step = 0;                        }                            buffer[msglencount + 2] = data;                          msglencount++;                      if(data == '\n')                      {                          var line = System.Text.ASCIIEncoding.ASCII.GetString(buffer' 0' msglencount + 2);                          string[] items = line.Trim().Split('''' '*');                          if (items[items.Length-1] == GetChecksum(line))                          {                              return 1;                          }                          step = 0;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,nmea,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\nmea.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == '$')                      {                          step = 1;                          msglencount = 0;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 'G')                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      if (msglencount > 1000)                      {                          step = 0;                        }                            buffer[msglencount + 2] = data;                          msglencount++;                      if(data == '\n')                      {                          var line = System.Text.ASCIIEncoding.ASCII.GetString(buffer' 0' msglencount + 2);                          string[] items = line.Trim().Split('''' '*');                          if (items[items.Length-1] == GetChecksum(line))                          {                              return 1;                          }                          step = 0;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,nmea,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\nmea.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == '$')                      {                          step = 1;                          msglencount = 0;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 'G')                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      if (msglencount > 1000)                      {                          step = 0;                        }                            buffer[msglencount + 2] = data;                          msglencount++;                      if(data == '\n')                      {                          var line = System.Text.ASCIIEncoding.ASCII.GetString(buffer' 0' msglencount + 2);                          string[] items = line.Trim().Split('''' '*');                          if (items[items.Length-1] == GetChecksum(line))                          {                              return 1;                          }                          step = 0;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,nmea,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\nmea.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == '$')                      {                          step = 1;                          msglencount = 0;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 'G')                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      if (msglencount > 1000)                      {                          step = 0;                        }                            buffer[msglencount + 2] = data;                          msglencount++;                      if(data == '\n')                      {                          var line = System.Text.ASCIIEncoding.ASCII.GetString(buffer' 0' msglencount + 2);                          string[] items = line.Trim().Split('''' '*');                          if (items[items.Length-1] == GetChecksum(line))                          {                              return 1;                          }                          step = 0;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetHashCode,The following statement contains a magic number: return (int)((Lat + (Lng * 100) + (Alt * 10000)) * 100);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetHashCode,The following statement contains a magic number: return (int)((Lat + (Lng * 100) + (Alt * 10000)) * 100);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetHashCode,The following statement contains a magic number: return (int)((Lat + (Lng * 100) + (Alt * 10000)) * 100);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetUTMZone,The following statement contains a magic number: int zone = (int)((Lng - -186.0) / 6.0);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetUTMZone,The following statement contains a magic number: int zone = (int)((Lng - -186.0) / 6.0);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,newpos,The following statement contains a magic number: double radius_of_earth = 6378100.0;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,gps_offset,The following statement contains a magic number: double distance = Math.Sqrt(Math.Pow(east' 2) + Math.Pow(north' 2));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,gps_offset,The following statement contains a magic number: double distance = Math.Sqrt(Math.Pow(east' 2) + Math.Pow(north' 2));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetBearing,The following statement contains a magic number: return (MathHelper.rad2deg * (Math.Atan2(y' x)) + 360) % 360;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetBearing,The following statement contains a magic number: return (MathHelper.rad2deg * (Math.Atan2(y' x)) + 360) % 360;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double d = Lat * 0.017453292519943295;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num2 = Lng * 0.017453292519943295;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num3 = p2.Lat * 0.017453292519943295;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num4 = p2.Lng * 0.017453292519943295;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num7 = Math.Pow(Math.Sin(num6 / 2.0)' 2.0) + ((Math.Cos(d) * Math.Cos(num3)) * Math.Pow(Math.Sin(num5 / 2.0)' 2.0));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num7 = Math.Pow(Math.Sin(num6 / 2.0)' 2.0) + ((Math.Cos(d) * Math.Cos(num3)) * Math.Pow(Math.Sin(num5 / 2.0)' 2.0));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num7 = Math.Pow(Math.Sin(num6 / 2.0)' 2.0) + ((Math.Cos(d) * Math.Cos(num3)) * Math.Pow(Math.Sin(num5 / 2.0)' 2.0));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num7 = Math.Pow(Math.Sin(num6 / 2.0)' 2.0) + ((Math.Cos(d) * Math.Cos(num3)) * Math.Pow(Math.Sin(num5 / 2.0)' 2.0));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: double num8 = 2.0 * Math.Atan2(Math.Sqrt(num7)' Math.Sqrt(1.0 - num7));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: return (6371 * num8) * 1000.0;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance,The following statement contains a magic number: return (6371 * num8) * 1000.0;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance2,The following statement contains a magic number: var R = 6371.0;
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance2,The following statement contains a magic number: var a = Math.Sin(dLat / 2.0) * Math.Sin(dLat / 2.0) +                      Math.Sin(dLon / 2.0) * Math.Sin(dLon / 2.0) * Math.Cos(lat1) * Math.Cos(lat2);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance2,The following statement contains a magic number: var a = Math.Sin(dLat / 2.0) * Math.Sin(dLat / 2.0) +                      Math.Sin(dLon / 2.0) * Math.Sin(dLon / 2.0) * Math.Cos(lat1) * Math.Cos(lat2);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance2,The following statement contains a magic number: var a = Math.Sin(dLat / 2.0) * Math.Sin(dLat / 2.0) +                      Math.Sin(dLon / 2.0) * Math.Sin(dLon / 2.0) * Math.Cos(lat1) * Math.Cos(lat2);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance2,The following statement contains a magic number: var a = Math.Sin(dLat / 2.0) * Math.Sin(dLat / 2.0) +                      Math.Sin(dLon / 2.0) * Math.Sin(dLon / 2.0) * Math.Cos(lat1) * Math.Cos(lat2);
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance2,The following statement contains a magic number: var c = 2.0 * Math.Atan2(Math.Sqrt(a)' Math.Sqrt(1.0 - a));
Magic Number,MissionPlanner.Utilities,PointLatLngAlt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\PointLatLngAlt.cs,GetDistance2,The following statement contains a magic number: var d = R * c * 1000.0;
Magic Number,MissionPlanner.Utilities,Rect,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Rect.cs,DiagDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(Width' 2) + Math.Pow(Height' 2));
Magic Number,MissionPlanner.Utilities,Rect,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Rect.cs,DiagDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(Width' 2) + Math.Pow(Height' 2));
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == RTCM3PREAMB)                      {                          step = 1;                          packet[0] = data;                      }                      break;                  case 1:                      packet[1] = data;                      step++;                      break;                  case 2:                      packet[2] = data;                      step++;                      pre = new rtcmpreamble();                      pre.Read(packet);                      payloadlen = pre.length;                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > packet.Length)                          step = 0;                      break;                  case 3:                      if (msglencount < (payloadlen))                      {                          packet[msglencount + 3] = data;                          msglencount++;                      }                      else                      {                          step++;                          goto case 4;                      }                      break;                  case 4:                      packet[payloadlen + 3] = data;                      step++;                      break;                  case 5:                      packet[payloadlen + 3 + 1] = data;                      step++;                      break;                  case 6:                      packet[payloadlen + 3 + 2] = data;                        payloadlen = payloadlen + 3;                      var crc = crc24.crc24q(packet' payloadlen' 0);                      var crcpacket = getbitu(packet' payloadlen*8' 24);                        if (crc == crcpacket)                      {                          var head = new rtcmheader();                          head.Read(packet);                            step = 0;                            if (head.messageno == 1002)                          {                              var tp = new type1002();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1004)                          {                              var tp = new type1004();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1012)                          {                              var tp = new type1012();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1074)                          {                              var tp = new type1074();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1077)                          {                              var tp = new type1077();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1084)                          {                              var tp = new type1084();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1087)                          {                              var tp = new type1087();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1124)                          {                              var tp = new type1124();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1127)                          {                              var tp = new type1127();                                tp.Read(packet);                                if (ObsMessage != null)                                  ObsMessage(tp.obs' null);                          }                          else if (head.messageno == 1005)                          {                              var tp = new type1005();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          else if (head.messageno == 1006)                          {                              var tp = new type1006();                                tp.Read(packet);                                if (BasePosMessage != null)                                  BasePosMessage(tp' null);                          }                          /*                          else if (head.messageno == 1019)                          {                              var tp = new type1019();                                tp.Read(packet);                                if (EphMessage != null)                                  EphMessage(tp' null);                          }*/                            return head.messageno;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbitu,The following statement contains a magic number: for (i = pos; i < pos + len; i++)                  bits = (uint) ((bits << 1) + ((buff[i/8] >> (int) (7 - i%8)) & 1u));
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbitu,The following statement contains a magic number: for (i = pos; i < pos + len; i++)                  bits = (uint) ((bits << 1) + ((buff[i/8] >> (int) (7 - i%8)) & 1u));
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbitu,The following statement contains a magic number: for (i = pos; i < pos + len; i++)                  bits = (uint) ((bits << 1) + ((buff[i/8] >> (int) (7 - i%8)) & 1u));
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,setbitu,The following statement contains a magic number: if (len <= 0 || 32 < len) return;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,setbitu,The following statement contains a magic number: for (var i = pos; i < pos + len; i++' mask >>= 1)              {                  if ((data & mask) > 0)                      buff[i/8] |= (byte) (1u << (int) (7 - i%8));                  else                      buff[i/8] &= (byte) (~(1u << (int) (7 - i%8)));              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,setbitu,The following statement contains a magic number: for (var i = pos; i < pos + len; i++' mask >>= 1)              {                  if ((data & mask) > 0)                      buff[i/8] |= (byte) (1u << (int) (7 - i%8));                  else                      buff[i/8] &= (byte) (~(1u << (int) (7 - i%8)));              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,setbitu,The following statement contains a magic number: for (var i = pos; i < pos + len; i++' mask >>= 1)              {                  if ((data & mask) > 0)                      buff[i/8] |= (byte) (1u << (int) (7 - i%8));                  else                      buff[i/8] &= (byte) (~(1u << (int) (7 - i%8)));              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,setbitu,The following statement contains a magic number: for (var i = pos; i < pos + len; i++' mask >>= 1)              {                  if ((data & mask) > 0)                      buff[i/8] |= (byte) (1u << (int) (7 - i%8));                  else                      buff[i/8] &= (byte) (~(1u << (int) (7 - i%8)));              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,setbitu,The following statement contains a magic number: for (var i = pos; i < pos + len; i++' mask >>= 1)              {                  if ((data & mask) > 0)                      buff[i/8] |= (byte) (1u << (int) (7 - i%8));                  else                      buff[i/8] &= (byte) (~(1u << (int) (7 - i%8)));              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,setbitu,The following statement contains a magic number: for (var i = pos; i < pos + len; i++' mask >>= 1)              {                  if ((data & mask) > 0)                      buff[i/8] |= (byte) (1u << (int) (7 - i%8));                  else                      buff[i/8] &= (byte) (~(1u << (int) (7 - i%8)));              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ROUND,The following statement contains a magic number: return (int) Math.Floor(x + 0.5);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,cp_pr,The following statement contains a magic number: var x = (cp - pr_cyc + 1500.0)%3000.0;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,cp_pr,The following statement contains a magic number: var x = (cp - pr_cyc + 1500.0)%3000.0;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,cp_pr,The following statement contains a magic number: if (x < 0)                  x += 3000;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,cp_pr,The following statement contains a magic number: x -= 1500.0;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbits_38,The following statement contains a magic number: return getbits(buff' pos' 32)*64.0 + getbitu(buff' pos + 32' 6);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbits_38,The following statement contains a magic number: return getbits(buff' pos' 32)*64.0 + getbitu(buff' pos + 32' 6);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbits_38,The following statement contains a magic number: return getbits(buff' pos' 32)*64.0 + getbitu(buff' pos + 32' 6);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbits_38,The following statement contains a magic number: return getbits(buff' pos' 32)*64.0 + getbitu(buff' pos + 32' 6);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,getbits,The following statement contains a magic number: if (len <= 0 || 32 <= len || !((bits & (1u << (int) (len - 1))) != 0))                  return (int) bits;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,set38bits,The following statement contains a magic number: var word_h = (int) Math.Floor(value/64.0);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,set38bits,The following statement contains a magic number: var word_l = (uint) (value - word_h*64.0);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,set38bits,The following statement contains a magic number: setbits(buff' pos' 32' word_h);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,set38bits,The following statement contains a magic number: setbitu(buff' pos + 32' 6' word_l);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,set38bits,The following statement contains a magic number: setbitu(buff' pos + 32' 6' word_l);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: double e2 = FE_WGS84*(2.0 - FE_WGS84)' r2 = dot(r' r' 2)' z' zk' v = RE_WGS84' sinp;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: double e2 = FE_WGS84*(2.0 - FE_WGS84)' r2 = dot(r' r' 2)' z' zk' v = RE_WGS84' sinp;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: for (z = r[2]' zk = 0.0; Math.Abs(z - zk) >= 1E-4;)              {                  zk = z;                  sinp = z/Math.Sqrt(r2 + z*z);                  v = RE_WGS84/Math.Sqrt(1.0 - e2*sinp*sinp);                  z = r[2] + v*e2*sinp;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: for (z = r[2]' zk = 0.0; Math.Abs(z - zk) >= 1E-4;)              {                  zk = z;                  sinp = z/Math.Sqrt(r2 + z*z);                  v = RE_WGS84/Math.Sqrt(1.0 - e2*sinp*sinp);                  z = r[2] + v*e2*sinp;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: for (z = r[2]' zk = 0.0; Math.Abs(z - zk) >= 1E-4;)              {                  zk = z;                  sinp = z/Math.Sqrt(r2 + z*z);                  v = RE_WGS84/Math.Sqrt(1.0 - e2*sinp*sinp);                  z = r[2] + v*e2*sinp;              }
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: pos[0] = r2 > 1E-12 ? Math.Atan(z/Math.Sqrt(r2)) : (r[2] > 0.0 ? PI/2.0 : -PI/2.0);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: pos[0] = r2 > 1E-12 ? Math.Atan(z/Math.Sqrt(r2)) : (r[2] > 0.0 ? PI/2.0 : -PI/2.0);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: pos[0] = r2 > 1E-12 ? Math.Atan(z/Math.Sqrt(r2)) : (r[2] > 0.0 ? PI/2.0 : -PI/2.0);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: pos[0] = r2 > 1E-12 ? Math.Atan(z/Math.Sqrt(r2)) : (r[2] > 0.0 ? PI/2.0 : -PI/2.0);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: pos[1] = r2 > 1E-12 ? Math.Atan2(r[1]' r[0]) : 0.0;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,ecef2pos,The following statement contains a magic number: pos[2] = Math.Sqrt(r2 + z*z) - v;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,pos2ecef,The following statement contains a magic number: double e2 = FE_WGS84 * (2.0 - FE_WGS84)' v = RE_WGS84 / Math.Sqrt(1.0 - e2 * sinp * sinp);
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,pos2ecef,The following statement contains a magic number: r[0] = (v + pos[2]) * cosp * cosl;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,pos2ecef,The following statement contains a magic number: r[1] = (v + pos[2]) * cosp * sinl;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,pos2ecef,The following statement contains a magic number: r[2] = (v * (1.0 - e2) + pos[2]) * sinp;
Magic Number,MissionPlanner.Utilities,rtcm3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,pos2ecef,The following statement contains a magic number: r[2] = (v * (1.0 - e2) + pos[2]) * sinp;
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: preamble = (byte) getbitu(buffer' i' 8);
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 8;
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: resv1 = (byte) getbitu(buffer' i' 6);
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 6;
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: length = (ushort) getbitu(buffer' i' 10);
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 10;
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 8' RTCM3PREAMB);
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 8;
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 6' resv1);
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 6;
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 10' length);
Magic Number,MissionPlanner.Utilities,rtcmpreamble,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 10;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: messageno = (ushort) getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: refstationid = (ushort) getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: if (messageno < 1009 || messageno > 1012)                  {                      epoch = getbitu(buffer' i' 30);                      i += 30; /* gps epoch time */                  }                  else                  {                      epoch = getbitu(buffer' i' 27);                      i += 27; /* glonass epoch time */                  }
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: if (messageno < 1009 || messageno > 1012)                  {                      epoch = getbitu(buffer' i' 30);                      i += 30; /* gps epoch time */                  }                  else                  {                      epoch = getbitu(buffer' i' 27);                      i += 27; /* glonass epoch time */                  }
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: if (messageno < 1009 || messageno > 1012)                  {                      epoch = getbitu(buffer' i' 30);                      i += 30; /* gps epoch time */                  }                  else                  {                      epoch = getbitu(buffer' i' 27);                      i += 27; /* glonass epoch time */                  }
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: if (messageno < 1009 || messageno > 1012)                  {                      epoch = getbitu(buffer' i' 30);                      i += 30; /* gps epoch time */                  }                  else                  {                      epoch = getbitu(buffer' i' 27);                      i += 27; /* glonass epoch time */                  }
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: if (messageno < 1009 || messageno > 1012)                  {                      epoch = getbitu(buffer' i' 30);                      i += 30; /* gps epoch time */                  }                  else                  {                      epoch = getbitu(buffer' i' 27);                      i += 27; /* glonass epoch time */                  }
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: if (messageno < 1009 || messageno > 1012)                  {                      epoch = getbitu(buffer' i' 30);                      i += 30; /* gps epoch time */                  }                  else                  {                      epoch = getbitu(buffer' i' 27);                      i += 27; /* glonass epoch time */                  }
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: nsat = (byte) getbitu(buffer' i' 5);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 5;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: smoothint = (byte) getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' messageno);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' refstationid);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 30' epoch);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 5' nsat);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 5;
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 3' smoothint);
Magic Number,MissionPlanner.Utilities,rtcmheader,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,crc24,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,crc24q,The following statement contains a magic number: for (uint i = 0; i < len; i++)                      crc = ((crc << 8) & 0xFFFFFF) ^ crc24qtab[(crc >> 16) ^ buf[i]];
Magic Number,MissionPlanner.Utilities,crc24,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,crc24q,The following statement contains a magic number: for (uint i = 0; i < len; i++)                      crc = ((crc << 8) & 0xFFFFFF) ^ crc24qtab[(crc >> 16) ^ buf[i]];
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30)*0.001;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30)*0.001;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var nsat = getbitu(buffer' i' 5);
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            obs.Add(ob);                            //Console.WriteLine("G{0'2} {1'13} {2'16} {3'30}"' ob.prn' ob.pr.ToString("0.000")'ob.cp.ToString("0.0000")' ob.snr.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1002,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                        var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,StaticUtils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,GetFromGps,The following statement contains a magic number: var datum = new DateTime(1980' 1' 6' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MissionPlanner.Utilities,StaticUtils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,GetFromGps,The following statement contains a magic number: var datum = new DateTime(1980' 1' 6' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MissionPlanner.Utilities,StaticUtils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,GetFromGps,The following statement contains a magic number: var week = datum.AddDays(weeknumber*7);
Magic Number,MissionPlanner.Utilities,StaticUtils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,GetFromTime,The following statement contains a magic number: var datum = new DateTime(1980' 1' 6' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MissionPlanner.Utilities,StaticUtils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,GetFromTime,The following statement contains a magic number: var datum = new DateTime(1980' 1' 6' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MissionPlanner.Utilities,StaticUtils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,GetFromTime,The following statement contains a magic number: var weeks = (int) (dif.TotalDays/7);
Magic Number,MissionPlanner.Utilities,StaticUtils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,GetFromTime,The following statement contains a magic number: dif = time - datum.AddDays(weeks*7);
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30)*0.001;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30)*0.001;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var nsat = getbitu(buffer' i' 5);
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 5;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'G';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte) getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte) getbitu(buffer' i' 1);                      i += 1;                      ob.raw.pr1 = getbitu(buffer' i' 24);                      i += 24;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.cnr1 = (byte) getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte) getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte) getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte) getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1*0.02 + ob.raw.amb*PRUNIT_GPS;                        var lam1 = CLIGHT/FREQ1;                      var lam2 = CLIGHT/FREQ2;                        var cp1 = ob.raw.ppr1*0.0005/lam1;                        if ((uint) ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1/lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte) (ob.raw.cnr1*0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21*0.02;                          ob.cp2 = pr1/lam2 + ob.raw.ppr2*0.0005/lam2;                            obs.Add(ob);                            //   Console.WriteLine("G{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                          //       ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1004,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                        setbitu(buffer' i' 6' ob.prn);                      i += 6;                      setbitu(buffer' i' 1' 0);                      i += 1;                      setbitu(buffer' i' 24' (uint) pr1);                      i += 24;                      setbits(buffer' i' 20' (int) ppr1);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock1);                      i += 7;                      setbitu(buffer' i' 8' (byte) amb);                      i += 8;                      setbitu(buffer' i' 8' (byte) (ob.snr*4));                      i += 8;                      // l2 - all 0's                      setbitu(buffer' i' 2' ob.raw.code2);                      i += 2;                      setbits(buffer' i' 14' ob.raw.pr21);                      i += 14;                      setbits(buffer' i' 20' ob.raw.ppr2);                      i += 20;                      setbitu(buffer' i' 7' ob.raw.lock2);                      i += 7;                      setbitu(buffer' i' 8' ob.raw.cnr2);                      i += 8;                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 27) * 0.001;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 27) * 0.001;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 27;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var nsat = getbitu(buffer' i' 5);
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 5;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var smoothint = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: tow += 10800;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: Console.WriteLine("> {0} {1} {2} {3'2} {4} {5} {6} {7}"' gpstime.Year' gpstime.Month' gpstime.Day'gpstime.Hour' gpstime.Minute' gpstime.Second + gpstime.Millisecond/1000.0' 0' nsat);
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (var a = 0; a < nsat; a++)                  {                      var ob = new ob();                      ob.sys = 'R';                      ob.tow = tow;                      ob.week = week;                        ob.raw.prn = (byte)getbitu(buffer' i' 6);                      i += 6;                      ob.raw.code1 = (byte)getbitu(buffer' i' 1);                      i += 1;                      ob.raw.fcn = (byte)getbitu(buffer' i' 5);                      i += 5;                      ob.raw.pr1 = getbitu(buffer' i' 25);                      i += 25;                      ob.raw.ppr1 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock1 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.amb = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr1 = (byte)getbitu(buffer' i' 8);                      i += 8;                      ob.raw.code2 = (byte)getbitu(buffer' i' 2);                      i += 2;                      ob.raw.pr21 = getbits(buffer' i' 14);                      i += 14;                      ob.raw.ppr2 = getbits(buffer' i' 20);                      i += 20;                      ob.raw.lock2 = (byte)getbitu(buffer' i' 7);                      i += 7;                      ob.raw.cnr2 = (byte)getbitu(buffer' i' 8);                      i += 8;                        var pr1 = ob.raw.pr1 * 0.02 + ob.raw.amb * PRUNIT_GLO;                        var lam1 = CLIGHT / FREQ1;                      var lam2 = CLIGHT / FREQ2;                        var cp1 = ob.raw.ppr1 * 0.0005 / lam1;                        if ((uint)ob.raw.ppr1 != 0xFFF80000)                      {                          ob.prn = ob.raw.prn;                          ob.cp = pr1 / lam1 + cp1;                          ob.pr = pr1;                          ob.snr = (byte)(ob.raw.cnr1 * 0.25); // *4.0+0.5                            ob.pr2 = pr1 + ob.raw.pr21 * 0.02;                          ob.cp2 = pr1 / lam2 + ob.raw.ppr2 * 0.0005 / lam2;                            obs.Add(ob);                               Console.WriteLine("R{0'2} {1'13} {2'15}0{3'15} {4'15}0{5'15}"' ob.prn' ob.pr.ToString("0.000")' ob.cp.ToString("0.000")' ob.snr.ToString("0.000")'                                 ob.pr2.ToString("0.000")' ob.cp2.ToString("0.000"));                      }                  }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24 + 64;
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                    }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                    }
Magic Number,MissionPlanner.Utilities,type1012,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: foreach (var ob in obs)                  {                      var lam1 = CLIGHT/FREQ1;                        var amb = (int) Math.Floor(ob.pr/PRUNIT_GPS);                      var pr1 = ROUND((ob.pr - amb*PRUNIT_GPS)/0.02);                      var pr1c = pr1*0.02 + amb*PRUNIT_GPS;                        var ppr = cp_pr(ob.cp' pr1c/lam1);                      var ppr1 = ROUND(ppr*lam1/0.0005);                    }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var iod = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var time_s = getbitu(buffer' i' 7);
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 7;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_str = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_ext = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tint_s = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cellmask = new byte[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 64; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sats[nsat++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 32; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sigs[nsig++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var r = new double[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rr = new double[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var pr = new double[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cp = new double[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rrf = new double[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cnr = new double[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var ex = new uint[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var half = new uint[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var @lock = new uint[64];
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      r[j] = rr[j] = 0.0;                      ex[j] = 15;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++) pr[j] = cp[j] = rrf[j] = -1E16;
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 6)*1;// * 0.0625;                      i += 6;                  }
Magic Number,MissionPlanner.Utilities,type1074,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 6)*1;// * 0.0625;                      i += 6;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30)*0.001;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30)*0.001;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var iod = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var time_s = getbitu(buffer' i' 7);
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 7;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_str = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_ext = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tint_s = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cellmask = new byte[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 64; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sats[nsat++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 32; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sigs[nsig++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var r = new double[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rr = new double[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var pr = new double[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cp = new double[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rrf = new double[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cnr = new double[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var ex = new uint[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var half = new uint[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var @lock = new uint[64];
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      r[j] = rr[j] = 0.0;                      ex[j] = 15;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++) pr[j] = cp[j] = rrf[j] = -1E16;
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* extended info */                      ex[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* extended info */                      ex[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m*P2_10*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m*P2_10*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate*1.0;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate*1.0;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate*1.0;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv*P2_29*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv*P2_29*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv*P2_29*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv*P2_31*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv*P2_31*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv*P2_31*RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 10);                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 10);                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10)*0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10)*0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10)*0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv*0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv*0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv*0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1077,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv*0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var iod = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var time_s = getbitu(buffer' i' 7);
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 7;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_str = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_ext = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tint_s = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cellmask = new byte[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 64; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sats[nsat++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 32; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sigs[nsig++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var r = new double[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rr = new double[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var pr = new double[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cp = new double[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rrf = new double[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cnr = new double[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var ex = new uint[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var half = new uint[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var @lock = new uint[64];
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      r[j] = rr[j] = 0.0;                      ex[j] = 15;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++) pr[j] = cp[j] = rrf[j] = -1E16;
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 6) * 1;// * 0.0625;                      i += 6;                  }
Magic Number,MissionPlanner.Utilities,type1084,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 6) * 1;// * 0.0625;                      i += 6;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var iod = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var time_s = getbitu(buffer' i' 7);
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 7;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_str = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_ext = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tint_s = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cellmask = new byte[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 64; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sats[nsat++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 32; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sigs[nsig++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var r = new double[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rr = new double[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var pr = new double[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cp = new double[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rrf = new double[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cnr = new double[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var ex = new uint[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var half = new uint[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var @lock = new uint[64];
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      r[j] = rr[j] = 0.0;                      ex[j] = 15;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++) pr[j] = cp[j] = rrf[j] = -1E16;
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* extended info */                      ex[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* extended info */                      ex[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate * 1.0;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate * 1.0;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate * 1.0;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv * P2_31 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv * P2_31 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv * P2_31 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 10);                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 10);                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10) * 0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10) * 0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10) * 0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1087,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001 + 14;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001 + 14;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001 + 14;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var iod = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var time_s = getbitu(buffer' i' 7);
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 7;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_str = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_ext = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tint_s = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cellmask = new byte[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 64; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sats[nsat++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 32; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sigs[nsig++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var r = new double[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rr = new double[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var pr = new double[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cp = new double[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rrf = new double[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cnr = new double[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var ex = new uint[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var half = new uint[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var @lock = new uint[64];
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      r[j] = rr[j] = 0.0;                      ex[j] = 15;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++) pr[j] = cp[j] = rrf[j] = -1E16;
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 15);                      i += 15;                      if (prv != -16384) pr[j] = prv * P2_24 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 22);                      i += 22;                      if (cpv != -2097152) cp[j] = cpv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 6) * 1;// * 0.0625;                      i += 6;                  }
Magic Number,MissionPlanner.Utilities,type1124,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 6) * 1;// * 0.0625;                      i += 6;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var type = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var staid = getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001 + 14;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001 + 14;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tow = getbitu(buffer' i' 30) * 0.001 + 14;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 30;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var iod = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var time_s = getbitu(buffer' i' 7);
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 7;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_str = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var clk_ext = getbitu(buffer' i' 2);
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var tint_s = getbitu(buffer' i' 3);
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 3;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cellmask = new byte[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 64; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sats[nsat++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 1; j <= 32; j++)                  {                      var mask = getbitu(buffer' i' 1);                      i += 1;                      if (mask > 0) sigs[nsig++] = j;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var r = new double[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rr = new double[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var pr = new double[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cp = new double[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var rrf = new double[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var cnr = new double[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var ex = new uint[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var half = new uint[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: var @lock = new uint[64];
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      r[j] = rr[j] = 0.0;                      ex[j] = 15;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++) pr[j] = cp[j] = rrf[j] = -1E16;
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* range */                      var rng = getbitu(buffer' i' 8);                      i += 8;                      if (rng != 255) r[j] = rng * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* extended info */                      ex[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* extended info */                      ex[j] = getbitu(buffer' i' 4);                      i += 4;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      var rng_m = getbitu(buffer' i' 10);                      i += 10;                      if (r[j] != 0.0) r[j] += rng_m * P2_10 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate * 1.0;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate * 1.0;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < nsat; j++)                  {                      /* phaserangerate */                      var rate = getbits(buffer' i' 14);                      i += 14;                      if (rate != -8192) rr[j] = rate * 1.0;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* pseudorange */                      var prv = getbits(buffer' i' 20);                      i += 20;                      if (prv != -524288) pr[j] = prv * P2_29 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv * P2_31 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv * P2_31 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserange */                      var cpv = getbits(buffer' i' 24);                      i += 24;                      if (cpv != -8388608) cp[j] = cpv * P2_31 * RANGE_MS;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 10);                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* lock time */                      @lock[j] = getbitu(buffer' i' 10);                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10) * 0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10) * 0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* cnr */                      cnr[j] = getbitu(buffer' i' 10) * 0.0625;                      i += 10;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1127,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: for (j = 0; j < ncell; j++)                  {                      /* phaserangerate */                      var rrv = getbits(buffer' i' 15);                      i += 15;                      if (rrv != -16384) rrf[j] = rrv * 0.0001;                  }
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24 + 12;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24 + 12;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: staid = (ushort) getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: itrf = (byte) getbitu(buffer' i' 6);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 6 + 4;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 6 + 4;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' 1005);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' 1005);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' staid);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 6' 0);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 6;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[0]/0.0001);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[1]/0.0001);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 2' 0);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[2]/0.0001);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[2]/0.0001);
Magic Number,MissionPlanner.Utilities,type1005,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24 + 12;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: uint i = 24 + 12;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: staid = (ushort) getbitu(buffer' i' 12);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: itrf = (byte) getbitu(buffer' i' 6);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 6 + 4;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 6 + 4;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38 + 2;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: anth = (ushort) getbitu(buffer' i' 16);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Read,The following statement contains a magic number: i += 16;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: uint i = 24;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' 1005);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' 1005);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 12' staid);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 12;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 6' 0);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 6;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[0]/0.0001);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[1]/0.0001);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 2' 0);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 2;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[2]/0.0001);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: set38bits(buffer' i' ecefposition[2]/0.0001);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 38;
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: setbitu(buffer' i' 16' anth);
Magic Number,MissionPlanner.Utilities,type1006,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\rtcm3.cs,Write,The following statement contains a magic number: i += 16;
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,sbp,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,read,The following statement contains a magic number: switch (state)              {                  default:                  case 0:                      if (data == 0x55)                      {                          state++;                          msg = new piksimsg();                          msg.preamble = data;                          msg.buffer[0] = data;                          crc = new Crc16Ccitt(InitialCrcValue.Zeros);                          crcpacket = (ushort)InitialCrcValue.Zeros;                      }                      break;                  case 1:                      msg.msg_type = (u16)(data);                      msg.buffer[1] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 2:                      msg.msg_type = (u16)(msg.msg_type + (data << 8));                      msg.buffer[2] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 3:                      msg.sender = (u16)(data);                      msg.buffer[3] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 4:                      msg.sender = (u16)(msg.sender + (data << 8));                      msg.buffer[4] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      state++;                      break;                  case 5:                      msg.length = data;                      msg.buffer[5] = data;                      crcpacket = crc.Accumulate(data' crcpacket);                      msg.payload = new u8[msg.length];                      Array.Resize(ref msg.buffer' 8 + data);                      lengthcount = 0;                      state++;                      break;                  case 6:                      if (lengthcount == msg.length)                      {                          state++;                          goto case 7;                      }                      else                      {                          msg.payload[lengthcount] = data;                          msg.buffer[6 + lengthcount] = data;                          crcpacket = crc.Accumulate(data' crcpacket);                          lengthcount++;                      }                      break;                  case 7:                      msg.crc = (u16)(data);                      msg.buffer[6 + lengthcount] = data;                      state++;                      break;                  case 8:                      msg.crc = (u16)(msg.crc + (data << 8));                      msg.buffer[7 + lengthcount] = data;                      state = 0;                        if (msg.crc == crcpacket)                      {                          return msg.msg_type;                      }                      break;              }
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,Accumulate,The following statement contains a magic number: crc = (ushort)((crc << 8) ^ table[((crc >> 8) ^ (0xff & data))]);
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,Accumulate,The following statement contains a magic number: crc = (ushort)((crc << 8) ^ table[((crc >> 8) ^ (0xff & data))]);
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,ComputeChecksum,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)                  {                      crc = (ushort)((crc << 8) ^ table[((crc >> 8) ^ (0xff & bytes[i]))]);                  }
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,ComputeChecksum,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)                  {                      crc = (ushort)((crc << 8) ^ table[((crc >> 8) ^ (0xff & bytes[i]))]);                  }
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,ComputeChecksumBytes,The following statement contains a magic number: return new byte[] { (byte)(crc >> 8)' (byte)(crc & 0x00ff) };
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,Crc16Ccitt,The following statement contains a magic number: if (table == null)                  {                      table = new ushort[256];                      ushort temp' a;                      for (int i = 0; i < table.Length; i++)                      {                          temp = 0;                          a = (ushort)(i << 8);                          for (int j = 0; j < 8; j++)                          {                              if (((temp ^ a) & 0x8000) != 0)                              {                                  temp = (ushort)((temp << 1) ^ poly);                              }                              else                              {                                  temp <<= 1;                              }                              a <<= 1;                          }                          table[i] = temp;                      }                  }
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,Crc16Ccitt,The following statement contains a magic number: if (table == null)                  {                      table = new ushort[256];                      ushort temp' a;                      for (int i = 0; i < table.Length; i++)                      {                          temp = 0;                          a = (ushort)(i << 8);                          for (int j = 0; j < 8; j++)                          {                              if (((temp ^ a) & 0x8000) != 0)                              {                                  temp = (ushort)((temp << 1) ^ poly);                              }                              else                              {                                  temp <<= 1;                              }                              a <<= 1;                          }                          table[i] = temp;                      }                  }
Magic Number,MissionPlanner.Utilities,Crc16Ccitt,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\sbp.cs,Crc16Ccitt,The following statement contains a magic number: if (table == null)                  {                      table = new ushort[256];                      ushort temp' a;                      for (int i = 0; i < table.Length; i++)                      {                          temp = 0;                          a = (ushort)(i << 8);                          for (int j = 0; j < 8; j++)                          {                              if (((temp ^ a) & 0x8000) != 0)                              {                                  temp = (ushort)((temp << 1) ^ poly);                              }                              else                              {                                  temp <<= 1;                              }                              a <<= 1;                          }                          table[i] = temp;                      }                  }
Magic Number,MissionPlanner.Utilities,TCPConsole,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\TCPConsole.cs,startup,The following statement contains a magic number: try              {                  listener = new TcpListener(IPAddress.Any' 2300);                    listener.Start();                    listener.BeginAcceptTcpClient(        new AsyncCallback(DoAcceptTcpClientCallback)'        listener);              }              catch { Console.WriteLine("TCP Console fail: port 2300"); return; }
Magic Number,MissionPlanner.Utilities,tfr,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,tfrcallback,The following statement contains a magic number: try             {                 string content = "";                  // check if cache exists and last write was today                 if (File.Exists(tfrcache) &&                     new FileInfo(tfrcache).LastWriteTime.ToShortDateString() == DateTime.Now.ToShortDateString())                  {                     content = File.ReadAllText(tfrcache);                 }                 else                 {                     // Set the State of request to asynchronous.                     WebRequest myWebRequest1 = (WebRequest)ar.AsyncState;                      using (WebResponse response = myWebRequest1.EndGetResponse(ar))                     {                          var st = response.GetResponseStream();                          StreamReader sr = new StreamReader(st);                          content = sr.ReadToEnd();                          File.WriteAllText(tfrcache' content);                     }                 }                  XDocument xdoc = XDocument.Parse(content);                  tfritem currenttfr = new tfritem();                  for (int a = 1; a < 100; a++)                 {                     var newtfrs = (from _item in xdoc.Element("TFRSET").Elements("TFR" + a)                                    select new tfritem                                    {                                        ID = _item.Element("ID").Value'                                        NID = _item.Element("NID").Value'                                        VERIFIED = _item.Element("VERIFIED").Value'                                        NAME = _item.Element("NAME").Value'                                        COMMENT = _item.Element("COMMENT").Value'                                        ACCESS = _item.Element("ACCESS").Value'                                        APPEAR = _item.Element("APPEAR").Value'                                        TYPE = _item.Element("TYPE").Value'                                        MINALT = _item.Element("MINALT").Value'                                        MAXALT = _item.Element("MAXALT").Value'                                        SEGS = _item.Element("SEGS").Value'                                        BOUND = _item.Element("BOUND").Value'                                        SRC = _item.Element("SRC").Value'                                        CREATED = _item.Element("CREATED").Value'                                        MODIFIED = _item.Element("MODIFIED").Value'                                        DELETED = _item.Element("DELETED").Value'                                        ACTIVE = _item.Element("ACTIVE").Value'                                        EXPIRES = _item.Element("EXPIRES").Value'                                        SUBMITID = _item.Element("SUBMITID").Value'                                        SUBMITHOST = _item.Element("SUBMITHOST").Value'                                    }).ToList();                      if (newtfrs == null || newtfrs.Count == 0)                         break;                      tfrs.AddRange(newtfrs);                 }                  if (GotTFRs != null)                     GotTFRs(tfrs' null);             }             catch {  }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,tfritem,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\tfr.cs,GetPaths,The following statement contains a magic number: foreach (Match item in matches)                 {                     try                     {                          if (item.Groups[0].Value.ToString().StartsWith("R") || item.Groups[0].Value.ToString().StartsWith("B"))                          {                              // start new element                             if (pointlist.Count > 0)                             {                                 list.Add(pointlist);                                 pointlist = new List<PointLatLng>();                             }                         }                          if (item.Groups[2].Value == "L")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[4].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[6].Value' CultureInfo.InvariantCulture));                              if (item.Groups[3].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[5].Value == "W")                                 point.Lng *= -1;                              if (isarcterminate)                             {                                 double radius = pointcent.GetDistance(pointstart);                                  double startbearing = pointcent.GetBearing(pointstart);                                  double endbearing = pointcent.GetBearing(point);                                  if (arcdir > 0 && endbearing < startbearing)                                     endbearing += 360;                                  if (arcdir < 0)                                 {                                     for (double a = startbearing; a > endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                 else                                 {                                     for (double a = startbearing; a < endbearing; a += (10 * arcdir))                                     {                                         pointlist.Add(pointcent.newpos(a' radius));                                     }                                 }                                  pointlist.Add(point);                                   isarcterminate = false;                                 iscircleterminate = false;                                  continue;                             }                              if (iscircleterminate)                             {                                 iscircleterminate = false;                                 continue;                             }                              pointlist.Add(point);                              continue;                         }                         else if (item.Groups[7].Value == "A")                         {                             pointcent = new PointLatLngAlt(double.Parse(item.Groups[10].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[12].Value' CultureInfo.InvariantCulture));                              if (item.Groups[9].Value == "S")                                 pointcent.Lat *= -1;                              if (item.Groups[11].Value == "W")                                 pointcent.Lng *= -1;                              pointstart = new PointLatLngAlt(double.Parse(item.Groups[14].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[16].Value' CultureInfo.InvariantCulture));                              if (item.Groups[13].Value == "S")                                 pointstart.Lat *= -1;                              if (item.Groups[15].Value == "W")                                 pointstart.Lng *= -1;                              arcdir = item.Groups[8].Value == "+" ? 1 : -1;                              isarcterminate = true;                              continue;                         }                         else if (item.Groups[17].Value == "C")                         {                             var point = new PointLatLngAlt(double.Parse(item.Groups[19].Value' CultureInfo.InvariantCulture)' double.Parse(item.Groups[21].Value' CultureInfo.InvariantCulture));                              if (item.Groups[18].Value == "S")                                 point.Lat *= -1;                              if (item.Groups[20].Value == "W")                                 point.Lng *= -1;                              // radius in m from nautical miles                             double radius = double.Parse(item.Groups[22].Value' CultureInfo.InvariantCulture) * 1852;                              for (int a = 0; a <= 360; a += 10)                             {                                 pointlist.Add(point.newpos(a' radius));                             }                              list.Add(pointlist);                             pointlist = new List<PointLatLng>();                              iscircleterminate = true;                              continue;                         }                     }                     catch { }                 }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,Read,The following statement contains a magic number: switch (step)              {                  default:                  case 0:                      if (data == 0xb5)                      {                          step = 1;                          buffer[0] = data;                      }                      break;                  case 1:                      if (data == 0x62)                      {                          buffer[1] = data;                          step++;                      }                      else                          step = 0;                      break;                  case 2:                      buffer[2] = data;                      step++;                      break;                  case 3:                      buffer[3] = data;                      step++;                      break;                  case 4:                      buffer[4] = data;                      payloadlen = data;                      step++;                      break;                  case 5:                      buffer[5] = data;                      step++;                      payloadlen += (data << 8);                      msglencount = 0;                      // reset on oversize packet                      if (payloadlen > buffer.Length)                          step = 0;                      break;                  case 6:                      if (msglencount < (payloadlen))                      {                          buffer[msglencount + 6] = data;                          msglencount++;                            if (msglencount == payloadlen)                              step++;                      }                      break;                  case 7:                      buffer[msglencount + 6] = data;                      step++;                      break;                  case 8:                      buffer[msglencount + 6 + 1] = data;                        var crc = ubx_checksum(buffer' payloadlen + 6);                        var crcpacket = new byte[] { buffer[msglencount + 6]' data };                        if (crc[0] == crcpacket[0] && crc[1] == crcpacket[1])                      {                          step = 0;                          return (@class << 8) + subclass;                      }                      step = 0;                      break;              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_checksum,The following statement contains a magic number: var ans = new byte[2];
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: var data = new byte[2 + 2 + 2 + 2 + payload.Length];
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: var data = new byte[2 + 2 + 2 + 2 + payload.Length];
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: var data = new byte[2 + 2 + 2 + 2 + payload.Length];
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: var data = new byte[2 + 2 + 2 + 2 + payload.Length];
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: data[2] = cl;
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: data[3] = subclass;
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: data[4] = (byte)(payload.Length & 0xff);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: data[5] = (byte)((payload.Length >> 8) & 0xff);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: data[5] = (byte)((payload.Length >> 8) & 0xff);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: Array.ConstrainedCopy(payload' 0' data' 6' payload.Length);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: var checksum = ubx_checksum(data' data.Length - 2);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,generate,The following statement contains a magic number: data[data.Length - 2] = checksum[0];
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: port.BaudRate = 9600;
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: System.Threading.Thread.Sleep(300);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: System.Threading.Thread.Sleep(300);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: port.BaudRate = 115200;
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: System.Threading.Thread.Sleep(300);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: System.Threading.Thread.Sleep(300);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: System.Threading.Thread.Sleep(200);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: if (!movingbase)              {                  packet = generate(0x6' 0x24'                      new byte[]                      {                          0xFF' 0xFF' 0x02' 0x03' 0x00' 0x00' 0x00' 0x00' 0x10' 0x27' 0x00' 0x00' 0x05' 0x00' 0xFA' 0x00'                          0xFA' 0x00' 0x64' 0x00' 0x2C' 0x01' 0x00' 0x00' 0x00' 0x00' 0x10' 0x27' 0x00' 0x00' 0x00' 0x00'                          0x00' 0x00' 0x00' 0x00                      });                  port.Write(packet' 0' packet.Length);                  System.Threading.Thread.Sleep(200);              }
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: turnon_off(port' 0xf5' 0x05' 5);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: turnon_off(port' 0xf5' 0xE6' 5);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: turnon_off(port' 0x02' 0x13' 2);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: turnon_off(port' 0x02' 0x11' 2);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: turnon_off(port' 0x0a' 0x09' 2);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupM8P,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupBasePos,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupBasePos,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupBasePos,The following statement contains a magic number: if (surveyindur == 0)                  surveyindur = 60;
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,SetupBasePos,The following statement contains a magic number: if (surveyinacc == 0)                  surveyinacc = 2;
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,turnon_off,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,MissionPlanner.Utilities,ubx_m8p,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,poll_msg,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,MissionPlanner.Utilities,ubx_nav_svin,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getECEF,The following statement contains a magic number: var X = meanX / 100.0 + meanXHP * 0.0001;
Magic Number,MissionPlanner.Utilities,ubx_nav_svin,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getECEF,The following statement contains a magic number: var X = meanX / 100.0 + meanXHP * 0.0001;
Magic Number,MissionPlanner.Utilities,ubx_nav_svin,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getECEF,The following statement contains a magic number: var Y = meanY / 100.0 + meanYHP * 0.0001;
Magic Number,MissionPlanner.Utilities,ubx_nav_svin,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getECEF,The following statement contains a magic number: var Y = meanY / 100.0 + meanYHP * 0.0001;
Magic Number,MissionPlanner.Utilities,ubx_nav_svin,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getECEF,The following statement contains a magic number: var Z = meanZ / 100.0 + meanZHP * 0.0001;
Magic Number,MissionPlanner.Utilities,ubx_nav_svin,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getECEF,The following statement contains a magic number: var Z = meanZ / 100.0 + meanZHP * 0.0001;
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: if (Math.Abs(lat) > 90)                  {                      flags = 2; // fixed mode ecef                      ecefXorLat = (int)(lat*100);                      ecefYorLon = (int)(lng * 100);                      ecefZorAlt = (int)(alt * 100);                      ecefXOrLatHP = (sbyte)((lat * 100 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 100 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100 - ecefZorAlt) * 100.0);                  } else {                      flags = 256 + 2; // lla + fixed mode                      ecefXorLat = (int)(lat * 1e7);                      ecefYorLon = (int)(lng * 1e7);                      ecefZorAlt = (int)(alt * 100.0);                      ecefXOrLatHP = (sbyte)((lat * 1e7 - ecefXorLat) * 100.0);                      ecefYOrLonHP = (sbyte)((lng * 1e7 - ecefYorLon) * 100.0);                      ecefZOrAltHP = (sbyte)((alt * 100.0 - ecefZorAlt) * 100.0);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: fixedPosAcc = (uint)(acc * 1000.0);
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: svinMinDur = 60;
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: svinAccLimit = 2000;
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: reserved3 = new byte[8];
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: svinAccLimit = (uint)(AccLimit * 10000);
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,ubx_cfg_tmode3,The following statement contains a magic number: reserved3 = new byte[8];
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,ubx_cfg_tmode3,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ubx_m8p.cs,getPointLatLngAlt,The following statement contains a magic number: if (flags == 2)                  {                      var X = ecefXorLat / 100.0 + ecefXOrLatHP * 0.0001;                      var Y = ecefYorLon / 100.0 + ecefYOrLonHP * 0.0001;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }                  else if (flags == 258)                  {                      var X = ecefXorLat / 1e7 + ecefXOrLatHP / 1e9;                      var Y = ecefYorLon / 1e7 + ecefYOrLonHP / 1e9;                      var Z = ecefZorAlt / 100.0 + ecefZOrAltHP * 0.0001;                        var pos = new double[] { X' Y' Z };                        return new PointLatLngAlt(pos);                  }
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,safe_asin,The following statement contains a magic number: if (v >= 1.0f)             {                 return PI/2;             }
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,safe_asin,The following statement contains a magic number: if (v <= -1.0f)             {                 return -PI/2;             }
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float[] inv = new float[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: float det = m[0] * (m[4] * m[8] - m[7] * m[5]) -              m[1] * (m[3] * m[8] - m[5] * m[6]) +              m[2] * (m[3] * m[7] - m[4] * m[6]);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[0] = (m[4] * m[8] - m[7] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[0] = (m[4] * m[8] - m[7] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[0] = (m[4] * m[8] - m[7] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[0] = (m[4] * m[8] - m[7] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[1] = (m[2] * m[7] - m[1] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[1] = (m[2] * m[7] - m[1] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[1] = (m[2] * m[7] - m[1] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[2] = (m[1] * m[5] - m[2] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[2] = (m[1] * m[5] - m[2] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[2] = (m[1] * m[5] - m[2] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[2] = (m[1] * m[5] - m[2] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[3] = (m[5] * m[6] - m[3] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[3] = (m[5] * m[6] - m[3] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[3] = (m[5] * m[6] - m[3] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[3] = (m[5] * m[6] - m[3] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[3] = (m[5] * m[6] - m[3] * m[8]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[4] = (m[0] * m[8] - m[2] * m[6]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[4] = (m[0] * m[8] - m[2] * m[6]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[4] = (m[0] * m[8] - m[2] * m[6]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[4] = (m[0] * m[8] - m[2] * m[6]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[5] = (m[3] * m[2] - m[0] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[5] = (m[3] * m[2] - m[0] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[5] = (m[3] * m[2] - m[0] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[5] = (m[3] * m[2] - m[0] * m[5]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[6] = (m[3] * m[7] - m[6] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[6] = (m[3] * m[7] - m[6] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[6] = (m[3] * m[7] - m[6] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[6] = (m[3] * m[7] - m[6] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[6] = (m[3] * m[7] - m[6] * m[4]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[7] = (m[6] * m[1] - m[0] * m[7]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[7] = (m[6] * m[1] - m[0] * m[7]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[7] = (m[6] * m[1] - m[0] * m[7]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[8] = (m[0] * m[4] - m[3] * m[1]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[8] = (m[0] * m[4] - m[3] * m[1]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: inv[8] = (m[0] * m[4] - m[3] * m[1]) * invdet;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse3x3,The following statement contains a magic number: for (byte i = 0; i < 9; i++)              {                  invOut[i] = inv[i];              }
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: float[] inv = new float[16];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[0] = m[5] * m[10] * m[15] -              m[5] * m[11] * m[14] -              m[9] * m[6] * m[15] +              m[9] * m[7] * m[14] +              m[13] * m[6] * m[11] -              m[13] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[4] = -m[4] * m[10] * m[15] +              m[4] * m[11] * m[14] +              m[8] * m[6] * m[15] -              m[8] * m[7] * m[14] -              m[12] * m[6] * m[11] +              m[12] * m[7] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[8] = m[4] * m[9] * m[15] -              m[4] * m[11] * m[13] -              m[8] * m[5] * m[15] +              m[8] * m[7] * m[13] +              m[12] * m[5] * m[11] -              m[12] * m[7] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[12] = -m[4] * m[9] * m[14] +              m[4] * m[10] * m[13] +              m[8] * m[5] * m[14] -              m[8] * m[6] * m[13] -              m[12] * m[5] * m[10] +              m[12] * m[6] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[1] = -m[1] * m[10] * m[15] +              m[1] * m[11] * m[14] +              m[9] * m[2] * m[15] -              m[9] * m[3] * m[14] -              m[13] * m[2] * m[11] +              m[13] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[5] = m[0] * m[10] * m[15] -              m[0] * m[11] * m[14] -              m[8] * m[2] * m[15] +              m[8] * m[3] * m[14] +              m[12] * m[2] * m[11] -              m[12] * m[3] * m[10];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[9] = -m[0] * m[9] * m[15] +              m[0] * m[11] * m[13] +              m[8] * m[1] * m[15] -              m[8] * m[3] * m[13] -              m[12] * m[1] * m[11] +              m[12] * m[3] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[13] = m[0] * m[9] * m[14] -              m[0] * m[10] * m[13] -              m[8] * m[1] * m[14] +              m[8] * m[2] * m[13] +              m[12] * m[1] * m[10] -              m[12] * m[2] * m[9];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[2] = m[1] * m[6] * m[15] -              m[1] * m[7] * m[14] -              m[5] * m[2] * m[15] +              m[5] * m[3] * m[14] +              m[13] * m[2] * m[7] -              m[13] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[6] = -m[0] * m[6] * m[15] +              m[0] * m[7] * m[14] +              m[4] * m[2] * m[15] -              m[4] * m[3] * m[14] -              m[12] * m[2] * m[7] +              m[12] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[10] = m[0] * m[5] * m[15] -              m[0] * m[7] * m[13] -              m[4] * m[1] * m[15] +              m[4] * m[3] * m[13] +              m[12] * m[1] * m[7] -              m[12] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[14] = -m[0] * m[5] * m[14] +              m[0] * m[6] * m[13] +              m[4] * m[1] * m[14] -              m[4] * m[2] * m[13] -              m[12] * m[1] * m[6] +              m[12] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[3] = -m[1] * m[6] * m[11] +              m[1] * m[7] * m[10] +              m[5] * m[2] * m[11] -              m[5] * m[3] * m[10] -              m[9] * m[2] * m[7] +              m[9] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[7] = m[0] * m[6] * m[11] -              m[0] * m[7] * m[10] -              m[4] * m[2] * m[11] +              m[4] * m[3] * m[10] +              m[8] * m[2] * m[7] -              m[8] * m[3] * m[6];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[11] = -m[0] * m[5] * m[11] +              m[0] * m[7] * m[9] +              m[4] * m[1] * m[11] -              m[4] * m[3] * m[9] -              m[8] * m[1] * m[7] +              m[8] * m[3] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: inv[15] = m[0] * m[5] * m[10] -              m[0] * m[6] * m[9] -              m[4] * m[1] * m[10] +              m[4] * m[2] * m[9] +              m[8] * m[1] * m[6] -              m[8] * m[2] * m[5];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse4x4,The following statement contains a magic number: for (i = 0; i < 16; i++)                  invOut[i] = inv[i] * det;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse,The following statement contains a magic number: switch (dim)             {                 case 3: return inverse3x3(x' y);                 case 4: return inverse4x4(x' y);                 default:                 {                     int info = 0;                     alglib.matinvreport rep = new alglib.matinvreport();                     double['] input = new double[dim' dim];                      int a = 0;                     foreach (var f in x)                     {                         input[a / dim' a % dim] = f;                         a++;                     }                      alglib.rmatrixinverse(ref input' dim' out info' out rep); // mat_inverse(x' y' dim);                      a = 0;                     foreach (var f in input)                     {                         y[a] = (float)f;                         a++;                     }                        return true;                 }             }
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,inverse,The following statement contains a magic number: switch (dim)             {                 case 3: return inverse3x3(x' y);                 case 4: return inverse4x4(x' y);                 default:                 {                     int info = 0;                     alglib.matinvreport rep = new alglib.matinvreport();                     double['] input = new double[dim' dim];                      int a = 0;                     foreach (var f in x)                     {                         input[a / dim' a % dim] = f;                         a++;                     }                      alglib.rmatrixinverse(ref input' dim' out info' out rep); // mat_inverse(x' y' dim);                      a = 0;                     foreach (var f in input)                     {                         y[a] = (float)f;                         a++;                     }                        return true;                 }             }
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,EarthRatesToBodyRatesRyan,The following statement contains a magic number: var psi = radians((360 - yaw)*1.0);
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,BodyRatesToEarthRates,The following statement contains a magic number: if (fabs(cos(theta)) < 1.0e-20)                 theta += 1.0e-10;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,BodyRatesToEarthRates,The following statement contains a magic number: if (fabs(cos(theta)) < 1.0e-20)                 theta += 1.0e-10;
Magic Number,MissionPlanner.Utilities,Utils,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Utils.cs,gps_newpos,The following statement contains a magic number: double radius_of_earth = 6378100.0;
Magic Number,MissionPlanner.Utilities,utmpos,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\utmpos.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(Math.Abs(x - b.x)' 2) + Math.Pow(Math.Abs(y - b.y)' 2));
Magic Number,MissionPlanner.Utilities,utmpos,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\utmpos.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(Math.Abs(x - b.x)' 2) + Math.Pow(Math.Abs(y - b.y)' 2));
Magic Number,MissionPlanner.Utilities,utmpos,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\utmpos.cs,GetBearing,The following statement contains a magic number: return (MathHelper.rad2deg * (Math.Atan2(x' y)) + 360) % 360;
Magic Number,MissionPlanner.Utilities,utmpos,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\utmpos.cs,GetBearing,The following statement contains a magic number: return (MathHelper.rad2deg * (Math.Atan2(x' y)) + 360) % 360;
Magic Number,MissionPlanner.Utilities,utmpos,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\utmpos.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = x.GetHashCode();                  hashCode = (hashCode * 397) ^ y.GetHashCode();                  hashCode = (hashCode * 397) ^ zone;                  return hashCode;              }
Magic Number,MissionPlanner.Utilities,utmpos,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\utmpos.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = x.GetHashCode();                  hashCode = (hashCode * 397) ^ y.GetHashCode();                  hashCode = (hashCode * 397) ^ zone;                  return hashCode;              }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,Vario,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vario.cs,mainloop,The following statement contains a magic number: while (run)              {                  float note = climbrate *30 + MidTone;                    try                  {                        if (Math.Abs(climbrate) > 0.3)                      {                          // freq ' duration                          if (climbrate > 0)                          {                              Console.Beep((int)note' 300 - (int)(climbrate * 5));                              System.Threading.Thread.Sleep(20);                          }                          else                          {                              Console.Beep((int)note - 50' 600);                          }                      }                      else                      {                          // sleep when there is no sound required                          System.Threading.Thread.Sleep(100);                      }                    }                  catch { }                }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,VersionDetection,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\VersionDetection.cs,GetVersion,The following statement contains a magic number: if (match.Success)             {                 // start with major.monor                 string verstring = match.Groups[1].Value.ToString() + "." + match.Groups[2].Value.ToString();                  if (!String.IsNullOrEmpty(match.Groups[4].Value))                 {                     verstring += "." + match.Groups[4].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[5].Value))                 {                     // -rc                     verstring += "." + match.Groups[5].Value.ToString();                 }                 if (!String.IsNullOrEmpty(match.Groups[6].Value))                 {                     // dev                     verstring += ".255";                 }                 if (!String.IsNullOrEmpty(match.Groups[7].Value))                 {                     // convert a to 1' b to 2' etc' it will break at j                     verstring += "." + (char) ((match.Groups[6].Value.ToString().ToLower()[0]) - 0x30);                 }                  Version version = new Version(verstring);                  log.Info(version.ToString());                  return version;             }
Magic Number,MissionPlanner.Utilities,vlcrender,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\vlcrender.cs,Start,The following statement contains a magic number: inst = library.m_libvlc_new(4'                  new string[] {":sout-udp-caching=0"' ":udp-caching=0"' ":rtsp-caching=0"' ":tcp-caching=0"});
Magic Number,MissionPlanner.Utilities,vlcrender,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\vlcrender.cs,Start,The following statement contains a magic number: if (forceWidth != 0 && forceHeight != 0)              {                  this.Width = forceWidth;                  this.Height = forceHeight;                    library.libvlc_video_set_format(this.mp' "RV24"' (uint)Width' (uint)Height' (uint)Width * 4);              }              else              {                  vlc_video_format_delegate = Setup;                  vlc_video_cleanup_delegate = Cleanup;                    library.libvlc_video_set_format_callbacks(mp' vlc_video_format_delegate' vlc_video_cleanup_delegate);              }
Magic Number,MissionPlanner.Utilities,vlcrender,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\vlcrender.cs,Setup,The following statement contains a magic number: pitches = width * 4;
Magic Number,MissionPlanner.Utilities,vlcrender,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\vlcrender.cs,Setup,The following statement contains a magic number: if (imageIntPtr == IntPtr.Zero)                  imageIntPtr = Marshal.AllocHGlobal(Width * 4 * Height);
Magic Number,MissionPlanner.Utilities,vlcrender,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\vlcrender.cs,vlc_lock,The following statement contains a magic number: if (imageIntPtr == IntPtr.Zero)                  imageIntPtr = Marshal.AllocHGlobal(Width * 4 * Height);
Magic Number,MissionPlanner.Utilities,vlcrender,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\vlcrender.cs,vlc_picture,The following statement contains a magic number: var image = new Bitmap(Width' Height' 4 * Width' System.Drawing.Imaging.PixelFormat.Format24bppRgb' picture);
Magic Number,MissionPlanner.Utilities,ZeroConf,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\ZeroConf.cs,resolverAsync,The following statement contains a magic number: while (true)              {                  try                  {                      var results = ZeroconfResolver.ResolveAsync("_rtsp._udp.local.");                        if (results != null)                      {                          foreach (var zeroconfHost in results.Result)                          {                              Console.WriteLine("Stream " + zeroconfHost);                              if (!Hosts.Contains(zeroconfHost))                                  Hosts.Add(zeroconfHost);                          }                      }                  }                  catch (Exception ex)                  {                                        }                    Thread.Sleep(4000);              }
Magic Number,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,timer,The following statement contains a magic number: while (true)              {                  try                  {                      System.Threading.Thread.Sleep(1000/25); // 25 fps                        timer1_Tick(this' null);                    }                  catch (ThreadAbortException)                  {                      break;                  }                  catch                  {                    }              }
Magic Number,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,timer,The following statement contains a magic number: while (true)              {                  try                  {                      System.Threading.Thread.Sleep(1000/25); // 25 fps                        timer1_Tick(this' null);                    }                  catch (ThreadAbortException)                  {                      break;                  }                  catch                  {                    }              }
Magic Number,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,GetBitMap,The following statement contains a magic number: try              {                  // get ready to wait for new image                  m_PictureReady.Reset();                  m_bGotOne = false;                    // If the graph hasn't been started' start it.                  Start();                    // Start waiting                  if ( ! m_PictureReady.WaitOne(5000' false) )                  {                      //throw new Exception("Timeout waiting to get picture");                  }                  //Pause(); //- we are effectivly pulling at 15 fps' so no need to pause              }              catch              {                  Marshal.FreeCoTaskMem(m_handle);                  throw;              }
Magic Number,WebCamService,Capture,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Capture.cs,SaveSizeInfo,The following statement contains a magic number: m_stride = m_videoWidth * (videoInfoHeader.BmiHeader.BitCount / 8);
Magic Number,Simplify,Douglas,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fitCurve.cs,DouglasPeuckerReduction,The following statement contains a magic number: if (Points == null || Points.Count < 3)                  return Points;
Magic Number,Simplify,Douglas,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fitCurve.cs,PerpendicularDistance,The following statement contains a magic number: Double area = Math.Abs(.5 * (Point1.X * Point2.Y + Point2.X *              Point.Y + Point.X * Point1.Y - Point2.X * Point1.Y - Point.X *              Point2.Y - Point1.X * Point.Y));
Magic Number,Simplify,Douglas,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fitCurve.cs,PerpendicularDistance,The following statement contains a magic number: Double bottom = Math.Sqrt(Math.Pow(Point1.X - Point2.X' 2) +              Math.Pow(Point1.Y - Point2.Y' 2));
Magic Number,Simplify,Douglas,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fitCurve.cs,PerpendicularDistance,The following statement contains a magic number: Double bottom = Math.Sqrt(Math.Pow(Point1.X - Point2.X' 2) +              Math.Pow(Point1.Y - Point2.Y' 2));
Magic Number,Simplify,Douglas,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fitCurve.cs,PerpendicularDistance,The following statement contains a magic number: Double height = area / bottom * 2;
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,srtm,The following statement contains a magic number: for (int y = -90; y <= 90; y++)              {                  var sy = Math.Abs(y).ToString("00");                    for (int x = -180; x <= 180; x++)                  {                      var sx = Math.Abs(x).ToString("000");                        filenameDictionary[y*1000 + x] = string.Format("{0}{1}{2}{3}{4}"' y >= 0 ? "N" : "S"' sy'                          x >= 0 ? "E" : "W"' sx' ".hgt");                  }              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,srtm,The following statement contains a magic number: for (int y = -90; y <= 90; y++)              {                  var sy = Math.Abs(y).ToString("00");                    for (int x = -180; x <= 180; x++)                  {                      var sx = Math.Abs(x).ToString("000");                        filenameDictionary[y*1000 + x] = string.Format("{0}{1}{2}{3}{4}"' y >= 0 ? "N" : "S"' sy'                          x >= 0 ? "E" : "W"' sx' ".hgt");                  }              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,srtm,The following statement contains a magic number: for (int y = -90; y <= 90; y++)              {                  var sy = Math.Abs(y).ToString("00");                    for (int x = -180; x <= 180; x++)                  {                      var sx = Math.Abs(x).ToString("000");                        filenameDictionary[y*1000 + x] = string.Format("{0}{1}{2}{3}{4}"' y >= 0 ? "N" : "S"' sy'                          x >= 0 ? "E" : "W"' sx' ".hgt");                  }              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,srtm,The following statement contains a magic number: for (int y = -90; y <= 90; y++)              {                  var sy = Math.Abs(y).ToString("00");                    for (int x = -180; x <= 180; x++)                  {                      var sx = Math.Abs(x).ToString("000");                        filenameDictionary[y*1000 + x] = string.Format("{0}{1}{2}{3}{4}"' y >= 0 ? "N" : "S"' sy'                          x >= 0 ? "E" : "W"' sx' ".hgt");                  }              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,srtm,The following statement contains a magic number: for (int y = -90; y <= 90; y++)              {                  var sy = Math.Abs(y).ToString("00");                    for (int x = -180; x <= 180; x++)                  {                      var sx = Math.Abs(x).ToString("000");                        filenameDictionary[y*1000 + x] = string.Format("{0}{1}{2}{3}{4}"' y >= 0 ? "N" : "S"' sy'                          x >= 0 ? "E" : "W"' sx' ".hgt");                  }              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,GetFilename,The following statement contains a magic number: int id = y*1000 + x;
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,GetFilename,The following statement contains a magic number: if (filenameDictionary.ContainsKey(id))              {                  string filename = filenameDictionary[y*1000 + x];                    return filename;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getAltitude,The following statement contains a magic number: try              {                    if (cache.ContainsKey(filename) || File.Exists(datadirectory + Path.DirectorySeparatorChar + filename))                  {                      // srtm hgt files                        int size = -1;                        // add to cache                      if (!cache.ContainsKey(filename))                      {                          using (                              FileStream fs = new FileStream(datadirectory + Path.DirectorySeparatorChar + filename'                                  FileMode.Open' FileAccess.Read' FileShare.Read))                          {                                if (fs.Length == (1201*1201*2))                              {                                  size = 1201;                              }                              else if (fs.Length == (3601*3601*2))                              {                                  size = 3601;                              }                              else                                  return srtm.altresponce.Invalid;                                byte[] altbytes = new byte[2];                              short['] altdata = new short[size' size];                                  int altlat = 0;                              int altlng = 0;                                while (fs.Read(altbytes' 0' 2) != 0)                              {                                  altdata[altlat' altlng] = (short) ((altbytes[0] << 8) + altbytes[1]);                                    altlat++;                                  if (altlat >= size)                                  {                                      altlng++;                                      altlat = 0;                                  }                              }                                cache[filename] = altdata;                          }                      }                        if (cache[filename].Length == (1201*1201))                      {                          size = 1201;                      }                      else if (cache[filename].Length == (3601*3601))                      {                          size = 3601;                      }                      else                          return srtm.altresponce.Invalid;                        int x = (lng < 0) ? (int) (lng - 1) : (int) lng;                      int y = (lat < 0) ? (int) (lat - 1) : (int) lat;                        // remove the base lat long                      lat -= y;                      lng -= x;                        // values should be 0-1199' 1200 is for interpolation                      double xf = lng*(size - 2);                      double yf = lat*(size - 2);                        int x_int = (int) xf;                      double x_frac = xf - x_int;                        int y_int = (int) yf;                      double y_frac = yf - y_int;                        y_int = (size - 2) - y_int;                        double alt00 = GetAlt(filename' x_int' y_int);                      double alt10 = GetAlt(filename' x_int + 1' y_int);                      double alt01 = GetAlt(filename' x_int' y_int + 1);                      double alt11 = GetAlt(filename' x_int + 1' y_int + 1);                        double v1 = avg(alt00' alt10' x_frac);                      double v2 = avg(alt01' alt11' x_frac);                      double v = avg(v1' v2' -y_frac);                        if (v < -1000)                          return altresponce.Invalid;                        return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = v'                          altsource = "SRTM"                      };                  }                    string filename2 = "srtm_" + Math.Round((lng + 2.5 + 180)/5' 0).ToString("00") + "_" +                                     Math.Round((60 - lat + 2.5)/5' 0).ToString("00") + ".asc";                    if (File.Exists(datadirectory + Path.DirectorySeparatorChar + filename2))                  {                      using (                          StreamReader sr =                              new StreamReader(readFile(datadirectory + Path.DirectorySeparatorChar + filename2)))                      {                            int nox = 0;                          int noy = 0;                          float left = 0;                          float top = 0;                          int nodata = -9999;                          float cellsize = 0;                            int rowcounter = 0;                            float wantrow = 0;                          float wantcol = 0;                              while (!sr.EndOfStream)                          {                              string line = sr.ReadLine();                                if (line.StartsWith("ncols"))                              {                                  nox = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("nrows"))                              {                                  noy = int.Parse(line.Substring(line.IndexOf(' ')));                                    //hgtdata = new int[nox * noy];                              }                              else if (line.StartsWith("xllcorner"))                              {                                  left = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("yllcorner"))                              {                                  top = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("cellsize"))                              {                                  cellsize = float.Parse(line.Substring(line.IndexOf(' ')));                              }                              else if (line.StartsWith("NODATA_value"))                              {                                  nodata = int.Parse(line.Substring(line.IndexOf(' ')));                              }                              else                              {                                  string[] data = line.Split(new char[] {' '});                                    if (data.Length == (nox + 1))                                  {                                      wantcol = (float) ((lng - Math.Round(left' 0)));                                        wantrow = (float) ((lat - Math.Round(top' 0)));                                        wantrow = (int) (wantrow/cellsize);                                      wantcol = (int) (wantcol/cellsize);                                        wantrow = noy - wantrow;                                        if (rowcounter == wantrow)                                      {                                          Console.WriteLine("{0} {1} {2} {3} ans {4} x {5}"' lng' lat' left' top'                                              data[(int) wantcol]' (nox + wantcol*cellsize));                                            return new altresponce()                                          {                                              currenttype = tiletype.valid'                                              alt = int.Parse(data[(int) wantcol])                                          };                                      }                                        rowcounter++;                                  }                              }                          }                      }                      return new altresponce()                      {                          currenttype = tiletype.valid'                          alt = alt'                          altsource = "ASCII"                      };                  }                  else // get something                  {                      if (filename.Contains("S00W000") || filename.Contains("S00W001") ||                          filename.Contains("S01W000") || filename.Contains("S01W001"))                      {                          return altresponce.Ocean;                      }                        if (oceantile.Contains(filename))                          return altresponce.Ocean;                        if (zoom >= 7)                      {                          if (!Directory.Exists(datadirectory))                              Directory.CreateDirectory(datadirectory);                            if (requestThread == null)                          {                              log.Info("Getting " + filename);                              lock (objlock)                              {                                  queue.Add(filename);                              }                                requestThread = new Thread(requestRunner);                              requestThread.IsBackground = true;                              requestThread.Name = "SRTM request runner";                              requestThread.Start();                          }                          else                          {                              lock (objlock)                              {                                  if (!queue.Contains(filename))                                  {                                      log.Info("Getting " + filename);                                      queue.Add(filename);                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  log.Error(ex);                  return altresponce.Invalid;              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,requestRunner,The following statement contains a magic number: while (requestThreadrun)              {                  try                  {                      string item = "";                      lock (objlock)                      {                          if (queue.Count > 0)                          {                              item = queue[0];                          }                      }                        if (item != "")                      {                          log.Info(item);                          get3secfile(item);                          lock (objlock)                          {                              queue.Remove(item);                          }                      }                  }                  catch (Exception ex)                  {                      log.Error(ex);                  }                  Thread.Sleep(1000);              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,get3secfile,The following statement contains a magic number: if (list.Count >= 12 && checkednames > 14000 && !oceantile.Contains((string) name))              {                  // we must be an ocean tile - no matchs                  oceantile.Add((string) name);              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,get3secfile,The following statement contains a magic number: if (list.Count >= 12 && checkednames > 14000 && !oceantile.Contains((string) name))              {                  // we must be an ocean tile - no matchs                  oceantile.Add((string) name);              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,gethgt,The following statement contains a magic number: try              {                  WebRequest req = HttpWebRequest.Create(url);                    log.Info("Get " + url);                    using (WebResponse res = req.GetResponse())                  using (Stream resstream = res.GetResponseStream())                  using (                      BinaryWriter bw =                          new BinaryWriter(File.Create(datadirectory + Path.DirectorySeparatorChar + filename + ".zip")))                  {                      byte[] buf1 = new byte[1024];                        int size = 0;                        while (resstream.CanRead)                      {                            int len = resstream.Read(buf1' 0' 1024);                          if (len == 0)                              break;                          bw.Write(buf1' 0' len);                            size += len;                      }                        bw.Close();                        log.Info("Got " + url + " " + size);                        FastZip fzip = new FastZip();                        fzip.ExtractZip(datadirectory + Path.DirectorySeparatorChar + filename + ".zip"' datadirectory' "");                  }              }              catch (Exception ex)              {                  log.Error(ex);              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,gethgt,The following statement contains a magic number: try              {                  WebRequest req = HttpWebRequest.Create(url);                    log.Info("Get " + url);                    using (WebResponse res = req.GetResponse())                  using (Stream resstream = res.GetResponseStream())                  using (                      BinaryWriter bw =                          new BinaryWriter(File.Create(datadirectory + Path.DirectorySeparatorChar + filename + ".zip")))                  {                      byte[] buf1 = new byte[1024];                        int size = 0;                        while (resstream.CanRead)                      {                            int len = resstream.Read(buf1' 0' 1024);                          if (len == 0)                              break;                          bw.Write(buf1' 0' len);                            size += len;                      }                        bw.Close();                        log.Info("Got " + url + " " + size);                        FastZip fzip = new FastZip();                        fzip.ExtractZip(datadirectory + Path.DirectorySeparatorChar + filename + ".zip"' datadirectory' "");                  }              }              catch (Exception ex)              {                  log.Error(ex);              }
Magic Number,MissionPlanner,srtm,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\srtm.cs,getListing,The following statement contains a magic number: if (File.Exists(datadirectory + Path.DirectorySeparatorChar + name))              {                  var fi = new FileInfo(datadirectory + Path.DirectorySeparatorChar + name);                  if (fi.Length > 0 && fi.LastWriteTime.AddDays(7) > DateTime.Now)                  {                      using (StreamReader sr = new StreamReader(datadirectory + Path.DirectorySeparatorChar + name))                      {                          while (!sr.EndOfStream)                          {                              list.Add(sr.ReadLine());                          }                            sr.Close();                      }                      return list;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups[2].Length == 3)                  return Convert.ToChar(Convert.ToByte(m.Groups[2].Value' 8)).ToString();              else              {                  // convert all other special meta characters                  //TODO: \xhhh hex and possible dec !!                  switch (m.Groups[2].Value)                  {                      case "0":           // null                          return "\0";                      case "a":           // alert (beep)                          return "\a";                      case "b":           // BS                          return "\b";                      case "f":           // FF                          return "\f";                      case "v":           // vertical tab                          return "\v";                      case "r":           // CR                          return "\r";                      case "n":           // LF                          return "\n";                      case "t":           // Tab                          return "\t";                      default:                          // if neither an octal quote nor a special meta character                          // so just remove the backslash                          return m.Groups[2].Value;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups[2].Length == 3)                  return Convert.ToChar(Convert.ToByte(m.Groups[2].Value' 8)).ToString();              else              {                  // convert all other special meta characters                  //TODO: \xhhh hex and possible dec !!                  switch (m.Groups[2].Value)                  {                      case "0":           // null                          return "\0";                      case "a":           // alert (beep)                          return "\a";                      case "b":           // BS                          return "\b";                      case "f":           // FF                          return "\f";                      case "v":           // vertical tab                          return "\v";                      case "r":           // CR                          return "\r";                      case "n":           // LF                          return "\n";                      case "t":           // Tab                          return "\t";                      default:                          // if neither an octal quote nor a special meta character                          // so just remove the backslash                          return m.Groups[2].Value;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups[2].Length == 3)                  return Convert.ToChar(Convert.ToByte(m.Groups[2].Value' 8)).ToString();              else              {                  // convert all other special meta characters                  //TODO: \xhhh hex and possible dec !!                  switch (m.Groups[2].Value)                  {                      case "0":           // null                          return "\0";                      case "a":           // alert (beep)                          return "\a";                      case "b":           // BS                          return "\b";                      case "f":           // FF                          return "\f";                      case "v":           // vertical tab                          return "\v";                      case "r":           // CR                          return "\r";                      case "n":           // LF                          return "\n";                      case "t":           // Tab                          return "\t";                      default:                          // if neither an octal quote nor a special meta character                          // so just remove the backslash                          return m.Groups[2].Value;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups[2].Length == 3)                  return Convert.ToChar(Convert.ToByte(m.Groups[2].Value' 8)).ToString();              else              {                  // convert all other special meta characters                  //TODO: \xhhh hex and possible dec !!                  switch (m.Groups[2].Value)                  {                      case "0":           // null                          return "\0";                      case "a":           // alert (beep)                          return "\a";                      case "b":           // BS                          return "\b";                      case "f":           // FF                          return "\f";                      case "v":           // vertical tab                          return "\v";                      case "r":           // CR                          return "\r";                      case "n":           // LF                          return "\n";                      case "t":           // Tab                          return "\t";                      default:                          // if neither an octal quote nor a special meta character                          // so just remove the backslash                          return m.Groups[2].Value;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups[2].Length == 3)                  return Convert.ToChar(Convert.ToByte(m.Groups[2].Value' 8)).ToString();              else              {                  // convert all other special meta characters                  //TODO: \xhhh hex and possible dec !!                  switch (m.Groups[2].Value)                  {                      case "0":           // null                          return "\0";                      case "a":           // alert (beep)                          return "\a";                      case "b":           // BS                          return "\b";                      case "f":           // FF                          return "\f";                      case "v":           // vertical tab                          return "\v";                      case "r":           // CR                          return "\r";                      case "n":           // LF                          return "\n";                      case "t":           // Tab                          return "\t";                      default:                          // if neither an octal quote nor a special meta character                          // so just remove the backslash                          return m.Groups[2].Value;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups[2].Length == 3)                  return Convert.ToChar(Convert.ToByte(m.Groups[2].Value' 8)).ToString();              else              {                  // convert all other special meta characters                  //TODO: \xhhh hex and possible dec !!                  switch (m.Groups[2].Value)                  {                      case "0":           // null                          return "\0";                      case "a":           // alert (beep)                          return "\a";                      case "b":           // BS                          return "\b";                      case "f":           // FF                          return "\f";                      case "v":           // vertical tab                          return "\v";                      case "r":           // CR                          return "\r";                      case "n":           // LF                          return "\n";                      case "t":           // Tab                          return "\t";                      default:                          // if neither an octal quote nor a special meta character                          // so just remove the backslash                          return m.Groups[2].Value;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success)              {                  #region parameter index                  paramIx = defaultParamIx;                  if (m.Groups[1] != null && m.Groups[1].Value.Length > 0)                  {                      string val = m.Groups[1].Value.Substring(0' m.Groups[1].Value.Length - 1);                      paramIx = Convert.ToInt32(val) - 1;                  };                  #endregion                    #region format flags                  // extract format flags                  flagAlternate = false;                  flagLeft2Right = false;                  flagPositiveSign = false;                  flagPositiveSpace = false;                  flagZeroPadding = false;                  flagGroupThousands = false;                  if (m.Groups[2] != null && m.Groups[2].Value.Length > 0)                  {                      string flags = m.Groups[2].Value;                        flagAlternate = (flags.IndexOf('#') >= 0);                      flagLeft2Right = (flags.IndexOf('-') >= 0);                      flagPositiveSign = (flags.IndexOf('+') >= 0);                      flagPositiveSpace = (flags.IndexOf(' ') >= 0);                      flagGroupThousands = (flags.IndexOf('\'') >= 0);                        // positive + indicator overrides a                      // positive space character                      if (flagPositiveSign && flagPositiveSpace)                          flagPositiveSpace = false;                  }                  #endregion                    #region field length                  // extract field length and                   // pading character                  paddingCharacter = ' ';                  fieldLength = int.MinValue;                  if (m.Groups[3] != null && m.Groups[3].Value.Length > 0)                  {                      fieldLength = Convert.ToInt32(m.Groups[3].Value);                      flagZeroPadding = (m.Groups[3].Value[0] == '0');                  }                  #endregion                    if (flagZeroPadding)                      paddingCharacter = '0';                    // left2right allignment overrides zero padding                  if (flagLeft2Right && flagZeroPadding)                  {                      flagZeroPadding = false;                      paddingCharacter = ' ';                  }                    #region field precision                  // extract field precision                  fieldPrecision = int.MinValue;                  if (m.Groups[4] != null && m.Groups[4].Value.Length > 0)                      fieldPrecision = Convert.ToInt32(m.Groups[4].Value);                  #endregion                    #region short / long indicator                  // extract short / long indicator                  shortLongIndicator = Char.MinValue;                  if (m.Groups[5] != null && m.Groups[5].Value.Length > 0)                      shortLongIndicator = m.Groups[5].Value[0];                  #endregion                    #region format specifier                  // extract format                  formatSpecifier = Char.MinValue;                  if (m.Groups[6] != null && m.Groups[6].Value.Length > 0)                      formatSpecifier = m.Groups[6].Value[0];                  #endregion                    // default precision is 6 digits if none is specified except                  if (fieldPrecision == int.MinValue &&                      formatSpecifier != 's' &&                      formatSpecifier != 'c' &&                      Char.ToUpper(formatSpecifier) != 'X' &&                      formatSpecifier != 'o')                      fieldPrecision = 6;                    #region get next value parameter                  // get next value parameter and convert value parameter depending on short / long indicator                  if (Parameters == null || paramIx >= Parameters.Length)                      o = null;                  else                  {                      o = Parameters[paramIx];                        if (shortLongIndicator == 'h')                      {                          if (o is int)                              o = (short)((int)o);                          else if (o is long)                              o = (short)((long)o);                          else if (o is uint)                              o = (ushort)((uint)o);                          else if (o is ulong)                              o = (ushort)((ulong)o);                      }                      else if (shortLongIndicator == 'l')                      {                          if (o is short)                              o = (long)((short)o);                          else if (o is int)                              o = (long)((int)o);                          else if (o is ushort)                              o = (ulong)((ushort)o);                          else if (o is uint)                              o = (ulong)((uint)o);                      }                  }                  #endregion                    // convert value parameters to a string depending on the formatSpecifier                  w = String.Empty;                  switch (formatSpecifier)                  {                          #region % - character                      case '%':   // % character                          w = "%";                          break;                          #endregion                          #region d - integer                      case 'd':   // integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o == null ? String.Empty : o);                          defaultParamIx++;                          break;                          #endregion                          #region i - integer                      case 'i':   // integer                          goto case 'd';                          #endregion                          #region o - octal integer                      case 'o':   // octal integer - no leading zero                          w = FormatOct("o"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region x - hex integer                      case 'x':   // hex integer - no leading zero                          w = FormatHex("x"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region X - hex integer                      case 'X':   // same as x but with capital hex characters                          w = FormatHex("X"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region u - unsigned integer                      case 'u':   // unsigned integer                          w = FormatNumber((flagGroupThousands ? "n" : "d")' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              false' false'                              paddingCharacter' ToUnsigned(o));                          defaultParamIx++;                          break;                          #endregion                          #region c - character                      case 'c':   // character                          if (IsNumericType(o))                              w = Convert.ToChar(o).ToString();                          else if (o is char)                              w = ((char)o).ToString();                          else if (o is string && ((string)o).Length > 0)                              w = ((string)o)[0].ToString();                          defaultParamIx++;                          break;                          #endregion                          #region s - string                      case 's':   // string                          string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString() : String.Empty) + ":s}";                          w = o.ToString();                          if (fieldPrecision >= 0)                              w = w.Substring(0' fieldPrecision);                            if (fieldLength != int.MinValue)                              if (flagLeft2Right)                                  w = w.PadRight(fieldLength' paddingCharacter);                              else                                  w = w.PadLeft(fieldLength' paddingCharacter);                          defaultParamIx++;                          break;                          #endregion                          #region f - double number                      case 'f':   // double                          w = FormatNumber((flagGroupThousands ? "n" : "f")' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region e - exponent number                      case 'e':   // double / exponent                          w = FormatNumber("e"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region E - exponent number                      case 'E':   // double / exponent                          w = FormatNumber("E"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region g - general number                      case 'g':   // double / exponent                          w = FormatNumber("g"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region G - general number                      case 'G':   // double / exponent                          w = FormatNumber("G"' flagAlternate'                              fieldLength' fieldPrecision' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' o);                          defaultParamIx++;                          break;                          #endregion                          #region p - pointer                      case 'p':   // pointer                          if (o is IntPtr)                              w = "0x" + ((IntPtr)o).ToString("x");                          defaultParamIx++;                          break;                          #endregion                          #region n - number of processed chars so far                      case 'n':   // number of characters so far                          w = FormatNumber("d"' flagAlternate'                              fieldLength' int.MinValue' flagLeft2Right'                              flagPositiveSign' flagPositiveSpace'                              paddingCharacter' m.Index);                          break;                          #endregion                      default:                          w = String.Empty;                          defaultParamIx++;                          break;                  }                    // replace format parameter with parameter value                  // and start searching for the next format parameter                  // AFTER the position of the current inserted value                  // to prohibit recursive matches if the value also                  // includes a format specifier                  f.Remove(m.Index' m.Length);                  f.Insert(m.Index' w);                  m = r.Match(f.ToString()' m.Index + w.Length);              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,FormatOct,The following statement contains a magic number: if (IsNumericType(Value))              {                  w = Convert.ToString(UnboxToLong(Value' true)' 8);                    if (Left2Right || Padding == ' ')                  {                      if (Alternate && w != "0")                          w = "0" + w;                      w = String.Format(lengthFormat' w);                  }                  else                  {                      if (FieldLength != int.MinValue)                          w = w.PadLeft(FieldLength - (Alternate && w != "0" ? 1 : 0)' Padding);                      if (Alternate && w != "0")                          w = "0" + w;                  }              }
Magic Number,AT.MIN,Tools,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Tools.cs,FormatHex,The following statement contains a magic number: if (IsNumericType(Value))              {                  w = String.Format(numberFormat' Value);                    if (Left2Right || Padding == ' ')                  {                      if (Alternate)                          w = (NativeFormat == "x" ? "0x" : "0X") + w;                      w = String.Format(lengthFormat' w);                  }                  else                  {                      if (FieldLength != int.MinValue)                          w = w.PadLeft(FieldLength - (Alternate ? 2 : 0)' Padding);                      if (Alternate)                          w = (NativeFormat == "x" ? "0x" : "0X") + w;                  }              }
Missing Default,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following switch statement is missing a default case: switch (balance)              {                  case 3:                      /* All coefficients are positive' thus return the first triangle. */                      return 0;                  case -3:                      /* All coefficients are negative' which means that the coefficients for                       * -w are positive' thus return the first triangle's opposite. */                      return 10;                  case 2:                      /* Two coefficients are positive and one is zero' thus v crosses one of                       * the edges of the first triangle. */                      return inclusive ? 0 : -1;                  case -2:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      return inclusive ? 10 : -1;                  case 1:                      /* There are two possible cases when balance is 1:                       *                       * 1) Two coefficients are zero' which means v crosses one of the                       * vertices of the first triangle.                       *                       * 2) Two coefficients are positive and one is negative. Let a and b be                       * vertices with positive coefficients and c the one with the negative                       * coefficient. That means that v crosses the triangle formed by a' b                       * and -c. The vector -c happens to be the 3-th vertex' with respect to                       * (a' b)' of the first triangle's neighbor umbrella with respect to a                       * and b. Thus' v crosses one of the components of that umbrella. */                      if (zero_count == 2)                      {                          return inclusive ? 0 : -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;                  case -1:                      /* Analogous to the previous case' but for the opposite of the first                       * triangle. */                      if (zero_count == 2)                      {                          return inclusive ? 10 : -1;                      }                        if (!is_zero(w.x) && w.x > 0)                      {                          umbrella = 4;                      }                      else if (!is_zero(w.y) && w.y > 0)                      {                          umbrella = 5;                      }                      else                      {                          umbrella = 3;                      }                      w = -w;                        break;                  case 0:                      /* There are two possible cases when balance is 1:                       *                       * 1) The vector v is the null vector' which doesn't cross any section.                       *                       * 2) One coefficient is zero' another is positive and yet another is                       * negative. Let a' b and c be the respective vertices for those                       * coefficients' then the statements in case (2) for when balance is 1                       * are also valid here.                       */                      if (zero_count == 3)                      {                          return -1;                      }                        if (!is_zero(w.x) && w.x < 0)                      {                          umbrella = 1;                      }                      else if (!is_zero(w.y) && w.y < 0)                      {                          umbrella = 2;                      }                      else                      {                          umbrella = 0;                      }                        break;              }
Missing Default,MissionPlanner.Utilities,AP_GeodesicGrid,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\AP_GeodesicGrid.cs,_triangle_index,The following switch statement is missing a default case: switch (umbrella % 3)              {                  case 0:                      w.z = -w.z;                      break;                  case 1:                      w = new Vector3(w.y' w.z' -w.x);                      break;                  case 2:                      w = new Vector3(w.z' w.x' -w.y);                      break;              }
Missing Default,MissionPlanner.Utilities,fontgen,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\fontgen.cs,dowork,The following switch statement is missing a default case: switch (letter)                      {                          case '0':                              outlet = "ze";                              break;                          case '1':                              outlet = "on";                              break;                          case '2':                              outlet = "tw";                              break;                          case '3':                              outlet = "th";                              break;                          case '4':                              outlet = "fo";                              break;                          case '5':                              outlet = "fi";                              break;                          case '6':                              outlet = "si";                              break;                          case '7':                              outlet = "se";                              break;                          case '8':                              outlet = "ei";                              break;                          case '9':                              outlet = "ni";                              break;                      }
Missing Default,MissionPlanner.Utilities,L10NU,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\L10NU.cs,L10NU,The following switch statement is missing a default case: switch (lang)              {                  case "zh-CN":                  case "zh-Hans":                      lines = Regex.Split(Resources.strings_zhHans' "\r\n|\r|\n");                      break;              }
Missing Default,MissionPlanner.Utilities,Vector3<T>,C:\repos\diydrones_MissionPlanner\ExtLibs\Utilities\Vector3.cs,rotate,The following switch statement is missing a default case: switch (rotation)              {                  case Rotation.ROTATION_NONE:                  case Rotation.ROTATION_MAX:                      return this;                  case Rotation.ROTATION_YAW_45:                  {                      tmp = HALF_SQRT_2*((dynamic)x - y);                      y = HALF_SQRT_2*((dynamic)x + y);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_YAW_90:                  {                      tmp = x;                      x = -(dynamic)y;                      y = tmp;                      return this;                  }                  case Rotation.ROTATION_YAW_135:                  {                      tmp = -(dynamic)HALF_SQRT_2 *((dynamic)x + y);                      y = HALF_SQRT_2*((dynamic)x - y);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_YAW_180:                      x = -(dynamic)x;                      y = -(dynamic)y;                      return this;                  case Rotation.ROTATION_YAW_225:                  {                      tmp = HALF_SQRT_2*((dynamic)y - x);                      y = -(dynamic)HALF_SQRT_2 *((dynamic)x + y);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_YAW_270:                  {                      tmp = x;                      x = y;                      y = -(dynamic)tmp;                      return this;                  }                  case Rotation.ROTATION_YAW_315:                  {                      tmp = HALF_SQRT_2*((dynamic)x + y);                      y = HALF_SQRT_2*((dynamic)y - x);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_180:                  {                      y = -(dynamic)y;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_ROLL_180_YAW_45:                  {                      tmp = HALF_SQRT_2*((dynamic)x + y);                      y = HALF_SQRT_2*((dynamic)x - y);                      x = tmp;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_ROLL_180_YAW_90:                  {                      tmp = x;                      x = y;                      y = tmp;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_ROLL_180_YAW_135:                  {                      tmp = HALF_SQRT_2*((dynamic)y - x);                      y = HALF_SQRT_2*((dynamic)y + x);                      x = tmp;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_PITCH_180:                  {                      x = -(dynamic)x;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_ROLL_180_YAW_225:                  {                      tmp = -(dynamic)HALF_SQRT_2 *((dynamic)x + y);                      y = HALF_SQRT_2*((dynamic)y - x);                      x = tmp;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_ROLL_180_YAW_270:                  {                      tmp = x;                      x = -(dynamic)y;                      y = -(dynamic)tmp;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_ROLL_180_YAW_315:                  {                      tmp = HALF_SQRT_2*((dynamic)x - y);                      y = -(dynamic)HALF_SQRT_2 *((dynamic)x + y);                      x = tmp;                      z = -(dynamic)z;                      return this;                  }                  case Rotation.ROTATION_ROLL_90:                  {                      tmp = z;                      z = y;                      y = -(dynamic)tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_90_YAW_45:                  {                      tmp = z;                      z = y;                      y = -(dynamic)tmp;                      tmp = HALF_SQRT_2*((dynamic)x - y);                      y = HALF_SQRT_2*((dynamic)x + y);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_90_YAW_90:                  {                      tmp = z;                      z = y;                      y = -(dynamic)tmp;                      tmp = x;                      x = -(dynamic)y;                      y = tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_90_YAW_135:                  {                      tmp = z;                      z = y;                      y = -(dynamic)tmp;                      tmp = -(dynamic)HALF_SQRT_2 *((dynamic)x + y);                      y = HALF_SQRT_2*((dynamic)x - y);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_270:                  {                      tmp = z;                      z = -(dynamic)y;                      y = tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_270_YAW_45:                  {                      tmp = z;                      z = -(dynamic)y;                      y = tmp;                      tmp = HALF_SQRT_2*((dynamic)x - y);                      y = HALF_SQRT_2*((dynamic)x + y);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_270_YAW_90:                  {                      tmp = z;                      z = -(dynamic)y;                      y = tmp;                      tmp = x;                      x = -(dynamic)y;                      y = tmp;                      return this;                  }                  case Rotation.ROTATION_ROLL_270_YAW_135:                  {                      tmp = z;                      z = -(dynamic)y;                      y = tmp;                      tmp = -(dynamic)HALF_SQRT_2 *((dynamic)x + y);                      y = HALF_SQRT_2*((dynamic)x - y);                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_PITCH_90:                  {                      tmp = z;                      z = -(dynamic)x;                      x = tmp;                      return this;                  }                  case Rotation.ROTATION_PITCH_270:                  {                      tmp = z;                      z = x;                      x = -(dynamic)tmp;                      return this;                  }              }
