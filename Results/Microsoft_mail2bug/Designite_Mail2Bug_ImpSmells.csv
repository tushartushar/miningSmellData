Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mail2Bug,MainApp,C:\repos\Microsoft_mail2bug\Mail2Bug\Main.cs,Main,Cyclomatic complexity of the method is 10
Long Parameter List,Mail2Bug.Email,IMailSender,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\IMailSender.cs,SendMessage,The method has 5 parameters. Parameters: to' cc' bcc' subject' body
Long Identifier,Mail2Bug.Email.EWS,EWSExtendedProperty,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\EWS\EWSExtendedProperty.cs,,The length of the parameter PidTagConversationIdIdentifier is 30.
Long Statement,Mail2Bug,Config,C:\repos\Microsoft_mail2bug\Mail2Bug\Config.cs,GetEncryptionScope,The length of the statement  "            return useMachineScope ? System.Security.Cryptography.DataProtectionScope.LocalMachine : System.Security.Cryptography.DataProtectionScope.CurrentUser; " is 150.
Long Statement,Mail2Bug.Email,MailboxManagerFactory,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\MailboxManagerFactory.cs,CreateMailboxManager,The length of the statement  "            string password = credentialsHelper.GetPassword(emailSettings.EWSPasswordFile' emailSettings.EncryptionScope' emailSettings.EWSKeyVaultSecret); " is 143.
Long Statement,Mail2Bug.Email.EWS,EWSMailFolder,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\EWS\EWSMailFolder.cs,GetMessages,The length of the statement  "                    .Select(item => new EWSIncomingMessage((EmailMessage) item' _useConversationGuidOnly)); // And wrap them with EWSIncomingMessage " is 128.
Long Statement,Mail2Bug.MessageProcessingStrategies,OverridesExtractor,C:\repos\Microsoft_mail2bug\Mail2Bug\MessageProcessingStrategies\OverridesExtractor.cs,ResolveMnemonic,The length of the statement  "            var mnemonicEntries = _config.WorkItemSettings.Mnemonics.FindAll(x => x.Mnemonic.Equals(mnemonic' StringComparison.InvariantCultureIgnoreCase)); " is 144.
Long Statement,Mail2Bug.MessageProcessingStrategies,OverridesExtractor,C:\repos\Microsoft_mail2bug\Mail2Bug\MessageProcessingStrategies\OverridesExtractor.cs,ResolveMnemonic,The length of the statement  "            mnemonicEntries.ForEach(entry => Logger.InfoFormat("Mnemonic {0} resolved to {1}={2}"' mnemonic' entry.Field' entry.Value)); " is 124.
Long Statement,Mail2Bug.WorkItemManagement,MessageToWorkItemMapper,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\MessageToWorkItemMapper.cs,GetWorkItemIdFromText,The length of the statement  "                    "Couldn't find \"id\" group when matching title. AppendOnlyEmailTitleRegex must contain a capturing group called 'id'" + " is 120.
Long Statement,Mail2Bug.WorkItemManagement,TFSWorkItemManager,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemManager.cs,GetOAuthCredentials,The length of the statement  "                var result = authContext.AcquireToken(_config.TfsServerConfig.OAuthResourceId' _config.TfsServerConfig.OAuthClientId' userCredential); " is 134.
Long Statement,Mail2Bug.WorkItemManagement,TFSWorkItemManager,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemManager.cs,GetServiceIdentityPatCredentials,The length of the statement  "            if (string.IsNullOrWhiteSpace(_config.TfsServerConfig.ServiceIdentityPatFile) && _config.TfsServerConfig.ServiceIdentityPatKeyVaultSecret == null) " is 146.
Long Statement,Mail2Bug.WorkItemManagement,TFSWorkItemManager,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemManager.cs,GetPatFromConfig,The length of the statement  "            if (string.IsNullOrWhiteSpace(_config.TfsServerConfig.ServiceIdentityPatFile) && _config.TfsServerConfig.ServiceIdentityPatKeyVaultSecret == null) " is 146.
Long Statement,Mail2Bug.WorkItemManagement,TFSWorkItemManager,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemManager.cs,CreateWorkItem,The length of the statement  "            // Workaround for TFS issue - if you change the "Assigned To" field' and then you change the "Activated by" field' the "Assigned To" field reverts " is 146.
Long Statement,Mail2Bug.WorkItemManagement,TFSWorkItemManager,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemManager.cs,CreateWorkItem,The length of the statement  "            // to its original setting. To prevent that' we reapply the "Assigned To" field in case it's in the list of values to change. " is 125.
Long Statement,Mail2Bug.WorkItemManagement,TFSWorkItemManager,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemManager.cs,CacheWorkItem,The length of the statement  "            // ID and conversation ID' because if the work item already exists' the conversation ID will be different (probably shorter " is 123.
Complex Conditional,Mail2Bug.WorkItemManagement,TFSWorkItemManager,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemManager.cs,GetOAuthCredentials,The conditional expression  "usernameAndPassword == null ||                       string.IsNullOrEmpty(_config.TfsServerConfig.OAuthClientId) ||                      string.IsNullOrEmpty(_config.TfsServerConfig.OAuthContext) ||                      string.IsNullOrEmpty(_config.TfsServerConfig.OAuthResourceId)"  is complex.
Empty Catch Block,Mail2Bug.WorkItemManagement,TFSWorkItemFields,C:\repos\Microsoft_mail2bug\Mail2Bug\WorkItemManagement\TFSWorkItemFields.cs,GetFieldValue,The method has an empty catch block.
Magic Number,Mail2Bug,MainApp,C:\repos\Microsoft_mail2bug\Mail2Bug\Main.cs,Main,The following statement contains a magic number: try              {                  string configPath = ConfigurationManager.AppSettings["ConfigPath"];                  string configsFilePattern = ConfigurationManager.AppSettings["ConfigFilePattern"];                    var configFiles = Directory.GetFiles(configPath' configsFilePattern);                  if (configFiles.Length == 0)                  {                      Logger.ErrorFormat("No configs found (path='{0}'' pattern='{1}')"' configPath' configsFilePattern);                      throw new ConfigurationErrorsException("No configs found");                  }                    var configs = new List<Config>();                  var configTimeStamps = new Dictionary<string' DateTime>();                    foreach (var configFile in configFiles)                  {                      // Save the timestamp for the config so that we can detect if it changed later on                      configTimeStamps[configFile] = File.GetLastWriteTime(configFile);                        // Load the config and add it to the list.                      // If loading failed' print error message and continue                      var cfg = TryLoadConfig(configFile);                      if (cfg == null)                      {                          Logger.ErrorFormat("Couldn't load config file {0}. Skipping that config file."' configFile);                          continue;                      }                        configs.Add(cfg);                  }                    if (configs.Count == 0)                  {                      throw new ConfigurationErrorsException("None of the configs were valid");                  }                    InitInstances(configs);                    var iterations = ReadIntFromAppConfig("Iterations"' 200);                  var interval = TimeSpan.FromSeconds(ReadIntFromAppConfig("IntervalInSeconds"' 1));                  var useThreads = ReadBoolFromAppConfig("UseThreads"' false);                    for (var i = 0; i < iterations; ++i )                  {                      Logger.InfoFormat("{0} Iteration {1} {0}"' new string('-'' 15)' i);                      RunInstances(useThreads);                        if (IsConfigsChanged(configTimeStamps))                      {                          break;                      }                        Thread.CurrentThread.Join(interval); // Sleep between iterations                  }                    foreach (var instance in _instances)                  {                      var disposable = instance as IDisposable;                      if (disposable != null)                      {                          disposable.Dispose();                      }                  }              }              catch (Exception exception)              {                  Logger.ErrorFormat("Exception caught in main - aborting. {0}"' exception);              }
Magic Number,Mail2Bug,MainApp,C:\repos\Microsoft_mail2bug\Mail2Bug\Main.cs,Main,The following statement contains a magic number: try              {                  string configPath = ConfigurationManager.AppSettings["ConfigPath"];                  string configsFilePattern = ConfigurationManager.AppSettings["ConfigFilePattern"];                    var configFiles = Directory.GetFiles(configPath' configsFilePattern);                  if (configFiles.Length == 0)                  {                      Logger.ErrorFormat("No configs found (path='{0}'' pattern='{1}')"' configPath' configsFilePattern);                      throw new ConfigurationErrorsException("No configs found");                  }                    var configs = new List<Config>();                  var configTimeStamps = new Dictionary<string' DateTime>();                    foreach (var configFile in configFiles)                  {                      // Save the timestamp for the config so that we can detect if it changed later on                      configTimeStamps[configFile] = File.GetLastWriteTime(configFile);                        // Load the config and add it to the list.                      // If loading failed' print error message and continue                      var cfg = TryLoadConfig(configFile);                      if (cfg == null)                      {                          Logger.ErrorFormat("Couldn't load config file {0}. Skipping that config file."' configFile);                          continue;                      }                        configs.Add(cfg);                  }                    if (configs.Count == 0)                  {                      throw new ConfigurationErrorsException("None of the configs were valid");                  }                    InitInstances(configs);                    var iterations = ReadIntFromAppConfig("Iterations"' 200);                  var interval = TimeSpan.FromSeconds(ReadIntFromAppConfig("IntervalInSeconds"' 1));                  var useThreads = ReadBoolFromAppConfig("UseThreads"' false);                    for (var i = 0; i < iterations; ++i )                  {                      Logger.InfoFormat("{0} Iteration {1} {0}"' new string('-'' 15)' i);                      RunInstances(useThreads);                        if (IsConfigsChanged(configTimeStamps))                      {                          break;                      }                        Thread.CurrentThread.Join(interval); // Sleep between iterations                  }                    foreach (var instance in _instances)                  {                      var disposable = instance as IDisposable;                      if (disposable != null)                      {                          disposable.Dispose();                      }                  }              }              catch (Exception exception)              {                  Logger.ErrorFormat("Exception caught in main - aborting. {0}"' exception);              }
Magic Number,Mail2Bug.Email,AckEmailPlaceholder,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\AckEmailPlaceholder.cs,GetPlaceholders,The following statement contains a magic number: foreach (Match match in matches)              {                  var text = match.Groups[0].Value;                  var field = match.Groups[1].Value;                  var defaultValue = match.Groups[3].Value;                  var placeholder = new AckEmailPlaceholder(text' field' defaultValue);                  placeholders.Add(placeholder);              }
Magic Number,Mail2Bug.Email.EWS,EWSConnectionManger,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\EWS\EWSConnectionManger.cs,ConnectToEWS,The following statement contains a magic number: var exchangeService = new ExchangeService(ExchangeVersion.Exchange2010_SP1)              {                  Credentials = new WebCredentials(credentials.UserName' credentials.Password)'                  Timeout = 60000              };
Magic Number,Mail2Bug.Email.EWS,EWSIncomingMessage,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\EWS\EWSIncomingMessage.cs,GetConversationGuid,The following statement contains a magic number: return _conversationId == null                 ? this.GetConversationIndex().Substring(12' 32)                 : string.Join(""' _conversationId.Select(b => b.ToString("X2")));
Magic Number,Mail2Bug.Email.EWS,EWSIncomingMessage,C:\repos\Microsoft_mail2bug\Mail2Bug\Email\EWS\EWSIncomingMessage.cs,GetConversationGuid,The following statement contains a magic number: return _conversationId == null                 ? this.GetConversationIndex().Substring(12' 32)                 : string.Join(""' _conversationId.Select(b => b.ToString("X2")));
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: ConversationIdProperties.MinNumberOfCodePoints = 64;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: ConversationIdProperties.MaxNumberOfCodePoints = 255;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: NameProperties.MinNumberOfCodePoints = 5;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: NameProperties.MinNumberOfCodePoints = 15;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: AliasProperties.MinNumberOfCodePoints = 4;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: AliasProperties.MaxNumberOfCodePoints = 10;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: SubjectProperties.MinNumberOfCodePoints = 10;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: SubjectProperties.MaxNumberOfCodePoints = 50;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,RandomDataHelper,The following statement contains a magic number: BodyProperties.MaxNumberOfCodePoints = 500;
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,GetRandomMessageSeparator,The following statement contains a magic number: var separators = new[]                                   {                                       new String('_'' rand.Next(4'50))'                                        "-----Original Message"'                                        "From:"                                   };
Magic Number,Mail2Bug.TestHelpers,RandomDataHelper,C:\repos\Microsoft_mail2bug\Mail2Bug\TestHelpers\RandomDataHelper.cs,GetRandomMessageSeparator,The following statement contains a magic number: var separators = new[]                                   {                                       new String('_'' rand.Next(4'50))'                                        "-----Original Message"'                                        "From:"                                   };
