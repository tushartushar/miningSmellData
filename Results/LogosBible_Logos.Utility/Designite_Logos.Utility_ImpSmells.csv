Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,Cyclomatic complexity of the method is 10
Long Parameter List,Logos.Utility,IMultiLanguage2,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\NativeMethods.cs,DetectCodepageInIStream,The method has 5 parameters. Parameters: flags' dwPrefWinCodePage' pstmIn' lpEncoding' pnScores
Long Parameter List,Logos.Utility.IO,ReadOnlyStream,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\ReadOnlyStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Logos.Utility.IO,WrappingStream,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\WrappingStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Logos.Utility.IO,WrappingStream,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\WrappingStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Statement,Logos.Utility,EnumerableUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\EnumerableUtility.cs,LazyOrderBy,The length of the statement  "			return new OrderedEnumerable<TSource>(source' new ElementComparer<TSource' TKey>(keySelector' comparer ?? Comparer<TKey>.Default' descending' null)); " is 149.
Long Statement,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The length of the statement  "			// set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the appropriate 4-bit version number from Section 4.1.3 (step 8) " is 159.
Long Statement,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The length of the statement  "			// set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one' respectively (step 10) " is 124.
Long Statement,Logos.Utility,OrderedEnumerable<TSource>,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\OrderedEnumerable.cs,CreateOrderedEnumerable,The length of the statement  "			ElementComparer<TSource' TKey>  elementComparer = new ElementComparer<TSource' TKey>(keySelector' comparer ?? Comparer<TKey>.Default' descending' null); " is 152.
Long Statement,Logos.Utility.IO,StreamUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\StreamUtility.cs,DetectBestEncoding,The length of the statement  "					int hresult = multiLanguage.DetectCodepageInIStream(MultiLanguageDetectCodePage.None' 0' istream' ref infos[0]' ref infoCount); " is 127.
Long Statement,Logos.Utility.IO,StreamUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\StreamUtility.cs,DetectBestEncoding,The length of the statement  "						int nCodePage = (int) infos.Take(infoCount).OrderByDescending(i => i.nConfidence).Select(i => i.nCodePage).FirstOrDefault(); " is 124.
Long Statement,Logos.Utility.Logging,LogUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Logging\LogUtility.cs,TimedLog,The length of the statement  "					doLog("({0}) {1}".FormatInvariant(TimeSpanUtility.FormatForLogging(elapsed.Ticks < 0 ? TimeSpan.Zero : elapsed)' formattedMessage)); " is 132.
Long Statement,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToUInt32,The length of the statement  "				return unchecked((uint) (((input[inputOffset] | (input[inputOffset + 1] << 8)) | (input[inputOffset + 2] << 16)) | (input[inputOffset + 3] << 24))); " is 148.
Long Statement,Logos.Utility.Threading,AsyncResult,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Threading\AsyncResult.cs,DoFinish,The length of the statement  "			int nOldState = Interlocked.Exchange(ref m_nState' bCompletedSynchronously ? State.CompletedSynchronously : State.CompletedAsynchronously); " is 139.
Virtual Method Call from Constructor,Logos.Utility,DisposableService,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\DisposableService.cs,DisposableService,The constructor "DisposableService" calls a virtual method "OnDisposing".
Empty Catch Block,Logos.Utility.IO,StreamUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\StreamUtility.cs,DetectBestEncoding,The method has an empty catch block.
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Encode,The following statement contains a magic number: StringBuilder sb = new StringBuilder(bytes.Length * 5 / 4);
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Encode,The following statement contains a magic number: StringBuilder sb = new StringBuilder(bytes.Length * 5 / 4);
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Encode,The following statement contains a magic number: foreach (byte b in bytes)  			{  				// build a 32-bit value from the bytes  				value |= ((uint) b) << (24 - (count * 8));  				count++;    				// every 32 bits' convert the previous 4 bytes into 5 Ascii85 characters  				if (count == 4)  				{  					if (value == 0)  						sb.Append('z');  					else  						EncodeValue(sb' value' 0);  					count = 0;  					value = 0;  				}  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Encode,The following statement contains a magic number: foreach (byte b in bytes)  			{  				// build a 32-bit value from the bytes  				value |= ((uint) b) << (24 - (count * 8));  				count++;    				// every 32 bits' convert the previous 4 bytes into 5 Ascii85 characters  				if (count == 4)  				{  					if (value == 0)  						sb.Append('z');  					else  						EncodeValue(sb' value' 0);  					count = 0;  					value = 0;  				}  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Encode,The following statement contains a magic number: foreach (byte b in bytes)  			{  				// build a 32-bit value from the bytes  				value |= ((uint) b) << (24 - (count * 8));  				count++;    				// every 32 bits' convert the previous 4 bytes into 5 Ascii85 characters  				if (count == 4)  				{  					if (value == 0)  						sb.Append('z');  					else  						EncodeValue(sb' value' 0);  					count = 0;  					value = 0;  				}  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Encode,The following statement contains a magic number: if (count > 0)  				EncodeValue(sb' value' 4 - count);
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Decode,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream(encoded.Length * 4 / 5))  			{  				// walk the input string  				int count = 0;  				uint value = 0;  				foreach (char ch in encoded)  				{  					if (ch == 'z' && count == 0)  					{  						// handle "z" block specially  						DecodeValue(stream' value' 0);  					}  					else if (ch < c_firstCharacter || ch > c_lastCharacter)  					{  						throw new FormatException("Invalid character '{0}' in Ascii85 block.".FormatInvariant(ch));  					}  					else  					{  						// build a 32-bit value from the input characters  						try  						{  							checked { value += (uint) (s_powersOf85[count] * (ch - c_firstCharacter)); }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  						  						count++;    						// every five characters' convert the characters into the equivalent byte array  						if (count == 5)  						{  							DecodeValue(stream' value' 0);  							count = 0;  							value = 0;  						}  					}  				}    				if (count == 1)  				{  					throw new FormatException("The final Ascii85 block must contain more than one character.");  				}  				else if (count > 1)  				{  					// decode any remaining characters  					for (int padding = count; padding < 5; padding++)  					{  						try  						{  							checked { value += 84 * s_powersOf85[padding]; }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  					}  					DecodeValue(stream' value' 5 - count);  				}    				return stream.ToArray();  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Decode,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream(encoded.Length * 4 / 5))  			{  				// walk the input string  				int count = 0;  				uint value = 0;  				foreach (char ch in encoded)  				{  					if (ch == 'z' && count == 0)  					{  						// handle "z" block specially  						DecodeValue(stream' value' 0);  					}  					else if (ch < c_firstCharacter || ch > c_lastCharacter)  					{  						throw new FormatException("Invalid character '{0}' in Ascii85 block.".FormatInvariant(ch));  					}  					else  					{  						// build a 32-bit value from the input characters  						try  						{  							checked { value += (uint) (s_powersOf85[count] * (ch - c_firstCharacter)); }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  						  						count++;    						// every five characters' convert the characters into the equivalent byte array  						if (count == 5)  						{  							DecodeValue(stream' value' 0);  							count = 0;  							value = 0;  						}  					}  				}    				if (count == 1)  				{  					throw new FormatException("The final Ascii85 block must contain more than one character.");  				}  				else if (count > 1)  				{  					// decode any remaining characters  					for (int padding = count; padding < 5; padding++)  					{  						try  						{  							checked { value += 84 * s_powersOf85[padding]; }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  					}  					DecodeValue(stream' value' 5 - count);  				}    				return stream.ToArray();  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Decode,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream(encoded.Length * 4 / 5))  			{  				// walk the input string  				int count = 0;  				uint value = 0;  				foreach (char ch in encoded)  				{  					if (ch == 'z' && count == 0)  					{  						// handle "z" block specially  						DecodeValue(stream' value' 0);  					}  					else if (ch < c_firstCharacter || ch > c_lastCharacter)  					{  						throw new FormatException("Invalid character '{0}' in Ascii85 block.".FormatInvariant(ch));  					}  					else  					{  						// build a 32-bit value from the input characters  						try  						{  							checked { value += (uint) (s_powersOf85[count] * (ch - c_firstCharacter)); }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  						  						count++;    						// every five characters' convert the characters into the equivalent byte array  						if (count == 5)  						{  							DecodeValue(stream' value' 0);  							count = 0;  							value = 0;  						}  					}  				}    				if (count == 1)  				{  					throw new FormatException("The final Ascii85 block must contain more than one character.");  				}  				else if (count > 1)  				{  					// decode any remaining characters  					for (int padding = count; padding < 5; padding++)  					{  						try  						{  							checked { value += 84 * s_powersOf85[padding]; }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  					}  					DecodeValue(stream' value' 5 - count);  				}    				return stream.ToArray();  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Decode,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream(encoded.Length * 4 / 5))  			{  				// walk the input string  				int count = 0;  				uint value = 0;  				foreach (char ch in encoded)  				{  					if (ch == 'z' && count == 0)  					{  						// handle "z" block specially  						DecodeValue(stream' value' 0);  					}  					else if (ch < c_firstCharacter || ch > c_lastCharacter)  					{  						throw new FormatException("Invalid character '{0}' in Ascii85 block.".FormatInvariant(ch));  					}  					else  					{  						// build a 32-bit value from the input characters  						try  						{  							checked { value += (uint) (s_powersOf85[count] * (ch - c_firstCharacter)); }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  						  						count++;    						// every five characters' convert the characters into the equivalent byte array  						if (count == 5)  						{  							DecodeValue(stream' value' 0);  							count = 0;  							value = 0;  						}  					}  				}    				if (count == 1)  				{  					throw new FormatException("The final Ascii85 block must contain more than one character.");  				}  				else if (count > 1)  				{  					// decode any remaining characters  					for (int padding = count; padding < 5; padding++)  					{  						try  						{  							checked { value += 84 * s_powersOf85[padding]; }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  					}  					DecodeValue(stream' value' 5 - count);  				}    				return stream.ToArray();  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Decode,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream(encoded.Length * 4 / 5))  			{  				// walk the input string  				int count = 0;  				uint value = 0;  				foreach (char ch in encoded)  				{  					if (ch == 'z' && count == 0)  					{  						// handle "z" block specially  						DecodeValue(stream' value' 0);  					}  					else if (ch < c_firstCharacter || ch > c_lastCharacter)  					{  						throw new FormatException("Invalid character '{0}' in Ascii85 block.".FormatInvariant(ch));  					}  					else  					{  						// build a 32-bit value from the input characters  						try  						{  							checked { value += (uint) (s_powersOf85[count] * (ch - c_firstCharacter)); }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  						  						count++;    						// every five characters' convert the characters into the equivalent byte array  						if (count == 5)  						{  							DecodeValue(stream' value' 0);  							count = 0;  							value = 0;  						}  					}  				}    				if (count == 1)  				{  					throw new FormatException("The final Ascii85 block must contain more than one character.");  				}  				else if (count > 1)  				{  					// decode any remaining characters  					for (int padding = count; padding < 5; padding++)  					{  						try  						{  							checked { value += 84 * s_powersOf85[padding]; }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  					}  					DecodeValue(stream' value' 5 - count);  				}    				return stream.ToArray();  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,Decode,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream(encoded.Length * 4 / 5))  			{  				// walk the input string  				int count = 0;  				uint value = 0;  				foreach (char ch in encoded)  				{  					if (ch == 'z' && count == 0)  					{  						// handle "z" block specially  						DecodeValue(stream' value' 0);  					}  					else if (ch < c_firstCharacter || ch > c_lastCharacter)  					{  						throw new FormatException("Invalid character '{0}' in Ascii85 block.".FormatInvariant(ch));  					}  					else  					{  						// build a 32-bit value from the input characters  						try  						{  							checked { value += (uint) (s_powersOf85[count] * (ch - c_firstCharacter)); }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  						  						count++;    						// every five characters' convert the characters into the equivalent byte array  						if (count == 5)  						{  							DecodeValue(stream' value' 0);  							count = 0;  							value = 0;  						}  					}  				}    				if (count == 1)  				{  					throw new FormatException("The final Ascii85 block must contain more than one character.");  				}  				else if (count > 1)  				{  					// decode any remaining characters  					for (int padding = count; padding < 5; padding++)  					{  						try  						{  							checked { value += 84 * s_powersOf85[padding]; }  						}  						catch (OverflowException ex)  						{  							throw new FormatException("The current group of characters decodes to a value greater than UInt32.MaxValue."' ex);  						}  					}  					DecodeValue(stream' value' 5 - count);  				}    				return stream.ToArray();  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,EncodeValue,The following statement contains a magic number: char[] encoded = new char[5];
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,EncodeValue,The following statement contains a magic number: for (int index = 4; index >= 0; index--)  			{  				encoded[index] = (char) ((value % 85) + c_firstCharacter);  				value /= 85;  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,EncodeValue,The following statement contains a magic number: for (int index = 4; index >= 0; index--)  			{  				encoded[index] = (char) ((value % 85) + c_firstCharacter);  				value /= 85;  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,EncodeValue,The following statement contains a magic number: for (int index = 4; index >= 0; index--)  			{  				encoded[index] = (char) ((value % 85) + c_firstCharacter);  				value /= 85;  			}
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,EncodeValue,The following statement contains a magic number: if (paddingBytes != 0)  				Array.Resize(ref encoded' 5 - paddingBytes);
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,DecodeValue,The following statement contains a magic number: stream.WriteByte((byte) (value >> 24));
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,DecodeValue,The following statement contains a magic number: if (paddingChars == 3)  				return;
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,DecodeValue,The following statement contains a magic number: stream.WriteByte((byte) ((value >> 16) & 0xFF));
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,DecodeValue,The following statement contains a magic number: if (paddingChars == 2)  				return;
Magic Number,Logos.Utility,Ascii85,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85.cs,DecodeValue,The following statement contains a magic number: stream.WriteByte(((byte) ((value >> 8) & 0xFF)));
Magic Number,Logos.Utility,Ascii85HttpHeader,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Ascii85HttpHeader.cs,Encode,The following statement contains a magic number: StringBuilder sb = new StringBuilder(ascii85.Length * 2);
Magic Number,Logos.Utility,EnvironmentUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\EnvironmentUtility.cs,IsWindowsVistaOrLater,The following statement contains a magic number: return os.Platform == PlatformID.Win32NT && os.Version >= new Version(6' 0);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: return Create(namespaceId' name' 5);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: if (version != 3 && version != 5)  				throw new ArgumentOutOfRangeException("version"' "version must be either 3 or 5.");
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: if (version != 3 && version != 5)  				throw new ArgumentOutOfRangeException("version"' "version must be either 3 or 5.");
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: using (HashAlgorithm algorithm = version == 3 ? (HashAlgorithm) MD5.Create() : SHA1.Create())  			{  				algorithm.TransformBlock(namespaceBytes' 0' namespaceBytes.Length' null' 0);  				algorithm.TransformFinalBlock(nameBytes' 0' nameBytes.Length);  				hash = algorithm.Hash;  			}
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: byte[] newGuid = new byte[16];
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: Array.Copy(hash' 0' newGuid' 0' 16);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: newGuid[6] = (byte) ((newGuid[6] & 0x0F) | (version << 4));
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: newGuid[6] = (byte) ((newGuid[6] & 0x0F) | (version << 4));
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: newGuid[6] = (byte) ((newGuid[6] & 0x0F) | (version << 4));
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: newGuid[8] = (byte) ((newGuid[8] & 0x3F) | 0x80);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,Create,The following statement contains a magic number: newGuid[8] = (byte) ((newGuid[8] & 0x3F) | 0x80);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,SwapByteOrder,The following statement contains a magic number: SwapBytes(guid' 0' 3);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,SwapByteOrder,The following statement contains a magic number: SwapBytes(guid' 1' 2);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,SwapByteOrder,The following statement contains a magic number: SwapBytes(guid' 4' 5);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,SwapByteOrder,The following statement contains a magic number: SwapBytes(guid' 4' 5);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,SwapByteOrder,The following statement contains a magic number: SwapBytes(guid' 6' 7);
Magic Number,Logos.Utility,GuidUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\GuidUtility.cs,SwapByteOrder,The following statement contains a magic number: SwapBytes(guid' 6' 7);
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				uint a = 0xdeadbeef + 4;  				uint b = a;  				uint c = a;    				a += (uint) hashCode1;  				FinalizeHash(ref a' ref b' ref c);    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				uint a = 0xdeadbeef + 8;  				uint b = a;  				uint c = a;    				a += (uint) hashCode1;  				b += (uint) hashCode2;  				FinalizeHash(ref a' ref b' ref c);    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				uint a = 0xdeadbeef + 12;  				uint b = a;  				uint c = a;    				a += (uint) hashCode1;  				b += (uint) hashCode2;  				c += (uint) hashCode3;  				FinalizeHash(ref a' ref b' ref c);    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				uint a = 0xdeadbeef + 16;  				uint b = a;  				uint c = a;    				a += (uint) hashCode1;  				b += (uint) hashCode2;  				c += (uint) hashCode3;  				MixHash(ref a' ref b' ref c);    				a += (uint) hashCode4;  				FinalizeHash(ref a' ref b' ref c);    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				// check for null  				if (hashCodes == null)  					return 0x0d608219;    				int length = hashCodes.Length;    				uint a = 0xdeadbeef + (((uint) length) << 2);  				uint b = a;  				uint c = a;    				int index = 0;  				while (length - index > 3)  				{  					a += (uint) hashCodes[index];  					b += (uint) hashCodes[index + 1];  					c += (uint) hashCodes[index + 2];  					MixHash(ref a' ref b' ref c);  					index += 3;  				}    				if (length - index > 2)  					c += (uint) hashCodes[index + 2];  				if (length - index > 1)  					b += (uint) hashCodes[index + 1];    				if (length - index > 0)  				{  					a += (uint) hashCodes[index];  					FinalizeHash(ref a' ref b' ref c);  				}    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				// check for null  				if (hashCodes == null)  					return 0x0d608219;    				int length = hashCodes.Length;    				uint a = 0xdeadbeef + (((uint) length) << 2);  				uint b = a;  				uint c = a;    				int index = 0;  				while (length - index > 3)  				{  					a += (uint) hashCodes[index];  					b += (uint) hashCodes[index + 1];  					c += (uint) hashCodes[index + 2];  					MixHash(ref a' ref b' ref c);  					index += 3;  				}    				if (length - index > 2)  					c += (uint) hashCodes[index + 2];  				if (length - index > 1)  					b += (uint) hashCodes[index + 1];    				if (length - index > 0)  				{  					a += (uint) hashCodes[index];  					FinalizeHash(ref a' ref b' ref c);  				}    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				// check for null  				if (hashCodes == null)  					return 0x0d608219;    				int length = hashCodes.Length;    				uint a = 0xdeadbeef + (((uint) length) << 2);  				uint b = a;  				uint c = a;    				int index = 0;  				while (length - index > 3)  				{  					a += (uint) hashCodes[index];  					b += (uint) hashCodes[index + 1];  					c += (uint) hashCodes[index + 2];  					MixHash(ref a' ref b' ref c);  					index += 3;  				}    				if (length - index > 2)  					c += (uint) hashCodes[index + 2];  				if (length - index > 1)  					b += (uint) hashCodes[index + 1];    				if (length - index > 0)  				{  					a += (uint) hashCodes[index];  					FinalizeHash(ref a' ref b' ref c);  				}    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				// check for null  				if (hashCodes == null)  					return 0x0d608219;    				int length = hashCodes.Length;    				uint a = 0xdeadbeef + (((uint) length) << 2);  				uint b = a;  				uint c = a;    				int index = 0;  				while (length - index > 3)  				{  					a += (uint) hashCodes[index];  					b += (uint) hashCodes[index + 1];  					c += (uint) hashCodes[index + 2];  					MixHash(ref a' ref b' ref c);  					index += 3;  				}    				if (length - index > 2)  					c += (uint) hashCodes[index + 2];  				if (length - index > 1)  					b += (uint) hashCodes[index + 1];    				if (length - index > 0)  				{  					a += (uint) hashCodes[index];  					FinalizeHash(ref a' ref b' ref c);  				}    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				// check for null  				if (hashCodes == null)  					return 0x0d608219;    				int length = hashCodes.Length;    				uint a = 0xdeadbeef + (((uint) length) << 2);  				uint b = a;  				uint c = a;    				int index = 0;  				while (length - index > 3)  				{  					a += (uint) hashCodes[index];  					b += (uint) hashCodes[index + 1];  					c += (uint) hashCodes[index + 2];  					MixHash(ref a' ref b' ref c);  					index += 3;  				}    				if (length - index > 2)  					c += (uint) hashCodes[index + 2];  				if (length - index > 1)  					b += (uint) hashCodes[index + 1];    				if (length - index > 0)  				{  					a += (uint) hashCodes[index];  					FinalizeHash(ref a' ref b' ref c);  				}    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,CombineHashCodes,The following statement contains a magic number: unchecked  			{  				// check for null  				if (hashCodes == null)  					return 0x0d608219;    				int length = hashCodes.Length;    				uint a = 0xdeadbeef + (((uint) length) << 2);  				uint b = a;  				uint c = a;    				int index = 0;  				while (length - index > 3)  				{  					a += (uint) hashCodes[index];  					b += (uint) hashCodes[index + 1];  					c += (uint) hashCodes[index + 2];  					MixHash(ref a' ref b' ref c);  					index += 3;  				}    				if (length - index > 2)  					c += (uint) hashCodes[index + 2];  				if (length - index > 1)  					b += (uint) hashCodes[index + 1];    				if (length - index > 0)  				{  					a += (uint) hashCodes[index];  					FinalizeHash(ref a' ref b' ref c);  				}    				return (int) c;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: return value ? -1266253386 : 1800329511;
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: return value ? -1266253386 : 1800329511;
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				uint hash = (uint) value;  				hash = (hash + 0x7ed55d16) + (hash << 12);  				hash = (hash ^ 0xc761c23c) ^ (hash >> 19);  				hash = (hash + 0x165667b1) + (hash << 5);  				hash = (hash + 0xd3a2646c) ^ (hash << 9);  				hash = (hash + 0xfd7046c5) + (hash << 3);  				hash = (hash ^ 0xb55a4f09) ^ (hash >> 16);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				uint hash = (uint) value;  				hash = (hash + 0x7ed55d16) + (hash << 12);  				hash = (hash ^ 0xc761c23c) ^ (hash >> 19);  				hash = (hash + 0x165667b1) + (hash << 5);  				hash = (hash + 0xd3a2646c) ^ (hash << 9);  				hash = (hash + 0xfd7046c5) + (hash << 3);  				hash = (hash ^ 0xb55a4f09) ^ (hash >> 16);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				uint hash = (uint) value;  				hash = (hash + 0x7ed55d16) + (hash << 12);  				hash = (hash ^ 0xc761c23c) ^ (hash >> 19);  				hash = (hash + 0x165667b1) + (hash << 5);  				hash = (hash + 0xd3a2646c) ^ (hash << 9);  				hash = (hash + 0xfd7046c5) + (hash << 3);  				hash = (hash ^ 0xb55a4f09) ^ (hash >> 16);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				uint hash = (uint) value;  				hash = (hash + 0x7ed55d16) + (hash << 12);  				hash = (hash ^ 0xc761c23c) ^ (hash >> 19);  				hash = (hash + 0x165667b1) + (hash << 5);  				hash = (hash + 0xd3a2646c) ^ (hash << 9);  				hash = (hash + 0xfd7046c5) + (hash << 3);  				hash = (hash ^ 0xb55a4f09) ^ (hash >> 16);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				uint hash = (uint) value;  				hash = (hash + 0x7ed55d16) + (hash << 12);  				hash = (hash ^ 0xc761c23c) ^ (hash >> 19);  				hash = (hash + 0x165667b1) + (hash << 5);  				hash = (hash + 0xd3a2646c) ^ (hash << 9);  				hash = (hash + 0xfd7046c5) + (hash << 3);  				hash = (hash ^ 0xb55a4f09) ^ (hash >> 16);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				uint hash = (uint) value;  				hash = (hash + 0x7ed55d16) + (hash << 12);  				hash = (hash ^ 0xc761c23c) ^ (hash >> 19);  				hash = (hash + 0x165667b1) + (hash << 5);  				hash = (hash + 0xd3a2646c) ^ (hash << 9);  				hash = (hash + 0xfd7046c5) + (hash << 3);  				hash = (hash ^ 0xb55a4f09) ^ (hash >> 16);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				ulong hash = (ulong) value;  				hash = (~hash) + (hash << 18);  				hash = hash ^ (hash >> 31);  				hash = hash * 21;  				hash = hash ^ (hash >> 11);  				hash = hash + (hash << 6);  				hash = hash ^ (hash >> 22);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				ulong hash = (ulong) value;  				hash = (~hash) + (hash << 18);  				hash = hash ^ (hash >> 31);  				hash = hash * 21;  				hash = hash ^ (hash >> 11);  				hash = hash + (hash << 6);  				hash = hash ^ (hash >> 22);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				ulong hash = (ulong) value;  				hash = (~hash) + (hash << 18);  				hash = hash ^ (hash >> 31);  				hash = hash * 21;  				hash = hash ^ (hash >> 11);  				hash = hash + (hash << 6);  				hash = hash ^ (hash >> 22);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				ulong hash = (ulong) value;  				hash = (~hash) + (hash << 18);  				hash = hash ^ (hash >> 31);  				hash = hash * 21;  				hash = hash ^ (hash >> 11);  				hash = hash + (hash << 6);  				hash = hash ^ (hash >> 22);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				ulong hash = (ulong) value;  				hash = (~hash) + (hash << 18);  				hash = hash ^ (hash >> 31);  				hash = hash * 21;  				hash = hash ^ (hash >> 11);  				hash = hash + (hash << 6);  				hash = hash ^ (hash >> 22);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				ulong hash = (ulong) value;  				hash = (~hash) + (hash << 18);  				hash = hash ^ (hash >> 31);  				hash = hash * 21;  				hash = hash ^ (hash >> 11);  				hash = hash + (hash << 6);  				hash = hash ^ (hash >> 22);  				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,GetPersistentHashCode,The following statement contains a magic number: unchecked  			{  				// check for degenerate input  				if (string.IsNullOrEmpty(value))  					return 0;    				int length = value.Length;  				uint hash = (uint) length;    				int remainder = length & 1;  				length >>= 1;    				// main loop  				int index = 0;  				for (; length > 0; length--)  				{  					hash += value[index];  					uint temp = (uint) (value[index + 1] << 11) ^ hash;  					hash = (hash << 16) ^ temp;  					index += 2;  					hash += hash >> 11;  				}    				// handle odd string length  				if (remainder == 1)  				{  					hash += value[index];  					hash ^= hash << 11;  					hash += hash >> 17;  				}    				// force "avalanching" of final 127 bits  				hash ^= hash << 3;  				hash += hash >> 5;  				hash ^= hash << 4;  				hash += hash >> 17;  				hash ^= hash << 25;  				hash += hash >> 6;    				return (int) hash;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,Rotate,The following statement contains a magic number: return (x << k) | (x >> (32 - k));
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,MixHash,The following statement contains a magic number: unchecked  			{  				a -= c; a ^= Rotate(c' 4); c += b;  				b -= a; b ^= Rotate(a' 6); a += c;  				c -= b; c ^= Rotate(b' 8); b += a;  				a -= c; a ^= Rotate(c' 16); c += b;  				b -= a; b ^= Rotate(a' 19); a += c;  				c -= b; c ^= Rotate(b' 4); b += a;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,MixHash,The following statement contains a magic number: unchecked  			{  				a -= c; a ^= Rotate(c' 4); c += b;  				b -= a; b ^= Rotate(a' 6); a += c;  				c -= b; c ^= Rotate(b' 8); b += a;  				a -= c; a ^= Rotate(c' 16); c += b;  				b -= a; b ^= Rotate(a' 19); a += c;  				c -= b; c ^= Rotate(b' 4); b += a;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,MixHash,The following statement contains a magic number: unchecked  			{  				a -= c; a ^= Rotate(c' 4); c += b;  				b -= a; b ^= Rotate(a' 6); a += c;  				c -= b; c ^= Rotate(b' 8); b += a;  				a -= c; a ^= Rotate(c' 16); c += b;  				b -= a; b ^= Rotate(a' 19); a += c;  				c -= b; c ^= Rotate(b' 4); b += a;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,MixHash,The following statement contains a magic number: unchecked  			{  				a -= c; a ^= Rotate(c' 4); c += b;  				b -= a; b ^= Rotate(a' 6); a += c;  				c -= b; c ^= Rotate(b' 8); b += a;  				a -= c; a ^= Rotate(c' 16); c += b;  				b -= a; b ^= Rotate(a' 19); a += c;  				c -= b; c ^= Rotate(b' 4); b += a;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,MixHash,The following statement contains a magic number: unchecked  			{  				a -= c; a ^= Rotate(c' 4); c += b;  				b -= a; b ^= Rotate(a' 6); a += c;  				c -= b; c ^= Rotate(b' 8); b += a;  				a -= c; a ^= Rotate(c' 16); c += b;  				b -= a; b ^= Rotate(a' 19); a += c;  				c -= b; c ^= Rotate(b' 4); b += a;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,MixHash,The following statement contains a magic number: unchecked  			{  				a -= c; a ^= Rotate(c' 4); c += b;  				b -= a; b ^= Rotate(a' 6); a += c;  				c -= b; c ^= Rotate(b' 8); b += a;  				a -= c; a ^= Rotate(c' 16); c += b;  				b -= a; b ^= Rotate(a' 19); a += c;  				c -= b; c ^= Rotate(b' 4); b += a;  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,FinalizeHash,The following statement contains a magic number: unchecked  			{  				c ^= b; c -= Rotate(b' 14);  				a ^= c; a -= Rotate(c' 11);  				b ^= a; b -= Rotate(a' 25);  				c ^= b; c -= Rotate(b' 16);  				a ^= c; a -= Rotate(c' 4);  				b ^= a; b -= Rotate(a' 14);  				c ^= b; c -= Rotate(b' 24);  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,FinalizeHash,The following statement contains a magic number: unchecked  			{  				c ^= b; c -= Rotate(b' 14);  				a ^= c; a -= Rotate(c' 11);  				b ^= a; b -= Rotate(a' 25);  				c ^= b; c -= Rotate(b' 16);  				a ^= c; a -= Rotate(c' 4);  				b ^= a; b -= Rotate(a' 14);  				c ^= b; c -= Rotate(b' 24);  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,FinalizeHash,The following statement contains a magic number: unchecked  			{  				c ^= b; c -= Rotate(b' 14);  				a ^= c; a -= Rotate(c' 11);  				b ^= a; b -= Rotate(a' 25);  				c ^= b; c -= Rotate(b' 16);  				a ^= c; a -= Rotate(c' 4);  				b ^= a; b -= Rotate(a' 14);  				c ^= b; c -= Rotate(b' 24);  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,FinalizeHash,The following statement contains a magic number: unchecked  			{  				c ^= b; c -= Rotate(b' 14);  				a ^= c; a -= Rotate(c' 11);  				b ^= a; b -= Rotate(a' 25);  				c ^= b; c -= Rotate(b' 16);  				a ^= c; a -= Rotate(c' 4);  				b ^= a; b -= Rotate(a' 14);  				c ^= b; c -= Rotate(b' 24);  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,FinalizeHash,The following statement contains a magic number: unchecked  			{  				c ^= b; c -= Rotate(b' 14);  				a ^= c; a -= Rotate(c' 11);  				b ^= a; b -= Rotate(a' 25);  				c ^= b; c -= Rotate(b' 16);  				a ^= c; a -= Rotate(c' 4);  				b ^= a; b -= Rotate(a' 14);  				c ^= b; c -= Rotate(b' 24);  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,FinalizeHash,The following statement contains a magic number: unchecked  			{  				c ^= b; c -= Rotate(b' 14);  				a ^= c; a -= Rotate(c' 11);  				b ^= a; b -= Rotate(a' 25);  				c ^= b; c -= Rotate(b' 16);  				a ^= c; a -= Rotate(c' 4);  				b ^= a; b -= Rotate(a' 14);  				c ^= b; c -= Rotate(b' 24);  			}
Magic Number,Logos.Utility,HashCodeUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\HashCodeUtility.cs,FinalizeHash,The following statement contains a magic number: unchecked  			{  				c ^= b; c -= Rotate(b' 14);  				a ^= c; a -= Rotate(c' 11);  				b ^= a; b -= Rotate(a' 25);  				c ^= b; c -= Rotate(b' 16);  				a ^= c; a -= Rotate(c' 4);  				b ^= a; b -= Rotate(a' 14);  				c ^= b; c -= Rotate(b' 24);  			}
Magic Number,Logos.Utility,OrderedEnumerable<TSource>,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\OrderedEnumerable.cs,GetEnumerator,The following statement contains a magic number: while (stack.Count > 0)  			{  				// get the range that needs to be sorted  				Range currentRange = stack.Pop();    				if (currentRange.Last - currentRange.First <= 8)  				{  					// if the range is small enough' terminate the recursion and use insertion sort instead  					if (currentRange.First != currentRange.Last)  						InsertionSort(sourceIndexes' currentRange.First' currentRange.Last);    					// yield all the items in this sorted sub-array  					Debug.Assert(currentRange.First == index' "currentRange.First != index");  					while (index <= currentRange.Last)  					{  						yield return array[sourceIndexes[index]];  						index++;  					}  				}  				else  				{  					// recursive case: pick a pivot in the array and partition the array around it  					int pivotIndex = Partition(random' sourceIndexes' currentRange.First' currentRange.Last);    					// "recurse" by pushing the ranges that still need to be processed (in reverse order) on to the stack  					stack.Push(new Range(pivotIndex + 1' currentRange.Last));  					stack.Push(new Range(pivotIndex' pivotIndex));  					stack.Push(new Range(currentRange.First' pivotIndex - 1));  				}  			}
Magic Number,Logos.Utility,TimeSpanUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\TimeSpanUtility.cs,FormatForLogging,The following statement contains a magic number: double seconds = ts.Seconds + ts.Milliseconds / 1000.0;
Magic Number,Logos.Utility,TimeSpanUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\TimeSpanUtility.cs,FormatForLogging,The following statement contains a magic number: if (ts.TotalSeconds < 10)  				return "{0}ms".FormatInvariant((int) (ts.TotalMilliseconds + 0.5));  			else if (ts.TotalMinutes < 1)  				return "{0:0.00}s".FormatInvariant(Math.Min(seconds' 59.99));  			else if (ts.TotalHours < 1)  				return "{0}m {1:0.0}s".FormatInvariant(ts.Minutes' Math.Min(seconds' 59.9));  			else if (ts.TotalDays < 1)  				return "{0}h {1}m {2:0}s".FormatInvariant((int) ts.TotalHours' ts.Minutes' Math.Min(seconds' 59));  			else  				return "{0}d {1}h {2}m {3:0}s".FormatInvariant((int) ts.TotalDays' ts.Hours' ts.Minutes' Math.Min(seconds' 59));
Magic Number,Logos.Utility,TimeSpanUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\TimeSpanUtility.cs,FormatForLogging,The following statement contains a magic number: if (ts.TotalSeconds < 10)  				return "{0}ms".FormatInvariant((int) (ts.TotalMilliseconds + 0.5));  			else if (ts.TotalMinutes < 1)  				return "{0:0.00}s".FormatInvariant(Math.Min(seconds' 59.99));  			else if (ts.TotalHours < 1)  				return "{0}m {1:0.0}s".FormatInvariant(ts.Minutes' Math.Min(seconds' 59.9));  			else if (ts.TotalDays < 1)  				return "{0}h {1}m {2:0}s".FormatInvariant((int) ts.TotalHours' ts.Minutes' Math.Min(seconds' 59));  			else  				return "{0}d {1}h {2}m {3:0}s".FormatInvariant((int) ts.TotalDays' ts.Hours' ts.Minutes' Math.Min(seconds' 59));
Magic Number,Logos.Utility,TimeSpanUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\TimeSpanUtility.cs,FormatForLogging,The following statement contains a magic number: if (ts.TotalSeconds < 10)  				return "{0}ms".FormatInvariant((int) (ts.TotalMilliseconds + 0.5));  			else if (ts.TotalMinutes < 1)  				return "{0:0.00}s".FormatInvariant(Math.Min(seconds' 59.99));  			else if (ts.TotalHours < 1)  				return "{0}m {1:0.0}s".FormatInvariant(ts.Minutes' Math.Min(seconds' 59.9));  			else if (ts.TotalDays < 1)  				return "{0}h {1}m {2:0}s".FormatInvariant((int) ts.TotalHours' ts.Minutes' Math.Min(seconds' 59));  			else  				return "{0}d {1}h {2}m {3:0}s".FormatInvariant((int) ts.TotalDays' ts.Hours' ts.Minutes' Math.Min(seconds' 59));
Magic Number,Logos.Utility,TimeSpanUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\TimeSpanUtility.cs,FormatForLogging,The following statement contains a magic number: if (ts.TotalSeconds < 10)  				return "{0}ms".FormatInvariant((int) (ts.TotalMilliseconds + 0.5));  			else if (ts.TotalMinutes < 1)  				return "{0:0.00}s".FormatInvariant(Math.Min(seconds' 59.99));  			else if (ts.TotalHours < 1)  				return "{0}m {1:0.0}s".FormatInvariant(ts.Minutes' Math.Min(seconds' 59.9));  			else if (ts.TotalDays < 1)  				return "{0}h {1}m {2:0}s".FormatInvariant((int) ts.TotalHours' ts.Minutes' Math.Min(seconds' 59));  			else  				return "{0}d {1}h {2}m {3:0}s".FormatInvariant((int) ts.TotalDays' ts.Hours' ts.Minutes' Math.Min(seconds' 59));
Magic Number,Logos.Utility,TimeSpanUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\TimeSpanUtility.cs,FormatForLogging,The following statement contains a magic number: if (ts.TotalSeconds < 10)  				return "{0}ms".FormatInvariant((int) (ts.TotalMilliseconds + 0.5));  			else if (ts.TotalMinutes < 1)  				return "{0:0.00}s".FormatInvariant(Math.Min(seconds' 59.99));  			else if (ts.TotalHours < 1)  				return "{0}m {1:0.0}s".FormatInvariant(ts.Minutes' Math.Min(seconds' 59.9));  			else if (ts.TotalDays < 1)  				return "{0}h {1}m {2:0}s".FormatInvariant((int) ts.TotalHours' ts.Minutes' Math.Min(seconds' 59));  			else  				return "{0}d {1}h {2}m {3:0}s".FormatInvariant((int) ts.TotalDays' ts.Hours' ts.Minutes' Math.Min(seconds' 59));
Magic Number,Logos.Utility,TimeSpanUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\TimeSpanUtility.cs,FormatForLogging,The following statement contains a magic number: if (ts.TotalSeconds < 10)  				return "{0}ms".FormatInvariant((int) (ts.TotalMilliseconds + 0.5));  			else if (ts.TotalMinutes < 1)  				return "{0:0.00}s".FormatInvariant(Math.Min(seconds' 59.99));  			else if (ts.TotalHours < 1)  				return "{0}m {1:0.0}s".FormatInvariant(ts.Minutes' Math.Min(seconds' 59.9));  			else if (ts.TotalDays < 1)  				return "{0}h {1}m {2:0}s".FormatInvariant((int) ts.TotalHours' ts.Minutes' Math.Min(seconds' 59));  			else  				return "{0}d {1}h {2}m {3:0}s".FormatInvariant((int) ts.TotalDays' ts.Hours' ts.Minutes' Math.Min(seconds' 59));
Magic Number,Logos.Utility.IO,ManagedIStream,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\ManagedIStream.cs,Stat,The following statement contains a magic number: pstatstg = new STATSTG  			{  				type = 2'  				cbSize = m_stream.Length'  			};
Magic Number,Logos.Utility.IO,StreamUtility,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\IO\StreamUtility.cs,DetectBestEncoding,The following statement contains a magic number: DetectEncodingInfo[] infos = new DetectEncodingInfo[8];
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: LegalBlockSizesValue = new[] { new KeySizes(512' 512' 0) };
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: LegalBlockSizesValue = new[] { new KeySizes(512' 512' 0) };
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: LegalKeySizesValue = new[] { new KeySizes(128' 256' 128) };
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: LegalKeySizesValue = new[] { new KeySizes(128' 256' 128) };
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: LegalKeySizesValue = new[] { new KeySizes(128' 256' 128) };
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: BlockSizeValue = 512;
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: KeySizeValue = 256;
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20,The following statement contains a magic number: m_rounds = 20;
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,CreateEncryptor,The following statement contains a magic number: if (!ValidKeySize(rgbKey.Length * 8))  				throw new CryptographicException("Invalid key size; it must be 128 or 256 bits.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,GenerateIV,The following statement contains a magic number: IVValue = GetRandomBytes(8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,GenerateKey,The following statement contains a magic number: KeyValue = GetRandomBytes(KeySize / 8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,CheckValidIV,The following statement contains a magic number: if (iv.Length != 8)  				throw new CryptographicException("Invalid IV size; it must be 8 bytes.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20CryptoTransform,The following statement contains a magic number: Debug.Assert(key.Length == 16 || key.Length == 32' "abyKey.Length == 16 || abyKey.Length == 32"' "Invalid key size.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20CryptoTransform,The following statement contains a magic number: Debug.Assert(key.Length == 16 || key.Length == 32' "abyKey.Length == 16 || abyKey.Length == 32"' "Invalid key size.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20CryptoTransform,The following statement contains a magic number: Debug.Assert(iv.Length == 8' "abyIV.Length == 8"' "Invalid IV size.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20CryptoTransform,The following statement contains a magic number: Debug.Assert(rounds == 8 || rounds == 12 || rounds == 20' "rounds == 8 || rounds == 12 || rounds == 20"' "Invalid number of rounds.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20CryptoTransform,The following statement contains a magic number: Debug.Assert(rounds == 8 || rounds == 12 || rounds == 20' "rounds == 8 || rounds == 12 || rounds == 20"' "Invalid number of rounds.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Salsa20CryptoTransform,The following statement contains a magic number: Debug.Assert(rounds == 8 || rounds == 12 || rounds == 20' "rounds == 8 || rounds == 12 || rounds == 20"' "Invalid number of rounds.");
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: byte[] output = new byte[64];
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,TransformBlock,The following statement contains a magic number: while (inputCount > 0)  				{  					Hash(output' m_state);  					m_state[8] = AddOne(m_state[8]);  					if (m_state[8] == 0)  					{  						// NOTE: stopping at 2^70 bytes per nonce is user's responsibility  						m_state[9] = AddOne(m_state[9]);  					}    					int blockSize = Math.Min(64' inputCount);  					for (int i = 0; i < blockSize; i++)  						outputBuffer[outputOffset + i] = (byte) (inputBuffer[inputOffset + i] ^ output[i]);  					bytesTransformed += blockSize;    					inputCount -= 64;  					outputOffset += 64;  					inputOffset += 64;  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Rotate,The following statement contains a magic number: return (v << c) | (v >> (32 - c));
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int round = m_rounds; round > 0; round -= 2)  				{  					state[4] ^= Rotate(Add(state[0]' state[12])' 7);  					state[8] ^= Rotate(Add(state[4]' state[0])' 9);  					state[12] ^= Rotate(Add(state[8]' state[4])' 13);  					state[0] ^= Rotate(Add(state[12]' state[8])' 18);  					state[9] ^= Rotate(Add(state[5]' state[1])' 7);  					state[13] ^= Rotate(Add(state[9]' state[5])' 9);  					state[1] ^= Rotate(Add(state[13]' state[9])' 13);  					state[5] ^= Rotate(Add(state[1]' state[13])' 18);  					state[14]  ^= Rotate(Add(state[10]' state[6])' 7);  					state[2] ^= Rotate(Add(state[14]' state[10])' 9);  					state[6] ^= Rotate(Add(state[2]' state[14])' 13);  					state[10]  ^= Rotate(Add(state[6]' state[2])' 18);  					state[3] ^= Rotate(Add(state[15]' state[11])' 7);  					state[7] ^= Rotate(Add(state[3]' state[15])' 9);  					state[11]  ^= Rotate(Add(state[7]' state[3])' 13);  					state[15]  ^= Rotate(Add(state[11]' state[7])' 18);  					state[1] ^= Rotate(Add(state[0]' state[3])' 7);  					state[2] ^= Rotate(Add(state[1]' state[0])' 9);  					state[3] ^= Rotate(Add(state[2]' state[1])' 13);  					state[0] ^= Rotate(Add(state[3]' state[2])' 18);  					state[6] ^= Rotate(Add(state[5]' state[4])' 7);  					state[7] ^= Rotate(Add(state[6]' state[5])' 9);  					state[4] ^= Rotate(Add(state[7]' state[6])' 13);  					state[5] ^= Rotate(Add(state[4]' state[7])' 18);  					state[11]  ^= Rotate(Add(state[10]' state[9])' 7);  					state[8] ^= Rotate(Add(state[11]' state[10])' 9);  					state[9] ^= Rotate(Add(state[8]' state[11])' 13);  					state[10]  ^= Rotate(Add(state[9]' state[8])' 18);  					state[12]  ^= Rotate(Add(state[15]' state[14])' 7);  					state[13]  ^= Rotate(Add(state[12]' state[15])' 9);  					state[14]  ^= Rotate(Add(state[13]' state[12])' 13);  					state[15]  ^= Rotate(Add(state[14]' state[13])' 18);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int index = 0; index < 16; index++)  					ToBytes(Add(state[index]' input[index])' output' 4 * index);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Hash,The following statement contains a magic number: for (int index = 0; index < 16; index++)  					ToBytes(Add(state[index]' input[index])' output' 4 * index);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state = new uint[16];
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[2] = ToUInt32(key' 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[2] = ToUInt32(key' 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[3] = ToUInt32(key' 8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[3] = ToUInt32(key' 8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[4] = ToUInt32(key' 12);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[4] = ToUInt32(key' 12);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: byte[] constants = key.Length == 32 ? c_sigma : c_tau;
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: int keyIndex = key.Length - 16;
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[11] = ToUInt32(key' keyIndex + 0);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[12] = ToUInt32(key' keyIndex + 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[12] = ToUInt32(key' keyIndex + 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[13] = ToUInt32(key' keyIndex + 8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[13] = ToUInt32(key' keyIndex + 8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[14] = ToUInt32(key' keyIndex + 12);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[14] = ToUInt32(key' keyIndex + 12);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[5] = ToUInt32(constants' 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[5] = ToUInt32(constants' 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[10] = ToUInt32(constants' 8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[10] = ToUInt32(constants' 8);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[15] = ToUInt32(constants' 12);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[15] = ToUInt32(constants' 12);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[6] = ToUInt32(iv' 0);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[7] = ToUInt32(iv' 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[7] = ToUInt32(iv' 4);
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[8] = 0;
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,Initialize,The following statement contains a magic number: m_state[9] = 0;
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint) (((input[inputOffset] | (input[inputOffset + 1] << 8)) | (input[inputOffset + 2] << 16)) | (input[inputOffset + 3] << 24)));
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint) (((input[inputOffset] | (input[inputOffset + 1] << 8)) | (input[inputOffset + 2] << 16)) | (input[inputOffset + 3] << 24)));
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint) (((input[inputOffset] | (input[inputOffset + 1] << 8)) | (input[inputOffset + 2] << 16)) | (input[inputOffset + 3] << 24)));
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint) (((input[inputOffset] | (input[inputOffset + 1] << 8)) | (input[inputOffset + 2] << 16)) | (input[inputOffset + 3] << 24)));
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint) (((input[inputOffset] | (input[inputOffset + 1] << 8)) | (input[inputOffset + 2] << 16)) | (input[inputOffset + 3] << 24)));
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToBytes,The following statement contains a magic number: unchecked  				{  					output[outputOffset] = (byte) input;  					output[outputOffset + 1] = (byte) (input >> 8);  					output[outputOffset + 2] = (byte) (input >> 16);  					output[outputOffset + 3] = (byte) (input >> 24);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToBytes,The following statement contains a magic number: unchecked  				{  					output[outputOffset] = (byte) input;  					output[outputOffset + 1] = (byte) (input >> 8);  					output[outputOffset + 2] = (byte) (input >> 16);  					output[outputOffset + 3] = (byte) (input >> 24);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToBytes,The following statement contains a magic number: unchecked  				{  					output[outputOffset] = (byte) input;  					output[outputOffset + 1] = (byte) (input >> 8);  					output[outputOffset + 2] = (byte) (input >> 16);  					output[outputOffset + 3] = (byte) (input >> 24);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToBytes,The following statement contains a magic number: unchecked  				{  					output[outputOffset] = (byte) input;  					output[outputOffset + 1] = (byte) (input >> 8);  					output[outputOffset + 2] = (byte) (input >> 16);  					output[outputOffset + 3] = (byte) (input >> 24);  				}
Magic Number,Logos.Utility.Security.Cryptography,Salsa20CryptoTransform,C:\repos\LogosBible_Logos.Utility\src\Logos.Utility\Security\Cryptography\Salsa20.cs,ToBytes,The following statement contains a magic number: unchecked  				{  					output[outputOffset] = (byte) input;  					output[outputOffset + 1] = (byte) (input >> 8);  					output[outputOffset + 2] = (byte) (input >> 16);  					output[outputOffset + 3] = (byte) (input >> 24);  				}
