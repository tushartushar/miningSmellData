Implementation smell,Namespace,Class,File,Method,Description
Long Method,SlackCommander.Web.Todo,TodoModule,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Todo\TodoModule.cs,HandleTodo,The method has 164 lines of code.
Complex Method,SlackCommander.Web.Whois,WhoisSaga,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Whois\WhoisSaga.cs,FormattedSummaryOfWhoisResult,Cyclomatic complexity of the method is 8
Magic Number,SlackCommander.Web.Todo,TodoModule,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Todo\TodoModule.cs,HandleTodo,The following statement contains a magic number: switch (@operator)              {                  case "":                      {                          // Just echo the list                          break;                      }                  case "show":                      {                          _bus.Publish(new MessageToSlack                          {                              channel = listId'                              text = list.ToSlackString()                          });                          return null;                      }                  case "add":                      {                          var todoText = message.text.SubstringByWords(1);                          if (todoText.Missing())                          {                              return null;                          }                          _todoService.AddItem(message.user_id' listId' todoText);                          break;                      }                  case "tick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.TickItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                   ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "untick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          _todoService.UntickItem(message.user_id' listId' todoItemId);                          break;                      }                  case "remove":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.RemoveItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                  ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "trim":                      {                          _todoService.ClearItems(message.user_id' listId' includeUnticked: false' force: false);                          break;                      }                  case "clear":                      {                          var force = message.text.SubstringByWords(1' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.ClearItems(message.user_id' listId' includeUnticked: true' force: force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "There are tasks claimed by other people. Use `/todo {0} force` to override."'                                  @operator);                          }                          break;                      }                  case "claim":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.ClaimItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "free":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.FreeItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "help":                      {                          return "TODO"; // TODO Return usage info                      }                  default:                      {                          return "Sorry' that is not a valid syntax for the `/todo` command. Use `/todo help` to see available operations.";                      }              }
Magic Number,SlackCommander.Web.Todo,TodoModule,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Todo\TodoModule.cs,HandleTodo,The following statement contains a magic number: switch (@operator)              {                  case "":                      {                          // Just echo the list                          break;                      }                  case "show":                      {                          _bus.Publish(new MessageToSlack                          {                              channel = listId'                              text = list.ToSlackString()                          });                          return null;                      }                  case "add":                      {                          var todoText = message.text.SubstringByWords(1);                          if (todoText.Missing())                          {                              return null;                          }                          _todoService.AddItem(message.user_id' listId' todoText);                          break;                      }                  case "tick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.TickItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                   ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "untick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          _todoService.UntickItem(message.user_id' listId' todoItemId);                          break;                      }                  case "remove":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.RemoveItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                  ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "trim":                      {                          _todoService.ClearItems(message.user_id' listId' includeUnticked: false' force: false);                          break;                      }                  case "clear":                      {                          var force = message.text.SubstringByWords(1' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.ClearItems(message.user_id' listId' includeUnticked: true' force: force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "There are tasks claimed by other people. Use `/todo {0} force` to override."'                                  @operator);                          }                          break;                      }                  case "claim":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.ClaimItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "free":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.FreeItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "help":                      {                          return "TODO"; // TODO Return usage info                      }                  default:                      {                          return "Sorry' that is not a valid syntax for the `/todo` command. Use `/todo help` to see available operations.";                      }              }
Magic Number,SlackCommander.Web.Todo,TodoModule,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Todo\TodoModule.cs,HandleTodo,The following statement contains a magic number: switch (@operator)              {                  case "":                      {                          // Just echo the list                          break;                      }                  case "show":                      {                          _bus.Publish(new MessageToSlack                          {                              channel = listId'                              text = list.ToSlackString()                          });                          return null;                      }                  case "add":                      {                          var todoText = message.text.SubstringByWords(1);                          if (todoText.Missing())                          {                              return null;                          }                          _todoService.AddItem(message.user_id' listId' todoText);                          break;                      }                  case "tick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.TickItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                   ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "untick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          _todoService.UntickItem(message.user_id' listId' todoItemId);                          break;                      }                  case "remove":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.RemoveItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                  ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "trim":                      {                          _todoService.ClearItems(message.user_id' listId' includeUnticked: false' force: false);                          break;                      }                  case "clear":                      {                          var force = message.text.SubstringByWords(1' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.ClearItems(message.user_id' listId' includeUnticked: true' force: force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "There are tasks claimed by other people. Use `/todo {0} force` to override."'                                  @operator);                          }                          break;                      }                  case "claim":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.ClaimItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "free":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.FreeItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "help":                      {                          return "TODO"; // TODO Return usage info                      }                  default:                      {                          return "Sorry' that is not a valid syntax for the `/todo` command. Use `/todo help` to see available operations.";                      }              }
Magic Number,SlackCommander.Web.Todo,TodoModule,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Todo\TodoModule.cs,HandleTodo,The following statement contains a magic number: switch (@operator)              {                  case "":                      {                          // Just echo the list                          break;                      }                  case "show":                      {                          _bus.Publish(new MessageToSlack                          {                              channel = listId'                              text = list.ToSlackString()                          });                          return null;                      }                  case "add":                      {                          var todoText = message.text.SubstringByWords(1);                          if (todoText.Missing())                          {                              return null;                          }                          _todoService.AddItem(message.user_id' listId' todoText);                          break;                      }                  case "tick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.TickItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                   ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "untick":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          _todoService.UntickItem(message.user_id' listId' todoItemId);                          break;                      }                  case "remove":                      {                          var todoItemId = message.text.SubstringByWords(1' 1);                          if (todoItemId.Missing())                          {                              return null;                          }                          var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.RemoveItem(message.user_id' listId' todoItemId' force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                                  ex.UserId'                                  @operator'                                  todoItemId);                          }                          break;                      }                  case "trim":                      {                          _todoService.ClearItems(message.user_id' listId' includeUnticked: false' force: false);                          break;                      }                  case "clear":                      {                          var force = message.text.SubstringByWords(1' 1).ToLowerInvariant() == "force";                          try                          {                              _todoService.ClearItems(message.user_id' listId' includeUnticked: true' force: force);                          }                          catch (TodoItemClaimedBySomeoneElseException ex)                          {                              return string.Format(                                  "There are tasks claimed by other people. Use `/todo {0} force` to override."'                                  @operator);                          }                          break;                      }                  case "claim":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.ClaimItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "free":                  {                      var todoItemId = message.text.SubstringByWords(1' 1);                      if (todoItemId.Missing())                      {                          return null;                      }                      var force = message.text.SubstringByWords(2' 1).ToLowerInvariant() == "force";                      try                      {                          _todoService.FreeItem(message.user_id' listId' todoItemId' force);                      }                      catch (TodoItemClaimedBySomeoneElseException ex)                      {                          return string.Format(                              "This task is claimed by <@{0}>. Use `/todo {1} {2} force` to override."'                              ex.UserId'                              @operator'                              todoItemId);                      }                      break;                  }                  case "help":                      {                          return "TODO"; // TODO Return usage info                      }                  default:                      {                          return "Sorry' that is not a valid syntax for the `/todo` command. Use `/todo help` to see available operations.";                      }              }
Magic Number,SlackCommander.Web.Mailgun,MailgunModule,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Mailgun\MailgunModule.cs,MailgunModule,The following statement contains a magic number: Post["/webhooks/mailgun/{webhookId}/{slackChannel}"] = _ =>              {                  Log.Debug("Received webhook call from Mailgun.");                    // TODO Verify signature?                    var webhookId = (string)_.webhookId;                  if (webhookId.Missing())                  {                      Log.Info("Rejected webhook call from Mailgun (WebhookId is missing).");                      return HttpStatusCode.NotAcceptable.WithReason("WebhookId is missing.");                  }                  var webhook = mailgunWebhooks.Get(webhookId);                  if (webhook == null)                  {                      Log.Info("Rejected webhook call from Mailgun (webhook '{0}' not found)."' webhookId);                      return HttpStatusCode.NotAcceptable.WithReason("The webhook does not exist.");                  }                    var slackChannel = "#" + ((string)_.slackChannel).TrimStart('#');                    var sender = (string)Request.Form["sender"];                  var recipient = (string)Request.Form["recipient"];                  var subject = (string)Request.Form["subject"];                  var plainBody = (string)Request.Form["body-plain"];                    // HACK: Since Nancy parses subject into "subject'subject"' just split in two for now                  subject = subject.Substring(0' subject.Length/2);                    // Send notification to Slack.                  bus.Publish(new MessageToSlack                  {                      channel = slackChannel'                      text = string.Format("E-mail from *{0}*:\n"' sender' recipient)'                      attachments = new[]                      {                          new MessageToSlack.Attachment                          {                              fallback = string.Format("*{0}*"' subject)'                              pretext = string.Format("*{0}*"' subject)'                              text = string.Format("{0}"' plainBody)'                              mrkdwn_in = new [] { "fallback"' "pretext" }                          }                      }                  });                    return HttpStatusCode.OK;              };
Magic Number,SlackCommander.Web.Whois,WhoisSaga,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Whois\WhoisSaga.cs,ProcessWhoisResult,The following statement contains a magic number: if (message.Result.Status != 200 ||                  message.Result.Likelihood < 0.7)              {                  slackMessage.text = string.Format(                      "Unfortunately I'm unable to find any reliable information on who *{0}* is. " +                      "I suggest you try <https://www.google.com/search?q={1}|Google>."'                      Subject'                      HttpUtility.UrlEncode(Subject));              }              else              {                  slackMessage.text = string.Format(                      "I looked up *{0}* and I'm {1:P0} sure this is the person behind it:\n\n"'                      Subject'                      message.Result.Likelihood);                  slackMessage.text += FormattedSummaryOfWhoisResult(message);              }
Magic Number,SlackCommander.Web.Whois,WhoisSaga,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Whois\WhoisSaga.cs,ProcessWhoisResult,The following statement contains a magic number: if (message.Result.Status != 200 ||                  message.Result.Likelihood < 0.7)              {                  slackMessage.text = string.Format(                      "Unfortunately I'm unable to find any reliable information on who *{0}* is. " +                      "I suggest you try <https://www.google.com/search?q={1}|Google>."'                      Subject'                      HttpUtility.UrlEncode(Subject));              }              else              {                  slackMessage.text = string.Format(                      "I looked up *{0}* and I'm {1:P0} sure this is the person behind it:\n\n"'                      Subject'                      message.Result.Likelihood);                  slackMessage.text += FormattedSummaryOfWhoisResult(message);              }
Magic Number,SlackCommander.Web.Whois,WhoisSaga,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Whois\WhoisSaga.cs,FormattedSummaryOfWhoisResult,The following statement contains a magic number: if (totalFollowers.HasValue && totalFollowers.Value > 0)              {                  text.AppendFormat("{0} followers on social media"' totalFollowers.Value);                  if (totalFollowers > 1000)                  {                      text.Append(" (wow!)");                  }                  text.Append("\n");              }
Magic Number,SlackCommander.Web.Whois,FullContactLookup,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Whois\FullContactLookup.cs,Consume,The following statement contains a magic number: try              {                  var fullContactApi = RestService.For<IFullContactApi>(_fullContactApiBaseUrl);                  fullContactApi.LookupByEmail(                      message.EmailAddress'                      _fullContactWebhookUrl'                      message.WebhookId'                      _fullContactApiKey).Wait(TimeSpan.FromSeconds(20));              }              catch (Exception ex)              {                  Log.Error("FullContact e-mail lookup failed."' ex);              }
Magic Number,SlackCommander.Web.Whois,FullContactLookup,C:\repos\Hihaj_SlackCommander\SlackCommander\SlackCommander.Web\Whois\FullContactLookup.cs,Consume,The following statement contains a magic number: try              {                  var fullContactApi = RestService.For<IFullContactApi>(_fullContactApiBaseUrl);                  fullContactApi.LookupByTwitterHandle(                      message.TwitterHandle'                      _fullContactWebhookUrl'                      message.WebhookId'                      _fullContactApiKey).Wait(TimeSpan.FromSeconds(20));              }              catch (Exception ex)              {                  Log.Error("FullContact Twitter lookup failed."' ex);              }
