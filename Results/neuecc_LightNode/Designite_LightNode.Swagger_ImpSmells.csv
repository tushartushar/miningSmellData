Implementation smell,Namespace,Class,File,Method,Description
Long Method,LightNode.Swagger,LightNodeSwaggerMiddleware,C:\research\architectureSmells\repos\neuecc_LightNode\Source\LightNode.Swagger\LightNodeSwaggerMiddleware.cs,BuildSwaggerJson,The method has 116 lines of code.
Complex Method,LightNode.Swagger,LightNodeSwaggerMiddleware,C:\research\architectureSmells\repos\neuecc_LightNode\Source\LightNode.Swagger\LightNodeSwaggerMiddleware.cs,GetMediaType,Cyclomatic complexity of the method is 13
Magic Number,LightNode.Swagger,LightNodeSwaggerMiddleware,C:\research\architectureSmells\repos\neuecc_LightNode\Source\LightNode.Swagger\LightNodeSwaggerMiddleware.cs,Invoke,The following statement contains a magic number: environment[OwinConstants.ResponseStatusCode] = 200;
Magic Number,LightNode.Swagger,LightNodeSwaggerMiddleware,C:\research\architectureSmells\repos\neuecc_LightNode\Source\LightNode.Swagger\LightNodeSwaggerMiddleware.cs,Invoke,The following statement contains a magic number: environment[OwinConstants.ResponseStatusCode] = 200;
Magic Number,LightNode.Swagger,LightNodeSwaggerMiddleware,C:\research\architectureSmells\repos\neuecc_LightNode\Source\LightNode.Swagger\LightNodeSwaggerMiddleware.cs,BuildXmlCommentStructure,The following statement contains a magic number: var xDocLookup = xDoc.Descendants("member")                 .Where(x => x.Attribute("name").Value.StartsWith("M:"))                 .Select(x =>                 {                     var match = Regex.Match(x.Attribute("name").Value' @"(\w+)\.(\w+)?(\(.+\)|$)");                      var summary = ((string)x.Element("summary")) ?? "";                     var returns = ((string)x.Element("returns")) ?? "";                     var remarks = ((string)x.Element("remarks")) ?? "";                     var parameters = x.Elements("param")                         .Select(e => Tuple.Create(e.Attribute("name").Value' e))                         .Distinct(new Item1EqualityCompaerer<string' XElement>())                         .ToDictionary(e => e.Item1' e => e.Item2.Value);                      return new XmlCommentStructure                     {                         ClassName = match.Groups[1].Value'                         MethodName = match.Groups[2].Value'                         Summary = summary'                         Remarks = remarks'                         Parameters = parameters'                         Returns = returns                     };                 })                 .ToLookup(x => Tuple.Create(x.ClassName' x.MethodName));
